{"version":3,"file":"src_app_savings_savings_module_ts.js","mappings":"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","names":["CalculateInterestDialogComponent","v","dialogRef","this","i0","selectors","PostInterestDialogComponent","ToggleWithholdTaxDialogComponent","data","MAT_DIALOG_DATA","SavingsButtonsConfiguration","status","substatus","setOptions","setButtons","buttonsArray","optionArray","a","block","name","icon","taskPermissionName","blockCredit","push","blockDebit","concat","option","t","ctx_r17","ctx_r25","SavingsAccountViewComponent","route","router","savingsService","dialog","subscribe","c","savingsAccountData","savingsDatatables","url","includes","entityType","setConditionalButtons","value","isActive","buttonConfig","subStatus","clientId","addOption","fieldOfficerId","charges","forEach","charge","taxGroup","withHoldTax","refreshUrl","slice","indexOf","navigateByUrl","skipLocationChange","then","navigate","relativeTo","deleteSavingsAccount","calculateInterest","postInterest","enableWithHoldTax","disableWithHoldTax","queryParams","savingsId","id","accountType","unblockSavingsAccount","open","DeleteDialogComponent","deleteContext","afterClosed","response","delete","confirm","executeSavingsAccountCommand","reload","isEnable","executeSavingsAccountUpdateCommand","ConfirmationDialogComponent","heading","dialogContext","i","ctx_r24","ctx_r27","TransactionsTabComponent","parent","o","transactionsData","transactions","_a","filter","transaction","reversed","dataSource","MatTableDataSource","accountWithTransactions","length","paginator","sort","transactionType","withdrawal","feeDeduction","overdraftInterest","withholdTax","transfer","$event","stopPropagation","MatPaginator","MatSort","ApproveSavingsAccountComponent","formBuilder","dateUtils","settingsService","Date","accountId","snapshot","params","savingAccountId","maxDate","businessDate","createApproveSavingsAccountForm","approveSavingsAccountForm","group","approvedOnDate","Validators","note","approveSavingsAccountFormData","locale","language","code","dateFormat","formatDate","Object","ctx","_r0","RejectSavingsAccountComponent","createRejectSavingsAccountForm","rejectSavingsAccountForm","rejectedOnDate","rejectSavingsAccountFormData","ActivateSavingsAccountComponent","createActivateSavingsAccountForm","activateSavingsAccountForm","activatedOnDate","activateSavingsAccountFormData","UndoApprovalSavingsAccountComponent","createUndoApprovalSavingsAccountForm","undoApprovalSavingsAccountForm","PostInterestAsOnSavingsAccountComponent","createPostInterestSavingsAccountForm","postInterestSavingsAccountForm","transactionDate","postInterestSavingsAccountFormData","IsPostInterestAsOn","executeSavingsAccountTransactionsCommand","SavingsAccountAssignStaffComponent","m","savingsAccountActionData","fieldOfficerData","fieldOfficerOptions","createSavingsAssignStaffForm","savingsAssignStaffForm","toSavingsOfficerId","assignmentDate","savingsAssignStaffFormData","fromSavingsOfficerId","_r1","SavingsAccountUnassignStaffComponent","createSavingsUnassignStaffForm","savingsUnassignStaffForm","unassignedDate","savingsUnassignStaffFormData","WithdrawByClientSavingsAccountComponent","createWithdrawSavingsAccountForm","withdrawSavingsAccountForm","withdrawnOnDate","withdrawSavingsAccountFormData","_r12","_r16","AddChargeSavingsAccountComponent","savingsChargeOptions","chargeOptions","createSavingsChargeForm","buildDependencies","savingsChargeForm","controls","chargeId","valueChanges","getChargeTemplate","chargeDetails","chargeTimeType","dueDateNotRequired","chargeTimeTypeAnnualOrMonth","removeControl","addControl","FormControl","feeInterval","patchValue","amount","chargeCalculationType","disabled","savingsCharge","monthDayFormat","feeOnMonthDay","dueDate","createSavingsCharge","SavingsAccountTransactionsComponent","deposit","paymentTypeOptions","transactionCommand","toLowerCase","createSavingAccountTransactionForm","savingAccountTransactionForm","transactionAmount","paymentTypeId","addPaymentDetailsFlag","savingAccountTransactionFormData","_r2","ctx_r12","CloseSavingsAccountComponent","summary","accountBalance","createCloseSavingsAccountForm","closeSavingsAccountForm","closedOnDate","withdrawBalance","postInterestValidationOnClosure","get","closeSavingsAccountFormData","ApplyAnnualFeesSavingsAccountComponent","createApplyAnnualFeesForm","applyCharge","applyAnnualFeesForm","applyAnnualFeesFormData","executeSavingsAccountChargesCommand","_r7","ManageSavingsAccountComponent","systemService","holdamount","blockaccount","replaceAll","createManageSavingsAccountForm","getCodeValues","codeName","getCodes","codes","some","codeValues","reasonOptions","manageSavingsAccountForm","reasonForBlock","payload","manageSavingsAccountFormData","SavingAccountActionsComponent","Approve","Reject","Withdrawal","Deposit","Activate","Close","currencyCode","currency","actions","WaiveChargeDialogComponent","InactivateChargeDialogComponent","ctx_r26","ctx_r43","ctx_r46","ctx_r52","ctx_r55","ctx_r59","ChargesTabComponent","chargesData","activeCharges","showInactiveCharges","inActiveCharges","chargesTableRef","renderRows","formfields","InputBase","controlName","label","type","required","DatepickerBase","title","layout","addButtonText","FormDialogComponent","dataObject","amountOrPercentage","editSavingsAccountCharge","deleteSavingsAccountCharge","ctx_r29","StandingInstructionsTabComponent","accountTransfersService","r","savingsData","getStandingInstructions","clientName","instructionsData","pageItems","instructionTableRef","instructionId","deleteStandingInstrucions","DatatableTabsComponent","entityId","paramMap","entityDatatable","savingsDatatable","multiRowDatatableFlag","columnHeaders","columnName","_r5","SavingsAccountDetailsStepComponent","EventEmitter","createSavingsAccountDetailsForm","savingsAccountTemplate","productData","productOptions","savingsAccountDetailsForm","savingsProductId","productId","submittedOnDate","timeline","externalId","groupId","getSavingsAccountTemplate","savingsAccountProductTemplate","emit","savingsProductSelected","isFieldOfficerPatched","getRawValue","SavingsAccountTermsStepComponent","createSavingsAccountTermsForm","savingsAccountTermsForm","decimal","decimalPlaces","minBalanceForInterestCalculation","nominalAnnualInterestRate","interestCompoundingPeriodType","interestPostingPeriodType","interestCalculationType","interestCalculationDaysInYearType","minRequiredOpeningBalance","allowOverdraft","overdraftLimit","enforceMinRequiredBalance","minOverdraftForInterestCalculation","nominalAnnualInterestRateOverdraft","minRequiredBalance","withdrawalFeeForTransfers","lockinPeriodFrequency","lockinPeriodFrequencyType","lockinPeriodFrequencyTypeData","lockinPeriodFrequencyTypeOptions","interestCompoundingPeriodTypeData","interestCompoundingPeriodTypeOptions","interestPostingPeriodTypeData","interestPostingPeriodTypeOptions","interestCalculationTypeData","interestCalculationTypeOptions","interestCalculationDaysInYearTypeData","interestCalculationDaysInYearTypeOptions","ctx_r34","ctx_r39","ctx_r54","ctx_r58","SavingsAccountChargesStepComponent","isChargesPatched","chargesDataSource","map","activeClientMembers","chargeData","pristine","newCharge","splice","date","selectedMembers","item","selected","selectAllItems","len","SavingsAccountPreviewStepComponent","ctx_r11","CreateSavingsAccountComponent","savingsAccountDetailsStep","savingsAccountTermsStep","valid","savingsAccountDetails","savingsAccountTerms","savingsAccountChargesStep","savingsAccountCharges","savingsAccount","createSavingsAccount","resourceId","EditSavingsAccountComponent","savingsAccountAndTemplate","updateSavingsAccount","UndoTransactionDialogComponent","ReleaseAmountDialogComponent","ctx_r7","ctx_r9","ViewTransactionComponent","transactionData","savingsAccountTransaction","ctx_r5","ctx_r10","ctx_r14","ctx_r16","ViewChargeComponent","savingsAccountCharge","replace","ViewRecieptComponent","sanitizer","transactionRecieptData","savingsTransactionReciept","contentType","headers","file","Blob","body","filecontent","URL","createObjectURL","pentahoUrl","bypassSecurityTrustResourceUrl","ExportTransactionsComponent","reportsService","savingsAccountId","accountNo","createTransactionsReportForm","transactionsReportForm","fromDate","toDate","R_startDate","R_endDate","R_savingsAccountId","getPentahoRunReportData","res","hideOutput","EditTransactionComponent","transactionTemplateData","savingsAccountTransactionTemplate","createEditTransactionForm","editTransactionForm","showPaymentDetails","editTransactionFormData","CreateGsimAccountComponent","groupsData","selectedClientMembers","client","isGSIM","isParentAccount","requestData","memberSelected","index","setData","buildRequestData","createGsimAcccount","clientArray","ctx_r22","ctx_r28","ctx_r31","GsimAccountComponent","gsimOverviewData","gsimData","childGSIMAccounts","savingAccountData","setLoanClientChargeOverview","SavingsAccountTemplateResolver","isGroup","undefined","factory","SavingsAccountAndTemplateResolver","getSavingsAccountAndTemplate","SavingsAccountTransactionResolver","transactionId","getSavingsAccountTransaction","SavingsAccountChargeResolver","getSavingsAccountCharge","SavingsAccountActionsResolver","actionName","getSavingsChargeTemplateResource","getSavingsTransactionTemplateResource","forkJoin","getSavingsAccountData","SavingsTransactionRecieptResolver","R_transactionId","SavingsAccountTransactionTemplateResolver","getSavingsAccountTransactionTemplate","GSIMViewResolver","getGSIMAccountData","SavingsDocumentsTabComponent","setSavingsDocumentsData","savingsDocuments","ele","docUrl","serverUrl","parentEntityId","environment","fileName","fileIsImage","entityDocuments","documentId","downloadSavingsDocument","window","formData","loadSavingsDocument","deleteSavingsDocument","NotesTabComponent","authenticationService","savedCredentials","getCredentials","username","s","entityNotes","savingAccountNotes","noteContent","createSavingsNote","createdByUsername","createdOn","noteId","editSavingsNote","deleteSavingsNote","SavingNotesResolver","getSavingsNotes","SavingDocumentsResolver","getSavingsDocuments","routes","path","extract","breadcrumb","routeParamBreadcrumb","children","component","resolve","SavingsAccountViewResolver","SavingsDatatablesResolver","redirectTo","pathMatch","SavingsDatatableResolver","loadChildren","_","AccountTransfersModule","GroupViewResolver","GroupAccountsResolver","SavingsRoutingModule","GSIMAccountsResolver","imports","RouterModule","SavingsModule","SharedModule","PipesModule","DirectivesModule"],"sourceRoot":"webpack:///","sources":["./src/app/savings/savings-account-view/custom-dialogs/calculate-interest-dialog/calculate-interest-dialog.component.ts","./src/app/savings/savings-account-view/custom-dialogs/calculate-interest-dialog/calculate-interest-dialog.component.html","./src/app/savings/savings-account-view/custom-dialogs/post-interest-dialog/post-interest-dialog.component.ts","./src/app/savings/savings-account-view/custom-dialogs/post-interest-dialog/post-interest-dialog.component.html","./src/app/savings/savings-account-view/custom-dialogs/toggle-withhold-tax-dialog/toggle-withhold-tax-dialog.component.ts","./src/app/savings/savings-account-view/custom-dialogs/toggle-withhold-tax-dialog/toggle-withhold-tax-dialog.component.html","./src/app/savings/savings-account-view/savings-buttons.config.ts","./src/app/savings/savings-account-view/savings-account-view.component.html","./src/app/savings/savings-account-view/savings-account-view.component.ts","./src/app/savings/savings-account-view/transactions-tab/transactions-tab.component.html","./src/app/savings/savings-account-view/transactions-tab/transactions-tab.component.ts","./src/app/savings/saving-account-actions/approve-savings-account/approve-savings-account.component.html","./src/app/savings/saving-account-actions/approve-savings-account/approve-savings-account.component.ts","./src/app/savings/saving-account-actions/reject-savings-account/reject-savings-account.component.html","./src/app/savings/saving-account-actions/reject-savings-account/reject-savings-account.component.ts","./src/app/savings/saving-account-actions/activate-savings-account/activate-savings-account.component.html","./src/app/savings/saving-account-actions/activate-savings-account/activate-savings-account.component.ts","./src/app/savings/saving-account-actions/undo-approval-savings-account/undo-approval-savings-account.component.ts","./src/app/savings/saving-account-actions/undo-approval-savings-account/undo-approval-savings-account.component.html","./src/app/savings/saving-account-actions/post-interest-as-on-savings-account/post-interest-as-on-savings-account.component.html","./src/app/savings/saving-account-actions/post-interest-as-on-savings-account/post-interest-as-on-savings-account.component.ts","./src/app/savings/saving-account-actions/savings-account-assign-staff/savings-account-assign-staff.component.html","./src/app/savings/saving-account-actions/savings-account-assign-staff/savings-account-assign-staff.component.ts","./src/app/savings/saving-account-actions/savings-account-unassign-staff/savings-account-unassign-staff.component.html","./src/app/savings/saving-account-actions/savings-account-unassign-staff/savings-account-unassign-staff.component.ts","./src/app/savings/saving-account-actions/withdraw-by-client-savings-account/withdraw-by-client-savings-account.component.html","./src/app/savings/saving-account-actions/withdraw-by-client-savings-account/withdraw-by-client-savings-account.component.ts","./src/app/savings/saving-account-actions/add-charge-savings-account/add-charge-savings-account.component.html","./src/app/savings/saving-account-actions/add-charge-savings-account/add-charge-savings-account.component.ts","./src/app/savings/saving-account-actions/savings-account-transactions/savings-account-transactions.component.html","./src/app/savings/saving-account-actions/savings-account-transactions/savings-account-transactions.component.ts","./src/app/savings/saving-account-actions/close-savings-account/close-savings-account.component.html","./src/app/savings/saving-account-actions/close-savings-account/close-savings-account.component.ts","./src/app/savings/saving-account-actions/apply-annual-fees-savings-account/apply-annual-fees-savings-account.component.html","./src/app/savings/saving-account-actions/apply-annual-fees-savings-account/apply-annual-fees-savings-account.component.ts","./src/app/savings/saving-account-actions/manage-savings-account/manage-savings-account.component.html","./src/app/savings/saving-account-actions/manage-savings-account/manage-savings-account.component.ts","./src/app/savings/saving-account-actions/saving-account-actions.component.html","./src/app/savings/saving-account-actions/saving-account-actions.component.ts","./src/app/savings/savings-account-view/custom-dialogs/waive-charge-dialog/waive-charge-dialog.component.ts","./src/app/savings/savings-account-view/custom-dialogs/waive-charge-dialog/waive-charge-dialog.component.html","./src/app/savings/savings-account-view/custom-dialogs/inactivate-charge-dialog/inactivate-charge-dialog.component.ts","./src/app/savings/savings-account-view/custom-dialogs/inactivate-charge-dialog/inactivate-charge-dialog.component.html","./src/app/savings/savings-account-view/charges-tab/charges-tab.component.html","./src/app/savings/savings-account-view/charges-tab/charges-tab.component.ts","./src/app/savings/savings-account-view/standing-instructions-tab/standing-instructions-tab.component.html","./src/app/savings/savings-account-view/standing-instructions-tab/standing-instructions-tab.component.ts","./src/app/savings/savings-account-view/datatable-tabs/datatable-tabs.component.ts","./src/app/savings/savings-account-view/datatable-tabs/datatable-tabs.component.html","./src/app/savings/savings-account-stepper/savings-account-details-step/savings-account-details-step.component.html","./src/app/savings/savings-account-stepper/savings-account-details-step/savings-account-details-step.component.ts","./src/app/savings/savings-account-stepper/savings-account-terms-step/savings-account-terms-step.component.html","./src/app/savings/savings-account-stepper/savings-account-terms-step/savings-account-terms-step.component.ts","./src/app/savings/savings-account-stepper/savings-account-charges-step/savings-account-charges-step.component.html","./src/app/savings/savings-account-stepper/savings-account-charges-step/savings-account-charges-step.component.ts","./src/app/savings/savings-account-stepper/savings-account-preview-step/savings-account-preview-step.component.html","./src/app/savings/savings-account-stepper/savings-account-preview-step/savings-account-preview-step.component.ts","./src/app/savings/create-savings-account/create-savings-account.component.html","./src/app/savings/create-savings-account/create-savings-account.component.ts","./src/app/savings/edit-savings-account/edit-savings-account.component.html","./src/app/savings/edit-savings-account/edit-savings-account.component.ts","./src/app/savings/savings-account-view/custom-dialogs/undo-transaction-dialog/undo-transaction-dialog.component.ts","./src/app/savings/savings-account-view/custom-dialogs/undo-transaction-dialog/undo-transaction-dialog.component.html","./src/app/savings/savings-account-view/custom-dialogs/release-amount-dialog/release-amount-dialog.component.ts","./src/app/savings/savings-account-view/custom-dialogs/release-amount-dialog/release-amount-dialog.component.html","./src/app/savings/savings-account-view/transactions/view-transaction/view-transaction.component.html","./src/app/savings/savings-account-view/transactions/view-transaction/view-transaction.component.ts","./src/app/savings/savings-account-view/view-charge/view-charge.component.html","./src/app/savings/savings-account-view/view-charge/view-charge.component.ts","./src/app/savings/savings-account-view/transactions/view-reciept/view-reciept.component.ts","./src/app/savings/savings-account-view/transactions/view-reciept/view-reciept.component.html","./src/app/savings/savings-account-view/transactions-tab/export-transactions/export-transactions.component.html","./src/app/savings/savings-account-view/transactions-tab/export-transactions/export-transactions.component.ts","./src/app/savings/savings-account-view/transactions/edit-transaction/edit-transaction.component.html","./src/app/savings/savings-account-view/transactions/edit-transaction/edit-transaction.component.ts","./src/app/savings/gsim-account/create-gsim-account/create-gsim-account.component.html","./src/app/savings/gsim-account/create-gsim-account/create-gsim-account.component.ts","./src/app/savings/gsim-account/gsim-account.component.html","./src/app/savings/gsim-account/gsim-account.component.ts","./src/app/savings/common-resolvers/savings-account-template.resolver.ts","./src/app/savings/common-resolvers/savings-account-and-template.resolver.ts","./src/app/savings/common-resolvers/savings-account-transaction.resolver.ts","./src/app/savings/common-resolvers/savings-account-charge.resolver.ts","./src/app/savings/common-resolvers/savings-account-actions.resolver.ts","./src/app/savings/common-resolvers/savings-transaction-reciept.resolver.ts","./src/app/savings/common-resolvers/savings-account-transaction-template.resolver.ts","./src/app/savings/gsim-account/gsim-account.resolver.ts","./src/app/savings/savings-account-view/savings-documents-tab/savings-documents-tab.component.ts","./src/app/savings/savings-account-view/savings-documents-tab/savings-documents-tab.component.html","./src/app/savings/savings-account-view/notes-tab/notes-tab.component.ts","./src/app/savings/savings-account-view/notes-tab/notes-tab.component.html","./src/app/savings/common-resolvers/saving-notes.resolver.ts","./src/app/savings/common-resolvers/saving-documents.resolver.ts","./src/app/savings/savings-routing.module.ts","./src/app/savings/savings.module.ts"],"sourcesContent":["/** Angular Imports */\nimport { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n/**\n * Calculate interest dialog component.\n */\n@Component({\n  selector: 'mifosx-calculate-interest-dialog',\n  templateUrl: './calculate-interest-dialog.component.html',\n  styleUrls: ['./calculate-interest-dialog.component.scss']\n})\nexport class CalculateInterestDialogComponent {\n\n  /**\n   * @param {MatDialogRef} dialogRef Component reference to dialog.\n   */\n  constructor(public dialogRef: MatDialogRef<CalculateInterestDialogComponent>) { }\n\n}\n","<h1 mat-dialog-title>Calculate Interest</h1>\n<div mat-dialog-content>\n  <p>Are you sure you want to calculate interest ?</p>\n</div>\n<mat-dialog-actions align=\"end\">\n  <button mat-raised-button mat-dialog-close>Cancel</button>\n  <button mat-raised-button color=\"primary\" [mat-dialog-close]=\"{ confirm: true }\">Confirm</button>\n</mat-dialog-actions>\n","/** Angular Imports */\nimport { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n/**\n * Post interest dialog component.\n */\n@Component({\n  selector: 'mifosx-post-interest-dialog',\n  templateUrl: './post-interest-dialog.component.html',\n  styleUrls: ['./post-interest-dialog.component.scss']\n})\nexport class PostInterestDialogComponent {\n\n  /**\n   * @param {MatDialogRef} dialogRef Component reference to dialog.\n   */\n  constructor(public dialogRef: MatDialogRef<PostInterestDialogComponent>) { }\n\n}\n","<h1 mat-dialog-title>Post Interest</h1>\n<div mat-dialog-content>\n  <p>Are you sure you want to post interest ?</p>\n</div>\n<mat-dialog-actions align=\"end\">\n  <button mat-raised-button mat-dialog-close>Cancel</button>\n  <button mat-raised-button color=\"primary\" [mat-dialog-close]=\"{ confirm: true }\">Confirm</button>\n</mat-dialog-actions>\n","/** Angular Imports */\nimport { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n/**\n * Toggle withhold tax dialog dialog component.\n */\n@Component({\n  selector: 'mifosx-toggle-withhold-tax-dialog',\n  templateUrl: './toggle-withhold-tax-dialog.component.html',\n  styleUrls: ['./toggle-withhold-tax-dialog.component.scss']\n})\nexport class ToggleWithholdTaxDialogComponent {\n\n  /**\n   * @param {MatDialogRef} dialogRef Component reference to dialog.\n   * @param {any} data.\n   */\n  constructor(public dialogRef: MatDialogRef<ToggleWithholdTaxDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any) { }\n\n}\n","<h1 mat-dialog-title>{{ data.isEnable ? 'Enable' : 'Disable' }} Withhold Tax</h1>\n<div mat-dialog-content>\n  <p>Are you sure you want to {{ data.isEnable ? 'enable' : 'disable' }} withhold tax for this account ?</p>\n</div>\n<mat-dialog-actions align=\"end\">\n  <button mat-raised-button mat-dialog-close>Cancel</button>\n  <button mat-raised-button color=\"{{ data.isEnable ? 'accent' : 'warn' }}\" [mat-dialog-close]=\"{ confirm: true }\">Confirm</button>\n</mat-dialog-actions>\n","/** Savings Account Buttons Configuration */\nexport class SavingsButtonsConfiguration {\n\n  optionArray: {\n    name: string,\n    taskPermissionName: string,\n  }[];\n\n  buttonsArray: {\n    name: string,\n    icon: string,\n    taskPermissionName: string,\n  }[];\n\n  constructor(status: string, substatus: any) {\n    this.setOptions(status);\n    this.setButtons(status, substatus);\n  }\n\n  get singleButtons() {\n    return this.buttonsArray;\n  }\n\n  get options() {\n    return this.optionArray;\n  }\n\n  setButtons(status: string, substatus: any) {\n    switch (status) {\n      case 'Active':\n        this.buttonsArray = [];\n        if (!substatus.block) {\n          if (!substatus.blockCredit) {\n            this.buttonsArray.push(\n              {\n                name: 'Deposit',\n                icon: 'arrow-up',\n                taskPermissionName: 'DEPOSIT_SAVINGSACCOUNT'\n              }\n            );\n          }\n          if (!substatus.blockDebit) {\n            this.buttonsArray.push(\n              {\n                name: 'Withdrawal',\n                icon: 'arrow-down',\n                taskPermissionName: 'WITHDRAWAL_SAVINGSACCOUNT'\n              }\n            );\n          }\n          this.buttonsArray = this.buttonsArray.concat([\n            {\n              name: 'Block Account',\n              icon: 'lock',\n              taskPermissionName: 'BLOCK_SAVINGSACCOUNT'\n            },\n            {\n              name: 'Hold Amount',\n              icon: 'lock',\n              taskPermissionName: 'HOLDAMOUNT_SAVINGSACCOUNT'\n            },\n            {\n              name: 'Calculate Interest',\n              icon: 'table',\n              taskPermissionName: 'CALCULATEINTEREST_SAVINGSACCOUNT'\n            },\n            {\n              name: 'Post Interest As On',\n              icon: 'arrow-right',\n              taskPermissionName: 'POSTINTEREST_SAVINGSACCOUNT',\n            },\n          ]);\n        } else {\n          this.buttonsArray = [\n          {\n            name: 'Unblock Account',\n            icon: 'lock-open',\n            taskPermissionName: 'UNBLOCK_SAVINGSACCOUNT'\n          }\n          ];\n        }\n        break;\n      case 'Submitted and pending approval':\n        this.buttonsArray = [\n          {\n            name: 'Modify Application',\n            icon: 'pen',\n            taskPermissionName: 'UPDATE_SAVINGSACCOUNT'\n          },\n          {\n            name: 'Approve',\n            icon: 'check',\n            taskPermissionName: 'APPROVE_SAVINGSACCOUNT'\n          }\n        ];\n        break;\n      case 'Approved':\n        this.buttonsArray = [\n          {\n            name: 'Undo Approval',\n            icon: 'undo',\n            taskPermissionName: 'APPROVALUNDO_SAVINGSACCOUNT'\n          },\n          {\n            name: 'Activate',\n            icon: 'check',\n            taskPermissionName: 'ACTIVATE_SAVINGSACCOUNT'\n          },\n          {\n            name: 'Add Charge',\n            icon: 'plus',\n            taskPermissionName: 'CREATE_SAVINGSACCOUNTCHARGE'\n          }\n        ];\n      break;\n      default:\n        this.buttonsArray = [];\n    }\n  }\n\n  setOptions(status: string) {\n    switch (status) {\n      case 'Active':\n        this.optionArray = [\n          {\n            name: 'Post Interest',\n            taskPermissionName: 'POSTINTEREST_SAVINGSACCOUNT'\n          },\n          {\n            name: 'Add Charge',\n            taskPermissionName: 'CREATE_SAVINGSACCOUNTCHARGE'\n          },\n          {\n            name: 'Close',\n            taskPermissionName: 'CLOSE_SAVINGSACCOUNT'\n          }\n        ];\n        break;\n      case 'Submitted and pending approval':\n        this.optionArray = [\n          {\n            name: 'Reject',\n            taskPermissionName: 'REJECT_SAVINGSACCOUNT'\n          },\n          {\n            name: 'Withdraw By Client',\n            taskPermissionName: 'WITHDRAW_SAVINGSACCOUNT'\n          },\n          {\n            name: 'Add Charge',\n            taskPermissionName: 'CREATE_SAVINGSACCOUNTCHARGE'\n          },\n          {\n            name: 'Delete',\n            taskPermissionName: 'DELETE_SAVINGSACCOUNT'\n          }\n        ];\n        break;\n      case 'Approved':\n      default:\n        this.optionArray = [];\n    }\n  }\n\n  addOption(option: {name: string, taskPermissionName: string}) {\n    this.optionArray.push(option);\n  }\n\n}\n","<mat-card class=\"savings-account-card\">\n\n  <mat-card-header fxLayout=\"column\" class=\"header\">\n\n    <mat-card-title-group class=\"header-title-group\">\n\n      <div class=\"profile-image-container\">\n        <div>\n          <img mat-card-md-image class=\"profile-image\" matTooltip=\"Savings Account\"\n            [src]=\"'assets/images/savings_account_placeholder.png'\">\n        </div>\n      </div>\n\n      <div class=\"mat-typography account-card-title\">\n        <mat-card-title fxLayout=\"row\" fxLayout.lt-md=\"column\">\n          <h3 fxFlex=\"95%\">\n            <i class=\"fa fa-stop\" [ngClass]=\"savingsAccountData.status.code | statusLookup\"\n              [matTooltip]=\"savingsAccountData.status.value\" *ngIf=\"!savingsAccountData.subStatus.block\"></i>\n            <i class=\"fa fa-stop\" [ngClass]=\"savingsAccountData.subStatus.value | statusLookup\"\n              [matTooltip]=\"savingsAccountData.subStatus.value\" *ngIf=\"savingsAccountData.subStatus.block\"></i>\n            Savings Product : {{savingsAccountData.savingsProductName}}<span class=\"m-l-10\">({{savingsAccountData.accountNo}})</span>\n          </h3>\n          <div fxFlex=\"5%\">\n            <button mat-icon-button [matMenuTriggerFor]=\"accountMenu\" aria-label=\"Loan account actions\"\n              yPosition=\"below\">\n              <mat-icon matListIcon class=\"actions-menu\">\n                <fa-icon icon=\"bars\" size=\"sm\"></fa-icon>\n              </mat-icon>\n            </button>\n          </div>\n        </mat-card-title>\n        <mat-card-subtitle>\n          <p>\n            {{entityType}} Name: {{savingsAccountData.clientName || savingsAccountData.groupName}}\n            <span class=\"m-l-10\" *ngIf=\"savingsAccountData.clientAccountNo\">({{savingsAccountData.clientAccountNo}})</span><br />\n            <span *ngIf=\"!savingsAccountData.status.rejected && !savingsAccountData.status.submittedAndPendingApproval\">\n              Current Balances  :\n              {{savingsAccountData.currency.displaySymbol}}<span class=\"m-l-10\">{{savingsAccountData.summary.accountBalance |\n              number}}</span><br />\n              Available Balance :\n              {{savingsAccountData.currency.displaySymbol}}<span class=\"m-l-10\">{{savingsAccountData.summary.availableBalance |\n              number}}</span>\n            </span>\n          </p>\n        </mat-card-subtitle>\n      </div>\n\n      <mat-menu #accountMenu=\"matMenu\">\n        <ng-container *ngFor=\"let item of buttonConfig.singleButtons\">\n          <button mat-menu-item *mifosxHasPermission=\"item.taskPermissionName\" (click)=\"doAction(item.name)\">\n            <mat-icon matListIcon>\n              <fa-icon icon=\"{{item.icon}}\" size=\"sm\"></fa-icon>\n            </mat-icon>\n            <span> {{item.name}} </span>\n          </button>\n        </ng-container>\n\n        <ng-container *ngIf=\"buttonConfig.options && !savingsAccountData.subStatus.block\">\n          <button mat-menu-item [matMenuTriggerFor]=\"More\">More</button>\n          <mat-menu #More=\"matMenu\">\n            <span *ngFor=\"let option of buttonConfig.options\">\n              <button mat-menu-item *mifosxHasPermission=\"option.taskPermissionName\"\n                (click)=\"doAction(option.name)\">{{option.name}}</button>\n            </span>\n          </mat-menu>\n        </ng-container>\n      </mat-menu>\n\n    </mat-card-title-group>\n\n  </mat-card-header>\n\n  <mat-card-content class=\"content\">\n\n    <div class=\"savings-account-tables\" fxLayout=\"row\" fxLayoutGap=\"2%\">\n\n      <div fxFlex=\"49%\"\n        *ngIf=\"isActive; else alternateSummary\">\n        <h4 class=\"table-headers\">Account Summary</h4>\n        <table>\n          <tbody>\n            <tr *ngIf=\"savingsAccountData.summary.totalWithdrawals\">\n              <td>Total Withdrawls</td>\n              <td>{{savingsAccountData.currency.displaySymbol}}&nbsp;{{savingsAccountData.summary.totalWithdrawals |\n                number}}</td>\n            </tr>\n            <tr *ngIf=\"savingsAccountData.summary.totalWithdrawalFees\">\n              <td>Withdrawals Fees</td>\n              <td>{{savingsAccountData.currency.displaySymbol}}&nbsp;{{savingsAccountData.summary.totalWithdrawalFees |\n                number}}</td>\n            </tr>\n            <tr *ngIf=\"savingsAccountData.summary.totalAnnualFees\">\n              <td>Annual Fees</td>\n              <td>{{savingsAccountData.currency.displaySymbol}}&nbsp;{{savingsAccountData.summary.totalAnnualFees |\n                number}}</td>\n            </tr>\n            <tr *ngIf=\"savingsAccountData.summary.totalInterestEarned >= 0\">\n              <td>Interest Earned</td>\n              <td>{{savingsAccountData.currency.displaySymbol}}&nbsp;{{savingsAccountData.summary.totalInterestEarned |\n                number}}</td>\n            </tr>\n            <tr *ngIf=\"savingsAccountData.summary.totalInterestPosted\">\n              <td>Interest Posted</td>\n              <td>{{savingsAccountData.currency.displaySymbol}}&nbsp;{{savingsAccountData.summary.totalInterestPosted |\n                number}}</td>\n            </tr>\n            <tr *ngIf=\"savingsAccountData.summary.interestNotPosted >= 0\">\n              <td>Interest Earned Not Posted</td>\n              <td>{{savingsAccountData.currency.displaySymbol}}&nbsp;{{savingsAccountData.summary.interestNotPosted |\n                number}}</td>\n            </tr>\n            <tr *ngIf=\"savingsAccountData.summary.totalOverdraftInterestDerived\">\n              <td>Interest On Overdraft</td>\n              <td>\n                {{savingsAccountData.currency.displaySymbol}}&nbsp;{{savingsAccountData.summary.totalOverdraftInterestDerived\n                | formatNumber}}</td>\n            </tr>\n            <tr *ngIf=\"savingsAccountData.summary.interestNotPosted < 0\">\n              <td>Overdraft Interest Not Posted</td>\n              <td>{{savingsAccountData.currency.displaySymbol}}&nbsp;{{savingsAccountData.summary.interestNotPosted |\n                number}}</td>\n            </tr>\n            <tr>\n              <td>Nominal Interest Rate</td>\n              <td>{{savingsAccountData.nominalAnnualInterestRate | formatNumber}} %</td>\n            </tr>\n            <tr>\n              <td>Interest Compounding Period</td>\n              <td>{{savingsAccountData.interestCompoundingPeriodType.value}}</td>\n            </tr>\n            <tr>\n              <td>Interest Posting Period</td>\n              <td>{{savingsAccountData.interestPostingPeriodType.value}}</td>\n            </tr>\n            <tr>\n              <td>Interest Calculated Using</td>\n              <td>{{savingsAccountData.interestCalculationType.value}}</td>\n            </tr>\n            <tr>\n              <td># Days in Year</td>\n              <td>{{savingsAccountData.interestCalculationDaysInYearType.value}}</td>\n            </tr>\n            <tr *ngIf=\"savingsAccountData.withdrawalFee\">\n              <td>Withdrawal Fee</td>\n              <td>{{savingsAccountData.currency.displaySymbol}}&nbsp;{{savingsAccountData.withdrawalFee.amount |\n                number}}</td>\n            </tr>\n            <tr *ngIf=\"savingsAccountData.lastActiveTransactionDate\">\n              <td>Last Active Transaction Date</td>\n              <td>{{savingsAccountData.lastActiveTransactionDate | dateFormat}}</td>\n            </tr>\n            <tr *ngIf=\"!(savingsAccountData.subStatus.id === 0)\">\n              <td>Substatus</td>\n              <td>{{savingsAccountData.subStatus.value}}</td>\n            </tr>\n            <tr *ngIf=\"savingsAccountData.daysToInactive\">\n              <td>Days to Inactive</td>\n              <td>{{savingsAccountData.daysToInactive}}</td>\n            </tr>\n            <tr *ngIf=\"savingsAccountData.daysToDormancy\">\n              <td>Days to Dormancy</td>\n              <td>{{savingsAccountData.daysToDormancy}}</td>\n            </tr>\n            <tr *ngIf=\"savingsAccountData.daysToEscheat\">\n              <td>Days to Escheat</td>\n              <td>{{savingsAccountData.daysToEscheat}}</td>\n            </tr>\n            <tr *ngIf=\"savingsAccountData.annualFee\">\n              <td>Annual Fee</td>\n              <td>{{savingsAccountData.currency.displaySymbol}}&nbsp;{{savingsAccountData.annualFee.amount | formatNumber}}\n              </td>\n            </tr>\n            <tr *ngIf=\"savingsAccountData.allowOverdraft\">\n              <td>Over Draft Limit</td>\n              <td>{{savingsAccountData.overdraftLimit | formatNumber}}</td>\n            </tr>\n            <tr *ngIf=\"savingsAccountData.allowOverdraft\">\n              <td>Min Overdraft Required for Interest Calculation</td>\n              <td>{{savingsAccountData.minOverdraftForInterestCalculation | formatNumber}}</td>\n            </tr>\n            <tr *ngIf=\"savingsAccountData.minBalanceForInterestCalculation\">\n              <td>Min Balance Required for Interest Calculation</td>\n              <td>{{savingsAccountData.minBalanceForInterestCalculation | formatNumber}}</td>\n            </tr>\n            <tr *ngIf=\"savingsAccountData.minRequiredBalance\">\n              <td>Minimum Required Balance</td>\n              <td>{{savingsAccountData.minRequiredBalance | formatNumber}}</td>\n            </tr>\n            <tr *ngIf=\"savingsAccountData.enforceMinRequiredBalance\">\n              <td>Enforce Minimum Required Balance</td>\n              <td>{{savingsAccountData.enforceMinRequiredBalance | formatNumber}}</td>\n            </tr>\n            <tr *ngIf=\"savingsAccountData.summary.lastInterestCalculationDate\">\n              <td>Interest Recalculation Date</td>\n              <td>{{savingsAccountData.summary.lastInterestCalculationDate | dateFormat}}</td>\n            </tr>\n            <tr *ngIf=\"savingsAccountData.onHoldFunds\">\n              <td>On Hold Funds</td>\n              <td><a *mifosxHasPermission=\"'READ_SAVINGSACCOUNT'\">{{savingsAccountData.onHoldFunds | formatNumber}}</a></td>\n            </tr>\n            <tr *ngIf=\"savingsAccountData.withHoldTax\">\n              <td>Withhold Tax Group</td>\n              <td>{{savingsAccountData.taxGroup.name}}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <ng-template #alternateSummary>\n        <div fxFlex=\"49%\">\n          <h4 class=\"table-headers\">Account Summary</h4>\n          <table>\n            <tbody>\n              <tr>\n                <td>Activated On</td>\n                <td>{{savingsAccountData.timeline.activatedOnDate ? (savingsAccountData.timeline.activatedOnDate |\n                  dateFormat) : 'Not Activated'}}</td>\n              </tr>\n              <tr>\n                <td>Currency</td>\n                <td>{{savingsAccountData.currency.name}} [{{savingsAccountData.currency.code}}]</td>\n              </tr>\n              <tr>\n                <td>External Id</td>\n                <td>{{savingsAccountData.externalId ? savingsAccountData.externalId : 'Not Provided'}}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </ng-template>\n\n      <div fxFlex=\"49%\" fxLayout=\"column\" fxLayoutGap=\"4%\">\n\n        <div\n          *ngIf=\"!savingsAccountData.status.rejected && !savingsAccountData.status.submittedAndPendingApproval; else alternateDetails\">\n          <h4 class=\"table-headers\">Savings Details</h4>\n          <table>\n            <tbody>\n              <tr>\n                <td>Activated On</td>\n                <td>{{savingsAccountData.timeline.activatedOnDate ? (savingsAccountData.timeline.activatedOnDate |\n                  dateFormat) : 'Not Activated'}}</td>\n              </tr>\n              <tr>\n                <td>Field Officer</td>\n                <td>{{savingsAccountData.fieldOfficerName ? savingsAccountData.fieldOfficerName : 'Unassigned'}}</td>\n              </tr>\n              <tr>\n                <td>External Id</td>\n                <td>{{savingsAccountData.externalId ? savingsAccountData.externalId : 'Not Provided'}}</td>\n              </tr>\n              <tr>\n                <td>Currency</td>\n                <td>{{savingsAccountData.currency.name}} [{{savingsAccountData.currency.code}}]</td>\n              </tr>\n              <tr>\n                <td>Nominal Interest Rate</td>\n                <td>{{savingsAccountData.nominalAnnualInterestRate | formatNumber}} %</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        <ng-template #alternateDetails>\n          <div>\n            <h4 class=\"table-headers\">Savings Details</h4>\n            <table>\n              <tbody>\n                <tr>\n                  <td>Field Officer</td>\n                  <td>{{savingsAccountData.fieldOfficerName ? savingsAccountData.fieldOfficerName : 'Unassigned'}}</td>\n                </tr>\n                <tr>\n                  <td>Balance</td>\n                  <td>{{savingsAccountData.summary.accountBalance}}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </ng-template>\n\n        <div *ngIf=\"!savingsAccountData.status.rejected && !savingsAccountData.status.submittedAndPendingApproval\">\n          <h4 class=\"table-headers\">Performance History</h4>\n          <table>\n            <tbody>\n              <tr *ngIf=\"savingsAccountData.summary.totalDeposits\">\n                <td>Total Deposits</td>\n                <td>{{savingsAccountData.currency.displaySymbol}}&nbsp;{{savingsAccountData.summary.totalDeposits |\n                  number}}</td>\n              </tr>\n              <tr *ngIf=\"savingsAccountData.summary.totalInterestEarned >= 0\">\n                <td>Total Interest Earned</td>\n                <td>{{savingsAccountData.currency.displaySymbol}}&nbsp;{{savingsAccountData.summary.totalInterestEarned\n                  | formatNumber}}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n      </div>\n\n    </div>\n\n    <nav mat-tab-nav-bar class=\"navigation-tabs\" *ngIf=\"isActive\">\n      <a mat-tab-link [routerLink]=\"['./transactions']\" routerLinkActive #transactions=\"routerLinkActive\"\n        [active]=\"transactions.isActive\">\n        Transactions\n      </a>\n      <a mat-tab-link [routerLink]=\"['./charges']\" routerLinkActive #charges=\"routerLinkActive\"\n        [active]=\"charges.isActive\">\n        Charges\n      </a>\n      <a mat-tab-link [routerLink]=\"['./documents']\" routerLinkActive #savingsDocuments=\"routerLinkActive\"\n        [active]=\"savingsDocuments.isActive\">\n        Savings Documents\n      </a>\n      <a mat-tab-link *mifosxHasPermission=\"'READ_SAVINGSNOTE'\" [routerLink]=\"['./notes']\" routerLinkActive #notes=\"routerLinkActive\"\n        [active]=\"notes.isActive\">\n        Notes\n      </a>\n      <ng-container *mifosxHasPermission=\"'READ_SAVINGSACCOUNTCHARGE'\">\n        <a mat-tab-link [routerLink]=\"['./standing-instructions']\" routerLinkActive\n          #standingInstructions=\"routerLinkActive\" [active]=\"standingInstructions.isActive\"\n          *ngIf=\"savingsAccountData.clientId\">\n          Standing Instructions\n        </a>\n      </ng-container>\n      <ng-container *ngFor=\"let savingsDatatable of savingsDatatables\">\n        <a mat-tab-link *mifosxHasPermission=\"'READ_' + savingsDatatable.registeredTableName\"\n          [routerLink]=\"['./datatables',savingsDatatable.registeredTableName]\" routerLinkActive\n          #datatable=\"routerLinkActive\" [active]=\"datatable.isActive\">\n          {{savingsDatatable.registeredTableName}}\n        </a>\n      </ng-container>\n    </nav>\n\n    <router-outlet></router-outlet>\n\n  </mat-card-content>\n\n</mat-card>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\n\n/** Custom Dialogs */\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\nimport { CalculateInterestDialogComponent } from './custom-dialogs/calculate-interest-dialog/calculate-interest-dialog.component';\nimport { PostInterestDialogComponent } from './custom-dialogs/post-interest-dialog/post-interest-dialog.component';\nimport { ToggleWithholdTaxDialogComponent } from './custom-dialogs/toggle-withhold-tax-dialog/toggle-withhold-tax-dialog.component';\n\n/** Custom Buttons Configuration */\nimport { SavingsButtonsConfiguration } from './savings-buttons.config';\nimport { SavingsService } from '../savings.service';\nimport { ConfirmationDialogComponent } from 'app/shared/confirmation-dialog/confirmation-dialog.component';\n\n/**\n * Savings Account View Component\n */\n@Component({\n  selector: 'mifosx-savings-account-view',\n  templateUrl: './savings-account-view.component.html',\n  styleUrls: ['./savings-account-view.component.scss']\n})\nexport class SavingsAccountViewComponent implements OnInit {\n\n  /** Savings Account Data */\n  savingsAccountData: any;\n  /** Savings Data Tables */\n  savingsDatatables: any;\n  /** Button Configurations */\n  buttonConfig: SavingsButtonsConfiguration;\n  /** Entity Type */\n  entityType: string;\n\n  isActive = false;\n\n  /**\n   * Fetches savings account data from `resolve`\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SavingsService} savingsService Savings Service\n   */\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private savingsService: SavingsService,\n              public dialog: MatDialog) {\n    this.route.data.subscribe((data: { savingsAccountData: any, savingsDatatables: any }) => {\n      this.savingsAccountData = data.savingsAccountData;\n      this.savingsDatatables = data.savingsDatatables;\n    });\n    if (this.router.url.includes('clients')) {\n      this.entityType = 'Client';\n    } else if (this.router.url.includes('groups')) {\n      this.entityType = 'Group';\n    } else if (this.router.url.includes('centers')) {\n      this.entityType = 'Center';\n    }\n  }\n\n  ngOnInit() {\n    this.setConditionalButtons();\n  }\n\n  /**\n   * Adds options to button config. conditionaly.\n   */\n  setConditionalButtons() {\n    const status = this.savingsAccountData.status.value;\n    this.isActive = (status === 'Active');\n    const subStatus = this.savingsAccountData.subStatus;\n    this.buttonConfig = new SavingsButtonsConfiguration(status, subStatus);\n    if (this.savingsAccountData.clientId) {\n      this.buttonConfig.addOption({\n        name: 'Transfer Funds',\n        taskPermissionName: 'CREATE_ACCOUNTTRANSFER'\n      });\n    }\n    if (!this.savingsAccountData.fieldOfficerId) {\n      this.buttonConfig.addOption({\n        name: 'Assign Staff',\n        taskPermissionName: 'UPDATESAVINGSOFFICER_SAVINGSACCOUNT'\n      });\n    } else {\n      this.buttonConfig.addOption({\n        name: 'Unassign Staff',\n        taskPermissionName: 'REMOVESAVINGSOFFICER_SAVINGSACCOUNT'\n      });\n    }\n    if (this.savingsAccountData.charges) {\n      const charges: any[] = this.savingsAccountData.charges;\n      charges.forEach((charge: any) => {\n        if (charge.name === 'Annual fee - INR') {\n          this.buttonConfig.addOption({\n            name: 'Apply Annual Fees',\n            taskPermissionName: 'APPLYANNUALFEE_SAVINGSACCOUNT'\n          });\n        }\n      });\n    }\n    if (this.savingsAccountData.taxGroup) {\n      if (this.savingsAccountData.withHoldTax) {\n        this.buttonConfig.addOption({\n          name: 'Disable Withhold Tax',\n          taskPermissionName: 'UPDATEWITHHOLDTAX_SAVINGSACCOUNT'\n        });\n      } else {\n        this.buttonConfig.addOption({\n          name: 'Enable Withhold Tax',\n          taskPermissionName: 'UPDATEWITHHOLDTAX_SAVINGSACCOUNT'\n        });\n      }\n    }\n  }\n\n  /**\n   * Refetches data foe the component\n   * TODO: Replace by a custom reload component instead of hard-coded back-routing.\n   */\n  private reload() {\n    const url: string = this.router.url;\n    const refreshUrl: string = this.router.url.slice(0, this.router.url.indexOf('savings-accounts') + 'savings-accounts'.length);\n    this.router.navigateByUrl(refreshUrl, {skipLocationChange: true})\n      .then(() => this.router.navigate([url]));\n  }\n\n  /**\n   * Performs action button/option action.\n   * @param {string} name action name.\n   */\n  doAction(name: string) {\n    switch (name) {\n      case 'Approve':\n      case 'Reject':\n      case 'Deposit':\n      case 'Activate':\n      case 'Close':\n      case 'Undo Approval':\n      case 'Post Interest As On':\n      case 'Assign Staff':\n      case 'Add Charge':\n      case 'Hold Amount':\n      case 'Block Account':\n      case 'Unassign Staff':\n      case 'Withdraw By Client':\n      case 'Apply Annual Fees':\n        this.router.navigate([`actions/${name}`], { relativeTo: this.route });\n        break;\n      case 'Withdrawal':\n        this.router.navigate([`actions/Withdrawal`], { relativeTo: this.route });\n        break;\n      case 'Modify Application':\n        this.router.navigate(['edit'], { relativeTo: this.route });\n        break;\n      case 'Delete':\n        this.deleteSavingsAccount();\n        break;\n      case 'Calculate Interest':\n        this.calculateInterest();\n        break;\n      case 'Post Interest':\n        this.postInterest();\n        break;\n      case 'Enable Withhold Tax':\n        this.enableWithHoldTax();\n        break;\n      case 'Disable Withhold Tax':\n        this.disableWithHoldTax();\n        break;\n      case 'Transfer Funds':\n        const queryParams: any = { savingsId: this.savingsAccountData.id, accountType: 'fromsavings' };\n        this.router.navigate(['transfer-funds/make-account-transfer'], { relativeTo: this.route, queryParams: queryParams });\n        break;\n      case 'Unblock Account':\n        this.unblockSavingsAccount();\n        break;\n    }\n  }\n\n  /**\n   * Deletes Savings Account.\n   */\n  private deleteSavingsAccount() {\n    const deleteSavingsAccountDialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `savings account with id: ${this.savingsAccountData.id}` }\n    });\n    deleteSavingsAccountDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        this.savingsService.deleteSavingsAccount(this.savingsAccountData.id).subscribe(() => {\n          this.router.navigate(['../../'], { relativeTo: this.route });\n        });\n      }\n    });\n  }\n\n  /**\n   * Calculates savings account's interest\n   */\n  private calculateInterest() {\n    const calculateInterestAccountDialogRef = this.dialog.open(CalculateInterestDialogComponent);\n    calculateInterestAccountDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.savingsService.executeSavingsAccountCommand(this.savingsAccountData.id, 'calculateInterest', {}).subscribe(() => {\n          this.reload();\n        });\n      }\n    });\n  }\n\n  /**\n   * Posts savings account's interest\n   */\n  private postInterest() {\n    const postInterestAccountDialogRef = this.dialog.open(PostInterestDialogComponent);\n    postInterestAccountDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.savingsService.executeSavingsAccountCommand(this.savingsAccountData.id, 'postInterest', {}).subscribe(() => {\n          this.reload();\n        });\n      }\n    });\n  }\n\n  /**\n   * Enables withhold tax for savings account.\n   */\n  private enableWithHoldTax() {\n    const deleteSavingsAccountDialogRef = this.dialog.open(ToggleWithholdTaxDialogComponent, {\n      data: { isEnable: true }\n    });\n    deleteSavingsAccountDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.savingsService.executeSavingsAccountUpdateCommand(this.savingsAccountData.id, 'updateWithHoldTax', { withHoldTax: true})\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Disables withhold tac for savings account\n   */\n  private disableWithHoldTax() {\n    const disableWithHoldTaxDialogRef = this.dialog.open(ToggleWithholdTaxDialogComponent, {\n      data: { isEnable: false }\n    });\n    disableWithHoldTaxDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.savingsService.executeSavingsAccountUpdateCommand(this.savingsAccountData.id, 'updateWithHoldTax', { withHoldTax: false})\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Unblock Savings Account.\n   */\n  private unblockSavingsAccount() {\n    const unblockSavingsAccountDialogRef = this.dialog.open(ConfirmationDialogComponent, {\n      data: { heading: 'Unblock Savings Account', dialogContext: 'Are you sure you want Unblock this Savings Account' }\n    });\n    unblockSavingsAccountDialogRef.afterClosed().subscribe((response: { confirm: any }) => {\n      if (response.confirm) {\n        this.savingsService.executeSavingsAccountCommand(this.savingsAccountData.id, 'unblock', { })\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n}\n","<div class=\"tab-container mat-typography\">\n\n  <div class=\"mat-elevation-z1 m-b-25\" [hidden]=\"!accountWithTransactions\">\n\n    <div fxLayout=\"row\" fxLayoutAlign=\"start\">\n      <div class=\"m-b-10\">\n        <h3>All Transactions</h3>\n      </div>\n      <div class=\"action-button m-b-20\" fxLayout=\"row\" fxLayoutGap=\"20px\" *ngIf=\"checkStatus()\">\n        <button mat-raised-button color=\"primary\" [routerLink]=\"['/accounting', 'journal-entries']\">View Journal Entries</button>\n        <button mat-raised-button color=\"primary\" [routerLink]=\"['export']\">Export</button>\n      </div>\n    </div>\n\n    <table mat-table [dataSource]=\"dataSource\" matSort>\n\n      <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Id </th>\n        <td mat-cell *matCellDef=\"let transaction\"> {{ transaction.id }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"date\">\n        <th mat-header-cell class=\"center\" *matHeaderCellDef mat-sort-header> Transaction Date </th>\n        <td mat-cell *matCellDef=\"let transaction\"> {{ transaction.date  | dateFormat }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"transactionType\">\n        <th mat-header-cell class=\"center\" *matHeaderCellDef> Transaction Type </th>\n        <td mat-cell *matCellDef=\"let transaction\"> {{ transaction.transactionType.value  }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"debit\">\n        <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Debit </th>\n        <td mat-cell class=\"r-amount\" *matCellDef=\"let transaction\"> {{ isDebit(transaction.transactionType) ? (transaction.amount | formatNumber) : 'N/A'}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"credit\">\n        <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Credit </th>\n        <td mat-cell class=\"r-amount\" *matCellDef=\"let transaction\"> {{ !isDebit(transaction.transactionType) ? (transaction.amount | formatNumber) : 'N/A' }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"balance\">\n        <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Balance </th>\n        <td mat-cell class=\"r-amount\" *matCellDef=\"let transaction\"> {{ transaction.runningBalance | formatNumber }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"viewReciept\">\n        <th mat-header-cell class=\"center\" *matHeaderCellDef> View Reciept </th>\n        <td mat-cell class=\"center\" *matCellDef=\"let transaction\">\n          <button class=\"account-action-button\" mat-raised-button color=\"primary\" (click)=\"routeEdit($event)\" [routerLink]=\"[transaction.id, 'reciept']\">\n            <i class=\"fa fa-file\" matTooltip=\"View Reciept\"></i>\n          </button>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" class=\"select-row\" (click)=\"showTransactions(row)\"></tr>\n\n    </table>\n\n    <mat-paginator [pageSize]=\"50\" [pageSizeOptions]=\"[50, 100, 200]\" showFirstLastButtons></mat-paginator>\n\n  </div>\n\n  <div class=\"alert\" [hidden]=\"accountWithTransactions\">\n    <div class=\"message\">\n      <i class=\"fa fa-exclamation-circle alert-check\"></i>\n      No transaction was found\n    </div>\n  </div>\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/**\n * Transactions Tab Component.\n */\n@Component({\n  selector: 'mifosx-transactions-tab',\n  templateUrl: './transactions-tab.component.html',\n  styleUrls: ['./transactions-tab.component.scss']\n})\nexport class TransactionsTabComponent implements OnInit {\n\n  /** Savings Account Status */\n  status: any;\n  /** Transactions Data */\n  transactionsData: any;\n  /** Columns to be displayed in transactions table. */\n  displayedColumns: string[] = ['id', 'date', 'transactionType', 'debit', 'credit', 'balance', 'viewReciept'];\n  /** Data source for transactions table. */\n  dataSource: MatTableDataSource<any>;\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  accountWithTransactions = false;\n\n  /**\n   * Retrieves savings account data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute,\n              private router: Router) {\n    this.route.parent.parent.data.subscribe((data: { savingsAccountData: any }) => {\n      this.transactionsData = data.savingsAccountData.transactions?.filter((transaction: any) => !transaction.reversed);\n      this.status = data.savingsAccountData.status.value;\n    });\n  }\n\n  ngOnInit() {\n    this.dataSource = new MatTableDataSource(this.transactionsData);\n    this.accountWithTransactions = (this.transactionsData.length > 0);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  /**\n   * Checks if transaction is debit.\n   * @param {any} transactionType Transaction Type\n   */\n  isDebit(transactionType: any) {\n    return transactionType.withdrawal === true || transactionType.feeDeduction === true\n            || transactionType.overdraftInterest === true || transactionType.withholdTax === true;\n  }\n\n  /**\n   * Checks transaction status.\n   */\n  checkStatus() {\n    if (this.status === 'Active' || this.status === 'Closed' || this.status === 'Transfer in progress' ||\n       this.status === 'Transfer on hold' || this.status === 'Premature Closed' || this.status === 'Matured') {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Show Transactions Details\n   * @param transactionsData Transactions Data\n   */\n  showTransactions(transactionsData: any) {\n    if (transactionsData.transfer) {\n      this.router.navigate([`account-transfers/account-transfers/${transactionsData.transfer.id}`], { relativeTo: this.route });\n    } else {\n      this.router.navigate([transactionsData.id], { relativeTo: this.route });\n    }\n  }\n\n  /**\n   * Stops the propagation to view pages.\n   * @param $event Mouse Event\n   */\n  routeEdit($event: MouseEvent) {\n    $event.stopPropagation();\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"approveSavingsAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"approvedOnDatePicker.open()\">\n            <mat-label>Approved On Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"approvedOnDatePicker\" required formControlName=\"approvedOnDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"approvedOnDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #approvedOnDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"approveSavingsAccountForm.controls.approvedOnDate.hasError('required')\">\n              Approved On Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" [disabled]=\"!approveSavingsAccountForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Approve Savings Account Component\n */\n@Component({\n  selector: 'mifosx-approve-savings-account',\n  templateUrl: './approve-savings-account.component.html',\n  styleUrls: ['./approve-savings-account.component.scss']\n})\nexport class ApproveSavingsAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Approve Savings Account form. */\n  approveSavingsAccountForm: FormGroup;\n  /** Savings Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SavingsService} savingsService Savings Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Setting service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private savingsService: SavingsService,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private router: Router,\n              private settingsService: SettingsService) {\n    this.accountId = this.route.snapshot.params['savingAccountId'];\n  }\n\n  /**\n   * Creates the approve savings form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createApproveSavingsAccountForm();\n  }\n\n  /**\n   * Creates the approve savings account form.\n   */\n  createApproveSavingsAccountForm() {\n    this.approveSavingsAccountForm = this.formBuilder.group({\n      'approvedOnDate': ['', Validators.required],\n      'note': ['']\n    });\n  }\n\n  /**\n   * Submits the form and approves the saving account,\n   * if successful redirects to the saving account.\n   */\n  submit() {\n    const approveSavingsAccountFormData = this.approveSavingsAccountForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevApprovedOnDate: Date = this.approveSavingsAccountForm.value.approvedOnDate;\n    if (approveSavingsAccountFormData.approvedOnDate instanceof Date) {\n      approveSavingsAccountFormData.approvedOnDate = this.dateUtils.formatDate(prevApprovedOnDate, dateFormat);\n    }\n    const data = {\n      ...approveSavingsAccountFormData,\n      dateFormat,\n      locale\n    };\n    this.savingsService.executeSavingsAccountCommand(this.accountId, 'approve', data).subscribe(() => {\n      this.router.navigate(['../../transactions'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"rejectSavingsAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"rejectedOnDatePicker.open()\">\n            <mat-label>Rejected On Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"rejectedOnDatePicker\" required formControlName=\"rejectedOnDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"rejectedOnDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #rejectedOnDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"rejectSavingsAccountForm.controls.rejectedOnDate.hasError('required')\">\n              Rejected On Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"warn\" [disabled]=\"!rejectSavingsAccountForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Reject Savings Account Component\n */\n@Component({\n  selector: 'mifosx-reject-savings-account',\n  templateUrl: './reject-savings-account.component.html',\n  styleUrls: ['./reject-savings-account.component.scss']\n})\nexport class RejectSavingsAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Reject Saving Account form. */\n  rejectSavingsAccountForm: FormGroup;\n  /** Savings Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SavingsService} savingsService Savings Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Setting service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private savingsService: SavingsService,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private router: Router,\n              private settingsService: SettingsService) {\n    this.accountId = this.route.snapshot.params['savingAccountId'];\n  }\n\n  /**\n   * Creates the reject savings form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createRejectSavingsAccountForm();\n  }\n\n  /**\n   * Creates the reject savings account form.\n   */\n  createRejectSavingsAccountForm() {\n    this.rejectSavingsAccountForm = this.formBuilder.group({\n      'rejectedOnDate': ['', Validators.required],\n      'note': ['']\n    });\n  }\n\n  /**\n   * Submits the form and rejects the saving account,\n   * if successful redirects to the saving account.\n   */\n  submit() {\n    const rejectSavingsAccountFormData = this.rejectSavingsAccountForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevRejectedOnDate: Date = this.rejectSavingsAccountForm.value.rejectedOnDate;\n    if (rejectSavingsAccountFormData.rejectedOnDate instanceof Date) {\n      rejectSavingsAccountFormData.rejectedOnDate = this.dateUtils.formatDate(prevRejectedOnDate, dateFormat);\n    }\n    const data = {\n      ...rejectSavingsAccountFormData,\n      dateFormat,\n      locale\n    };\n    this.savingsService.executeSavingsAccountCommand(this.accountId, 'reject', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"activateSavingsAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <mat-form-field fxFlex (click)=\"activatedOnDatePicker.open()\">\n          <mat-label>Activated On Date</mat-label>\n          <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"activatedOnDatePicker\" required formControlName=\"activatedOnDate\">\n          <mat-datepicker-toggle matSuffix [for]=\"activatedOnDatePicker\"></mat-datepicker-toggle>\n          <mat-datepicker #activatedOnDatePicker></mat-datepicker>\n          <mat-error *ngIf=\"activateSavingsAccountForm.controls.activatedOnDate.hasError('required')\">\n            Activated On Date is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../transactions']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" [disabled]=\"!activateSavingsAccountForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Activate Savings Account Component\n */\n@Component({\n  selector: 'mifosx-activate-savings-account',\n  templateUrl: './activate-savings-account.component.html',\n  styleUrls: ['./activate-savings-account.component.scss']\n})\nexport class ActivateSavingsAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Activate Savings Account form. */\n  activateSavingsAccountForm: FormGroup;\n  /** Savings Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SavingsService} savingsService Savings Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Setting service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private savingsService: SavingsService,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private router: Router,\n              private settingsService: SettingsService) {\n    this.accountId = this.route.snapshot.params['savingAccountId'];\n  }\n\n  /**\n   * Creates the activate savings form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createActivateSavingsAccountForm();\n  }\n\n  /**\n   * Creates the activate savings account form.\n   */\n  createActivateSavingsAccountForm() {\n    this.activateSavingsAccountForm = this.formBuilder.group({\n      'activatedOnDate': ['', Validators.required]\n    });\n  }\n\n  /**\n   * Submits the form and activates the saving account,\n   * if successful redirects to the saving account.\n   */\n  submit() {\n    const activateSavingsAccountFormData = this.activateSavingsAccountForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevActivatedOnDate: Date = this.activateSavingsAccountForm.value.activatedOnDate;\n    if (activateSavingsAccountFormData.activatedOnDate instanceof Date) {\n      activateSavingsAccountFormData.activatedOnDate = this.dateUtils.formatDate(prevActivatedOnDate, dateFormat);\n    }\n    const data = {\n      ...activateSavingsAccountFormData,\n      dateFormat,\n      locale\n    };\n    this.savingsService.executeSavingsAccountCommand(this.accountId, 'activate', data).subscribe(() => {\n      this.router.navigate(['../../transactions'], { relativeTo: this.route });\n    });\n  }\n\n}\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\n\n/**\n * Undo Approval Savings Account Component\n */\n@Component({\n  selector: 'mifosx-undo-approval-savings-account',\n  templateUrl: './undo-approval-savings-account.component.html',\n  styleUrls: ['./undo-approval-savings-account.component.scss']\n})\nexport class UndoApprovalSavingsAccountComponent implements OnInit {\n\n  /** Undo Approval Savings Account form. */\n  undoApprovalSavingsAccountForm: FormGroup;\n  /** Savings Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SavingsService} savingsService Savings Service\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   */\n  constructor(private formBuilder: FormBuilder,\n              private savingsService: SavingsService,\n              private route: ActivatedRoute,\n              private router: Router) {\n    this.accountId = this.route.snapshot.params['savingAccountId'];\n  }\n\n  /**\n   * Creates the undo-approval savings form.\n   */\n  ngOnInit() {\n    this.createUndoApprovalSavingsAccountForm();\n  }\n\n  /**\n   * Creates the undo-approval savings account form.\n   */\n  createUndoApprovalSavingsAccountForm() {\n    this.undoApprovalSavingsAccountForm = this.formBuilder.group({\n      'note': ['']\n    });\n  }\n\n  /**\n   * Submits the form and undo the approval of share account,\n   * if successful redirects to the share account.\n   */\n  submit() {\n    const data = {\n      ...this.undoApprovalSavingsAccountForm.value,\n    };\n    this.savingsService.executeSavingsAccountCommand(this.accountId, 'undoapproval', data).subscribe(() => {\n      this.router.navigate(['../../transactions'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"undoApprovalSavingsAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <mat-form-field fxFlex>\n          <mat-label>Note</mat-label>\n          <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n        </mat-form-field>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"warn\" [disabled]=\"!undoApprovalSavingsAccountForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"postInterestSavingsAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <mat-form-field fxFlex (click)=\"transactionDatePicker.open()\">\n          <mat-label>Transaction Date</mat-label>\n          <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"transactionDatePicker\" required formControlName=\"transactionDate\">\n          <mat-datepicker-toggle matSuffix [for]=\"transactionDatePicker\"></mat-datepicker-toggle>\n          <mat-datepicker #transactionDatePicker></mat-datepicker>\n          <mat-error *ngIf=\"postInterestSavingsAccountForm.controls.transactionDate.hasError('required')\">\n            Transaction Date is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" [disabled]=\"!postInterestSavingsAccountForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Post Interest Savings Account Component\n */\n@Component({\n  selector: 'mifosx-post-interest-as-on-savings-account',\n  templateUrl: './post-interest-as-on-savings-account.component.html',\n  styleUrls: ['./post-interest-as-on-savings-account.component.scss']\n})\nexport class PostInterestAsOnSavingsAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Post Interest Savings Account form. */\n  postInterestSavingsAccountForm: FormGroup;\n  /** Savings Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SavingsService} savingsService Savings Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Setting service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private savingsService: SavingsService,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private router: Router,\n              private settingsService: SettingsService) {\n    this.accountId = this.route.snapshot.params['savingAccountId'];\n  }\n\n  /**\n   * Creates the post interest savings form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createPostInterestSavingsAccountForm();\n  }\n\n  /**\n   * Creates the post interest savings account form.\n   */\n  createPostInterestSavingsAccountForm() {\n    this.postInterestSavingsAccountForm = this.formBuilder.group({\n      'transactionDate': ['', Validators.required]\n    });\n  }\n\n  /**\n   * Submits the form and post interests of the saving account,\n   * if successful redirects to the saving account.\n   */\n  submit() {\n    const postInterestSavingsAccountFormData = this.postInterestSavingsAccountForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevTransactionDate: Date = this.postInterestSavingsAccountForm.value.transactionDate;\n    if (postInterestSavingsAccountFormData.transactionDate instanceof Date) {\n      postInterestSavingsAccountFormData.transactionDate = this.dateUtils.formatDate(prevTransactionDate, dateFormat);\n    }\n    const data = {\n      ...postInterestSavingsAccountFormData,\n      IsPostInterestAsOn: true,\n      dateFormat,\n      locale\n    };\n    this.savingsService.executeSavingsAccountTransactionsCommand(this.accountId, 'postInterestAsOn', data).subscribe(() => {\n      this.router.navigate(['../../transactions'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"savingsAssignStaffForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>To Savings Officer</mat-label>\n            <mat-select formControlName=\"toSavingsOfficerId\">\n              <mat-option *ngFor=\"let officer of fieldOfficerData\" [value]=\"officer.id\">\n                {{ officer.displayName }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <mat-form-field (click)=\"assignmentDatePicker.open()\">\n            <mat-label>Assignment Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"assignmentDatePicker\" required formControlName=\"assignmentDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"assignmentDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #assignmentDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"savingsAssignStaffForm.controls.assignmentDate.hasError('required')\">\n              Assignment Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" [disabled]=\"!savingsAssignStaffForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Savings Account Assign Staff Component\n */\n@Component({\n  selector: 'mifosx-savings-account-assign-staff',\n  templateUrl: './savings-account-assign-staff.component.html',\n  styleUrls: ['./savings-account-assign-staff.component.scss']\n})\nexport class SavingsAccountAssignStaffComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Savings Account Assign Staff form. */\n  savingsAssignStaffForm: FormGroup;\n  /** Savings Account Id */\n  accountId: any;\n  /** Field Officer Data */\n  fieldOfficerData: any;\n  /** Savings Account Data */\n  savingsAccountData: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SavingsService} savingsService Savings Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Setting service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private savingsService: SavingsService,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private router: Router,\n              private settingsService: SettingsService) {\n    this.accountId = this.route.snapshot.params['savingAccountId'];\n    this.route.data.subscribe((data: { savingsAccountActionData: any }) => {\n      this.savingsAccountData = data.savingsAccountActionData;\n    });\n  }\n\n  /**\n   * Creates the savings account assign staff form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.fieldOfficerData = this.savingsAccountData.fieldOfficerOptions;\n    this.createSavingsAssignStaffForm();\n  }\n\n  /**\n   * Creates the savings account assign staff form.\n   */\n  createSavingsAssignStaffForm() {\n    this.savingsAssignStaffForm = this.formBuilder.group({\n      'toSavingsOfficerId': [''],\n      'assignmentDate': ['', Validators.required]\n    });\n  }\n\n  /**\n   * Submits the form and assigns staff the saving account,\n   * if successful redirects to the saving account.\n   */\n  submit() {\n    const savingsAssignStaffFormData = this.savingsAssignStaffForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevAssignmentDate: Date = this.savingsAssignStaffForm.value.assignmentDate;\n    if (savingsAssignStaffFormData.assignmentDate instanceof Date) {\n      savingsAssignStaffFormData.assignmentDate = this.dateUtils.formatDate(prevAssignmentDate, dateFormat);\n    }\n    const data = {\n      ...savingsAssignStaffFormData,\n      fromSavingsOfficerId: '',\n      dateFormat,\n      locale\n    };\n    this.savingsService.executeSavingsAccountCommand(this.accountId, 'assignSavingsOfficer', data).subscribe(() => {\n      this.router.navigate(['../../transactions'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"savingsUnassignStaffForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <mat-form-field fxFlex (click)=\"unassignedDatePicker.open()\">\n          <mat-label>Unassignment Date</mat-label>\n          <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"unassignedDatePicker\" required formControlName=\"unassignedDate\">\n          <mat-datepicker-toggle matSuffix [for]=\"unassignedDatePicker\"></mat-datepicker-toggle>\n          <mat-datepicker #unassignedDatePicker></mat-datepicker>\n          <mat-error *ngIf=\"savingsUnassignStaffForm.controls.unassignedDate.hasError('required')\">\n            Unassignment Date is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" [disabled]=\"!savingsUnassignStaffForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Savings Account Unassign Staff Component\n */\n@Component({\n  selector: 'mifosx-savings-account-unassign-staff',\n  templateUrl: './savings-account-unassign-staff.component.html',\n  styleUrls: ['./savings-account-unassign-staff.component.scss']\n})\nexport class SavingsAccountUnassignStaffComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Savings Account Unassign Staff form. */\n  savingsUnassignStaffForm: FormGroup;\n  /** Savings Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SavingsService} savingsService Savings Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Setting service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private savingsService: SavingsService,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private router: Router,\n              private settingsService: SettingsService) {\n    this.accountId = this.route.snapshot.params['savingAccountId'];\n  }\n\n  /**\n   * Creates the savings account unassign staff form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createSavingsUnassignStaffForm();\n  }\n\n  /**\n   * Creates the savings account unassign staff form.\n   */\n  createSavingsUnassignStaffForm() {\n    this.savingsUnassignStaffForm = this.formBuilder.group({\n      'unassignedDate': ['', Validators.required]\n    });\n  }\n\n  /**\n   * Submits the form and unassigns staff of the saving account,\n   * if successful redirects to the saving account.\n   */\n  submit() {\n    const savingsUnassignStaffFormData = this.savingsUnassignStaffForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevUnassignmentDate: Date = this.savingsUnassignStaffForm.value.unassignedDate;\n    if (savingsUnassignStaffFormData.unassignedDate instanceof Date) {\n      savingsUnassignStaffFormData.unassignedDate = this.dateUtils.formatDate(prevUnassignmentDate, dateFormat);\n    }\n    const data = {\n      ...savingsUnassignStaffFormData,\n      dateFormat,\n      locale\n    };\n    this.savingsService.executeSavingsAccountCommand(this.accountId, 'unassignSavingsOfficer', data).subscribe(() => {\n      this.router.navigate(['../../transactions'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"withdrawSavingsAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"withdrawnOnDatePicker.open()\">\n            <mat-label>Withdrawn On Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"withdrawnOnDatePicker\" required formControlName=\"withdrawnOnDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"withdrawnOnDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #withdrawnOnDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"withdrawSavingsAccountForm.controls.withdrawnOnDate.hasError('required')\">\n              Withdrawn On Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" [disabled]=\"!withdrawSavingsAccountForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Withdraw By Client Savings Account Component\n */\n@Component({\n  selector: 'mifosx-withdraw-by-client-savings-account',\n  templateUrl: './withdraw-by-client-savings-account.component.html',\n  styleUrls: ['./withdraw-by-client-savings-account.component.scss']\n})\nexport class WithdrawByClientSavingsAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Withdraw Savings Account form. */\n  withdrawSavingsAccountForm: FormGroup;\n  /** Savings Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SavingsService} savingsService Savings Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Setting service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private savingsService: SavingsService,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private router: Router,\n              private settingsService: SettingsService) {\n    this.accountId = this.route.snapshot.params['savingAccountId'];\n  }\n\n  /**\n   * Creates the withdraw savings form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createWithdrawSavingsAccountForm();\n  }\n\n  /**\n   * Creates the withdraw savings account form.\n   */\n  createWithdrawSavingsAccountForm() {\n    this.withdrawSavingsAccountForm = this.formBuilder.group({\n      'withdrawnOnDate': ['', Validators.required],\n      'note': ['']\n    });\n  }\n\n  /**\n   * Submits the form and withdraws the saving account by client,\n   * if successful redirects to the saving account.\n   */\n  submit() {\n    const withdrawSavingsAccountFormData = this.withdrawSavingsAccountForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevWithdrawnOnDate: Date = this.withdrawSavingsAccountForm.value.withdrawnOnDate;\n    if (withdrawSavingsAccountFormData.withdrawnOnDate instanceof Date) {\n      withdrawSavingsAccountFormData.withdrawnOnDate = this.dateUtils.formatDate(prevWithdrawnOnDate, dateFormat);\n    }\n    const data = {\n      ...withdrawSavingsAccountFormData,\n      dateFormat,\n      locale\n    };\n    this.savingsService.executeSavingsAccountCommand(this.accountId, 'withdrawnByApplicant', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"savingsChargeForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n          <mat-form-field>\n            <mat-label>Charge</mat-label>\n            <mat-select required formControlName=\"chargeId\">\n              <mat-option *ngFor=\"let savingsCharge of savingsChargeOptions\" [value]=\"savingsCharge.id\">\n                {{ savingsCharge.name + ' (' + savingsCharge.currency.name + ')' }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"savingsChargeForm.controls.chargeId.hasError('required')\">\n              Charge is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <div *ngIf=\"chargeDetails\" fxLayout=\"column\">\n\n            <mat-form-field>\n              <mat-label>Amount</mat-label>\n              <input type=\"number\" required matInput formControlName=\"amount\" />\n              <mat-error *ngIf=\"savingsChargeForm.controls.amount.hasError('required')\">\n                Amount is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Charge Calculation</mat-label>\n              <mat-select formControlName=\"chargeCalculationType\">\n                <mat-option *ngFor=\"let chargeCalculation of chargeDetails.chargeCalculationTypeOptions\"\n                  [value]=\"chargeCalculation.id\">\n                  {{ chargeCalculation.value }}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Charge time type</mat-label>\n              <mat-select formControlName=\"chargeTimeType\">\n                <mat-option *ngFor=\"let chargeTime of chargeDetails.chargeTimeTypeOptions\" [value]=\"chargeTime.id\">\n                  {{ chargeTime.value }}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n\n            <mat-form-field *ngIf=\"savingsChargeForm.contains('dueDate')\" (click)=\"dueDatePicker.open()\">\n              <mat-label>Due for collection on</mat-label>\n              <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"dueDatePicker\" required\n                formControlName=\"dueDate\">\n              <mat-datepicker-toggle matSuffix [for]=\"dueDatePicker\"></mat-datepicker-toggle>\n              <mat-datepicker #dueDatePicker></mat-datepicker>\n              <mat-error *ngIf=\"savingsChargeForm.controls.dueDate.hasError('required')\">\n                Due for collection on is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n\n            <mat-form-field *ngIf=\"savingsChargeForm.contains('feeOnMonthDay')\" (click)=\"feeOnMonthDayPicker.open()\">\n              <mat-label>Due On</mat-label>\n              <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"feeOnMonthDayPicker\" required\n                formControlName=\"feeOnMonthDay\">\n              <mat-datepicker-toggle matSuffix [for]=\"feeOnMonthDayPicker\"></mat-datepicker-toggle>\n              <mat-datepicker #feeOnMonthDayPicker></mat-datepicker>\n              <mat-error *ngIf=\"savingsChargeForm.controls.feeOnMonthDay.hasError('required')\">\n                Due Date is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n\n            <mat-form-field *ngIf=\"savingsChargeForm.contains('feeInterval')\">\n              <mat-label>Repeats Every</mat-label>\n              <input matInput formControlName=\"feeInterval\" />\n            </mat-form-field>\n\n          </div>\n\n        </div>\n\n        <mat-card-actions fxLayoutGap=\"5px\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../transactions']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!savingsChargeForm.valid\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n/** Custom Services */\nimport { SavingsService } from '../../savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Add Savings Charge component.\n */\n@Component({\n  selector: 'mifosx-add-charge-savings-account',\n  templateUrl: './add-charge-savings-account.component.html',\n  styleUrls: ['./add-charge-savings-account.component.scss']\n})\nexport class AddChargeSavingsAccountComponent implements OnInit {\n\n  /** Minimum Due Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Due Date allowed. */\n  maxDate = new Date();\n  /** Add Savings Charge form. */\n  savingsChargeForm: FormGroup;\n  /** savings charge options. */\n  savingsChargeOptions: any;\n  /** savings Id of the savings account. */\n  savingAccountId: string;\n  /** charge details */\n  chargeDetails: any;\n\n  /**\n   * Retrieves charge template data from `resolve`\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {Dates} dateUtils Date Utils\n   * @param {SavingsService} savingsService Savings Service\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private route: ActivatedRoute,\n              private router: Router,\n              private dateUtils: Dates,\n              private savingsService: SavingsService,\n              private settingsService: SettingsService) {\n    this.route.data.subscribe((data: { savingsAccountActionData: any }) => {\n      this.savingsChargeOptions = data.savingsAccountActionData.chargeOptions;\n    });\n    this.savingAccountId = this.route.snapshot.params['savingAccountId'];\n  }\n\n  /**\n   * Creates the Savings Charge form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createSavingsChargeForm();\n    this.buildDependencies();\n  }\n\n  buildDependencies() {\n    this.savingsChargeForm.controls.chargeId.valueChanges.subscribe(chargeId => {\n      this.savingsService.getChargeTemplate(chargeId).subscribe((data: any) => {\n        this.chargeDetails = data;\n        const chargeTimeType = data.chargeTimeType.id;\n        if (data.chargeTimeType.value === 'Withdrawal Fee' || data.chargeTimeType.value === 'Saving No Activity Fee') {\n          this.chargeDetails.dueDateNotRequired = true;\n        }\n        if (data.chargeTimeType.value === 'Annual Fee' || data.chargeTimeType.value === 'Monthly Fee') {\n          this.chargeDetails.chargeTimeTypeAnnualOrMonth = true;\n        }\n        if (!this.chargeDetails.dueDateNotRequired && !this.chargeDetails.chargeTimeTypeAnnualOrMonth) {\n          this.savingsChargeForm.addControl('dueDate', new FormControl('', Validators.required));\n        } else {\n          this.savingsChargeForm.removeControl('dueDate');\n        }\n        if (!this.chargeDetails.dueDateNotRequired && this.chargeDetails.chargeTimeTypeAnnualOrMonth) {\n          this.savingsChargeForm.addControl('feeOnMonthDay', new FormControl('', Validators.required));\n        } else {\n          this.savingsChargeForm.removeControl('feeOnMonthDay');\n        }\n        if (chargeTimeType.value === 'Monthly Fee') {\n          this.savingsChargeForm.addControl('feeInterval', new FormControl(data.feeInterval, Validators.required));\n        } else {\n          this.savingsChargeForm.removeControl('feeInterval');\n        }\n        this.savingsChargeForm.patchValue({\n          'amount': data.amount,\n          'chargeCalculationType': data.chargeCalculationType.id,\n          'chargeTimeType': data.chargeTimeType.id\n        });\n      });\n    });\n  }\n\n  /**\n   * Creates the Savings Charge form.\n   */\n  createSavingsChargeForm() {\n    this.savingsChargeForm = this.formBuilder.group({\n      'chargeId': ['', Validators.required],\n      'amount': ['', Validators.required],\n      'chargeCalculationType': [{ value: '', disabled: true }],\n      'chargeTimeType': [{ value: '', disabled: true }]\n    });\n  }\n\n  /**\n   * Submits savings charge.\n   */\n  submit() {\n    const savingsCharge = this.savingsChargeForm.value;\n    savingsCharge.locale = this.settingsService.language.code;\n    if (!savingsCharge.feeInterval) {\n      savingsCharge.feeInterval = this.chargeDetails.feeInterval;\n    }\n    if (this.chargeDetails.dueDateNotRequired !== true) {\n      if (this.chargeDetails.chargeTimeTypeAnnualOrMonth === true) {\n        const monthDayFormat = 'MMMM-dd'; // TODO: Update once language and date settings are setup\n        savingsCharge.monthDayFormat = monthDayFormat;\n        if (savingsCharge.feeOnMonthDay) {\n          const prevDate = this.savingsChargeForm.value.feeOnMonthDay;\n          savingsCharge.feeOnMonthDay = this.dateUtils.formatDate(prevDate, monthDayFormat);\n        }\n      } else {\n        const dateFormat = this.settingsService.dateFormat;\n        savingsCharge.dateFormat = dateFormat;\n        if (savingsCharge.dueDate) {\n          const prevDate = this.savingsChargeForm.value.dueDate;\n          savingsCharge.dueDate = this.dateUtils.formatDate(prevDate, dateFormat);\n        }\n      }\n    }\n    this.savingsService.createSavingsCharge(this.savingAccountId, 'charges', savingsCharge).subscribe( () => {\n      this.router.navigate(['../../transactions'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <h2 mat-title *ngIf=\"transactionType.withdrawal\">Withdraw Money From Saving Account</h2>\n    <h2 mat-title *ngIf=\"transactionType.deposit\">Deposit Money To Saving Account</h2>\n\n    <form [formGroup]=\"savingAccountTransactionForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content fxLayout=\"column\">\n\n        <mat-form-field (click)=\"dueDatePicker.open()\">\n          <mat-label>Transaction Date</mat-label>\n          <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"dueDatePicker\"\n            formControlName=\"transactionDate\" required>\n          <mat-datepicker-toggle matSuffix [for]=\"dueDatePicker\"></mat-datepicker-toggle>\n          <mat-datepicker #dueDatePicker></mat-datepicker>\n          <mat-error *ngIf=\"savingAccountTransactionForm.controls.transactionDate.hasError('required')\">\n            Transaction Date is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"fill\">\n          <mat-label>Transaction Amount</mat-label>\n          <span matTextSuffix class=\"m-l-10\">{{ currencyCode }}</span>\n          <span fxFlex=\"auto\"></span>\n          <input type=\"number\" class=\"right-input\" formControlName=\"transactionAmount\" required matInput />\n          <mat-error *ngIf=\"savingAccountTransactionForm.controls.transactionAmount.hasError('required')\">\n            Transaction Amount is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n          <mat-label>Payment Type</mat-label>\n          <mat-select required formControlName=\"paymentTypeId\">\n            <mat-option *ngFor=\"let paymentType of paymentTypeOptions\" [value]=\"paymentType.id\">\n              {{ paymentType.name }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <div fxFlexFill>\n          <span fxFlex=\"75%\" class=\"expandcollapsebutton m-l-10 m-t-40\" (click)=\"addPaymentDetails()\">\n            <mat-slide-toggle>\n              <div [className]=\"addPaymentDetailsFlag ? 'enabled' : 'disabled'\">\n                <span class=\"m-l-10\">Show Payment Details</span>\n              </div>\n            </mat-slide-toggle>\n          </span>\n        </div>\n\n        <mat-form-field *ngIf=\"addPaymentDetailsFlag\">\n          <mat-label>Account Number</mat-label>\n          <input type=\"number\" formControlName=\"accountNumber\" matInput />\n        </mat-form-field>\n\n        <mat-form-field *ngIf=\"addPaymentDetailsFlag\">\n          <mat-label>Cheque</mat-label>\n          <input type=\"number\" formControlName=\"checkNumber\" matInput />\n        </mat-form-field>\n\n        <mat-form-field *ngIf=\"addPaymentDetailsFlag\">\n          <mat-label>Routing Code</mat-label>\n          <input formControlName=\"routingCode\" matInput />\n        </mat-form-field>\n\n        <mat-form-field *ngIf=\"addPaymentDetailsFlag\">\n          <mat-label>Receipt Number</mat-label>\n          <input formControlName=\"receiptNumber\" matInput />\n        </mat-form-field>\n\n        <mat-form-field *ngIf=\"addPaymentDetailsFlag\">\n          <mat-label>Bank</mat-label>\n          <input formControlName=\"bankNumber\" matInput />\n        </mat-form-field>\n\n        <mat-form-field>\n          <mat-label>Notes</mat-label>\n          <textarea formControlName=\"note\" matInput cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n        </mat-form-field>\n\n        <mat-card-actions fxLayoutGap=\"5px\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../transactions']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!savingAccountTransactionForm.valid\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n/** Custom Services */\nimport { SavingsService } from '../../savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Create savings account transactions component.\n */\n@Component({\n  selector: 'mifosx-savings-transactions',\n  templateUrl: './savings-account-transactions.component.html',\n  styleUrls: ['./savings-account-transactions.component.scss']\n})\nexport class SavingsAccountTransactionsComponent implements OnInit {\n\n  @Input() currencyCode: string;\n\n  /** Minimum Due Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Due Date allowed. */\n  maxDate = new Date();\n  /** Savings account transaction form. */\n  savingAccountTransactionForm: FormGroup;\n  /** savings account transaction payment options. */\n  paymentTypeOptions: {\n    id: number,\n    name: string,\n    description: string,\n    isCashPayment: boolean,\n    position: number\n  }[];\n  /** Flag to enable payment details fields. */\n  addPaymentDetailsFlag: Boolean = false;\n  /** transaction type flag to render required UI */\n  transactionType: { deposit: boolean, withdrawal: boolean } = { deposit: false, withdrawal: false };\n  /** transaction command for submit request */\n  transactionCommand: string;\n  /** saving account's Id */\n  savingAccountId: string;\n\n  /**\n   * Retrieves the Saving Account transaction template data from `resolve`.\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {SavingsService} savingsService Savings Service.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Dates} dateUtils Date Utils.\n   * @param {Router} router Router for navigation.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private route: ActivatedRoute,\n              private router: Router,\n              private dateUtils: Dates,\n              private savingsService: SavingsService,\n              private settingsService: SettingsService) {\n    this.route.data.subscribe((data: { savingsAccountActionData: any }) => {\n      this.paymentTypeOptions = data.savingsAccountActionData.paymentTypeOptions;\n    });\n    this.transactionCommand = this.route.snapshot.params['name'].toLowerCase();\n    this.transactionType[this.transactionCommand] = true;\n    this.savingAccountId = this.route.snapshot.params['savingAccountId'];\n  }\n\n  /**\n   * Creates the Saving account transaction form when component loads.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createSavingAccountTransactionForm();\n  }\n\n  /**\n   * Method to create the Saving Account Transaction Form.\n   */\n  createSavingAccountTransactionForm() {\n    this.savingAccountTransactionForm = this.formBuilder.group({\n      'transactionDate': [this.settingsService.businessDate, Validators.required],\n      'transactionAmount': [0, Validators.required],\n      'paymentTypeId': [''],\n      'note': ['']\n    });\n  }\n\n  /**\n   * Method to add payment detail fields to the UI.\n   */\n  addPaymentDetails() {\n    this.addPaymentDetailsFlag = !this.addPaymentDetailsFlag;\n    if (this.addPaymentDetailsFlag) {\n      this.savingAccountTransactionForm.addControl('accountNumber', new FormControl(''));\n      this.savingAccountTransactionForm.addControl('checkNumber', new FormControl(''));\n      this.savingAccountTransactionForm.addControl('routingCode', new FormControl(''));\n      this.savingAccountTransactionForm.addControl('receiptNumber', new FormControl(''));\n      this.savingAccountTransactionForm.addControl('bankNumber', new FormControl(''));\n    } else {\n      this.savingAccountTransactionForm.removeControl('accountNumber');\n      this.savingAccountTransactionForm.removeControl('checkNumber');\n      this.savingAccountTransactionForm.removeControl('routingCode');\n      this.savingAccountTransactionForm.removeControl('receiptNumber');\n      this.savingAccountTransactionForm.removeControl('bankNumber');\n    }\n  }\n\n  /**\n   * Method to submit the transaction details.\n   */\n  submit() {\n    const savingAccountTransactionFormData = this.savingAccountTransactionForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevTransactionDate: Date = this.savingAccountTransactionForm.value.transactionDate;\n    if (savingAccountTransactionFormData.transactionDate instanceof Date) {\n      savingAccountTransactionFormData.transactionDate = this.dateUtils.formatDate(prevTransactionDate, dateFormat);\n    }\n    const data = {\n      ...savingAccountTransactionFormData,\n      dateFormat,\n      locale\n    };\n    this.savingsService.executeSavingsAccountTransactionsCommand(this.savingAccountId, this.transactionCommand, data).subscribe(res => {\n      this.router.navigate(['../../transactions'], { relativeTo: this.route });\n    });\n  }\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"closeSavingsAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"closedOnDatePicker.open()\">\n            <mat-label>Closed On Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"closedOnDatePicker\" required formControlName=\"closedOnDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"closedOnDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #closedOnDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"closeSavingsAccountForm.controls.closedOnDate.hasError('required')\">\n              Closed On Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-checkbox class=\"m-b-25 m-t-15\" formControlName=\"withdrawBalance\">\n            Withdraw Balance\n          </mat-checkbox>\n\n          <mat-checkbox  formControlName=\"postInterestValidationOnClosure\">\n            Is Interest Posting required on closure date?\n          </mat-checkbox>\n\n          <div *ngIf=\"closeSavingsAccountForm.controls['withdrawBalance'].value\" fxLayout=\"column\">\n\n            <mat-form-field class=\"m-t-20\" *ngIf=\"closeSavingsAccountForm.controls['amount']\">\n              <mat-label>Transaction Amount</mat-label>\n              <input type=\"number\" required matInput formControlName=\"amount\"/>\n            </mat-form-field>\n\n            <mat-form-field *ngIf=\"closeSavingsAccountForm.controls['paymentTypeId']\">\n              <mat-label>Payment Type</mat-label>\n              <mat-select formControlName=\"paymentTypeId\">\n                <mat-option *ngFor=\"let paymentType of paymentTypeOptions\"\n                  [value]=\"paymentType.id\">\n                  {{ paymentType.name }}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n\n            <div fxFlexFill>\n              <span fxFlex=\"75%\" class=\"expandcollapsebutton m-l-10 m-t-40\" (click)=\"addPaymentDetails()\">\n                <mat-slide-toggle>\n                  <div [className]=\"showPaymentDetails ? 'enabled' : 'disabled'\">\n                    <span class=\"m-l-10\">Show Payment Details</span>\n                  </div>\n                </mat-slide-toggle>\n              </span>\n            </div>\n\n            <mat-form-field *ngIf=\"closeSavingsAccountForm.controls['accountNumber']\">\n              <mat-label>Account Number</mat-label>\n              <input type=\"number\" formControlName=\"accountNumber\" matInput />\n            </mat-form-field>\n\n            <mat-form-field *ngIf=\"closeSavingsAccountForm.controls['checkNumber']\">\n              <mat-label>Cheque</mat-label>\n              <input type=\"number\" formControlName=\"checkNumber\" matInput />\n            </mat-form-field>\n\n            <mat-form-field *ngIf=\"closeSavingsAccountForm.controls['routingCode']\">\n              <mat-label>Routing Code</mat-label>\n              <input formControlName=\"routingCode\" matInput />\n            </mat-form-field>\n\n            <mat-form-field *ngIf=\"closeSavingsAccountForm.controls['receiptNumber']\">\n              <mat-label>Receipt Number</mat-label>\n              <input formControlName=\"receiptNumber\" matInput />\n            </mat-form-field>\n\n            <mat-form-field *ngIf=\"closeSavingsAccountForm.controls['bankNumber']\">\n              <mat-label>Bank</mat-label>\n              <input formControlName=\"bankNumber\" matInput />\n            </mat-form-field>\n\n          </div>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"warn\" [disabled]=\"!closeSavingsAccountForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Close Savings Account Component\n */\n@Component({\n  selector: 'mifosx-close-savings-account',\n  templateUrl: './close-savings-account.component.html',\n  styleUrls: ['./close-savings-account.component.scss']\n})\nexport class CloseSavingsAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Close Savings Account form. */\n  closeSavingsAccountForm: FormGroup;\n  /** Savings Account Id */\n  accountId: any;\n  /** Flag to enable payment details fields. */\n  addPaymentDetailsFlag = false;\n  /** Payment Type Options */\n  paymentTypeOptions: any;\n  /** Transaction Amount */\n  transactionAmount: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SavingsService} savingsService Savings Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Setting service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private savingsService: SavingsService,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private router: Router,\n              private settingsService: SettingsService) {\n    this.route.data.subscribe((data: { savingsAccountActionData: any }) => {\n      this.paymentTypeOptions = data.savingsAccountActionData[0].paymentTypeOptions;\n      this.transactionAmount = data.savingsAccountActionData[1].summary.accountBalance;\n    });\n    this.accountId = this.route.snapshot.params['savingAccountId'];\n  }\n\n  /**\n   * Creates the close savings form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createCloseSavingsAccountForm();\n    this.buildDependencies();\n  }\n\n  /**\n   * Creates the close savings account form.\n   */\n  createCloseSavingsAccountForm() {\n    this.closeSavingsAccountForm = this.formBuilder.group({\n      'closedOnDate': ['', Validators.required],\n      'withdrawBalance': [false],\n      'postInterestValidationOnClosure': [false],\n      'note': ['']\n    });\n  }\n\n  /**\n   * Subscribe to value changes of withdraw balance checkbox.\n   */\n  buildDependencies() {\n    this.closeSavingsAccountForm.get('withdrawBalance').valueChanges.subscribe((value: boolean) => {\n      if (value) {\n        this.closeSavingsAccountForm.addControl('amount', new FormControl({value: this.transactionAmount, disabled: true}));\n        this.closeSavingsAccountForm.addControl('paymentTypeId', new FormControl(''));\n      } else {\n        this.closeSavingsAccountForm.removeControl('amount');\n        this.closeSavingsAccountForm.removeControl('paymentTypeId');\n      }\n    });\n  }\n\n  /**\n   * Method to add payment detail fields to the UI.\n   */\n  addPaymentDetails() {\n    this.addPaymentDetailsFlag = !this.addPaymentDetailsFlag;\n    if (this.addPaymentDetailsFlag) {\n      this.closeSavingsAccountForm.addControl('accountNumber', new FormControl(''));\n      this.closeSavingsAccountForm.addControl('checkNumber', new FormControl(''));\n      this.closeSavingsAccountForm.addControl('routingCode', new FormControl(''));\n      this.closeSavingsAccountForm.addControl('receiptNumber', new FormControl(''));\n      this.closeSavingsAccountForm.addControl('bankNumber', new FormControl(''));\n    } else {\n      this.closeSavingsAccountForm.removeControl('accountNumber');\n      this.closeSavingsAccountForm.removeControl('checkNumber');\n      this.closeSavingsAccountForm.removeControl('routingCode');\n      this.closeSavingsAccountForm.removeControl('receiptNumber');\n      this.closeSavingsAccountForm.removeControl('bankNumber');\n    }\n  }\n\n  /**\n   * Submits the form and closes the saving account,\n   * if successful redirects to the saving account.\n   */\n  submit() {\n    const closeSavingsAccountFormData = this.closeSavingsAccountForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevClosedOnDate: Date = this.closeSavingsAccountForm.value.closedOnDate;\n    if (closeSavingsAccountFormData.closedOnDate instanceof Date) {\n      closeSavingsAccountFormData.closedOnDate = this.dateUtils.formatDate(prevClosedOnDate, dateFormat);\n    }\n    const data = {\n      ...closeSavingsAccountFormData,\n      dateFormat,\n      locale\n    };\n    this.savingsService.executeSavingsAccountCommand(this.accountId, 'close', data).subscribe(() => {\n      this.router.navigate(['../../transactions'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"applyAnnualFeesForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"dueDatePicker.open()\">\n            <mat-label>Annual Fees Transaction Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"dueDatePicker\" required formControlName=\"dueDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"dueDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #dueDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"applyAnnualFeesForm.controls.dueDate.hasError('required')\">\n              Due Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Amount</mat-label>\n            <input type=\"number\" formControlName=\"amount\" required matInput />\n            <mat-error *ngIf=\"applyAnnualFeesForm.controls.amount.hasError('required')\">\n              Amount is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" [disabled]=\"!applyAnnualFeesForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Apply Annual Fees Component\n */\n@Component({\n  selector: 'mifosx-apply-annual-fees-savings-account',\n  templateUrl: './apply-annual-fees-savings-account.component.html',\n  styleUrls: ['./apply-annual-fees-savings-account.component.scss']\n})\nexport class ApplyAnnualFeesSavingsAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Apply annual fees form. */\n  applyAnnualFeesForm: FormGroup;\n  /** Savings Account Id */\n  accountId: any;\n  /** Annual Fees charge Id */\n  chargeId: any;\n  /** Savings Account Data */\n  savingsAccountData: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SavingsService} savingsService Savings Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Setting service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private savingsService: SavingsService,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private router: Router,\n              private settingsService: SettingsService) {\n    this.accountId = this.route.snapshot.params['savingAccountId'];\n    this.route.data.subscribe((data: { savingsAccountActionData: any }) => {\n      this.savingsAccountData = data.savingsAccountActionData;\n    });\n  }\n\n  /**\n   * Creates the apply annual fees form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createApplyAnnualFeesForm();\n    this.applyCharge();\n  }\n\n  /**\n   * Creates the apply annual fees form.\n   */\n  createApplyAnnualFeesForm() {\n    this.applyAnnualFeesForm = this.formBuilder.group({\n      'dueDate': ['', Validators.required],\n      'amount': ['']\n    });\n  }\n\n  /**\n   * Retireves apply annual fees charge for ID and amount.\n   */\n  applyCharge() {\n    const charges: any[] = this.savingsAccountData.charges;\n      charges.forEach((charge: any) => {\n        if (charge.name === 'Annual fee - INR') {\n          this.chargeId = charge.id;\n          this.applyAnnualFeesForm.get('amount').patchValue(charge.amount);\n        }\n      });\n  }\n\n  /**\n   * Submits the form and applies the annual fees,\n   * if successful redirects to the saving account.\n   */\n  submit() {\n    const applyAnnualFeesFormData = this.applyAnnualFeesForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevApprovedOnDate: Date = this.applyAnnualFeesForm.value.dueDate;\n    if (applyAnnualFeesFormData.dueDate instanceof Date) {\n      applyAnnualFeesFormData.dueDate = this.dateUtils.formatDate(prevApprovedOnDate, dateFormat);\n    }\n    const data = {\n      ...applyAnnualFeesFormData,\n      dateFormat,\n      locale\n    };\n    this.savingsService.executeSavingsAccountChargesCommand(this.accountId, 'paycharge', data, this.chargeId).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <h2 mat-title *ngIf=\"transactionType.holdamount\">Hold Amount</h2>\n    <h2 mat-title *ngIf=\"transactionType.blockaccount\">Block Savings Account</h2>\n\n    <form [formGroup]=\"manageSavingsAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content fxLayout=\"column\">\n\n        <mat-form-field>\n          <mat-label>Reason</mat-label>\n          <mat-select required formControlName=\"reasonForBlock\">\n            <mat-option *ngFor=\"let codeValue of reasonOptions\" [value]=\"codeValue.id\">\n              {{ codeValue.name }}\n            </mat-option>\n          </mat-select>\n          <mat-error *ngIf=\"manageSavingsAccountForm.controls.reasonForBlock.hasError('required')\">\n            Reason is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field fxFlex (click)=\"transactionDatePicker.open()\" *ngIf=\"transactionType.holdamount\">\n          <mat-label>Transaction Date</mat-label>\n          <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"transactionDatePicker\" required formControlName=\"transactionDate\">\n          <mat-datepicker-toggle matSuffix [for]=\"transactionDatePicker\"></mat-datepicker-toggle>\n          <mat-datepicker #transactionDatePicker></mat-datepicker>\n          <mat-error *ngIf=\"manageSavingsAccountForm.controls.transactionDate.hasError('required')\">\n            Transaction Date is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field *ngIf=\"transactionType.holdamount\">\n          <mat-label>Transaction Amount</mat-label>\n          <input type=\"number\" formControlName=\"transactionAmount\" required matInput />\n          <mat-error *ngIf=\"manageSavingsAccountForm.controls.transactionAmount.hasError('required')\">\n            Transaction Amount is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../transactions']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" [disabled]=\"!manageSavingsAccountForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\nimport { SavingsService } from 'app/savings/savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { SystemService } from 'app/system/system.service';\n\n@Component({\n  selector: 'mifosx-manage-savings-account',\n  templateUrl: './manage-savings-account.component.html',\n  styleUrls: ['./manage-savings-account.component.scss']\n})\nexport class ManageSavingsAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Manage Savings Account form. */\n  manageSavingsAccountForm: FormGroup;\n  /** Savings Account Id */\n  savingAccountId: string;\n  transactionCommand: string;\n\n  reasonOptions: any = [];\n\n  transactionType: {\n    holdamount: boolean,\n    blockaccount: boolean\n  } = {\n      holdamount: false, blockaccount: false\n    };\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SavingsService} savingsService Savings Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Setting service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private savingsService: SavingsService,\n    private dateUtils: Dates,\n    private route: ActivatedRoute,\n    private router: Router,\n    private systemService: SystemService,\n    private settingsService: SettingsService) {\n    this.transactionCommand = this.route.snapshot.params['name'].toLowerCase().replaceAll(' ', '');\n    this.transactionType[this.transactionCommand] = true;\n    this.savingAccountId = this.route.snapshot.params['savingAccountId'];\n  }\n\n  /**\n   * Creates the post interest savings form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createManageSavingsAccountForm();\n    if (this.transactionType.holdamount || this.transactionType.blockaccount) {\n      this.getCodeValues();\n    }\n  }\n\n  getCodeValues() {\n    let codeName = 'SavingsTransactionFreezeReasons'; // Default Hold Amount\n    if (this.transactionType.blockaccount) {\n      codeName = 'SavingsAccountBlockReasons';\n    }\n\n    this.systemService.getCodes().subscribe((codes: any) => {\n      codes.some((code: any) => {\n        if (code.name === codeName) {\n          this.systemService.getCodeValues(code.id).subscribe((codeValues: any) => {\n            this.reasonOptions = codeValues;\n            return true;\n          });\n        }\n        return false;\n      });\n    });\n  }\n\n  /**\n   * Creates the manage savings account form.\n   */\n  createManageSavingsAccountForm() {\n    if (this.transactionType.holdamount) {\n      this.manageSavingsAccountForm = this.formBuilder.group({\n        'reasonForBlock': ['', Validators.required],\n        'transactionDate': ['', Validators.required],\n        'transactionAmount': [0.0, Validators.required]\n      });\n    } else {\n      this.manageSavingsAccountForm = this.formBuilder.group({\n        'reasonForBlock': ['', Validators.required]\n      });\n    }\n  }\n\n  submit() {\n    let command = '';\n    let payload = {};\n\n    if (this.transactionType.holdamount) {\n      const manageSavingsAccountFormData = this.manageSavingsAccountForm.value;\n      const locale = this.settingsService.language.code;\n      const dateFormat = this.settingsService.dateFormat;\n      const prevTransactionDate: Date = this.manageSavingsAccountForm.value.transactionDate;\n      if (manageSavingsAccountFormData.transactionDate instanceof Date) {\n        manageSavingsAccountFormData.transactionDate = this.dateUtils.formatDate(prevTransactionDate, dateFormat);\n      }\n      payload = {\n        ...manageSavingsAccountFormData,\n        dateFormat,\n        locale\n      };\n      command = 'holdAmount';\n\n      this.savingsService.executeSavingsAccountTransactionsCommand(this.savingAccountId, command, payload).subscribe((response: any) => {\n        this.router.navigate(['../../transactions'], { relativeTo: this.route });\n      });\n    } else {\n      payload = {\n        ... this.manageSavingsAccountForm.value\n      };\n      command = 'block';\n\n      this.savingsService.executeSavingsAccountCommand(this.savingAccountId, command, payload).subscribe((response: any) => {\n        this.router.navigate(['../../transactions'], { relativeTo: this.route });\n      });\n    }\n  }\n\n}\n","<mifosx-approve-savings-account *ngIf=\"actions['Approve']\"></mifosx-approve-savings-account>\n<mifosx-reject-savings-account *ngIf=\"actions['Reject']\"></mifosx-reject-savings-account>\n<mifosx-activate-savings-account *ngIf=\"actions['Activate']\"></mifosx-activate-savings-account>\n<mifosx-undo-approval-savings-account *ngIf=\"actions['Undo Approval']\"></mifosx-undo-approval-savings-account>\n<mifosx-post-interest-as-on-savings-account *ngIf=\"actions['Post Interest As On']\"></mifosx-post-interest-as-on-savings-account>\n<mifosx-savings-account-assign-staff *ngIf=\"actions['Assign Staff']\"></mifosx-savings-account-assign-staff>\n<mifosx-savings-account-unassign-staff *ngIf=\"actions['Unassign Staff']\"></mifosx-savings-account-unassign-staff>\n<mifosx-withdraw-by-client-savings-account *ngIf=\"actions['Withdraw By Client']\"></mifosx-withdraw-by-client-savings-account>\n<mifosx-add-charge-savings-account *ngIf=\"actions['Add Charge']\"></mifosx-add-charge-savings-account>\n<mifosx-savings-transactions [currencyCode]=\"currencyCode\" *ngIf=\"actions['Withdrawal'] || actions['Deposit']\"></mifosx-savings-transactions>\n<mifosx-close-savings-account *ngIf=\"actions['Close']\"></mifosx-close-savings-account>\n<mifosx-apply-annual-fees-savings-account *ngIf=\"actions['Apply Annual Fees']\"></mifosx-apply-annual-fees-savings-account>\n<mifosx-manage-savings-account *ngIf=\"actions['Hold Amount'] || actions['Block Account']\"></mifosx-manage-savings-account>\n","/** Angular Imports */\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n/**\n * Savings account actions component.\n */\n@Component({\n  selector: 'mifosx-saving-account-actions',\n  templateUrl: './saving-account-actions.component.html',\n  styleUrls: ['./saving-account-actions.component.scss']\n})\nexport class SavingAccountActionsComponent {\n\n  /** Flag object to store possible actions and render appropriate UI to the user */\n  actions: {\n    'Approve': boolean\n    'Reject': boolean\n    'Withdrawal': boolean\n    'Deposit': boolean\n    'Activate': boolean\n    'Close': boolean\n    'Undo Approval': boolean\n    'Post Interest As On': boolean\n    'Assign Staff': boolean\n    'Add Charge': boolean\n    'Unassign Staff': boolean\n    'Withdraw By Client': boolean\n    'Apply Annual Fees': boolean\n    'Hold Amount': boolean\n    'Block Account': boolean\n    'Unblock Account': boolean\n  } = {\n    'Approve': false,\n    'Reject': false,\n    'Withdrawal': false,\n    'Deposit': false,\n    'Activate': false,\n    'Close': false,\n    'Undo Approval': false,\n    'Post Interest As On': false,\n    'Assign Staff': false,\n    'Add Charge': false,\n    'Unassign Staff': false,\n    'Withdraw By Client': false,\n    'Apply Annual Fees': false,\n    'Hold Amount': false,\n    'Block Account': false,\n    'Unblock Account': false\n  };\n\n  currencyCode: string;\n\n  /**\n   * @param {ActivatedRoute} route Activated Route\n   */\n  constructor(private route: ActivatedRoute) {\n    this.route.data.subscribe((data: { savingsAccountActionData: any }) => {\n      this.currencyCode = data.savingsAccountActionData.currency.code;\n    });\n    const name = this.route.snapshot.params['name'];\n    this.actions[name] = true;\n  }\n\n}\n","/** Angular Imports */\nimport { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n/**\n * Waive charge dialog component.\n */\n@Component({\n  selector: 'mifosx-waive-charge-dialog',\n  templateUrl: './waive-charge-dialog.component.html',\n  styleUrls: ['./waive-charge-dialog.component.scss']\n})\nexport class WaiveChargeDialogComponent {\n\n  /**\n   * @param {MatDialogRef} dialogRef Component reference to dialog.\n   * @param {any} data.\n   */\n  constructor(public dialogRef: MatDialogRef<WaiveChargeDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any) { }\n\n}\n","<h1 mat-dialog-title>Waive Charge</h1>\n<div mat-dialog-content>\n  <p>Are you sure you want to waive charge with id: {{ data.id }} ?</p>\n</div>\n<mat-dialog-actions align=\"end\">\n  <button mat-raised-button mat-dialog-close>Cancel</button>\n  <button mat-raised-button color=\"primary\" [mat-dialog-close]=\"{ confirm: true }\">Confirm</button>\n</mat-dialog-actions>\n","/** Angular Imports */\nimport { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n/**\n * Inactivate charge dialog component.\n */\n@Component({\n  selector: 'mifosx-inactivate-charge-dialog',\n  templateUrl: './inactivate-charge-dialog.component.html',\n  styleUrls: ['./inactivate-charge-dialog.component.scss']\n})\nexport class InactivateChargeDialogComponent {\n\n  /**\n   * @param {MatDialogRef} dialogRef Component reference to dialog.\n   * @param {any} data.\n   */\n  constructor(public dialogRef: MatDialogRef<InactivateChargeDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any) { }\n\n}\n","<h1 mat-dialog-title>Inactivate Charge</h1>\n<div mat-dialog-content>\n  <p>Are you sure you want to inactivate charge with id: {{ data.id }} ?</p>\n</div>\n<mat-dialog-actions align=\"end\">\n  <button mat-raised-button mat-dialog-close>Cancel</button>\n  <button mat-raised-button color=\"primary\" [mat-dialog-close]=\"{ confirm: true }\">Confirm</button>\n</mat-dialog-actions>\n","<div class=\"tab-container mat-typography\">\n\n  <div fxLayout=\"row\" fxLayoutAlign=\"start\">\n    <div class=\"m-b-10\">\n      <h3>All Charges</h3>\n    </div>\n    <div class=\"action-button m-b-20\" *ngIf=\"this.chargesData\">\n      <button mat-raised-button color=\"primary\" (click)=\"toggleCharges()\">\n        {{showInactiveCharges?'View Active Charges':'View Inactive Charges'}}</button>\n    </div>\n  </div>\n\n  <div class=\"mat-elevation-z1 m-b-25\">\n\n    <table mat-table #chargesTable [dataSource]=\"dataSource\" >\n\n      <ng-container matColumnDef=\"name\">\n        <th mat-header-cell *matHeaderCellDef> Name </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{ charge.name }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"feeOrPenalty\">\n        <th mat-header-cell *matHeaderCellDef> Fee/Penalty </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{ charge.penalty === true ? 'Penalty' : 'Fee' }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"paymentDueAt\">\n        <th mat-header-cell *matHeaderCellDef> Payment Due At </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{ charge.chargeTimeType.value }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"dueAsOf\">\n        <th mat-header-cell *matHeaderCellDef> Due As Of </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{ charge.dueDate  | dateFormat }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"repeatsOn\">\n        <th mat-header-cell *matHeaderCellDef> Repeats On (M/d) </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{ charge.feeOnMonthDay ? charge.feeOnMonthDay.join('/') : '' }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"calculationType\">\n        <th mat-header-cell *matHeaderCellDef> Calculation Type </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{charge.chargeCalculationType.value}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"due\">\n        <th mat-header-cell *matHeaderCellDef> Due </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{charge.currency.displaySymbol}}&nbsp;{{charge.amount}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"paid\">\n        <th mat-header-cell *matHeaderCellDef> Paid </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{charge.currency.displaySymbol}}&nbsp;{{charge.amountPaid}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"waived\">\n        <th mat-header-cell *matHeaderCellDef> Waived </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{charge.currency.displaySymbol}}&nbsp;{{charge.amountWaived}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"outstanding\">\n        <th mat-header-cell *matHeaderCellDef> Outstanding </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{charge.currency.displaySymbol}}&nbsp;{{charge.amountOutstanding}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef> Actions </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          <span *ngIf=\"savingsAccountData.status.value === 'Submitted and pending approval'\">\n            <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"Edit Charge\"\n              *mifosxHasPermission=\"'UPDATE_SAVINGSACCOUNTCHARGE'\" (click)=\"routeEdit($event); editCharge(charge)\">\n              <i class=\"fa fa-pencil\"></i>\n            </button>\n            <button class=\"account-action-button\" mat-raised-button color=\"warn\" matTooltip=\"Delete Charge\"\n              *mifosxHasPermission=\"'DELETE_SAVINGSACCOUNTCHARGE'\" (click)=\"routeEdit($event); deleteCharge(charge.id)\">\n              <i class=\"fa fa-trash\"></i>\n            </button>\n          </span>\n          <span *ngIf=\"savingsAccountData.status.value === 'Active' && charge.amountOutstanding !== 0\">\n            <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"Pay Charge\"\n              *mifosxHasPermission=\"'PAY_SAVINGSACCOUNTCHARGE'\" (click)=\"routeEdit($event); payCharge(charge.id)\">\n              <i class=\"fa fa-dollar\"></i>\n            </button>\n            <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"Waive Charge\"\n              *mifosxHasPermission=\"'WAIVE_SAVINGSACCOUNTCHARGE'\" (click)=\"routeEdit($event); waiveCharge(charge.id)\">\n              <i class=\"fa fa-flag\"></i>\n            </button>\n            <ng-container *ngIf=\"isRecurringCharge(charge)\">\n              <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"Inactivate Charge\"\n                *mifosxHasPermission=\"'INACTIVATE_SAVINGSACCOUNTCHARGE'\" (click)=\"routeEdit($event); inactivateCharge(charge.id)\">\n                <i class=\"fa fa-ban\"></i>\n              </button>\n            </ng-container>\n          </span>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" class=\"select-row\" [routerLink]=\"[row.id]\"></tr>\n\n    </table>\n\n  </div>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatTableDataSource, MatTable } from '@angular/material/table';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Custom Dialogs */\nimport { FormDialogComponent } from 'app/shared/form-dialog/form-dialog.component';\nimport { WaiveChargeDialogComponent } from '../custom-dialogs/waive-charge-dialog/waive-charge-dialog.component';\nimport { InactivateChargeDialogComponent } from '../custom-dialogs/inactivate-charge-dialog/inactivate-charge-dialog.component';\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\n\n/** Custom Models */\nimport { FormfieldBase } from 'app/shared/form-dialog/formfield/model/formfield-base';\nimport { InputBase } from 'app/shared/form-dialog/formfield/model/input-base';\nimport { DatepickerBase } from 'app/shared/form-dialog/formfield/model/datepicker-base';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Charges Tab Component\n */\n@Component({\n  selector: 'mifosx-charges-tab',\n  templateUrl: './charges-tab.component.html',\n  styleUrls: ['./charges-tab.component.scss']\n})\nexport class ChargesTabComponent implements OnInit {\n\n  /** Savings Account Data */\n  savingsAccountData: any;\n  /** Charges Data */\n  chargesData: any[];\n  /** Data source for charges table. */\n  dataSource: MatTableDataSource<any>;\n  /** Toggles Charges Table */\n  showInactiveCharges = false;\n  /** Columns to be displayed in charges table. */\n  displayedColumns: string[] = [\n    'name',\n    'feeOrPenalty',\n    'paymentDueAt',\n    'dueAsOf',\n    'repeatsOn',\n    'calculationType',\n    'due',\n    'paid',\n    'waived',\n    'outstanding',\n    'actions'\n  ];\n\n  /** Charges Table Reference */\n  @ViewChild('chargesTable', { static: true }) chargesTableRef: MatTable<Element>;\n\n  /**\n   * Retrieves the Savings account data from `resolve`.\n   * @param {SavingsService} savingsService Savings Service\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   * @param {MatDialog} dialog Dialog reference.\n   * @param {Dates} dateUtils Date Utils.\n   * @param {SettingsService} settingsService Setting service\n   */\n  constructor(private savingsService: SavingsService,\n              private route: ActivatedRoute,\n              private dateUtils: Dates,\n              private router: Router,\n              public dialog: MatDialog,\n              private settingsService: SettingsService) {\n    this.route.parent.data.subscribe((data: { savingsAccountData: any }) => {\n      this.savingsAccountData = data.savingsAccountData;\n      this.chargesData = this.savingsAccountData.charges;\n    });\n  }\n\n  ngOnInit() {\n    const activeCharges = this.chargesData ? this.chargesData.filter(charge => charge.isActive) : [];\n    this.dataSource = new MatTableDataSource(activeCharges);\n  }\n\n  /**\n   * Toggles datasource for active/inactive charges.\n   */\n  toggleCharges() {\n    this.showInactiveCharges = !this.showInactiveCharges;\n    if (!this.showInactiveCharges) {\n      const activeCharges = this.chargesData.filter(charge => charge.isActive);\n      this.dataSource.data = activeCharges;\n    } else {\n      const inActiveCharges = this.chargesData.filter(charge => !charge.isActive);\n      this.dataSource.data = inActiveCharges;\n    }\n    this.chargesTableRef.renderRows();\n  }\n\n\n  /**\n   * Pays the charge.\n   * @param {any} chargeId Charge Id\n   */\n  payCharge(chargeId: any) {\n    const formfields: FormfieldBase[] = [\n      new InputBase({\n        controlName: 'amount',\n        label: 'Amount',\n        value: '',\n        type: 'number',\n        required: true\n      }),\n      new DatepickerBase({\n        controlName: 'dueDate',\n        label: 'Payment Date',\n        value: '',\n        type: 'date',\n        required: true\n      })\n    ];\n    const data = {\n      title: `Pay Charge ${chargeId}`,\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const payChargeDialogRef = this.dialog.open(FormDialogComponent, { data });\n    payChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const locale = this.settingsService.language.code;\n        const dateFormat = this.settingsService.dateFormat;\n        const dataObject = {\n          ...response.data.value,\n          dueDate: this.dateUtils.formatDate(response.data.value.dueDate, dateFormat),\n          dateFormat,\n          locale\n        };\n        this.savingsService.executeSavingsAccountChargesCommand(this.savingsAccountData.id, 'paycharge', dataObject, chargeId)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Waive's the charge\n   * @param {any} chargeId Charge Id\n   */\n  waiveCharge(chargeId: any) {\n    const waiveChargeDialogRef = this.dialog.open(WaiveChargeDialogComponent, { data: { id: chargeId } });\n    waiveChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.savingsService.executeSavingsAccountChargesCommand(this.savingsAccountData.id, 'waive', {}, chargeId)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Inactivate's the charge\n   * @param {any} chargeId Charge Id\n   */\n  inactivateCharge(chargeId: any) {\n    const inactivateChargeDialogRef = this.dialog.open(InactivateChargeDialogComponent, { data: { id: chargeId } });\n    inactivateChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.savingsService.executeSavingsAccountChargesCommand(this.savingsAccountData.id, 'inactivate', {}, chargeId)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Edits the charge\n   * @param {any} charge Charge\n   */\n  editCharge(charge: any) {\n    const formfields: FormfieldBase[] = [\n      new InputBase({\n        controlName: 'amount',\n        label: 'Amount',\n        value: charge.amount || charge.amountOrPercentage,\n        type: 'number',\n        required: true\n      })\n    ];\n    const data = {\n      title: `Edit Charge ${charge.id}`,\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editChargeDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const locale = this.settingsService.language.code;\n        const dateFormat = this.settingsService.dateFormat;\n        const dataObject = {\n          ...response.data.value,\n          dateFormat,\n          locale\n        };\n        this.savingsService.editSavingsAccountCharge(this.savingsAccountData.id, dataObject, charge.id)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Deletes the charge\n   * @param {any} chargeId Charge Id\n   */\n  deleteCharge(chargeId: any) {\n    const deleteChargeDialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `charge id:${chargeId}` }\n    });\n    deleteChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        this.savingsService.deleteSavingsAccountCharge(this.savingsAccountData.id, chargeId)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Checks if charge is recurring.\n   * @param {any} charge Charge\n   */\n  isRecurringCharge(charge: any) {\n    return charge.chargeTimeType.value === 'Monthly Fee' || charge.chargeTimeType.value === 'Annual Fee' || charge.chargeTimeType.value === 'Weekly Fee';\n  }\n\n  /**\n   * Stops the propagation to view charge page.\n   * @param $event Mouse Event\n   */\n  routeEdit($event: MouseEvent) {\n    $event.stopPropagation();\n  }\n\n  /**\n   * Refetches data fot the component\n   * TODO: Replace by a custom reload component instead of hard-coded back-routing.\n   */\n  private reload() {\n    const url: string = this.router.url;\n    const refreshUrl: string = this.router.url.slice(0, this.router.url.indexOf('savings-accounts') + 'savings-accounts'.length);\n    this.router.navigateByUrl(refreshUrl, {skipLocationChange: true})\n      .then(() => this.router.navigate([url]));\n  }\n\n}\n","<div class=\"tab-container mat-typography\">\n\n  <div class=\"m-b-10\">\n    <h3>All Standing Instructions</h3>\n  </div>\n\n  <div class=\"mat-elevation-z1 m-b-25\">\n\n    <table mat-table #instructionsTable [dataSource]=\"dataSource\">\n\n      <ng-container matColumnDef=\"client\">\n        <th mat-header-cell *matHeaderCellDef> Client </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.fromClient.displayName}}-{{instruction.fromClient.id}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"fromAccount\">\n        <th mat-header-cell *matHeaderCellDef> From Account </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.fromAccount.accountNo}} ({{instruction.fromAccountType.value}})</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"beneficiary\">\n        <th mat-header-cell *matHeaderCellDef> Beneficiary </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.toClient.displayName}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"toAccount\">\n        <th mat-header-cell *matHeaderCellDef> To Account </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.toAccount.accountNo}} ({{instruction.toAccountType.value}})</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"amount\">\n        <th mat-header-cell *matHeaderCellDef> Amount </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.instructionType.value}}/{{instruction.amount}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"validity\">\n        <th mat-header-cell *matHeaderCellDef> Validity </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.validFrom  | dateFormat}} to {{instruction.validTill  | dateFormat}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef> Actions </th>\n        <td mat-cell *matCellDef=\"let instruction\">\n          <span *ngIf=\"instruction.status.value!=='Deleted'\">\n            <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"Edit Standing Instruction\"\n              *mifosxHasPermission=\"'UPDATE_STANDINGINSTRUCTION'\">\n              <i class=\"fa fa-edit\"></i>\n            </button>\n          </span>\n          <span *ngIf=\"instruction.status.value!=='Deleted'\">\n            <button class=\"account-action-button\" mat-raised-button color=\"warn\" matTooltip=\"Delete Standing Instruction\"\n              *mifosxHasPermission=\"'DELETE_STANDINGINSTRUCTION'\" (click)=\"deleteStandingInstruction(instruction.id)\">\n              <i class=\"fa fa-times\"></i>\n            </button>\n          </span>\n          <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"View Standing Instruction\"\n            *mifosxHasPermission=\"'READ_STANDINGINSTRUCTION'\">\n            <i class=\"fa fa-eye\"></i>\n          </button>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n    </table>\n\n  </div>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatTableDataSource, MatTable } from '@angular/material/table';\nimport { ActivatedRoute } from '@angular/router';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { AccountTransfersService } from 'app/account-transfers/account-transfers.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Dialog Components */\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\n\n/**\n * Savings Standing Instructions Tab\n */\n@Component({\n  selector: 'mifosx-standing-instructions-tab',\n  templateUrl: './standing-instructions-tab.component.html',\n  styleUrls: ['./standing-instructions-tab.component.scss']\n})\nexport class StandingInstructionsTabComponent implements OnInit {\n\n  /** Savings Data */\n  savingsData: any;\n  /** Instructions Data */\n  instructionsData: any[];\n  /** Data source for instructions table. */\n  dataSource = new MatTableDataSource();\n  /** Columns to be displayed in instructions table. */\n  displayedColumns: string[] = [\n    'client',\n    'fromAccount',\n    'beneficiary',\n    'toAccount',\n    'amount',\n    'validity',\n    'actions'\n  ];\n\n  /** Instruction Table Reference */\n  @ViewChild('instructionsTable', { static: true }) instructionTableRef: MatTable<Element>;\n\n  /**\n   * Retrieves Savings Account Data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {SettingsService} settingsService Setting service\n   */\n  constructor(private route: ActivatedRoute,\n              private savingsService: SavingsService,\n              private dialog: MatDialog,\n              private accountTransfersService: AccountTransfersService,\n              private settingsService: SettingsService) {\n    this.route.parent.data.subscribe((data: { savingsAccountData: any }) => {\n      this.savingsData = data.savingsAccountData;\n    });\n  }\n\n  ngOnInit() {\n    this.getStandingInstructions();\n  }\n\n  /**\n   * Retrieves standing instructions and initializes instructions table.\n   */\n  getStandingInstructions() {\n    const clientId = this.savingsData.clientId;\n    const clientName = this.savingsData.clientName;\n    const accountId = this.savingsData.id;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    this.savingsService.getStandingInstructions(clientId, clientName, accountId, locale, dateFormat).subscribe((response: any) => {\n      this.instructionsData = response.pageItems;\n      this.dataSource.data = this.instructionsData;\n      this.instructionTableRef.renderRows();\n    });\n  }\n\n  deleteStandingInstruction(instructionId: any) {\n    const deleteStandingInstructionDialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `standing instruction id: ${instructionId}` }\n    });\n    deleteStandingInstructionDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        this.accountTransfersService.deleteStandingInstrucions(instructionId)\n          .subscribe(() => { });\n      }\n    });\n  }\n\n}\n","/** Angular Imports */\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n/**\n * Savings Datatable Tabs Component\n */\n@Component({\n  selector: 'mifosx-datatable-tabs',\n  templateUrl: './datatable-tabs.component.html',\n  styleUrls: ['./datatable-tabs.component.scss']\n})\nexport class DatatableTabsComponent {\n  entityId: string;\n  /** Savings Datatable */\n  entityDatatable: any;\n  /** Multi Row Datatable Flag */\n  multiRowDatatableFlag: boolean;\n\n  /**\n   * Fetches Savings and datatables data from `resolve`\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute) {\n    this.entityId = this.route.parent.parent.snapshot.paramMap.get('savingAccountId');\n\n    this.route.data.subscribe((data: { savingsDatatable: any }) => {\n      this.entityDatatable = data.savingsDatatable;\n      this.multiRowDatatableFlag = this.entityDatatable.columnHeaders[0].columnName === 'id' ? true : false;\n    });\n  }\n\n}\n","<div class=\"tab-container mat-typography\">\n  <mifosx-entity-datatable-tab\n    entityType=\"Savings\"\n    [entityId]=\"entityId\"\n    [multiRowDatatableFlag]=\"multiRowDatatableFlag\"\n    [entityDatatable]=\"entityDatatable\"\n  >\n  </mifosx-entity-datatable-tab>\n</div>\n","<form [formGroup]=\"savingsAccountDetailsForm\">\n\n  <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Product Name</mat-label>\n      <mat-select formControlName=\"productId\" required>\n        <mat-option *ngFor=\"let product of productData\" [value]=\"product.id\">\n          {{ product.name }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Product Name is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\" (click)=\"submittedOnDatePicker.open()\" *ngIf=\"savingsProductSelected\">\n      <mat-label>Submitted On</mat-label>\n      <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"submittedOnDatePicker\"\n        formControlName=\"submittedOnDate\" required>\n      <mat-datepicker-toggle matSuffix [for]=\"submittedOnDatePicker\"></mat-datepicker-toggle>\n      <mat-datepicker #submittedOnDatePicker></mat-datepicker>\n      <mat-error>\n        Submission Date is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\" *ngIf=\"savingsProductSelected\">\n      <mat-label>Field Officer</mat-label>\n      <mat-select formControlName=\"fieldOfficerId\">\n        <mat-option *ngFor=\"let officer of fieldOfficerData\" [value]=\"officer.id\">\n          {{ officer.displayName }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\" *ngIf=\"savingsProductSelected\">\n      <mat-label>External ID</mat-label>\n      <input matInput formControlName=\"externalId\">\n    </mat-form-field>\n\n  </div>\n\n  <div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n    <button mat-raised-button matStepperPrevious disabled>\n      <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n      Previous\n    </button>\n    <button mat-raised-button matStepperNext>\n      Next&nbsp;&nbsp;\n      <fa-icon icon=\"arrow-right\"></fa-icon>\n    </button>\n  </div>\n\n</form>\n","/** Angular Imports */\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Savings Account Details Step\n */\n@Component({\n  selector: 'mifosx-savings-account-details-step',\n  templateUrl: './savings-account-details-step.component.html',\n  styleUrls: ['./savings-account-details-step.component.scss']\n})\nexport class SavingsAccountDetailsStepComponent implements OnInit {\n\n  /** Savings Account Template */\n  @Input() savingsAccountTemplate: any;\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Product Data */\n  productData: any;\n  /** Field Officer Data */\n  fieldOfficerData: any;\n  /** For edit savings form */\n  isFieldOfficerPatched = false;\n  /** Savings Account Details Form */\n  savingsAccountDetailsForm: FormGroup;\n\n  savingsProductSelected = false;\n\n  /** Savings Account Template with product data  */\n  @Output() savingsAccountProductTemplate = new EventEmitter();\n\n  /**\n   * Sets share account details form.\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {SavingsService} savingsService Savings Service.\n   * @param {SettingsService} settingsService Setting service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private savingsService: SavingsService,\n              private settingsService: SettingsService) {\n    this.createSavingsAccountDetailsForm();\n  }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.buildDependencies();\n    if (this.savingsAccountTemplate) {\n      this.productData = this.savingsAccountTemplate.productOptions;\n      if (this.savingsAccountTemplate.savingsProductId) {\n        this.savingsAccountDetailsForm.patchValue({\n          'productId': this.savingsAccountTemplate.savingsProductId,\n          'submittedOnDate': this.savingsAccountTemplate.timeline.submittedOnDate && new Date(this.savingsAccountTemplate.timeline.submittedOnDate),\n          'externalId': this.savingsAccountTemplate.externalId\n        });\n      } else {\n        this.savingsAccountDetailsForm.patchValue({\n          'submittedOnDate': new Date()\n        });\n      }\n    }\n  }\n\n  /**\n   * Creates savings account details form.\n   */\n  createSavingsAccountDetailsForm() {\n    this.savingsAccountDetailsForm = this.formBuilder.group({\n      'productId': ['', Validators.required],\n      'submittedOnDate': ['', Validators.required],\n      'fieldOfficerId': [''],\n      'externalId': ['']\n    });\n  }\n\n  /**\n   * Fetches savings account product template on productId value changes\n   */\n  buildDependencies() {\n    const entityId = this.savingsAccountTemplate.clientId || this.savingsAccountTemplate.groupId;\n    this.savingsAccountDetailsForm.get('productId').valueChanges.subscribe((productId: string) => {\n      this.savingsService.getSavingsAccountTemplate(entityId, productId, this.savingsAccountTemplate.groupId ? true : false)\n      .subscribe((response: any) => {\n        this.savingsAccountProductTemplate.emit(response);\n        this.fieldOfficerData = response.fieldOfficerOptions;\n        this.savingsProductSelected = true;\n        if (!this.isFieldOfficerPatched && this.savingsAccountTemplate.fieldOfficerId) {\n          this.savingsAccountDetailsForm.get('fieldOfficerId').patchValue(this.savingsAccountTemplate.fieldOfficerId);\n          this.isFieldOfficerPatched = true;\n        } else {\n          this.savingsAccountDetailsForm.get('fieldOfficerId').patchValue('');\n        }\n      });\n    });\n  }\n\n  /**\n   * Returns savings account form value.\n   */\n  get savingsAccountDetails() {\n    return this.savingsAccountDetailsForm.getRawValue();\n  }\n\n}\n","<form [formGroup]=\"savingsAccountTermsForm\">\n\n  <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\" fxLayoutAlign.gt-sm=\"start center\">\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Currency</mat-label>\n      <input matInput formControlName=\"currencyCode\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Decimal Places</mat-label>\n      <input type=\"number\" matInput formControlName=\"decimal\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Nominal Annual Interest Rate</mat-label>\n      <input type=\"number\" matInput formControlName=\"nominalAnnualInterestRate\" required>\n      <mat-error>\n        Nominal Annual Interest is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Interest Compounding Period</mat-label>\n      <mat-select formControlName=\"interestCompoundingPeriodType\" required>\n        <mat-option *ngFor=\"let interestCompoundingPeriodType of interestCompoundingPeriodTypeData\" [value]=\"interestCompoundingPeriodType.id\">\n          {{ interestCompoundingPeriodType.value }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Interest Compounding Period is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Interest Posting Period</mat-label>\n      <mat-select formControlName=\"interestPostingPeriodType\" required>\n        <mat-option *ngFor=\"let interestPostingPeriodType of interestPostingPeriodTypeData\" [value]=\"interestPostingPeriodType.id\">\n          {{ interestPostingPeriodType.value }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Interest Posting Period is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Interest Calculated using</mat-label>\n      <mat-select formControlName=\"interestCalculationType\" required>\n        <mat-option *ngFor=\"let interestCalculationType of interestCalculationTypeData\" [value]=\"interestCalculationType.id\">\n          {{ interestCalculationType.value }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Interest Calculated using is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Days in Year</mat-label>\n      <mat-select formControlName=\"interestCalculationDaysInYearType\" required>\n        <mat-option *ngFor=\"let interestCalculationDaysInYearType of interestCalculationDaysInYearTypeData\" [value]=\"interestCalculationDaysInYearType.id\">\n          {{ interestCalculationDaysInYearType.value }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Days in Year is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Minimum Opening Balance</mat-label>\n      <input type=\"number\" matInput formControlName=\"minRequiredOpeningBalance\">\n    </mat-form-field>\n\n    <mat-checkbox fxFlex=\"48%\" labelPosition=\"before\" formControlName=\"withdrawalFeeForTransfers\" class=\"margin-v\">\n      Apply Withdrawal Fee for Transfers\n    </mat-checkbox>\n\n    <h4 fxFlex=\"98%\" class=\"mat-h4\">Lock-in Period</h4>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Frequency</mat-label>\n      <input type=\"number\" matInput formControlName=\"lockinPeriodFrequency\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Type</mat-label>\n      <mat-select formControlName=\"lockinPeriodFrequencyType\">\n        <mat-option *ngFor=\"let lockinPeriodFrequencyType of lockinPeriodFrequencyTypeData\" [value]=\"lockinPeriodFrequencyType.id\">\n          {{ lockinPeriodFrequencyType.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-divider fxFlex=\"98%\"></mat-divider>\n\n    <h3 fxFlex=\"23%\" class=\"mat-h3\">Overdraft</h3>\n\n    <mat-checkbox fxFlex=\"73%\" labelPosition=\"before\" formControlName=\"allowOverdraft\" class=\"margin-b\">\n      Is Overdraft Allowed?\n    </mat-checkbox>\n\n    <div *ngIf=\"savingsAccountTermsForm.value.allowOverdraft\" fxFlexFill fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n      <mat-form-field fxFlex=\"31%\">\n        <mat-label>Minimum Overdraft Required for Interest Calculation</mat-label>\n        <input type=\"number\" matInput formControlName=\"minOverdraftForInterestCalculation\">\n      </mat-form-field>\n\n      <mat-form-field fxFlex=\"31%\">\n        <mat-label>Nominal Annual Interest for Overdraft</mat-label>\n        <input type=\"number\" matInput formControlName=\"nominalAnnualInterestRateOverdraft\">\n      </mat-form-field>\n\n      <mat-form-field fxFlex=\"31%\">\n        <mat-label>Maximum Overdraft Amount Limit</mat-label>\n        <input type=\"number\" matInput formControlName=\"overdraftLimit\">\n      </mat-form-field>\n\n    </div>\n\n    <mat-divider fxFlex=\"98%\"></mat-divider>\n\n    <mat-checkbox fxFlex=\"48%\" labelPosition=\"before\" formControlName=\"enforceMinRequiredBalance\" class=\"margin-v\">\n      Enforce Minimum Balance\n    </mat-checkbox>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Minimum Balance</mat-label>\n      <input type=\"number\" matInput formControlName=\"minRequiredBalance\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\" *ngIf=\"savingsAccountTermsForm.controls.minBalanceForInterestCalculation.value\">\n      <mat-label>Balance Required for Interest Calculation</mat-label>\n      <input type=\"number\" matInput formControlName=\"minBalanceForInterestCalculation\">\n    </mat-form-field>\n\n  </div>\n\n  <div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n    <button mat-raised-button matStepperPrevious disabled>\n      <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n      Previous\n    </button>\n    <button mat-raised-button matStepperNext>\n      Next&nbsp;&nbsp;\n      <fa-icon icon=\"arrow-right\"></fa-icon>\n    </button>\n  </div>\n\n</form>\n","/** Angular Imports */\nimport { Component, OnChanges, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Savings Account Terms Step\n */\n@Component({\n  selector: 'mifosx-savings-account-terms-step',\n  templateUrl: './savings-account-terms-step.component.html',\n  styleUrls: ['./savings-account-terms-step.component.scss']\n})\nexport class SavingsAccountTermsStepComponent implements OnChanges, OnInit {\n\n  /** Savings Account and Product Template */\n  @Input() savingsAccountProductTemplate: any;\n  /** Savings Account Template */\n  @Input() savingsAccountTemplate: any;\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Savings Account Terms Form */\n  savingsAccountTermsForm: FormGroup;\n  /** Lockin Period Frequency Type Data */\n  lockinPeriodFrequencyTypeData: any;\n  /** Interest Compounding Period Type Data */\n  interestCompoundingPeriodTypeData: any;\n  /** Interest Posting Period Type Data */\n  interestPostingPeriodTypeData: any;\n  /** Interest Calculation Type Data */\n  interestCalculationTypeData: any;\n  /** Interest Calculation Days in Year Data */\n  interestCalculationDaysInYearTypeData: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SettingsService} settingsService Setting service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private settingsService: SettingsService) {\n    this.createSavingsAccountTermsForm();\n    this.buildDependencies();\n  }\n\n  ngOnChanges() {\n    if (this.savingsAccountProductTemplate) {\n      this.savingsAccountTermsForm.patchValue({\n        'currencyCode': this.savingsAccountProductTemplate.currency.code,\n        'decimal': this.savingsAccountProductTemplate.currency.decimalPlaces,\n        'minBalanceForInterestCalculation': this.savingsAccountProductTemplate.minBalanceForInterestCalculation,\n        'nominalAnnualInterestRate': this.savingsAccountProductTemplate.nominalAnnualInterestRate,\n        'interestCompoundingPeriodType': this.savingsAccountProductTemplate.interestCompoundingPeriodType.id,\n        'interestPostingPeriodType': this.savingsAccountProductTemplate.interestPostingPeriodType.id,\n        'interestCalculationType': this.savingsAccountProductTemplate.interestCalculationType.id,\n        'interestCalculationDaysInYearType': this.savingsAccountProductTemplate.interestCalculationDaysInYearType.id,\n        'minRequiredOpeningBalance': this.savingsAccountProductTemplate.minRequiredOpeningBalance,\n        'allowOverdraft': this.savingsAccountProductTemplate.allowOverdraft,\n        'overdraftLimit': this.savingsAccountProductTemplate.overdraftLimit,\n        'enforceMinRequiredBalance': this.savingsAccountProductTemplate.enforceMinRequiredBalance,\n        'minOverdraftForInterestCalculation': this.savingsAccountProductTemplate.minOverdraftForInterestCalculation,\n        'nominalAnnualInterestRateOverdraft': this.savingsAccountProductTemplate.nominalAnnualInterestRateOverdraft,\n        'minRequiredBalance': this.savingsAccountProductTemplate.minRequiredBalance,\n        'withdrawalFeeForTransfers': this.savingsAccountProductTemplate.withdrawalFeeForTransfers\n      });\n      this.setOptions();\n    }\n  }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    if (this.savingsAccountTemplate) {\n      this.savingsAccountTermsForm.patchValue({\n        'nominalAnnualInterestRate': this.savingsAccountTemplate.nominalAnnualInterestRate,\n        'interestCompoundingPeriodType': this.savingsAccountTemplate.interestCompoundingPeriodType.id,\n        'interestPostingPeriodType': this.savingsAccountTemplate.interestPostingPeriodType.id,\n        'interestCalculationType': this.savingsAccountTemplate.interestCalculationType.id,\n        'interestCalculationDaysInYearType': this.savingsAccountTemplate.interestCalculationDaysInYearType.id,\n        'minRequiredOpeningBalance': this.savingsAccountTemplate.minRequiredOpeningBalance,\n        'withdrawalFeeForTransfers': this.savingsAccountTemplate.withdrawalFeeForTransfers,\n        'lockinPeriodFrequency': this.savingsAccountTemplate.lockinPeriodFrequency,\n        'lockinPeriodFrequencyType': this.savingsAccountTemplate.lockinPeriodFrequencyType && this.savingsAccountTemplate.lockinPeriodFrequencyType.id,\n        'allowOverdraft': this.savingsAccountTemplate.allowOverdraft,\n        'enforceMinRequiredBalance': this.savingsAccountTemplate.enforceMinRequiredBalance,\n        'minRequiredBalance': this.savingsAccountTemplate.minRequiredBalance,\n      });\n    }\n  }\n\n  /**\n   * Creates savings account terms form.\n   */\n  createSavingsAccountTermsForm() {\n    this.savingsAccountTermsForm = this.formBuilder.group({\n      'currencyCode': [{value: '', disabled: true}],\n      'decimal': [{value: '',  disabled: true}],\n      'nominalAnnualInterestRate': ['', Validators.required],\n      'interestCompoundingPeriodType': ['', Validators.required],\n      'interestPostingPeriodType': ['', Validators.required],\n      'interestCalculationType': ['', Validators.required],\n      'interestCalculationDaysInYearType': ['', Validators.required],\n      'minRequiredOpeningBalance': [''],\n      'withdrawalFeeForTransfers': [false],\n      'lockinPeriodFrequency': [''],\n      'lockinPeriodFrequencyType': [''],\n      'allowOverdraft': [false],\n      'enforceMinRequiredBalance': [false],\n      'minRequiredBalance': [''],\n      'minBalanceForInterestCalculation': [{value: '', disabled: true}]\n    });\n  }\n\n  /**\n   * Sets all select dropdown options.\n   */\n  setOptions() {\n    this.lockinPeriodFrequencyTypeData = this.savingsAccountProductTemplate.lockinPeriodFrequencyTypeOptions;\n    this.interestCompoundingPeriodTypeData = this.savingsAccountProductTemplate.interestCompoundingPeriodTypeOptions;\n    this.interestPostingPeriodTypeData = this.savingsAccountProductTemplate.interestPostingPeriodTypeOptions;\n    this.interestCalculationTypeData = this.savingsAccountProductTemplate.interestCalculationTypeOptions;\n    this.interestCalculationDaysInYearTypeData = this.savingsAccountProductTemplate.interestCalculationDaysInYearTypeOptions;\n  }\n\n  /**\n   * Subscribes to value changes and sets new form controls accordingly.\n   */\n  buildDependencies() {\n    this.savingsAccountTermsForm.get('allowOverdraft').valueChanges.subscribe((allowOverdraft: any) => {\n      if (allowOverdraft) {\n        this.savingsAccountTermsForm.addControl('minOverdraftForInterestCalculation', new FormControl(''));\n        this.savingsAccountTermsForm.addControl('nominalAnnualInterestRateOverdraft', new FormControl(''));\n        this.savingsAccountTermsForm.addControl('overdraftLimit', new FormControl(''));\n      } else {\n        this.savingsAccountTermsForm.removeControl('minOverdraftForInterestCalculation');\n        this.savingsAccountTermsForm.removeControl('nominalAnnualInterestRateOverdraft');\n        this.savingsAccountTermsForm.removeControl('overdraftLimit');\n      }\n    });\n  }\n\n  /**\n   * Returns savings account terms form value.\n   */\n  get savingsAccountTerms() {\n    const payload = this.savingsAccountTermsForm.getRawValue();\n    delete payload.currencyCode;\n    delete payload.decimal;\n    return payload;\n  }\n\n}\n","<div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n  <mat-form-field fxFlex=\"48%\">\n    <mat-label>Charge</mat-label>\n    <mat-select #charge>\n      <mat-option *ngFor=\"let charge of chargeData | chargesFilter:chargesDataSource:currencyCode.value\"\n        [value]=\"charge\">\n        {{ charge.name }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n\n  <div fxFlex=\"48%\" fxFlexAlign=\"center\">\n    <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"addCharge(charge)\" [disabled]=\"!charge.value\">\n      <fa-icon icon=\"plus\" class=\"m-r-10\"></fa-icon>\n      Add\n    </button>\n  </div>\n\n  <table fxFlex=\"98%\" class=\"mat-elevation-z1\" mat-table [dataSource]=\"chargesDataSource\"\n    *ngIf=\"chargesDataSource.length > 0\">\n\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef> Name </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.name + ', ' + charge.currency.displaySymbol }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"chargeCalculationType\">\n      <th mat-header-cell *matHeaderCellDef> Type </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.chargeCalculationType.value }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"amount\">\n      <th mat-header-cell *matHeaderCellDef> Amount </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.amount }}\n        <button mat-icon-button color=\"primary\" (click)=\"editChargeAmount(charge)\">\n          <fa-icon icon=\"pen\"></fa-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"chargeTimeType\">\n      <th mat-header-cell *matHeaderCellDef> Collected On </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.chargeTimeType.value }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"date\">\n      <th mat-header-cell *matHeaderCellDef> Date </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        <span\n          *ngIf=\"charge.chargeTimeType.value === 'Specified due date' || charge.chargeTimeType.value === 'Weekly Fee'\">\n          {{(charge.dueDate | dateFormat) || 'Unassigned'}}\n        </span>\n        <span *ngIf=\"charge.chargeTimeType.value === 'Monthly Fee' || charge.chargeTimeType.value === 'Annual Fee'\">\n          {{(charge.feeOnMonthDay | dateFormat) || 'Unassigned'}}\n        </span>\n        <span *ngIf=\"!(charge.chargeTimeType.value === 'Monthly Fee' || charge.chargeTimeType.value === 'Annual Fee'\n            || charge.chargeTimeType.value === 'Specified due date' || charge.chargeTimeType.value === 'Weekly Fee')\">\n          N/A\n        </span>\n        <button mat-icon-button color=\"primary\" *ngIf=\"charge.chargeTimeType.value === 'Weekly Fee' || charge.chargeTimeType.value === 'Annual Fee'\n                  || charge.chargeTimeType.value === 'Specified due date'\" (click)=\"editChargeDate(charge)\">\n          <fa-icon icon=\"pen\"></fa-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"repaymentsEvery\">\n      <th mat-header-cell *matHeaderCellDef> Repayments Every </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.feeInterval || 'Not Provided' }}\n        <button mat-icon-button color=\"primary\"\n          *ngIf=\"charge.chargeTimeType.value === 'Weekly Fee' || charge.chargeTimeType.value === 'Monthly Fee'\"\n          (click)=\"editChargeFeeInterval(charge)\">\n          <fa-icon icon=\"pen\"></fa-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"action\">\n      <th mat-header-cell *matHeaderCellDef> Actions </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        <button mat-icon-button color=\"warn\" (click)=\"deleteCharge(charge)\">\n          <fa-icon icon=\"trash\"></fa-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n  </table>\n\n  <div fxFlex=\"98%\" *ngIf=\"activeClientMembers\">\n    <table fxFlex=\"98%\" mat-table [dataSource]=\"dataSource\">\n\n      <!-- Check Column -->\n      <ng-container matColumnDef=\"check\">\n          <th mat-header-cell *matHeaderCellDef>\n              <mat-checkbox (change)=\"toggleSelects()\" [(ngModel)]=\"selectAllItems\"></mat-checkbox>\n          </th>\n          <td mat-cell *matCellDef=\"let element\">\n              <mat-checkbox (change)=\"toggleSelect()\" [(ngModel)]=\"element.selected\"></mat-checkbox>\n          </td>\n      </ng-container>\n\n      <!-- Position Column -->\n      <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef> Client ID </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n      </ng-container>\n\n      <!-- Name Column -->\n      <ng-container matColumnDef=\"name\">\n        <th mat-header-cell *matHeaderCellDef> Client Name </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.displayName}} </td>\n      </ng-container>\n\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumn\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumn;\"></tr>\n    </table>\n  </div>\n\n\n</div>\n\n<div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n  <button mat-raised-button matStepperPrevious>\n    <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n    Previous\n  </button>\n  <button mat-raised-button matStepperNext>\n    Next&nbsp;&nbsp;\n    <fa-icon icon=\"arrow-right\"></fa-icon>\n  </button>\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, OnChanges, Input } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { FormControl } from '@angular/forms';\n\n/** Custom Dialogs */\nimport { FormDialogComponent } from 'app/shared/form-dialog/form-dialog.component';\n\n/** Custom Models */\nimport { FormfieldBase } from 'app/shared/form-dialog/formfield/model/formfield-base';\nimport { InputBase } from 'app/shared/form-dialog/formfield/model/input-base';\nimport { DatepickerBase } from 'app/shared/form-dialog/formfield/model/datepicker-base';\nimport { Dates } from 'app/core/utils/dates';\nimport { MatTableDataSource } from '@angular/material/table';\n\n/**\n * Savings Account Charges Step\n */\n@Component({\n  selector: 'mifosx-savings-account-charges-step',\n  templateUrl: './savings-account-charges-step.component.html',\n  styleUrls: ['./savings-account-charges-step.component.scss']\n})\nexport class SavingsAccountChargesStepComponent implements OnInit, OnChanges {\n\n  /** Savings Account Product Template */\n  @Input() savingsAccountProductTemplate: any;\n  /** Savings Account Template */\n  @Input() savingsAccountTemplate: any;\n  /** Currency Code */\n  @Input() currencyCode: FormControl;\n  /** active Client Members in case of GSIM Account */\n  @Input() activeClientMembers?: any;\n\n  /** Charge Data */\n  chargeData: any = [];\n  /** Charges Data Source */\n  chargesDataSource: {}[] = [];\n  /** Component is pristine if there has been no changes by user interaction */\n  pristine = true;\n  /** For Edit Savings Account Form */\n  isChargesPatched = false;\n  /** Display columns for charges table */\n  displayedColumns: string[] = ['name', 'chargeCalculationType', 'amount', 'chargeTimeType', 'date', 'repaymentsEvery', 'action'];\n  /** Table Data Source */\n  dataSource: any;\n  /** Check for select all the Clients List */\n  selectAllItems = false;\n  /** Loan Purpose Options */\n  loanPurposeOptions: string[] = [];\n  /** Table Displayed Columns */\n  displayedColumn: string[] = ['check', 'id', 'name'];\n\n\n  /**\n   * @param {MatDialog} dialog Mat Dialog\n   */\n  constructor(public dialog: MatDialog,\n              private dateUtils: Dates) {}\n\n   ngOnInit() {\n    if (this.savingsAccountTemplate) {\n      if (!this.isChargesPatched && this.savingsAccountTemplate.charges) {\n        this.chargesDataSource = this.savingsAccountProductTemplate.charges.map((charge: any) => ({...charge, id: charge.chargeId})) || [];\n        this.isChargesPatched = true;\n      } else {\n        this.chargesDataSource = [];\n      }\n      this.dataSource = new MatTableDataSource<any>(this.activeClientMembers);\n    }\n   }\n\n   ngOnChanges() {\n    if (this.savingsAccountProductTemplate) {\n      this.chargeData = this.savingsAccountProductTemplate.chargeOptions;\n      this.chargesDataSource = this.savingsAccountProductTemplate.charges.map((charge: any) => ({...charge, id: charge.chargeId})) || [];\n    }\n   }\n\n  /**\n   * Adds the charge to charges table\n   * @param {any} charge Charge\n   */\n  addCharge(charge: any) {\n    this.chargesDataSource = this.chargesDataSource.concat([charge.value]);\n    charge.value = '';\n    this.pristine = false;\n  }\n\n  /**\n   * Edits the Charge Amount\n   * @param {any} charge Charge\n   */\n  editChargeAmount(charge: any) {\n    const formfields: FormfieldBase[] = [\n      new InputBase({\n        controlName: 'amount',\n        label: 'Amount',\n        value: charge.amount,\n        type: 'number',\n        required: false\n      }),\n    ];\n    const data = {\n      title: 'Edit Charge Amount',\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editNoteDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editNoteDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const newCharge = { ...charge, amount: response.data.value.amount };\n        this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1, newCharge);\n        this.chargesDataSource = this.chargesDataSource.concat([]);\n      }\n    });\n    this.pristine = false;\n  }\n\n  /**\n   * Edits the Charge Date\n   * @param {any} charge Charge\n   */\n  editChargeDate(charge: any) {\n    const formfields: FormfieldBase[] = [\n      new DatepickerBase({\n        controlName: 'date',\n        label: 'Date',\n        value: charge.dueDate || charge.feeOnMonthDay || '',\n        type: 'datetime-local',\n        required: false\n      }),\n    ];\n    const data = {\n      title: 'Edit Charge Date',\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editNoteDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editNoteDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        let newCharge: any;\n        const dateFormat = 'dd MMMM yyyy';\n        const date = this.dateUtils.formatDate(response.data.value.date, dateFormat);\n        switch (charge.chargeTimeType.value) {\n          case 'Specified due date':\n          case 'Weekly Fee':\n          newCharge = { ...charge, dueDate: date };\n          break;\n          case 'Annual Fee':\n          newCharge = { ...charge, feeOnMonthDay: date };\n          break;\n        }\n        this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1, newCharge);\n        this.chargesDataSource = this.chargesDataSource.concat([]);\n      }\n    });\n    this.pristine = false;\n  }\n\n  /**\n   * Edits the Charge Fee Interval\n   * @param {any} charge Charge\n   */\n  editChargeFeeInterval(charge: any) {\n    const formfields: FormfieldBase[] = [\n      new InputBase({\n        controlName: 'feeInterval',\n        label: 'Fee Interval',\n        value: charge.feeInterval,\n        type: 'text',\n        required: false\n      }),\n    ];\n    const data = {\n      title: 'Edit Charge Fee Interval',\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editNoteDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editNoteDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const newCharge = { ...charge, feeInterval: response.data.value.feeInterval };\n        this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1, newCharge);\n        this.chargesDataSource = this.chargesDataSource.concat([]);\n      }\n    });\n    this.pristine = false;\n  }\n\n  /**\n   * Removes the charge from charges table\n   * @param {any} charge Charge\n   */\n  deleteCharge(charge: any) {\n    this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1);\n    this.chargesDataSource = this.chargesDataSource.concat([]);\n    this.pristine = false;\n  }\n\n  /**\n   * Returns savings account charges\n   */\n  get savingsAccountCharges() {\n    return { charges: this.chargesDataSource };\n  }\n\n  get selectedClientMembers() {\n    return { selectedMembers: this.activeClientMembers.filter( (item: any) => item.selected ) };\n  }\n\n  /** Toggle all checks */\n  toggleSelects() {\n    for (const member of this.activeClientMembers) {\n      member.selected = this.selectAllItems;\n    }\n  }\n\n  /** Check if all the checks are selected */\n  toggleSelect() {\n    const len = this.activeClientMembers.length;\n    this.selectAllItems = len === 0 ? false : this.activeClientMembers.filter( (item: any) => item.selected ).length === len;\n  }\n\n}\n","<div fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\n\n  <h3 class=\"mat-h3\" fxFlexFill>Details</h3>\n\n  <mat-divider fxFlexFill></mat-divider>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Product</span>\n    <span fxFlex=\"60%\">{{ savingsAccount.productId | find:savingsAccountTemplate.productOptions:'id':'name' }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Submitted On</span>\n    <span fxFlex=\"60%\">{{ savingsAccount.submittedOnDate  | dateFormat }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">External Id</span>\n    <span fxFlex=\"60%\">{{ savingsAccount.externalId || 'Unassigned' }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Field Officer</span>\n    <span fxFlex=\"60%\">{{ savingsAccount.fieldOfficerId | find:savingsAccountProductTemplate.fieldOfficerOptions:'id':'displayName' }}</span>\n  </div>\n\n  <h3 class=\"mat-h3\" fxFlexFill>Terms</h3>\n\n  <mat-divider fxFlexFill></mat-divider>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Currency</span>\n    <span fxFlex=\"60%\">{{ savingsAccountTermsForm.get('currencyCode').value  }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Decimal Places</span>\n    <span fxFlex=\"60%\">{{ savingsAccountTermsForm.get('decimal').value }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Nominal Annual Interest Rate:</span>\n    <span fxFlex=\"60%\">{{ savingsAccount.nominalAnnualInterestRate }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Interest Compounding Period:</span>\n    <span fxFlex=\"60%\">{{ savingsAccount.interestCompoundingPeriodType | find:savingsAccountProductTemplate.interestCompoundingPeriodTypeOptions:'id':'value' }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Interest Posting Period:</span>\n    <span fxFlex=\"60%\">{{ savingsAccount.interestPostingPeriodType | find:savingsAccountProductTemplate.interestPostingPeriodTypeOptions:'id':'value' }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Interest Calculated using:</span>\n    <span fxFlex=\"60%\">{{ savingsAccount.interestCalculationType | find:savingsAccountProductTemplate.interestCalculationTypeOptions:'id':'value' }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Days in Year:</span>\n    <span fxFlex=\"60%\">{{ savingsAccount.interestCalculationDaysInYearType | find:savingsAccountProductTemplate.interestCalculationDaysInYearTypeOptions:'id':'value' }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"savingsAccount.minRequiredOpeningBalance\">\n    <span fxFlex=\"40%\">Minimum Opening Balance:</span>\n    <span fxFlex=\"60%\">{{ savingsAccount.minRequiredOpeningBalance }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Apply Withdrawal Fee for Transfers:</span>\n    <span fxFlex=\"60%\">{{ savingsAccount.withdrawalFeeForTransfers ? 'Yes' : 'No' }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"savingsAccount.lockinPeriodFrequency\">\n    <span fxFlex=\"40%\">Lock-in Period:</span>\n    <span fxFlex=\"60%\">{{ savingsAccount.lockinPeriodFrequency + ' ' + (savingsAccount.lockinPeriodFrequencyType | find:savingsAccountProductTemplate.lockinPeriodFrequencyTypeOptions:'id':'value') }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Is Overdraft Allowed:</span>\n    <span fxFlex=\"60%\">{{ savingsAccount.allowOverdraft ? 'Yes' : 'No' }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"savingsAccount.minOverdraftForInterestCalculation\">\n    <span fxFlex=\"40%\">Minimum Overdraft Required for Interest Calculation:</span>\n    <span fxFlex=\"60%\">{{ savingsAccount.minOverdraftForInterestCalculation }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"savingsAccount.nominalAnnualInterestRateOverdraft\">\n    <span fxFlex=\"40%\">Nominal Annual Interest for Overdraft:</span>\n    <span fxFlex=\"60%\">{{ savingsAccount.nominalAnnualInterestRateOverdraft }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"savingsAccount.overdraftLimit\">\n    <span fxFlex=\"40%\">Maximum Overdraft Amount Limit:</span>\n    <span fxFlex=\"60%\">{{ savingsAccount.overdraftLimit }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Enforce Minimum Balance:</span>\n    <span fxFlex=\"60%\">{{ savingsAccount.enforceMinRequiredBalance ? 'Yes' : 'No' }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"savingsAccount.minRequiredBalance\">\n    <span fxFlex=\"40%\">Minimum Balance:</span>\n    <span fxFlex=\"60%\">{{ savingsAccount.minRequiredBalance }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"savingsAccount.charges.length\" fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\n\n    <h3 class=\"mat-h3\" fxFlexFill>Charges</h3>\n\n    <mat-divider fxFlexFill></mat-divider>\n\n    <table fxFlexFill class=\"mat-elevation-z1\" mat-table [dataSource]=\"savingsAccount.charges\">\n\n      <ng-container matColumnDef=\"name\">\n        <th mat-header-cell *matHeaderCellDef> Name </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.name + ', ' + charge.currency.displaySymbol }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"chargeCalculationType\">\n        <th mat-header-cell *matHeaderCellDef> Type </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.chargeCalculationType.value }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"amount\">\n        <th mat-header-cell *matHeaderCellDef> Amount </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.amount }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"date\">\n        <th mat-header-cell *matHeaderCellDef> Date </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          <span *ngIf=\"charge.chargeTimeType.value === 'Specified due date' || charge.chargeTimeType.value === 'Weekly Fee'\">\n            {{(charge.dueDate  | dateFormat) || 'Unassigned'}}\n          </span>\n          <span *ngIf=\"charge.chargeTimeType.value === 'Monthly Fee' || charge.chargeTimeType.value === 'Annual Fee'\">\n            {{(charge.feeOnMonthDay  | dateFormat) || 'Unassigned'}}\n          </span>\n          <span\n            *ngIf=\"!(charge.chargeTimeType.value === 'Monthly Fee' || charge.chargeTimeType.value === 'Annual Fee'\n              || charge.chargeTimeType.value === 'Specified due date' || charge.chargeTimeType.value === 'Weekly Fee')\">\n            N/A\n          </span>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"repaymentsEvery\">\n        <th mat-header-cell *matHeaderCellDef> Repayments Every </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.feeInterval || 'Not Provided' }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"chargeTimeType\">\n        <th mat-header-cell *matHeaderCellDef> Collected On </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.chargeTimeType.value }}\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"chargesDisplayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: chargesDisplayedColumns;\"></tr>\n\n    </table>\n\n  </div>\n\n</div>\n\n<div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n  <button mat-raised-button matStepperPrevious>\n    <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n    Previous\n  </button>\n  <button mat-raised-button [routerLink]=\"['../']\">\n    Cancel\n  </button>\n  <button mat-raised-button color=\"primary\" (click)=\"submit.emit()\">\n    Submit\n  </button>\n</div>\n","/** Angular Imports */\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n/**\n * Savings account preview step\n */\n@Component({\n  selector: 'mifosx-savings-account-preview-step',\n  templateUrl: './savings-account-preview-step.component.html',\n  styleUrls: ['./savings-account-preview-step.component.scss']\n})\nexport class SavingsAccountPreviewStepComponent {\n\n  /** Savings Account Product Template */\n  @Input() savingsAccountProductTemplate: any;\n  /** Savings Account Template */\n  @Input() savingsAccountTemplate: any;\n  /** Savings Account Terms Form */\n  @Input() savingsAccountTermsForm: any;\n  /** Savings Account */\n  @Input() savingsAccount: any;\n\n  /** Display columns for charges table */\n  chargesDisplayedColumns: string[] = ['name', 'chargeCalculationType', 'amount', 'chargeTimeType', 'date', 'repaymentsEvery'];\n\n  /** Form submission event */\n  @Output() submit = new EventEmitter();\n\n  constructor() { }\n\n}\n","<div class=\"container\">\n\n  <mat-horizontal-stepper class=\"mat-elevation-z8\" labelPosition=\"bottom\" #savingProductStepper>\n\n    <ng-template matStepperIcon=\"number\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"edit\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"done\">\n      <fa-icon icon=\"check\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"error\">\n      <fa-icon icon=\"exclamation-triangle\" size=\"lg\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"preview\">\n      <fa-icon icon=\"eye\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <mat-step [stepControl]=\"savingsAccountDetailsForm\">\n\n      <ng-template matStepLabel>DETAILS</ng-template>\n\n      <mifosx-savings-account-details-step\n        [savingsAccountTemplate]=\"savingsAccountTemplate\" \n        (savingsAccountProductTemplate)=\"setTemplate($event)\"\n      >\n      </mifosx-savings-account-details-step>\n\n    </mat-step>\n\n    <mat-step [stepControl]=\"savingsAccountTermsForm\">\n\n      <ng-template matStepLabel>TERMS</ng-template>\n\n      <mifosx-savings-account-terms-step \n        [savingsAccountProductTemplate]=\"savingsAccountProductTemplate\"\n      ></mifosx-savings-account-terms-step>\n\n    </mat-step>\n\n    <mat-step>\n\n      <ng-template matStepLabel>CHARGES</ng-template>\n\n      <mifosx-savings-account-charges-step\n        [savingsAccountProductTemplate]=\"savingsAccountProductTemplate\"\n        [savingsAccountTemplate]=\"savingsAccountTemplate\"\n        [currencyCode]=\"savingsAccountTermsForm.get('currencyCode')\"\n      >\n      </mifosx-savings-account-charges-step>\n\n    </mat-step>\n\n    <mat-step *ngIf=\"savingsAccountFormValid\" completed>\n\n      <ng-template matStepLabel>PREVIEW</ng-template>\n\n      <mifosx-savings-account-preview-step\n        [savingsAccountProductTemplate]=\"savingsAccountProductTemplate\"\n        [savingsAccountTemplate]=\"savingsAccountTemplate\"\n        [savingsAccountTermsForm]=\"savingsAccountTermsForm\"\n        [savingsAccount]=\"savingsAccount\"\n        (submit)=\"submit()\"\n      >\n      </mifosx-savings-account-preview-step>\n\n    </mat-step>\n\n  </mat-horizontal-stepper>\n\n</div>\n","/** Angular Imports */\nimport { Component, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n/** Custom Components */\nimport { SavingsAccountDetailsStepComponent } from '../savings-account-stepper/savings-account-details-step/savings-account-details-step.component';\nimport { SavingsAccountTermsStepComponent } from '../savings-account-stepper/savings-account-terms-step/savings-account-terms-step.component';\nimport { SavingsAccountChargesStepComponent } from '../savings-account-stepper/savings-account-charges-step/savings-account-charges-step.component';\n\n/** Custom Services */\nimport { SavingsService } from '../savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Create Savings Account Component\n */\n@Component({\n  selector: 'mifosx-create-savings-account',\n  templateUrl: './create-savings-account.component.html',\n  styleUrls: ['./create-savings-account.component.scss']\n})\nexport class CreateSavingsAccountComponent {\n\n  /** Savings Account Template */\n  savingsAccountTemplate: any;\n  /** Savings Account Product Template */\n  savingsAccountProductTemplate: any;\n\n  /** Savings Account Details Step */\n  @ViewChild(SavingsAccountDetailsStepComponent, { static: true }) savingsAccountDetailsStep: SavingsAccountDetailsStepComponent;\n  /** Savings Account Terms Step */\n  @ViewChild(SavingsAccountTermsStepComponent, { static: true }) savingsAccountTermsStep: SavingsAccountTermsStepComponent;\n  /** Savings Account Charges Step */\n  @ViewChild(SavingsAccountChargesStepComponent, { static: true }) savingsAccountChargesStep: SavingsAccountChargesStepComponent;\n\n  /**\n   * Fetches savings account template from `resolve`\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {Dates} dateUtils Date Utils\n   * @param {SavingsService} savingsService Savings Service\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private dateUtils: Dates,\n              private savingsService: SavingsService,\n              private settingsService: SettingsService\n              ) {\n    this.route.data.subscribe((data: { savingsAccountTemplate: any }) => {\n      this.savingsAccountTemplate = data.savingsAccountTemplate;\n    });\n  }\n\n  /**\n   * Sets savings account product template.\n   * @param {any} $event API response\n   */\n  setTemplate($event: any) {\n    this.savingsAccountProductTemplate = $event;\n  }\n\n  /**\n   * Retrieves savings account details form.\n   */\n  get savingsAccountDetailsForm() {\n    return this.savingsAccountDetailsStep.savingsAccountDetailsForm;\n  }\n\n  /**\n   * Retrieves savings account terms form.\n   */\n  get savingsAccountTermsForm() {\n    return this.savingsAccountTermsStep.savingsAccountTermsForm;\n  }\n\n  /**\n   * Checks validity of overall savings account form.\n   */\n  get savingsAccountFormValid() {\n    return (\n      this.savingsAccountDetailsForm.valid &&\n      this.savingsAccountTermsForm.valid\n    );\n  }\n\n  /**\n   * Retrieves savings account object.\n   */\n  get savingsAccount() {\n    return {\n      ...this.savingsAccountDetailsStep.savingsAccountDetails,\n      ...this.savingsAccountTermsStep.savingsAccountTerms,\n      ...this.savingsAccountChargesStep.savingsAccountCharges\n    };\n  }\n\n  /**\n   * Creates a new share account.\n   */\n  submit() {\n    // TODO: Update once language and date settings are setup\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const monthDayFormat = 'dd MMMM';\n    const savingsAccount = {\n      ...this.savingsAccount,\n      charges: this.savingsAccount.charges.map((charge: any) => ({\n        chargeId: charge.id,\n        amount: charge.amount,\n        dueDate: charge.dueDate,\n        feeOnMonthDay: charge.feeOnMonthDay,\n        feeInterval: charge.feeInterval\n      })),\n      submittedOnDate: this.dateUtils.formatDate(this.savingsAccount.submittedOnDate, dateFormat),\n      dateFormat,\n      monthDayFormat,\n      locale\n    };\n    if (this.savingsAccountTemplate.clientId) {\n      savingsAccount.clientId = this.savingsAccountTemplate.clientId;\n    } else {\n      savingsAccount.groupId = this.savingsAccountTemplate.groupId;\n    }\n    this.savingsService.createSavingsAccount(savingsAccount).subscribe((response: any) => {\n      this.router.navigate(['../', response.resourceId], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-horizontal-stepper class=\"mat-elevation-z8\" labelPosition=\"bottom\" #savingProductStepper>\n\n    <ng-template matStepperIcon=\"number\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"edit\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"done\">\n      <fa-icon icon=\"check\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"error\">\n      <fa-icon icon=\"exclamation-triangle\" size=\"lg\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"preview\">\n      <fa-icon icon=\"eye\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <mat-step [stepControl]=\"savingsAccountDetailsForm\">\n\n      <ng-template matStepLabel>DETAILS</ng-template>\n\n      <mifosx-savings-account-details-step\n        [savingsAccountTemplate]=\"savingsAccountAndTemplate\" \n        (savingsAccountProductTemplate)=\"setTemplate($event)\"\n      >\n      </mifosx-savings-account-details-step>\n\n    </mat-step>\n\n    <mat-step [stepControl]=\"savingsAccountTermsForm\">\n\n      <ng-template matStepLabel>TERMS</ng-template>\n\n      <mifosx-savings-account-terms-step \n        [savingsAccountProductTemplate]=\"savingsAccountProductTemplate\"\n        [savingsAccountTemplate]=\"savingsAccountAndTemplate\"\n      ></mifosx-savings-account-terms-step>\n\n    </mat-step>\n\n    <mat-step>\n\n      <ng-template matStepLabel>CHARGES</ng-template>\n\n      <mifosx-savings-account-charges-step\n        [savingsAccountProductTemplate]=\"savingsAccountProductTemplate\"\n        [savingsAccountTemplate]=\"savingsAccountAndTemplate\"\n        [currencyCode]=\"savingsAccountTermsForm.get('currencyCode')\"\n      >\n      </mifosx-savings-account-charges-step>\n\n    </mat-step>\n\n    <mat-step *ngIf=\"savingsAccountFormValidAndNotPristine\" completed>\n\n      <ng-template matStepLabel>PREVIEW</ng-template>\n\n      <mifosx-savings-account-preview-step\n        [savingsAccountProductTemplate]=\"savingsAccountProductTemplate\"\n        [savingsAccountTemplate]=\"savingsAccountAndTemplate\"\n        [savingsAccountTermsForm]=\"savingsAccountTermsForm\"\n        [savingsAccount]=\"savingsAccount\"\n        (submit)=\"submit()\"\n      >\n      </mifosx-savings-account-preview-step>\n\n    </mat-step>\n\n  </mat-horizontal-stepper>\n\n</div>\n","/** Angular Imports */\nimport { Component, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n/** Custom Components */\nimport { SavingsAccountDetailsStepComponent } from '../savings-account-stepper/savings-account-details-step/savings-account-details-step.component';\nimport { SavingsAccountTermsStepComponent } from '../savings-account-stepper/savings-account-terms-step/savings-account-terms-step.component';\nimport { SavingsAccountChargesStepComponent } from '../savings-account-stepper/savings-account-charges-step/savings-account-charges-step.component';\n\n/** Custom Services */\nimport { SavingsService } from '../savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Edit Savings Account Component\n */\n@Component({\n  selector: 'mifosx-edit-savings-account',\n  templateUrl: './edit-savings-account.component.html',\n  styleUrls: ['./edit-savings-account.component.scss']\n})\nexport class EditSavingsAccountComponent {\n\n  /** Savings Account Template */\n  savingsAccountAndTemplate: any;\n  /** Savings Account Product Template */\n  savingsAccountProductTemplate: any;\n\n  /** Savings Account Details Step */\n  @ViewChild(SavingsAccountDetailsStepComponent, { static: true }) savingsAccountDetailsStep: SavingsAccountDetailsStepComponent;\n  /** Savings Account Terms Step */\n  @ViewChild(SavingsAccountTermsStepComponent, { static: true }) savingsAccountTermsStep: SavingsAccountTermsStepComponent;\n  /** Savings Account Charges Step */\n  @ViewChild(SavingsAccountChargesStepComponent, { static: true }) savingsAccountChargesStep: SavingsAccountChargesStepComponent;\n\n  /**\n   * Fetches savings account template from `resolve`\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {Dates} dateUtils Date Utils\n   * @param {SavingsService} savingsService Savings Service\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private dateUtils: Dates,\n              private savingsService: SavingsService,\n              private settingsService: SettingsService\n              ) {\n    this.route.data.subscribe((data: { savingsAccountAndTemplate: any }) => {\n      this.savingsAccountAndTemplate = data.savingsAccountAndTemplate;\n    });\n  }\n\n  /**\n   * Sets savings account product template.\n   * @param {any} $event API response\n   */\n  setTemplate($event: any) {\n    this.savingsAccountProductTemplate = $event;\n  }\n\n  /**\n   * Retrieves savings account details form.\n   */\n  get savingsAccountDetailsForm() {\n    return this.savingsAccountDetailsStep.savingsAccountDetailsForm;\n  }\n\n  /**\n   * Retrieves savings account terms form.\n   */\n  get savingsAccountTermsForm() {\n    return this.savingsAccountTermsStep.savingsAccountTermsForm;\n  }\n\n  /**\n   * Checks validity and pristinity of overall savings account form .\n   */\n  get savingsAccountFormValidAndNotPristine() {\n    return (\n      this.savingsAccountDetailsForm.valid &&\n      this.savingsAccountTermsForm.valid &&\n      (\n        !this.savingsAccountDetailsForm.pristine ||\n        !this.savingsAccountTermsForm.pristine ||\n        !this.savingsAccountChargesStep.pristine\n      )\n    );\n  }\n\n  /**\n   * Retrieves savings account object.\n   */\n  get savingsAccount() {\n    return {\n      ...this.savingsAccountDetailsStep.savingsAccountDetails,\n      ...this.savingsAccountTermsStep.savingsAccountTerms,\n      ...this.savingsAccountChargesStep.savingsAccountCharges\n    };\n  }\n\n  /**\n   * Creates a new share account.\n   */\n  submit() {\n    // TODO: Update once language and date settings are setup\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const monthDayFormat = 'dd MMMM';\n    const savingsAccount = {\n      ...this.savingsAccount,\n      charges: this.savingsAccount.charges.map((charge: any) => ({\n        chargeId: charge.id,\n        amount: charge.amount,\n        dueDate: this.dateUtils.formatDate(charge.dueDate, dateFormat),\n        feeOnMonthDay: this.dateUtils.formatDate(charge.feeOnMonthDay, dateFormat),\n        feeInterval: charge.feeInterval\n      })),\n      submittedOnDate: this.dateUtils.formatDate(this.savingsAccount.submittedOnDate, dateFormat),\n      dateFormat,\n      monthDayFormat,\n      locale\n    };\n    if (this.savingsAccountAndTemplate.clientId) {\n      savingsAccount.clientId = this.savingsAccountAndTemplate.clientId;\n    } else {\n      savingsAccount.groupId = this.savingsAccountAndTemplate.groupId;\n    }\n    this.savingsService.updateSavingsAccount(this.savingsAccountAndTemplate.id, savingsAccount).subscribe((response: any) => {\n      this.router.navigate(['../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","/** Angular Imports */\nimport { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n/**\n * Undo transaction dialog component.\n */\n@Component({\n  selector: 'mifosx-undo-transaction-dialog',\n  templateUrl: './undo-transaction-dialog.component.html',\n  styleUrls: ['./undo-transaction-dialog.component.scss']\n})\nexport class UndoTransactionDialogComponent {\n\n  /**\n   * @param {MatDialogRef} dialogRef Component reference to dialog.\n   */\n  constructor(public dialogRef: MatDialogRef<UndoTransactionDialogComponent>) { }\n\n}\n","<h1 mat-dialog-title>Undo Transaction</h1>\n<div mat-dialog-content>\n  <p>Are you sure you want to undo this transaction ?</p>\n</div>\n<mat-dialog-actions align=\"end\">\n  <button mat-raised-button mat-dialog-close>Cancel</button>\n  <button mat-raised-button color=\"warn\" [mat-dialog-close]=\"{ confirm: true }\">Confirm</button>\n</mat-dialog-actions>\n","import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'mifosx-release-amount-dialog',\n  templateUrl: './release-amount-dialog.component.html',\n  styleUrls: ['./release-amount-dialog.component.scss']\n})\nexport class ReleaseAmountDialogComponent {\n\n  /**\n   * @param {MatDialogRef} dialogRef Component reference to dialog.\n   */\n  constructor(public dialogRef: MatDialogRef<ReleaseAmountDialogComponent>) { }\n\n}\n","<h1 mat-dialog-title>Release Amount</h1>\n<div mat-dialog-content>\n  <p>Are you sure you want to release this amount ?</p>\n</div>\n<mat-dialog-actions align=\"end\">\n  <button mat-raised-button mat-dialog-close>Cancel</button>\n  <button mat-raised-button color=\"warn\" [mat-dialog-close]=\"{ confirm: true }\">Confirm</button>\n</mat-dialog-actions>\n","<div fxLayoutAlign=\"end\" class=\"container m-b-20\" fxLayoutGap=\"2%\"\n  *ngIf=\"!(transactionData.interestedPostedAsOn === false && (transactionData.transactionType.id === 17 || transactionData.transactionType.id === 3))\">\n  <span *mifosxHasPermission=\"'ADJUSTTRANSACTION_SAVINGSACCOUNT'\">\n    <button mat-raised-button color=\"primary\" *ngIf=\"transactionData.transactionType.value == 'Transfer' || transactionData.reversed == 'true'\n        || transactionData.transactionType.id==3 || transactionData.transactionType.id==17\" [routerLink]=\"'edit'\">\n      <fa-icon icon=\"edit\" class=\"m-r-10\"></fa-icon>Edit\n    </button>\n  </span>\n  <span *ngIf=\"!transactionData.reversed && transactionData.transactionType.amountHold\">\n    <button mat-raised-button color=\"primary\" *mifosxHasPermission=\"'RELEASEAMOUNT_SAVINGSACCOUNT'\"\n      (click)=\"releaseAmount()\">\n      <fa-icon icon=\"lock-open\" class=\"m-r-10\"></fa-icon>Release Amount\n    </button>\n  </span>\n  <button mat-raised-button color=\"warn\" *mifosxHasPermission=\"'UNDOTRANSACTION_SAVINGSACCOUNT'\"\n    (click)=\"undoTransaction()\" [disabled]=\"transactionData.reversed\">\n    <fa-icon icon=\"undo\" class=\"m-r-10\"></fa-icon>Undo\n  </button>\n</div>\n\n<div class=\"container\">\n\n  <mat-card>\n\n    <mat-card-content>\n\n      <div fxLayout=\"row wrap\" class=\"content\">\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Transaction Id\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ transactionData.id }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Type\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ transactionData.transactionType.value }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Transaction Date\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ transactionData.date | dateFormat }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Currency\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ transactionData.currency.name }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Amount\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ transactionData.amount | currency }} {{ transactionData.currency.code }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Note\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ transactionData.note }}\n        </div>\n\n        <ng-container *ngIf=\"transactionData.paymentDetailData\">\n\n          <div *ngIf=\"transactionData.paymentDetailData.paymentType\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            Payment Type\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.paymentType\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.paymentType.name }}\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.accountNumber\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            Account No.\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.accountNumber\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.accountNumber }}\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.checkNumber\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            Cheque Number\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.checkNumber\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.checkNumber }}\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.routingCode\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            Routing Code\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.routingCode\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.routingCode }}\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.receiptNumber\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            Receipt No.\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.receiptNumber\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.receiptNumber }}\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.bankNumber\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            Bank No.\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.bankNumber\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.bankNumber }}\n          </div>\n\n        </ng-container>\n\n      </div>\n\n      <div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n        <button type=\"button\" mat-raised-button color=\"primary\" [routerLink]=\"['../']\">{{ 'Back' | translate }}</button>\n      </div>\n    </mat-card-content>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Custom Dialogs */\nimport { UndoTransactionDialogComponent } from '../../custom-dialogs/undo-transaction-dialog/undo-transaction-dialog.component';\nimport { Dates } from 'app/core/utils/dates';\nimport { ReleaseAmountDialogComponent } from '../../custom-dialogs/release-amount-dialog/release-amount-dialog.component';\n\n/**\n * View Transaction Component.\n * TODO: Add support for account transfers.\n */\n@Component({\n  selector: 'mifosx-view-transaction',\n  templateUrl: './view-transaction.component.html',\n  styleUrls: ['./view-transaction.component.scss']\n})\nexport class ViewTransactionComponent {\n\n  /** Transaction data. */\n  transactionData: any;\n\n  accountId: string;\n\n  /**\n   * Retrieves the Transaction data from `resolve`.\n   * @param {SavingsService} savingsService Savings Service\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   * @param {MatDialog} dialog Dialog reference.\n   * @param {Dates} dateUtils Date Utils.\n   * @param {SettingsService} settingsService Setting service\n   */\n  constructor(private savingsService: SavingsService,\n              private route: ActivatedRoute,\n              private dateUtils: Dates,\n              private router: Router,\n              public dialog: MatDialog,\n              private settingsService: SettingsService) {\n    this.route.data.subscribe((data: { savingsAccountTransaction: any }) => {\n      this.accountId = this.route.snapshot.params['savingAccountId'];\n      this.transactionData = data.savingsAccountTransaction;\n    });\n  }\n\n  /**\n   * Undo the savings transaction\n   */\n  undoTransaction() {\n    const undoTransactionAccountDialogRef = this.dialog.open(UndoTransactionDialogComponent);\n    undoTransactionAccountDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        const locale = this.settingsService.language.code;\n        const dateFormat = this.settingsService.dateFormat;\n        const data = {\n          transactionDate: this.dateUtils.formatDate(this.transactionData.date && new Date(this.transactionData.date), dateFormat),\n          transactionAmount: 0,\n          dateFormat,\n          locale\n        };\n        this.savingsService.executeSavingsAccountTransactionsCommand(this.accountId, 'undo', data, this.transactionData.id).subscribe(() => {\n          this.router.navigate(['../'], { relativeTo: this.route });\n        });\n      }\n    });\n  }\n\n  releaseAmount() {\n    const releaseAmountDialogRef = this.dialog.open(ReleaseAmountDialogComponent);\n    releaseAmountDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        const data = { };\n        this.savingsService.executeSavingsAccountTransactionsCommand(this.accountId, 'releaseAmount', data, this.transactionData.id).subscribe(() => {\n          this.router.navigate(['../'], { relativeTo: this.route });\n        });\n      }\n    });\n  }\n\n}\n","\n\n<div *ngIf=\"savingsAccountData.status.value === 'Active' && chargeData.amountOutstanding !== 0\"\n  fxLayout=\"row\" fxLayoutAlign=\"end\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\" class=\"container m-b-20\">\n    <button mat-raised-button color=\"accent\" *mifosxHasPermission=\"'PAY_SAVINGSACCOUNTCHARGE'\" (click)=\"payCharge()\">\n      <fa-icon icon=\"dollar-sign\" class=\"m-r-10\"></fa-icon>\n      Pay\n    </button>\n    <button mat-raised-button color=\"primary\" *mifosxHasPermission=\"'WAIVE_SAVINGSACCOUNTCHARGE'\" (click)=\"waiveCharge()\">\n      <fa-icon icon=\"flag\" class=\"m-r-10\"></fa-icon>\n      Waive\n    </button>\n    <span *ngIf=\"isRecurringCharge()\">\n      <button mat-raised-button color=\"warn\" *mifosxHasPermission=\"'INACTIVATE_SAVINGSACCOUNTCHARGE'\" (click)=\"inactivateCharge()\">\n        <fa-icon icon=\"trash\" class=\"m-r-10\"></fa-icon>\n        Inactivate\n      </button>\n    </span>\n</div>\n\n<div *ngIf=\"savingsAccountData.status.value === 'Submitted and pending approval'\"\n  fxLayout=\"row\" fxLayoutAlign=\"end\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\" class=\"container m-b-20\">\n    <button mat-raised-button color=\"primary\" *mifosxHasPermission=\"'UPDATE_SAVINGSACCOUNTCHARGE'\" (click)=\"editCharge()\">\n      <fa-icon icon=\"edit\" class=\"m-r-10\"></fa-icon>\n      Edit\n    </button>\n    <button mat-raised-button color=\"warn\" *mifosxHasPermission=\"'DELETE_SAVINGSACCOUNTCHARGE'\" (click)=\"deleteCharge()\">\n      <fa-icon icon=\"trash\" class=\"m-r-10\"></fa-icon>\n      Delete\n    </button>\n</div>\n\n<div class=\"container\">\n\n  <mat-card>\n\n    <mat-card-content>\n\n      <div fxLayout=\"row wrap\" class=\"content\">\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Name\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ chargeData.name }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Charge Type\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ chargeData.penalty ? 'Penalty' : 'Fees' }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Currency\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ chargeData.currency.displayLabel }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Payment due at\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ chargeData.chargeTimeType.value }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Payment due as of\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ chargeData.dueDate  | dateFormat }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Calculation Type\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ chargeData.chargeCalculationType.value }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Due\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ chargeData.amount | formatNumber }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Paid\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ chargeData.amountPaid | formatNumber }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Waived\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ chargeData.amountWaived | formatNumber }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Outstanding\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ chargeData.amountOutstanding | formatNumber }}\n        </div>\n\n      </div>\n\n      <div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n        <button type=\"button\" mat-raised-button color=\"primary\" [routerLink]=\"['../']\">{{ 'Back' | translate }}</button>\n      </div>\n    </mat-card-content>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Custom Dialogs */\nimport { FormDialogComponent } from 'app/shared/form-dialog/form-dialog.component';\nimport { WaiveChargeDialogComponent } from '../custom-dialogs/waive-charge-dialog/waive-charge-dialog.component';\nimport { InactivateChargeDialogComponent } from '../custom-dialogs/inactivate-charge-dialog/inactivate-charge-dialog.component';\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\n\n/** Custom Models */\nimport { FormfieldBase } from 'app/shared/form-dialog/formfield/model/formfield-base';\nimport { InputBase } from 'app/shared/form-dialog/formfield/model/input-base';\nimport { DatepickerBase } from 'app/shared/form-dialog/formfield/model/datepicker-base';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * View Charge Component.\n */\n@Component({\n  selector: 'mifosx-view-charge',\n  templateUrl: './view-charge.component.html',\n  styleUrls: ['./view-charge.component.scss']\n})\nexport class ViewChargeComponent {\n\n  /** Charge data. */\n  chargeData: any;\n  /** Savings Account Data */\n  savingsAccountData: any;\n\n  /**\n   * Retrieves the Charge data from `resolve`.\n   * @param {SavingsService} savingsService Savings Service\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   * @param {MatDialog} dialog Dialog reference.\n   * @param {Dates} dateUtils Date Utils.\n   * @param {SettingsService} settingsService Setting service\n   */\n  constructor(private savingsService: SavingsService,\n              private route: ActivatedRoute,\n              private dateUtils: Dates,\n              private router: Router,\n              public dialog: MatDialog,\n              private settingsService: SettingsService) {\n    this.route.data.subscribe((data: { savingsAccountCharge: any }) => {\n      this.chargeData = data.savingsAccountCharge;\n    });\n    this.route.data.subscribe((data: { savingsAccountData: any }) => {\n      this.savingsAccountData = data.savingsAccountData;\n    });\n  }\n\n  /**\n   * Pays the charge.\n   */\n  payCharge() {\n    const formfields: FormfieldBase[] = [\n      new InputBase({\n        controlName: 'amount',\n        label: 'Amount',\n        value: '',\n        type: 'number',\n        required: true\n      }),\n      new DatepickerBase({\n        controlName: 'dueDate',\n        label: 'Payment Date',\n        value: '',\n        type: 'date',\n        required: true\n      })\n    ];\n    const data = {\n      title: 'Pay Charge',\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const payChargeDialogRef = this.dialog.open(FormDialogComponent, { data });\n    payChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const locale = this.settingsService.language.code;\n        const dateFormat = this.settingsService.dateFormat;\n        const dataObject = {\n          ...response.data.value,\n          dueDate: this.dateUtils.formatDate(response.data.value.dueDate, dateFormat),\n          dateFormat,\n          locale\n        };\n        this.savingsService.executeSavingsAccountChargesCommand(this.chargeData.accountId, 'pay', dataObject, this.chargeData.id)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Waive's the charge\n   */\n  waiveCharge() {\n    const waiveChargeDialogRef = this.dialog.open(WaiveChargeDialogComponent, { data: { id: this.chargeData.id } });\n    waiveChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.savingsService.executeSavingsAccountChargesCommand(this.chargeData.accountId, 'waive', {}, this.chargeData.id)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Inactivate's the charge\n   */\n  inactivateCharge() {\n    const inactivateChargeDialogRef = this.dialog.open(InactivateChargeDialogComponent, { data: { id: this.chargeData.id } });\n    inactivateChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.savingsService.executeSavingsAccountChargesCommand(this.chargeData.accountId, 'inactivate', {}, this.chargeData.id)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Edits the charge\n   */\n  editCharge() {\n    const formfields: FormfieldBase[] = [\n      new InputBase({\n        controlName: 'amount',\n        label: 'Amount',\n        value: this.chargeData.amount || this.chargeData.amountOrPercentage,\n        type: 'number',\n        required: true\n      })\n    ];\n    const data = {\n      title: 'Edit Charge',\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editChargeDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const locale = this.settingsService.language.code;\n        const dateFormat = this.settingsService.dateFormat;\n        const dataObject = {\n          ...response.data.value,\n          dateFormat,\n          locale\n        };\n        this.savingsService.editSavingsAccountCharge(this.chargeData.accountId, dataObject, this.chargeData.id)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Deletes the charge\n   */\n  deleteCharge() {\n    const deleteChargeDialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `charge id:${this.chargeData.id}` }\n    });\n    deleteChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        this.savingsService.deleteSavingsAccountCharge(this.chargeData.accountId, this.chargeData.id)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Checks if charge is recurring\n   */\n  isRecurringCharge() {\n    const chargeTimeType = this.chargeData.chargeTimeType.value;\n    return chargeTimeType === 'Monthly Fee' || chargeTimeType === 'Annual Fee' || chargeTimeType === 'Weekly Fee';\n  }\n\n  /**\n   * Refetches data fot the component\n   * TODO: Replace by a custom reload component instead of hard-coded back-routing.\n   */\n  private reload() {\n    const url: string = this.router.url.replace(`/${this.chargeData.id}`, '');\n    const refreshUrl: string = this.router.url.slice(0, this.router.url.indexOf('savings-accounts') + 'savings-accounts'.length);\n    this.router.navigateByUrl(refreshUrl, {skipLocationChange: true})\n      .then(() => this.router.navigate([url]));\n  }\n\n}\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ActivatedRoute } from '@angular/router';\n\n/**\n * View Transaction Reciept Component\n */\n@Component({\n  selector: 'mifosx-view-reciept',\n  templateUrl: './view-reciept.component.html',\n  styleUrls: ['./view-reciept.component.scss']\n})\nexport class ViewRecieptComponent implements OnInit {\n\n  /** trusted resource url for pentaho output */\n  pentahoUrl: any;\n  /** Transaction Reciept Data */\n  transactionRecieptData: any;\n\n  /**\n   * Fetches transaction reciept `resolve`\n   * @param {DomSanitizer} sanitizer DOM Sanitizer\n   * @param {ActivatedRoute} route Activated Route\n   */\n  constructor(private sanitizer: DomSanitizer,\n              private route: ActivatedRoute) {\n    this.route.data.subscribe((data: { savingsTransactionReciept: any }) => {\n      this.transactionRecieptData = data.savingsTransactionReciept;\n    });\n  }\n\n  ngOnInit() {\n    const contentType = this.transactionRecieptData.headers.get('Content-Type');\n    const file = new Blob([this.transactionRecieptData.body], {type: contentType});\n    const filecontent = URL.createObjectURL(file);\n    this.pentahoUrl = this.sanitizer.bypassSecurityTrustResourceUrl(filecontent);\n  }\n\n}\n","<mat-card class=\"container\">\n\n  <div class=\"back-button\">\n    <button type=\"button\" color=\"primary\" mat-raised-button [routerLink]=\"['../../']\">\n      <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>Back</button>\n  </div>\n\n  <iframe [src]=\"pentahoUrl\" frameborder=\"0\" width=100% height=\"600px;\"></iframe>\n\n</mat-card>\n","<form class=\"m-t-20\" fxLayout=\"column\" [formGroup]=\"transactionsReportForm\" (ngSubmit)=\"generate()\">\n\n  <div fxLayout=\"row\" fxLayoutGap=\"3%\" fxLayoutAlign=\"center\">\n\n    <mat-form-field fxFlex=\"30%\" (click)=\"fromDatePicker.open()\">\n      <mat-label>From Date</mat-label>\n      <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"fromDatePicker\" required formControlName=\"fromDate\">\n      <mat-datepicker-toggle matSuffix [for]=\"fromDatePicker\"></mat-datepicker-toggle>\n      <mat-datepicker #fromDatePicker></mat-datepicker>\n      <mat-error>\n        From date is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"30%\" (click)=\"toDatePicker.open()\">\n      <mat-label>To Date</mat-label>\n      <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"toDatePicker\" required formControlName=\"toDate\">\n      <mat-datepicker-toggle matSuffix [for]=\"toDatePicker\"></mat-datepicker-toggle>\n      <mat-datepicker #toDatePicker></mat-datepicker>\n      <mat-error>\n        To date is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n  </div>\n\n  <div class=\"generate-button\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5%\">\n    <button type=\"button\" mat-raised-button [routerLink]=\"['../']\">Cancel</button>\n    <button mat-raised-button color=\"primary\" [disabled]=\"!transactionsReportForm.valid\">\n    <fa-icon icon=\"cogs\" class=\"m-r-10\"></fa-icon>Generate Report &nbsp;</button>\n  </div>\n\n</form>\n\n<iframe *ngIf=\"!hideOutput\" [src]=\"pentahoUrl\" frameborder=\"0\" width=\"100%\" height=\"750px;\"></iframe>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\n\n/** Custom Services */\nimport { ReportsService } from 'app/reports/reports.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Export Client Savings Transactions Component\n */\n@Component({\n  selector: 'mifosx-export-transactions',\n  templateUrl: './export-transactions.component.html',\n  styleUrls: ['./export-transactions.component.scss']\n})\nexport class ExportTransactionsComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Transactions Report Form */\n  transactionsReportForm: any;\n  /** substitute for resolver */\n  hideOutput = true;\n  /** trusted resource url for pentaho output */\n  pentahoUrl: any;\n  /** Savings Account Id */\n  savingsAccountId: any;\n\n  /**\n   * Fetches savings account data from grandparent's `resolve`\n   * @param {DomSanitizer} sanitizer DOM Sanitizer\n   * @param {ReportsService} reportsService Reports Service\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private sanitizer: DomSanitizer,\n              private reportsService: ReportsService,\n              private formBuilder: FormBuilder,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private settingsService: SettingsService) {\n    this.route.parent.parent.data.subscribe((data: { savingsAccountData: any }) => {\n      this.savingsAccountId = data.savingsAccountData.accountNo;\n    });\n  }\n\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createTransactionsReportForm();\n  }\n\n  /**\n   * Creates the transactions report form.\n   */\n  createTransactionsReportForm() {\n    this.transactionsReportForm = this.formBuilder.group({\n      'fromDate': ['', Validators.required],\n      'toDate': ['', Validators.required],\n    });\n  }\n\n  /**\n   * Generates client savings transactions report.\n   */\n  generate() {\n    const data = {\n      'output-type':\t'PDF',\n      R_startDate:\tthis.dateUtils.formatDate(this.transactionsReportForm.value.fromDate, this.settingsService.dateFormat),\n      R_endDate:\tthis.dateUtils.formatDate(this.transactionsReportForm.value.toDate, this.settingsService.dateFormat),\n      R_savingsAccountId:\tthis.savingsAccountId\n    };\n    this.reportsService.getPentahoRunReportData('Client Saving Transactions', data, 'default', this.settingsService.language.code, this.settingsService.dateFormat)\n      .subscribe( (res: any) => {\n        const contentType = res.headers.get('Content-Type');\n        const file = new Blob([res.body], {type: contentType});\n        const filecontent = URL.createObjectURL(file);\n        this.pentahoUrl = this.sanitizer.bypassSecurityTrustResourceUrl(filecontent);\n        this.hideOutput = false;\n      });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"editTransactionForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content fxLayout=\"column\">\n\n        <mat-form-field (click)=\"dueDatePicker.open()\">\n          <mat-label>Transaction Date</mat-label>\n          <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"dueDatePicker\"\n            formControlName=\"transactionDate\" required>\n          <mat-datepicker-toggle matSuffix [for]=\"dueDatePicker\"></mat-datepicker-toggle>\n          <mat-datepicker #dueDatePicker></mat-datepicker>\n          <mat-error *ngIf=\"editTransactionForm.controls.transactionDate.hasError('required')\">\n            Transaction Date is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n          <mat-label>Transaction Amount</mat-label>\n          <input type=\"number\" formControlName=\"transactionAmount\" required matInput />\n          <mat-error *ngIf=\"editTransactionForm.controls.transactionAmount.hasError('required')\">\n            Transaction Amount is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n          <mat-label>Payment Type</mat-label>\n          <mat-select formControlName=\"paymentTypeId\">\n            <mat-option *ngFor=\"let paymentType of paymentTypeOptions\" [value]=\"paymentType.id\">\n              {{ paymentType.name }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <div fxFlexFill>\n          <span fxFlex=\"75%\" class=\"expandcollapsebutton m-l-10 m-t-40\" (click)=\"addPaymentDetails()\">\n            <mat-slide-toggle>\n              <div [className]=\"showPaymentDetails ? 'enabled' : 'disabled'\">\n                <span class=\"m-l-10\">Show Payment Details</span>\n              </div>\n            </mat-slide-toggle>\n          </span>\n        </div>\n\n        <mat-form-field *ngIf=\"editTransactionForm.controls['accountNumber']\">\n          <mat-label>Account Number</mat-label>\n          <input type=\"number\" formControlName=\"accountNumber\" matInput />\n        </mat-form-field>\n\n        <mat-form-field *ngIf=\"editTransactionForm.controls['checkNumber']\">\n          <mat-label>Cheque</mat-label>\n          <input type=\"number\" formControlName=\"checkNumber\" matInput />\n        </mat-form-field>\n\n        <mat-form-field *ngIf=\"editTransactionForm.controls['routingCode']\">\n          <mat-label>Routing Code</mat-label>\n          <input formControlName=\"routingCode\" matInput />\n        </mat-form-field>\n\n        <mat-form-field *ngIf=\"editTransactionForm.controls['receiptNumber']\">\n          <mat-label>Receipt Number</mat-label>\n          <input formControlName=\"receiptNumber\" matInput />\n        </mat-form-field>\n\n        <mat-form-field *ngIf=\"editTransactionForm.controls['bankNumber']\">\n          <mat-label>Bank</mat-label>\n          <input formControlName=\"bankNumber\" matInput />\n        </mat-form-field>\n\n        <mat-card-actions fxLayoutGap=\"5px\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!editTransactionForm.valid\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Edit Transaction component.\n */\n@Component({\n  selector: 'mifosx-edit-transaction',\n  templateUrl: './edit-transaction.component.html',\n  styleUrls: ['./edit-transaction.component.scss']\n})\nexport class EditTransactionComponent implements OnInit {\n\n  /** Minimum Due Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Due Date allowed. */\n  maxDate = new Date();\n  /** Savings account transaction form. */\n  editTransactionForm: FormGroup;\n  /** savings account transaction payment options. */\n  paymentTypeOptions: {\n    id: number,\n    name: string,\n    description: string,\n    isCashPayment: boolean,\n    position: number\n  }[];\n  /** Flag to enable payment details fields. */\n  showPaymentDetails: Boolean = false;\n  /** saving account's Id */\n  savingAccountId: string;\n  /** Transaction Template */\n  transactionTemplateData: any;\n\n  /**\n   * Retrieves the Saving Account transaction template data from `resolve`.\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {SavingsService} savingsService Savings Service.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Dates} dateUtils Date Utils.\n   * @param {Router} router Router for navigation.\n   * @param {SettingsService} settingsService Setting service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private route: ActivatedRoute,\n              private router: Router,\n              private dateUtils: Dates,\n              private savingsService: SavingsService,\n              private settingsService: SettingsService) {\n    this.route.data.subscribe((data: { savingsAccountTransactionTemplate: any }) => {\n      this.transactionTemplateData = data.savingsAccountTransactionTemplate;\n      this.paymentTypeOptions = this.transactionTemplateData.paymentTypeOptions;\n    });\n    this.savingAccountId = this.route.snapshot.params['savingAccountId'];\n  }\n\n  /**\n   * Creates the Saving account transaction form when component loads.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createEditTransactionForm();\n    this.editTransactionForm.patchValue({\n      'transactionDate': this.transactionTemplateData.date && new Date(this.transactionTemplateData.date),\n      'transactionAmount': this.transactionTemplateData.amount,\n      'paymentTypeId': this.transactionTemplateData.paymentTypeId\n    });\n  }\n\n  /**\n   * Method to create the Saving Account Transaction Form.\n   */\n  createEditTransactionForm() {\n    this.editTransactionForm = this.formBuilder.group({\n      'transactionDate': ['', Validators.required],\n      'transactionAmount': ['', Validators.required],\n      'paymentTypeId': [''],\n    });\n  }\n\n  /**\n   * Method to add payment detail fields to the UI.\n   */\n  addPaymentDetails() {\n    this.showPaymentDetails = !this.showPaymentDetails;\n    if (this.showPaymentDetails) {\n      this.editTransactionForm.addControl('accountNumber', new FormControl(''));\n      this.editTransactionForm.addControl('checkNumber', new FormControl(''));\n      this.editTransactionForm.addControl('routingCode', new FormControl(''));\n      this.editTransactionForm.addControl('receiptNumber', new FormControl(''));\n      this.editTransactionForm.addControl('bankNumber', new FormControl(''));\n    } else {\n      this.editTransactionForm.removeControl('accountNumber');\n      this.editTransactionForm.removeControl('checkNumber');\n      this.editTransactionForm.removeControl('routingCode');\n      this.editTransactionForm.removeControl('receiptNumber');\n      this.editTransactionForm.removeControl('bankNumber');\n    }\n  }\n\n  /**\n   * Method to submit the transaction details.\n   */\n  submit() {\n    const editTransactionFormData = this.editTransactionForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevTransactionDate: Date = this.editTransactionForm.value.transactionDate;\n    if (editTransactionFormData.transactionDate instanceof Date) {\n      editTransactionFormData.transactionDate = this.dateUtils.formatDate(prevTransactionDate, dateFormat);\n    }\n    const data = {\n      ...editTransactionFormData,\n      dateFormat,\n      locale\n    };\n    this.savingsService.executeSavingsAccountTransactionsCommand(this.savingAccountId, 'modify', data, this.transactionTemplateData.id)\n      .subscribe(res => {\n        this.router.navigate(['../'], { relativeTo: this.route });\n      });\n  }\n\n}\n","<div class=\"container\">\n\n    <mat-horizontal-stepper class=\"mat-elevation-z8\" labelPosition=\"bottom\" #savingProductStepper>\n  \n      <ng-template matStepperIcon=\"number\">\n        <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n      </ng-template>\n  \n      <ng-template matStepperIcon=\"edit\">\n        <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n      </ng-template>\n  \n      <ng-template matStepperIcon=\"done\">\n        <fa-icon icon=\"check\" size=\"sm\"></fa-icon>\n      </ng-template>\n  \n      <ng-template matStepperIcon=\"error\">\n        <fa-icon icon=\"exclamation-triangle\" size=\"lg\"></fa-icon>\n      </ng-template>\n  \n      <ng-template matStepperIcon=\"preview\">\n        <fa-icon icon=\"eye\" size=\"sm\"></fa-icon>\n      </ng-template>\n  \n      <mat-step [stepControl]=\"savingsAccountDetailsForm\">\n  \n        <ng-template matStepLabel>DETAILS</ng-template>\n  \n        <mifosx-savings-account-details-step\n          [savingsAccountTemplate]=\"savingsAccountTemplate\" \n          (savingsAccountProductTemplate)=\"setTemplate($event)\"\n        >\n        </mifosx-savings-account-details-step>\n  \n      </mat-step>\n  \n      <mat-step [stepControl]=\"savingsAccountTermsForm\">\n  \n        <ng-template matStepLabel>TERMS</ng-template>\n  \n        <mifosx-savings-account-terms-step \n          [savingsAccountProductTemplate]=\"savingsAccountProductTemplate\"\n        ></mifosx-savings-account-terms-step>\n  \n      </mat-step>\n  \n      <mat-step>\n  \n        <ng-template matStepLabel>CHARGES</ng-template>\n  \n        <mifosx-savings-account-charges-step\n          [savingsAccountProductTemplate]=\"savingsAccountProductTemplate\"\n          [savingsAccountTemplate]=\"savingsAccountTemplate\"\n          [currencyCode]=\"savingsAccountTermsForm.get('currencyCode')\"\n          [activeClientMembers]=\"activeClientMembers\"\n        >\n        </mifosx-savings-account-charges-step>\n  \n      </mat-step>\n  \n      <mat-step *ngIf=\"savingsAccountFormValid\" completed>\n  \n        <ng-template matStepLabel>PREVIEW</ng-template>\n  \n        <mifosx-savings-account-preview-step\n          [savingsAccountProductTemplate]=\"savingsAccountProductTemplate\"\n          [savingsAccountTemplate]=\"savingsAccountTemplate\"\n          [savingsAccountTermsForm]=\"savingsAccountTermsForm\"\n          [savingsAccount]=\"savingsAccount\"\n          (submit)=\"submit()\"\n        >\n        </mifosx-savings-account-preview-step>\n  \n      </mat-step>\n  \n    </mat-horizontal-stepper>\n  \n  </div>\n  ","/** Angular Imports */\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n/** Custom Components */\nimport { SavingsAccountDetailsStepComponent } from '../../savings-account-stepper/savings-account-details-step/savings-account-details-step.component';\nimport { SavingsAccountTermsStepComponent } from '../../savings-account-stepper/savings-account-terms-step/savings-account-terms-step.component';\nimport { SavingsAccountChargesStepComponent } from '../../savings-account-stepper/savings-account-charges-step/savings-account-charges-step.component';\n\n/** Custom Services */\nimport { SavingsService } from '../../savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Create GSIM Account Component\n */\n@Component({\n  selector: 'mifosx-create-gsim-account',\n  templateUrl: './create-gsim-account.component.html',\n  styleUrls: ['./create-gsim-account.component.scss']\n})\n\nexport class CreateGsimAccountComponent implements OnInit {\n\n  /** Savings Account Template */\n  savingsAccountTemplate: any;\n  /** Savings Account Product Template */\n  savingsAccountProductTemplate: any;\n  /** Table Data Source */\n  dataSource: any;\n  /** Selected Members */\n  selectedMembers: any;\n\n  /** Savings Account Details Step */\n  @ViewChild(SavingsAccountDetailsStepComponent, { static: true }) savingsAccountDetailsStep: SavingsAccountDetailsStepComponent;\n  /** Savings Account Terms Step */\n  @ViewChild(SavingsAccountTermsStepComponent, { static: true }) savingsAccountTermsStep: SavingsAccountTermsStepComponent;\n  /** Savings Account Charges Step */\n  @ViewChild(SavingsAccountChargesStepComponent, { static: true }) savingsAccountChargesStep: SavingsAccountChargesStepComponent;\n\n  /**\n   * Fetches savings account template from `resolve`\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {Dates} dateUtils Date Utils\n   * @param {SavingsService} savingsService Savings Service\n   * @param {SettingsService} settingsService Settings Service\n   */\n   constructor(private route: ActivatedRoute,\n              private router: Router,\n              private dateUtils: Dates,\n              private savingsService: SavingsService,\n              private settingsService: SettingsService\n              ) {\n      this.route.data.subscribe((data: { savingsAccountTemplate: any, groupsData: any }) => {\n      this.savingsAccountTemplate = data.savingsAccountTemplate;\n      this.dataSource = data.groupsData.activeClientMembers;\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  /**\n   * Sets savings account product template.\n   * @param {any} $event API response\n   */\n   setTemplate($event: any) {\n    this.savingsAccountProductTemplate = $event;\n  }\n\n  /**\n   * Retrieves savings account details form.\n   */\n  get savingsAccountDetailsForm() {\n    return this.savingsAccountDetailsStep.savingsAccountDetailsForm;\n  }\n\n  /**\n   * Retrieves savings account terms form.\n   */\n  get savingsAccountTermsForm() {\n    return this.savingsAccountTermsStep.savingsAccountTermsForm;\n  }\n\n  /**\n   * Retrieves savings account terms form.\n   */\n   get activeClientMembers() {\n    return this.dataSource;\n  }\n\n  /**\n   * Checks validity of overall savings account form.\n   */\n  get savingsAccountFormValid() {\n    return (\n      this.savingsAccountDetailsForm.valid &&\n      this.savingsAccountTermsForm.valid\n    );\n  }\n\n  /**\n   * Retrieves savings account object.\n   */\n  get savingsAccount() {\n    this.selectedMembers = this.savingsAccountChargesStep.selectedClientMembers;\n    return {\n      ...this.savingsAccountDetailsStep.savingsAccountDetails,\n      ...this.savingsAccountTermsStep.savingsAccountTerms,\n      ...this.savingsAccountChargesStep.savingsAccountCharges\n    };\n  }\n\n  /** Set Body for each client selected */\n  setData(client: any): any {\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const monthDayFormat = 'dd MMMM';\n    const data = {\n      ...this.savingsAccount,\n      charges: this.savingsAccount.charges.map((charge: any) => ({\n        chargeId: charge.id,\n        amount: charge.amount,\n      })),\n      clientId: client.id,\n      isGSIM: true,\n      isParentAccount: true,\n      submittedOnDate: this.dateUtils.formatDate(this.savingsAccount.submittedOnDate, dateFormat),\n      dateFormat,\n      monthDayFormat,\n      locale\n    };\n    data.groupId = this.savingsAccountTemplate.groupId;\n\n    return data;\n\n  }\n\n  /** Request Body Data */\n  buildRequestData(): any[] {\n    const requestData = [];\n    const memberSelected = this.selectedMembers.selectedMembers;\n    for (let index = 0; index < 1; index++) {\n      requestData.push(\n        this.setData( memberSelected[ index ] ),\n      );\n    }\n    return requestData;\n  }\n\n  /**\n   * Creates a new GSIM account.\n   */\n  submit() {\n    const data = this.buildRequestData();\n    const gsimData = {\n      clientArray: data,\n    };\n    this.savingsService.createGsimAcccount(gsimData).subscribe((response: any) => {\n      this.router.navigate(['../', response.resourceId], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"tab-container mat-typography\">\n\n    <div style=\"margin-top: 5px;\">\n  \n      <h2> GSIM Account Overview</h2>\n  \n      <table mat-table [dataSource]=\"dataSource\">\n  \n        <ng-container matColumnDef=\"clientDetails\">\n          <th mat-header-cell *matHeaderCellDef> Client Details </th>\n          <td mat-cell *matCellDef=\"let element\">\n            {{element.displayName}} </td>\n        </ng-container>\n  \n        <ng-container matColumnDef=\"savingsAccount\">\n          <th mat-header-cell *matHeaderCellDef> Saving Account </th>\n          <td mat-cell *matCellDef=\"let element\"><i class=\"fa fa-stop\" [ngClass]=\"element.status.code|statusLookup\" [matTooltip]=\"element.status.value\"></i> {{element.accountNo}} </td>\n        </ng-container>\n  \n        <ng-container matColumnDef=\"products\">\n          <th mat-header-cell *matHeaderCellDef> Products </th>\n          <td mat-cell *matCellDef=\"let element\"> {{element.productName}} </td>\n        </ng-container>\n  \n        <ng-container matColumnDef=\"balance\">\n          <th mat-header-cell *matHeaderCellDef> Balance </th>\n          <td mat-cell *matCellDef=\"let element\" >  </td>\n        </ng-container>\n  \n        <ng-container matColumnDef=\"Actions\">\n          <th mat-header-cell *matHeaderCellDef> Actions </th>\n          <td mat-cell *matCellDef=\"let element\">\n            <button *ngIf=\"element.status.active\" class=\"account-action-button\" mat-raised-button color=\"primary\"\n              (click)=\"routeEdit($event)\" [routerLink]=\"['../','savings-accounts', element.id, 'actions', 'Deposit']\">\n              <i class=\"fa fa-arrow-up\" matTooltip=\"Deposit\"></i>\n            </button>\n            <button *ngIf=\"element.status.active\" class=\"account-action-button\" mat-raised-button color=\"primary\"\n              (click)=\"routeEdit($event)\" [routerLink]=\"['../','savings-accounts', element.id, 'actions', 'Withdrawal']\">\n              <i class=\"fa fa-arrow-down\" matTooltip=\"Withdraw\"></i>\n            </button>\n            <button *ngIf=\"element.status.submittedAndPendingApproval\" class=\"account-action-button\" mat-raised-button color=\"primary\"\n              (click)=\"routeEdit($event)\" [routerLink]=\"['../','savings-accounts', element.id, 'actions', 'Approve']\">\n              <i class=\"fa fa-check\" matTooltip=\"Approve\"></i>\n            </button>\n            <button *ngIf=\"!element.status.submittedAndPendingApproval && !element.status.active\"\n              class=\"account-action-button\" mat-raised-button color=\"primary\"\n              (click)=\"routeEdit($event)\" [routerLink]=\"['../../../','savings-accounts', element.id, 'actions', 'Undo Approval']\">\n              <i class=\"fa fa-undo\" matTooltip=\"Undo Approval\"></i>\n            </button>\n            <button *ngIf=\"!element.status.submittedAndPendingApproval && !element.status.active\"\n              class=\"account-action-button\" mat-raised-button color=\"primary\"\n              (click)=\"routeEdit($event)\" [routerLink]=\"['../../', element.id, 'actions', 'Activate']\">\n              <i class=\"fa fa-check-circle\" matTooltip=\"Activate\"></i>\n            </button>\n          </td>\n        </ng-container>\n  \n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row  [routerLink]=\"['../../', row.id, 'transactions']\" *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  \n      </table>\n  \n      <mat-paginator [pageSizeOptions]=\"[10, 20, 25]\" showFirstLastButtons></mat-paginator>\n  \n  </div>\n  ","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ActivatedRoute } from '@angular/router';\n\n/**\n * GSIM Accounts Overview component.\n */\n@Component({\n  selector: 'mifosx-gsim-account',\n  templateUrl: './gsim-account.component.html',\n  styleUrls: ['./gsim-account.component.scss']\n})\nexport class GsimAccountComponent implements OnInit {\n\n  /** Columns to be displayed in charge overview table. */\n  displayedColumns: string[] = ['clientDetails', 'savingsAccount', 'products', 'balance', 'Actions'];\n  /** Data source for charge overview table. */\n  dataSource: MatTableDataSource<any>;\n  /** Charge Overview data */\n  gsimOverviewData: any;\n\n  savingAccountData: any;\n\n  groupsData: any;\n\n  /** Paginator for charge overview table. */\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n\n  /**\n   * Retrieves the charge overview data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {MatDialog} dialog Dialog reference.\n   */\n   constructor(private route: ActivatedRoute,\n               public dialog: MatDialog) {\n      this.route.data.subscribe((data: { gsimData: any, savingAccountData: any, groupsData: any }) => {\n      this.gsimOverviewData = data.gsimData[0].childGSIMAccounts;\n      this.savingAccountData = data.savingAccountData;\n      this.groupsData = data.groupsData;\n    });\n  }\n\n  ngOnInit(): void {\n    this.setLoanClientChargeOverview();\n  }\n\n  /**\n   * Set Client Charge Overview.\n   */\n   setLoanClientChargeOverview() {\n    this.dataSource = new MatTableDataSource(this.gsimOverviewData);\n    // this.dataSource.paginator = this.paginator;\n  }\n\n  /**\n   * Stops the propagation to view pages.\n   * @param $event Mouse Event\n   */\n   routeEdit($event: MouseEvent) {\n    $event.stopPropagation();\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { SavingsService } from '../savings.service';\n\n/**\n * Savings Account Template resolver.\n */\n@Injectable()\nexport class SavingsAccountTemplateResolver implements Resolve<Object> {\n\n  /**\n   * @param {savingsService} SavingsService Savings service.\n   */\n  constructor(private savingsService: SavingsService) { }\n\n  /**\n   * Returns the Shares Account Template.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const entityId = route.paramMap.get('clientId') || route.paramMap.get('groupId') || route.paramMap.get('centerId');\n    const isGroup = (route.paramMap.get('groupId') || route.paramMap.get('centerId')) ? true : false;\n    return this.savingsService.getSavingsAccountTemplate(entityId, undefined, isGroup);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { SavingsService } from '../savings.service';\n\n/**\n * Savings Account data and template resolver.\n */\n@Injectable()\nexport class SavingsAccountAndTemplateResolver implements Resolve<Object> {\n\n  /**\n   * @param {SavingsService} SavingsService Savings service.\n   */\n  constructor(private savingsService: SavingsService) { }\n\n  /**\n   * Returns the Savings Account data and template.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const savingAccountId = route.paramMap.get('savingAccountId');\n    return this.savingsService.getSavingsAccountAndTemplate(savingAccountId, true);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { SavingsService } from '../savings.service';\n\n/**\n * Savings Account Transaction data resolver.\n */\n@Injectable()\nexport class SavingsAccountTransactionResolver implements Resolve<Object> {\n\n  /**\n   * @param {SavingsService} SavingsService Savings service.\n   */\n  constructor(private savingsService: SavingsService) { }\n\n  /**\n   * Returns the Savings Account Transaction data.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const savingAccountId = route.parent.paramMap.get('savingAccountId');\n    const transactionId = route.paramMap.get('id');\n    return this.savingsService.getSavingsAccountTransaction(savingAccountId, transactionId);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { SavingsService } from '../savings.service';\n\n/**\n * Savings Account Charge data resolver.\n */\n@Injectable()\nexport class SavingsAccountChargeResolver implements Resolve<Object> {\n\n  /**\n   * @param {SavingsService} SavingsService Savings service.\n   */\n  constructor(private savingsService: SavingsService) { }\n\n  /**\n   * Returns the Savings Account Charge data.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const savingAccountId = route.parent.paramMap.get('savingAccountId');\n    const chargeId = route.paramMap.get('id');\n    return this.savingsService.getSavingsAccountCharge(savingAccountId, chargeId);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable, forkJoin } from 'rxjs';\n\n/** Custom Services */\nimport { SavingsService } from '../savings.service';\n\n/**\n * Savings Account Actions data resolver.\n */\n@Injectable()\nexport class SavingsAccountActionsResolver implements Resolve<Object> {\n\n  /**\n   * @param {SavingsService} SavingsService Savings service.\n   */\n  constructor(private savingsService: SavingsService) { }\n\n  /**\n   * Returns the Savings account actions data.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const actionName = route.paramMap.get('name');\n    const savingAccountId = route.paramMap.get('savingAccountId') || route.parent.parent.paramMap.get('savingAccountId');\n    switch (actionName) {\n      case 'Assign Staff':\n        return this.savingsService.getSavingsAccountAndTemplate(savingAccountId, true);\n      case 'Add Charge':\n        return this.savingsService.getSavingsChargeTemplateResource(savingAccountId);\n      case 'Withdrawal':\n      case 'Deposit':\n        return this.savingsService.getSavingsTransactionTemplateResource(savingAccountId);\n      case 'Close':\n        return forkJoin([\n          this.savingsService.getSavingsTransactionTemplateResource(savingAccountId),\n          this.savingsService.getSavingsAccountData(savingAccountId)\n        ]);\n      case 'Apply Annual Fees':\n        return this.savingsService.getSavingsAccountData(savingAccountId);\n      default:\n        return undefined;\n    }\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { ReportsService } from 'app/reports/reports.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Savings Transaction Reciept resolver.\n */\n@Injectable()\nexport class SavingsTransactionRecieptResolver implements Resolve<Object> {\n\n  /**\n   * @param {ReportsService} reportsService Reports service.\n   * @param {SettingsService} settingsService Settings Service.\n   */\n  constructor(private reportsService: ReportsService,\n              private settingsService: SettingsService) { }\n\n  /**\n   * Returns the Savings Transaction Reciept\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const transactionId = route.paramMap.get('id');\n    const data = {\n      'output-type':\t'PDF',\n      R_transactionId:\ttransactionId\n    };\n    return this.reportsService.getPentahoRunReportData('Savings Transaction Receipt', data, 'default', this.settingsService.language.code, this.settingsService.dateFormat);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { SavingsService } from '../savings.service';\n\n/**\n * Savings Account Transaction Template data resolver.\n */\n@Injectable()\nexport class SavingsAccountTransactionTemplateResolver implements Resolve<Object> {\n\n  /**\n   * @param {SavingsService} SavingsService Savings service.\n   */\n  constructor(private savingsService: SavingsService) { }\n\n  /**\n   * Returns the Savings Account Transaction Template data.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const savingAccountId = route.parent.paramMap.get('savingAccountId');\n    const transactionId = route.paramMap.get('id');\n    return this.savingsService.getSavingsAccountTransactionTemplate(savingAccountId, transactionId);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { SavingsService } from '../savings.service';\n\n/**\n * GSIM Account data resolver.\n */\n@Injectable()\nexport class GSIMViewResolver implements Resolve<Object> {\n\n  /**\n   * @param {SavingsService} savingsService Savings service.\n   */\n  constructor(private savingsService: SavingsService) { }\n\n  /**\n   * Returns the Savings Account data.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const groupId = route.paramMap.get('groupId');\n    const savingAccountId = route.paramMap.get('savingAccountId');\n    return this.savingsService.getGSIMAccountData(savingAccountId, groupId);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute } from '@angular/router';\nimport { UploadDocumentDialogComponent } from 'app/clients/clients-view/custom-dialogs/upload-document-dialog/upload-document-dialog.component';\nimport { SavingsService } from 'app/savings/savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { environment } from 'environments/environment';\n\n@Component({\n  selector: 'mifosx-savings-documents-tab',\n  templateUrl: './savings-documents-tab.component.html',\n  styleUrls: ['./savings-documents-tab.component.scss']\n})\nexport class SavingsDocumentsTabComponent implements OnInit {\n\n  /** Stores the resolved savings documents data */\n  entityDocuments: any;\n  /** Stores the saving Account Id */\n  entityId: string;\n  entityType = 'savings';\n\n  /**\n   * Retrieves the savings data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute,\n    private savingsService: SavingsService,\n    private settingsService: SettingsService,\n    public dialog: MatDialog) {\n    this.route.data.subscribe((data: { savingsDocuments: any }) => {\n      this.setSavingsDocumentsData(data.savingsDocuments);\n    });\n    this.entityId = this.route.snapshot.params['savingAccountId'];\n  }\n\n  ngOnInit() {\n  }\n\n  setSavingsDocumentsData(data: any) {\n    data.forEach((ele: any) => {\n      ele.docUrl = this.settingsService.serverUrl + '/savings/' + ele.parentEntityId + '/documents/' + ele.id + '/attachment?tenantIdentifier=' + environment.fineractPlatformTenantId;\n      if (ele.fileName) {\n        if (ele.fileName.toLowerCase().indexOf('.jpg') !== -1 || ele.fileName.toLowerCase().indexOf('.jpeg') !== -1 || ele.fileName.toLowerCase().indexOf('.png') !== -1) {\n          ele.fileIsImage = true;\n        }\n      }\n      if (ele.type) {\n        if (ele.type.toLowerCase().indexOf('image') !== -1) {\n          ele.fileIsImage = true;\n        }\n      }\n    });\n    this.entityDocuments = data;\n  }\n\n  downloadDocument(parentEntityId: string, documentId: string) {\n    this.savingsService.downloadSavingsDocument(parentEntityId, documentId).subscribe(res => {\n      const url = window.URL.createObjectURL(res);\n      window.open(url);\n    });\n  }\n\n  uploadDocument(formData: FormData): any {\n    return this.savingsService.loadSavingsDocument(this.entityId, formData);\n  }\n\n  deleteDocument(documentId: any) {\n    this.savingsService.deleteSavingsDocument(this.entityId, documentId).subscribe((res: any) => {});\n  }\n\n}\n","<mifosx-entity-documents-tab [entityType]=\"entityType\" [entityId]=\"entityId\"\n  [entityDocuments]=\"entityDocuments\"\n  [callbackUpload]=\"uploadDocument\"\n  [callbackDownload]=\"downloadDocument\"\n  [callbackDelete]=\"deleteDocument\"\n>\n</mifosx-entity-documents-tab>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { AuthenticationService } from 'app/core/authentication/authentication.service';\nimport { SavingsService } from 'app/savings/savings.service';\n\n@Component({\n  selector: 'mifosx-notes-tab',\n  templateUrl: './notes-tab.component.html',\n  styleUrls: ['./notes-tab.component.scss']\n})\nexport class NotesTabComponent implements OnInit {\n\n  entityId: string;\n  username: string;\n  entityNotes: any;\n\n  constructor(private route: ActivatedRoute,\n    private savingsService: SavingsService,\n    private authenticationService: AuthenticationService) {\n    const savedCredentials = this.authenticationService.getCredentials();\n    this.username = savedCredentials.username;\n    this.entityId = this.route.snapshot.params['savingAccountId'];\n    this.route.data.subscribe((data: { savingAccountNotes: any }) => {\n      this.entityNotes = data.savingAccountNotes;\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  addNote(noteContent: any) {\n    this.savingsService.createSavingsNote(this.entityId, noteContent).subscribe((response: any) => {\n      this.entityNotes.push({\n        id: response.resourceId,\n        createdByUsername: this.username,\n        createdOn: new Date(),\n        note: noteContent.note\n      });\n    });\n  }\n\n  editNote(noteId: string, noteContent: any, index: number) {\n      this.savingsService.editSavingsNote(this.entityId, noteId, noteContent).subscribe(() => {\n        this.entityNotes[index].note = noteContent.note;\n      });\n  }\n\n  deleteNote(noteId: string, index: number) {\n      this.savingsService.deleteSavingsNote(this.entityId, noteId)\n        .subscribe(() => {\n          this.entityNotes.splice(index, 1);\n      });\n  }\n\n}\n","<mifosx-entity-notes-tab [entityId]=\"entityId\"\n  [entityNotes]=\"entityNotes\"\n  [callbackAdd]=\"addNote\"\n  [callbackEdit]=\"editNote\"\n  [callbackDelete]=\"deleteNote\"\n>\n</mifosx-entity-notes-tab>\n","import { Injectable } from '@angular/core';\nimport {\n  Resolve,\n  ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { SavingsService } from '../savings.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SavingNotesResolver implements Resolve<boolean> {\n\n    /**\n     * @param {SavingsService} savingsService Savings service.\n     */\n    constructor(private savingsService: SavingsService) { }\n\n    /**\n     * Returns the Savings data.\n     * @returns {Observable<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\n        const savingAccountId = route.parent.paramMap.get('savingAccountId');\n        return this.savingsService.getSavingsNotes(savingAccountId);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Resolve,\n  ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { SavingsService } from '../savings.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SavingDocumentsResolver implements Resolve<boolean> {\n\n    /**\n     * @param {SavingsService} savingsService Savings service.\n     */\n    constructor(private savingsService: SavingsService) { }\n\n    /**\n     * Returns the Savings data.\n     * @returns {Observable<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\n        const savingAccountId = route.parent.paramMap.get('savingAccountId');\n        return this.savingsService.getSavingsDocuments(savingAccountId);\n    }\n}\n","/** Angular Imports */\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n/** Translation Imports */\nimport { extract } from '../core/i18n/i18n.service';\n\n/** Custom Components */\nimport { SavingsAccountViewComponent } from './savings-account-view/savings-account-view.component';\nimport { TransactionsTabComponent } from './savings-account-view/transactions-tab/transactions-tab.component';\nimport { SavingAccountActionsComponent } from './saving-account-actions/saving-account-actions.component';\nimport { ChargesTabComponent } from './savings-account-view/charges-tab/charges-tab.component';\nimport { StandingInstructionsTabComponent } from './savings-account-view/standing-instructions-tab/standing-instructions-tab.component';\nimport { DatatableTabsComponent } from './savings-account-view/datatable-tabs/datatable-tabs.component';\nimport { CreateSavingsAccountComponent } from './create-savings-account/create-savings-account.component';\nimport { EditSavingsAccountComponent } from './edit-savings-account/edit-savings-account.component';\nimport { ViewTransactionComponent } from './savings-account-view/transactions/view-transaction/view-transaction.component';\nimport { ViewChargeComponent } from './savings-account-view/view-charge/view-charge.component';\nimport { ViewRecieptComponent } from './savings-account-view/transactions/view-reciept/view-reciept.component';\nimport { ExportTransactionsComponent } from './savings-account-view/transactions-tab/export-transactions/export-transactions.component';\nimport { EditTransactionComponent } from './savings-account-view/transactions/edit-transaction/edit-transaction.component';\nimport { CreateGsimAccountComponent } from './gsim-account/create-gsim-account/create-gsim-account.component';\nimport { GsimAccountComponent } from './gsim-account/gsim-account.component';\n\n/** Custom Resolvers */\nimport { SavingsAccountViewResolver } from './common-resolvers/savings-account-view.resolver';\nimport { SavingsDatatableResolver } from './common-resolvers/savings-datatable.resolver';\nimport { SavingsDatatablesResolver } from './common-resolvers/savings-datatables.resolver';\nimport { SavingsAccountTemplateResolver } from './common-resolvers/savings-account-template.resolver';\nimport { SavingsAccountAndTemplateResolver } from './common-resolvers/savings-account-and-template.resolver';\nimport { SavingsAccountTransactionResolver } from './common-resolvers/savings-account-transaction.resolver';\nimport { SavingsAccountChargeResolver } from './common-resolvers/savings-account-charge.resolver';\nimport { SavingsAccountActionsResolver } from './common-resolvers/savings-account-actions.resolver';\nimport { SavingsTransactionRecieptResolver } from './common-resolvers/savings-transaction-reciept.resolver';\nimport { SavingsAccountTransactionTemplateResolver } from './common-resolvers/savings-account-transaction-template.resolver';\nimport { GSIMAccountsResolver } from 'app/groups/common-resolvers/gsim-account-resolver';\nimport { GroupAccountsResolver } from 'app/groups/common-resolvers/group-account.resolver';\nimport { GSIMViewResolver } from './gsim-account/gsim-account.resolver';\nimport { GroupViewResolver } from 'app/groups/common-resolvers/group-view.resolver';\nimport { SavingsDocumentsTabComponent } from './savings-account-view/savings-documents-tab/savings-documents-tab.component';\nimport { NotesTabComponent } from './savings-account-view/notes-tab/notes-tab.component';\nimport { SavingNotesResolver } from './common-resolvers/saving-notes.resolver';\nimport { SavingDocumentsResolver } from './common-resolvers/saving-documents.resolver';\n\n/** Savings Routes */\nconst routes: Routes = [\n  {\n    path: '',\n    data: { title: extract('All Savings'), breadcrumb: 'Savings', routeParamBreadcrumb: false },\n    children: [\n      {\n        path: 'create',\n        data: { title: extract('Create Savings Account'), breadcrumb: 'Create Savings Account' },\n        component: CreateSavingsAccountComponent,\n        resolve: {\n          savingsAccountTemplate: SavingsAccountTemplateResolver\n        }\n      },\n      {\n        path: ':savingAccountId',\n        data: { title: extract('Saving Account View'), routeParamBreadcrumb: 'savingAccountId' },\n        component: SavingsAccountViewComponent,\n        resolve: {\n          savingsAccountData: SavingsAccountViewResolver,\n          savingsDatatables: SavingsDatatablesResolver\n        },\n        children: [\n          {\n            path: '',\n            redirectTo: 'transactions',\n            pathMatch: 'full'\n          },\n          {\n            path: 'transactions',\n            data: { title: extract('Savings Account Transactions'), breadcrumb: 'Transactions', routeParamBreadcrumb: false },\n            children: [\n              {\n                path: '',\n                component: TransactionsTabComponent\n              },\n              {\n                path: 'export',\n                component: ExportTransactionsComponent\n              }\n            ]\n          },\n          {\n            path: 'charges',\n            component: ChargesTabComponent,\n            data: { title: extract('Savings Account Charges'), breadcrumb: 'Charges', routeParamBreadcrumb: false }\n          },\n          {\n            path: 'standing-instructions',\n            component: StandingInstructionsTabComponent,\n            data: { title: extract('Savings Account SIH'), breadcrumb: 'Standing Instructions', routeParamBreadcrumb: false }\n          },\n          {\n            path: 'notes',\n            component: NotesTabComponent,\n            data: { title: extract('Savings Account Notes'), breadcrumb: 'Notes', routeParamBreadcrumb: false },\n            resolve: {\n              savingAccountNotes: SavingNotesResolver\n            }\n          },\n          {\n            path: 'documents',\n            component: SavingsDocumentsTabComponent,\n            data: { title: extract('Savings Account Documents'), breadcrumb: 'Documents', routeParamBreadcrumb: false },\n            resolve: {\n              savingsDocuments: SavingDocumentsResolver\n            }\n          },\n          {\n            path: 'datatables',\n            children: [\n              {\n                path: ':datatableName',\n                component: DatatableTabsComponent,\n                data: { title: extract('View Data Table'), routeParamBreadcrumb: 'datatableName' },\n                resolve: {\n                  savingsDatatable: SavingsDatatableResolver\n                }\n              }\n            ]\n          }\n        ]\n      },\n      {\n        path: ':savingAccountId/edit',\n        data: { title: extract('Edit Savings Account'), breadcrumb: 'Edit', routeParamBreadcrumb: false },\n        component: EditSavingsAccountComponent,\n        resolve: {\n          savingsAccountAndTemplate: SavingsAccountAndTemplateResolver\n        }\n      },\n      {\n        path: ':savingAccountId/transactions/:id',\n        data: { title: extract('Savings Account Transactions'), breadcrumb: 'Transactions', routeParamBreadcrumb: false },\n        children: [\n          {\n            path: '',\n            component: ViewTransactionComponent,\n            resolve: {\n              savingsAccountTransaction: SavingsAccountTransactionResolver\n            }\n          },\n          {\n            path: 'edit',\n            component: EditTransactionComponent,\n            data: { breadcrumb: 'Edit', routeParamBreadcrumb: false },\n            resolve: {\n              savingsAccountTransactionTemplate: SavingsAccountTransactionTemplateResolver\n            }\n          },\n          {\n            path: 'reciept',\n            component: ViewRecieptComponent,\n            data: { breadcrumb: 'Reciept', routeParamBreadcrumb: false },\n            resolve: {\n              savingsTransactionReciept: SavingsTransactionRecieptResolver\n            }\n          }\n        ]\n      },\n      {\n        path: ':savingAccountId/charges',\n        data: { title: extract('Savings Account Charges'), breadcrumb: 'Charges', routeParamBreadcrumb: false },\n        children: [\n          {\n            path: '',\n            redirectTo: '../charges', pathMatch: 'prefix'\n          },\n          {\n            path: ':id',\n            data: { routeParamBreadcrumb: 'id' },\n            component: ViewChargeComponent,\n            resolve: {\n              savingsAccountData: SavingsAccountViewResolver,\n              savingsAccountCharge: SavingsAccountChargeResolver\n            }\n          }\n        ]\n      },\n      {\n        path: ':savingAccountId/actions/:name',\n        data: { title: extract('Savings Account Actions'), breadcrumb: 'Savings Account Actions', routeParamBreadcrumb: 'name' },\n        component: SavingAccountActionsComponent,\n        resolve: {\n          savingsAccountActionData: SavingsAccountActionsResolver\n        }\n      },\n      {\n        path: ':savingAccountId/transfer-funds',\n        loadChildren: () => import('../account-transfers/account-transfers.module').then(m => m.AccountTransfersModule)\n      },\n      {\n        path: 'gsim-account',\n        children: [\n          {\n            path: 'create',\n            data: { title: extract('Create GSIM Application'), breadcrumb: 'Create GSIM Application' },\n            component: CreateGsimAccountComponent,\n            resolve: {\n              groupsData: GroupViewResolver,\n              savingsAccountTemplate: SavingsAccountTemplateResolver\n            },\n          },\n          {\n            path: ':savingAccountId',\n            data: { title: extract('GSIM Account View'), routeParamBreadcrumb: 'savingAccountId' },\n            children: [\n              {\n                path: '',\n                component: GsimAccountComponent,\n                resolve: {\n                  gsimData: GSIMViewResolver,\n                  savingAccountData: SavingsAccountViewResolver,\n                  groupsData: GroupAccountsResolver\n                },\n              },\n            ]\n          },\n        ]\n      }\n    ]\n  },\n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  declarations: [],\n  providers: [SavingsAccountViewResolver,\n    SavingsDatatablesResolver,\n    SavingsDatatableResolver,\n    SavingsAccountTemplateResolver,\n    SavingsAccountAndTemplateResolver,\n    SavingsAccountTransactionResolver,\n    SavingsAccountChargeResolver,\n    SavingsAccountActionsResolver,\n    SavingsTransactionRecieptResolver,\n    SavingsAccountTransactionTemplateResolver,\n    GSIMAccountsResolver,\n    GroupAccountsResolver,\n    GSIMViewResolver]\n})\nexport class SavingsRoutingModule { }\n","/** Angular Imports */\nimport { NgModule } from '@angular/core';\n\n/** Custom Modules */\nimport { SavingsRoutingModule } from './savings-routing.module';\nimport { SharedModule } from 'app/shared/shared.module';\nimport { PipesModule } from '../pipes/pipes.module';\nimport { DirectivesModule } from '../directives/directives.module';\n\n/** Custom Components */\nimport { SavingAccountActionsComponent } from './saving-account-actions/saving-account-actions.component';\nimport { SavingsAccountTransactionsComponent } from './saving-account-actions/savings-account-transactions/savings-account-transactions.component';\nimport { TransactionsTabComponent } from './savings-account-view/transactions-tab/transactions-tab.component';\nimport { SavingsAccountViewComponent } from './savings-account-view/savings-account-view.component';\nimport { ChargesTabComponent } from './savings-account-view/charges-tab/charges-tab.component';\nimport { StandingInstructionsTabComponent } from './savings-account-view/standing-instructions-tab/standing-instructions-tab.component';\nimport { DatatableTabsComponent } from './savings-account-view/datatable-tabs/datatable-tabs.component';\nimport { CreateSavingsAccountComponent } from './create-savings-account/create-savings-account.component';\nimport { SavingsAccountDetailsStepComponent } from './savings-account-stepper/savings-account-details-step/savings-account-details-step.component';\nimport { SavingsAccountChargesStepComponent } from './savings-account-stepper/savings-account-charges-step/savings-account-charges-step.component';\nimport { SavingsAccountTermsStepComponent } from './savings-account-stepper/savings-account-terms-step/savings-account-terms-step.component';\nimport { SavingsAccountPreviewStepComponent } from './savings-account-stepper/savings-account-preview-step/savings-account-preview-step.component';\nimport { EditSavingsAccountComponent } from './edit-savings-account/edit-savings-account.component';\nimport { ApproveSavingsAccountComponent } from './saving-account-actions/approve-savings-account/approve-savings-account.component';\nimport { RejectSavingsAccountComponent } from './saving-account-actions/reject-savings-account/reject-savings-account.component';\nimport { ActivateSavingsAccountComponent } from './saving-account-actions/activate-savings-account/activate-savings-account.component';\nimport { UndoApprovalSavingsAccountComponent } from './saving-account-actions/undo-approval-savings-account/undo-approval-savings-account.component';\nimport { PostInterestAsOnSavingsAccountComponent } from './saving-account-actions/post-interest-as-on-savings-account/post-interest-as-on-savings-account.component';\nimport { SavingsAccountAssignStaffComponent } from './saving-account-actions/savings-account-assign-staff/savings-account-assign-staff.component';\nimport { SavingsAccountUnassignStaffComponent } from './saving-account-actions/savings-account-unassign-staff/savings-account-unassign-staff.component';\nimport { CalculateInterestDialogComponent } from './savings-account-view/custom-dialogs/calculate-interest-dialog/calculate-interest-dialog.component';\nimport { PostInterestDialogComponent } from './savings-account-view/custom-dialogs/post-interest-dialog/post-interest-dialog.component';\nimport { ViewTransactionComponent } from './savings-account-view/transactions/view-transaction/view-transaction.component';\nimport { UndoTransactionDialogComponent } from './savings-account-view/custom-dialogs/undo-transaction-dialog/undo-transaction-dialog.component';\nimport { ViewChargeComponent } from './savings-account-view/view-charge/view-charge.component';\nimport { WaiveChargeDialogComponent } from './savings-account-view/custom-dialogs/waive-charge-dialog/waive-charge-dialog.component';\nimport { InactivateChargeDialogComponent } from './savings-account-view/custom-dialogs/inactivate-charge-dialog/inactivate-charge-dialog.component';\nimport { WithdrawByClientSavingsAccountComponent } from './saving-account-actions/withdraw-by-client-savings-account/withdraw-by-client-savings-account.component';\nimport { AddChargeSavingsAccountComponent } from './saving-account-actions/add-charge-savings-account/add-charge-savings-account.component';\nimport { CloseSavingsAccountComponent } from './saving-account-actions/close-savings-account/close-savings-account.component';\nimport { ToggleWithholdTaxDialogComponent } from './savings-account-view/custom-dialogs/toggle-withhold-tax-dialog/toggle-withhold-tax-dialog.component';\nimport { ViewRecieptComponent } from './savings-account-view/transactions/view-reciept/view-reciept.component';\nimport { ExportTransactionsComponent } from './savings-account-view/transactions-tab/export-transactions/export-transactions.component';\nimport { EditTransactionComponent } from './savings-account-view/transactions/edit-transaction/edit-transaction.component';\nimport { ApplyAnnualFeesSavingsAccountComponent } from './saving-account-actions/apply-annual-fees-savings-account/apply-annual-fees-savings-account.component';\nimport { GsimAccountComponent } from './gsim-account/gsim-account.component';\nimport { CreateGsimAccountComponent } from './gsim-account/create-gsim-account/create-gsim-account.component';\nimport { ManageSavingsAccountComponent } from './saving-account-actions/manage-savings-account/manage-savings-account.component';\nimport { ReleaseAmountDialogComponent } from './savings-account-view/custom-dialogs/release-amount-dialog/release-amount-dialog.component';\nimport { SavingsDocumentsTabComponent } from './savings-account-view/savings-documents-tab/savings-documents-tab.component';\nimport { NotesTabComponent } from './savings-account-view/notes-tab/notes-tab.component';\n\n\n/**\n * Savings Module\n *\n * All components related to Savings functions should be declared here.\n */\n@NgModule({\n  imports: [\n    SharedModule,\n    PipesModule,\n    DirectivesModule,\n    SavingsRoutingModule\n  ],\n  declarations: [\n    SavingAccountActionsComponent,\n    SavingsAccountTransactionsComponent,\n    TransactionsTabComponent,\n    SavingsAccountViewComponent,\n    ChargesTabComponent,\n    StandingInstructionsTabComponent,\n    DatatableTabsComponent,\n    CreateSavingsAccountComponent,\n    SavingsAccountDetailsStepComponent,\n    SavingsAccountChargesStepComponent,\n    SavingsAccountTermsStepComponent,\n    SavingsAccountPreviewStepComponent,\n    EditSavingsAccountComponent,\n    ApproveSavingsAccountComponent,\n    RejectSavingsAccountComponent,\n    ActivateSavingsAccountComponent,\n    UndoApprovalSavingsAccountComponent,\n    PostInterestAsOnSavingsAccountComponent,\n    SavingsAccountAssignStaffComponent,\n    SavingsAccountUnassignStaffComponent,\n    CalculateInterestDialogComponent,\n    PostInterestDialogComponent,\n    ViewTransactionComponent,\n    UndoTransactionDialogComponent,\n    ViewChargeComponent,\n    WaiveChargeDialogComponent,\n    InactivateChargeDialogComponent,\n    WithdrawByClientSavingsAccountComponent,\n    AddChargeSavingsAccountComponent,\n    CloseSavingsAccountComponent,\n    ToggleWithholdTaxDialogComponent,\n    ViewRecieptComponent,\n    ExportTransactionsComponent,\n    EditTransactionComponent,\n    ApplyAnnualFeesSavingsAccountComponent,\n    GsimAccountComponent,\n    CreateGsimAccountComponent,\n    ManageSavingsAccountComponent,\n    ReleaseAmountDialogComponent,\n    SavingsDocumentsTabComponent,\n    NotesTabComponent\n  ],\n  providers: [ ]\n})\nexport class SavingsModule {}\n"]}