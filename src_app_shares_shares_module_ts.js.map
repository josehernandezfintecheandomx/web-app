{"version":3,"file":"src_app_shares_shares_module_ts.js","mappings":"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","names":["SharesButtonsConfiguration","status","this","setOptions","setButtons","buttonsArray","optionArray","name","icon","taskPermissionName","option","push","index","map","entry","indexOf","splice","t","SharesService","http","accountId","template","httpParams","HttpParams","set","toString","get","params","clientId","productId","sharesAccount","post","put","delete","command","data","o","i0","factory","ctx_r7","ctx_r15","SharesAccountViewComponent","route","router","sharesService","dialog","subscribe","s","sharesAccountData","setConditionalButtons","value","buttonConfig","charges","forEach","charge","a","addOption","sharesPendingForApproval","purchasedShares","share","code","type","removeButton","navigate","relativeTo","deleteSharesAccount","open","DeleteDialogComponent","deleteContext","id","afterClosed","response","selectors","TransactionsTabComponent","parent","shareAccountData","transactionsData","dataSource","MatTableDataSource","ChargesTabComponent","chargesData","activeCharges","filter","isActive","DividendsTabComponent","dividendsData","dividends","SharesAccountDetailsStepComponent","formBuilder","settingsService","Date","EventEmitter","createSharesAccountDetailsForm","maxDate","businessDate","buildDependencies","sharesAccountTemplate","productData","productOptions","sharesAccountDetailsForm","patchValue","submittedDate","timeline","submittedOnDate","externalId","group","Validators","valueChanges","getSharesAccountTemplate","sharesAccountProductTemplate","emit","_r1","SharesAccountTermsStepComponent","createSharesAccountTermsForm","sharesAccountTermsForm","currencyCode","currency","decimal","decimalPlaces","currencyMultiple","inMultiplesOf","unitPrice","currentMarketPrice","savingsAccountId","isSavingsPatched","requestedShares","summary","totalPendingForApprovalShares","minimumActivePeriod","minimumActivePeriodFrequencyType","minimumActivePeriodTypeEnum","lockinPeriodFrequency","lockinPeriod","lockinPeriodFrequencyType","lockPeriodTypeEnum","applicationDate","purchasedDate","allowDividendCalculationForInactiveClients","disabled","minimumActivePeriodFrequencyTypeData","minimumActivePeriodFrequencyTypeOptions","lockinPeriodFrequencyTypeData","lockinPeriodFrequencyTypeOptions","savingsAccountsData","clientSavingsAccounts","ctx_r18","ctx_r22","SharesAccountChargesStepComponent","isChargesPatched","chargesDataSource","chargeData","concat","pristine","formfields","InputBase","controlName","label","amount","amountOrPercentage","required","FormDialogComponent","title","layout","addButtonText","newCharge","Object","r","ctx","SharesAccountPreviewStepComponent","f","ctx_r11","CreateSharesAccountComponent","dateUtils","m","$event","sharesAccountDetailsStep","sharesAccountTermsStep","valid","sharesAccountDetails","sharesAccountTerms","sharesAccountChargesStep","sharesAccountCharges","locale","language","dateFormat","chargeId","formatDate","createSharesAccount","resourceId","EditSharesAccountComponent","sharesAccountAndTemplate","updateSharesAccount","ApproveSharesAccountComponent","snapshot","shareAccountId","createApproveSharesAccountForm","approveSharesAccountForm","approvedDate","note","approveSharesAccountFormData","executeSharesAccountCommand","_r0","RejectSharesAccountComponent","createRejectSharesAccountForm","rejectSharesAccountForm","rejectedDate","rejectSharesAccountFormData","CloseSharesAccountComponent","createCloseSharesAccountForm","closeSharesAccountForm","closedDate","closeSharesAccountFormData","ActivateSharesAccountComponent","createActivateSharesAccountForm","activateSharesAccountForm","activatedDate","activateSharesAccountFormData","UndoApprovalSharesAccountComponent","ApplySharesComponent","d","shareAccountActionData","createApplySharesAccountForm","applySharesForm","requestedDate","applySharesFormData","RedeemSharesComponent","createRedeemSharesAccountForm","redeemSharesForm","redeemSharesFormData","ApproveShareDialogComponent","dialogRef","MAT_DIALOG_DATA","ApproveSharesComponent","sharesData","setShares","paginator","sort","shareId","approve","find","element","sharesTableRef","renderRows","MatPaginator","MatSort","RejectShareDialogComponent","RejectSharesComponent","reject","SharesAccountActionsComponent","Approve","Reject","Close","Activate","actions","SharesAccountViewResolver","paramMap","getSharesAccountData","ShareAccountActionsResolver","actionName","SharesAccountTemplateResolver","SharesAccountAndTemplateResolver","routes","path","extract","breadcrumb","routeParamBreadcrumb","children","component","resolve","SharesRoutingModule","imports","RouterModule","SharesModule","SharedModule","PipesModule","DirectivesModule"],"sourceRoot":"webpack:///","sources":["./src/app/shares/shares-account-view/shares-buttons.config.ts","./src/app/shares/shares.service.ts","./src/app/shares/shares-account-view/shares-account-view.component.html","./src/app/shares/shares-account-view/shares-account-view.component.ts","./src/app/shares/shares-account-view/transactions-tab/transactions-tab.component.html","./src/app/shares/shares-account-view/transactions-tab/transactions-tab.component.ts","./src/app/shares/shares-account-view/charges-tab/charges-tab.component.html","./src/app/shares/shares-account-view/charges-tab/charges-tab.component.ts","./src/app/shares/shares-account-view/dividends-tab/dividends-tab.component.html","./src/app/shares/shares-account-view/dividends-tab/dividends-tab.component.ts","./src/app/shares/shares-account-stepper/shares-account-details-step/shares-account-details-step.component.html","./src/app/shares/shares-account-stepper/shares-account-details-step/shares-account-details-step.component.ts","./src/app/shares/shares-account-stepper/shares-account-terms-step/shares-account-terms-step.component.html","./src/app/shares/shares-account-stepper/shares-account-terms-step/shares-account-terms-step.component.ts","./src/app/shares/shares-account-stepper/shares-account-charges-step/shares-account-charges-step.component.html","./src/app/shares/shares-account-stepper/shares-account-charges-step/shares-account-charges-step.component.ts","./src/app/shares/shares-account-stepper/shares-account-preview-step/shares-account-preview-step.component.html","./src/app/shares/shares-account-stepper/shares-account-preview-step/shares-account-preview-step.component.ts","./src/app/shares/create-shares-account/create-shares-account.component.html","./src/app/shares/create-shares-account/create-shares-account.component.ts","./src/app/shares/edit-shares-account/edit-shares-account.component.html","./src/app/shares/edit-shares-account/edit-shares-account.component.ts","./src/app/shares/shares-account-actions/approve-shares-account/approve-shares-account.component.html","./src/app/shares/shares-account-actions/approve-shares-account/approve-shares-account.component.ts","./src/app/shares/shares-account-actions/reject-shares-account/reject-shares-account.component.html","./src/app/shares/shares-account-actions/reject-shares-account/reject-shares-account.component.ts","./src/app/shares/shares-account-actions/close-shares-account/close-shares-account.component.html","./src/app/shares/shares-account-actions/close-shares-account/close-shares-account.component.ts","./src/app/shares/shares-account-actions/activate-shares-account/activate-shares-account.component.html","./src/app/shares/shares-account-actions/activate-shares-account/activate-shares-account.component.ts","./src/app/shares/shares-account-actions/undo-approval-shares-account/undo-approval-shares-account.component.ts","./src/app/shares/shares-account-actions/undo-approval-shares-account/undo-approval-shares-account.component.html","./src/app/shares/shares-account-actions/apply-shares/apply-shares.component.html","./src/app/shares/shares-account-actions/apply-shares/apply-shares.component.ts","./src/app/shares/shares-account-actions/redeem-shares/redeem-shares.component.html","./src/app/shares/shares-account-actions/redeem-shares/redeem-shares.component.ts","./src/app/shares/shares-account-actions/approve-shares/approve-share-dialog/approve-share-dialog.component.ts","./src/app/shares/shares-account-actions/approve-shares/approve-share-dialog/approve-share-dialog.component.html","./src/app/shares/shares-account-actions/approve-shares/approve-shares.component.html","./src/app/shares/shares-account-actions/approve-shares/approve-shares.component.ts","./src/app/shares/shares-account-actions/reject-shares/reject-share-dialog/reject-share-dialog.component.ts","./src/app/shares/shares-account-actions/reject-shares/reject-share-dialog/reject-share-dialog.component.html","./src/app/shares/shares-account-actions/reject-shares/reject-shares.component.html","./src/app/shares/shares-account-actions/reject-shares/reject-shares.component.ts","./src/app/shares/shares-account-actions/shares-account-actions.component.html","./src/app/shares/shares-account-actions/shares-account-actions.component.ts","./src/app/shares/common-resolvers/share-account-view.resolver.ts","./src/app/shares/common-resolvers/share-account-actions.resolver.ts","./src/app/shares/common-resolvers/shares-account-template.resolver.ts","./src/app/shares/common-resolvers/share-account-and-template.resolver.ts","./src/app/shares/shares-routing.module.ts","./src/app/shares/shares.module.ts"],"sourcesContent":["/** Shares Account Buttons Configuration */\nexport class SharesButtonsConfiguration {\n\n  optionArray: {\n    name: string,\n    taskPermissionName: string,\n  }[];\n\n  buttonsArray: {\n    name: string,\n    icon: string,\n    taskPermissionName: string,\n  }[];\n\n  constructor(status: string) {\n    this.setOptions(status);\n    this.setButtons(status);\n  }\n\n  get singleButtons() {\n    return this.buttonsArray;\n  }\n\n  get options() {\n    return this.optionArray;\n  }\n\n  setButtons(status: string) {\n    switch (status) {\n      case 'Active':\n        this.buttonsArray = [\n          {\n            name: 'Apply Additional Shares',\n            icon: 'fa fa-arrow-right',\n            taskPermissionName: 'APPLYADDITIONAL_SHAREACCOUNT'\n          },\n          {\n            name: 'Approve Additional Shares',\n            icon: 'fa fa-arrow-right',\n            taskPermissionName: 'APPROVEADDITIONAL_SHAREACCOUNT'\n          },\n          {\n            name: 'Reject Additional Shares',\n            icon: 'fa fa-arrow-left',\n            taskPermissionName: 'REJECTADDITIONAL_SHAREACCOUNT'\n          },\n          {\n            name: 'Redeem Shares',\n            icon: 'fa fa-arrow-left',\n            taskPermissionName: 'WITHDRAW_SAVINGSACCOUNT'\n          }\n        ];\n        break;\n      case 'Submitted and pending approval':\n        this.buttonsArray = [\n          {\n            name: 'Modify Application',\n            icon: 'fa fa-pencil ',\n            taskPermissionName: 'UPDATE_SHAREACCOUNT'\n          },\n          {\n            name: 'Approve',\n            icon: 'fa fa-check',\n            taskPermissionName: 'APPROVE_SHAREACCOUNT'\n          }\n        ];\n        break;\n      case 'Approved':\n        this.buttonsArray = [\n          {\n            name: 'Undo Approval',\n            icon: 'fa fa-undo',\n            taskPermissionName: 'APPROVALUNDO_SHAREACCOUNT'\n          },\n          {\n            name: 'Activate',\n            icon: 'fa fa-check',\n            taskPermissionName: 'ACTIVATE_SHAREACCOUNT'\n          }\n        ];\n        break;\n      default:\n        this.buttonsArray = [];\n    }\n  }\n\n  setOptions(status: string) {\n    switch (status) {\n        case 'Active':\n        this.optionArray = [\n          {\n            name: 'Close',\n            taskPermissionName: 'CLOSE_SHAREACCOUNT'\n          }\n        ];\n        break;\n      case 'Submitted and pending approval':\n        this.optionArray = [\n          {\n            name: 'Reject',\n            taskPermissionName: 'REJECT_SHAREACCOUNT'\n          },\n          {\n            name: 'Delete',\n            taskPermissionName: 'DELETE_SHAREACCOUNT'\n          }\n        ];\n        break;\n      case 'Approved':\n      default:\n        this.optionArray = [];\n    }\n  }\n\n  addOption(option: {name: string, taskPermissionName: string}) {\n    this.optionArray.push(option);\n  }\n\n  removeButton(name: string) {\n    const buttonNames = this.buttonsArray.map(entry => entry.name);\n    const index = buttonNames.indexOf(name);\n    this.buttonsArray.splice(index, 1);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/**\n * Shares Service.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SharesService {\n\n  /**\n   * @param {HttpClient} http Http Client\n   */\n  constructor(private http: HttpClient) {}\n\n  /**\n   * @param {string} accountId Shares Account Id of account to get data for.\n   * @param {boolean} template Shares account template required?.\n   * @returns {Observable<any>} Shares data.\n   */\n  getSharesAccountData(accountId: string, template: boolean): Observable<any> {\n    const httpParams = new HttpParams().set('template', template.toString());\n    return this.http.get(`/accounts/share/${accountId}`, { params: httpParams });\n  }\n\n  /**\n   * @param {string} clientId Client Id assosciated with shares account.\n   * @param {string} productId Product Id\n   * @returns {Observable<any>} Shares account template.\n   */\n  getSharesAccountTemplate(clientId: string, productId?: string): Observable<any> {\n    let httpParams = new HttpParams().set('clientId', clientId);\n    httpParams = productId ? httpParams.set('productId', productId) : httpParams;\n    return this.http.get('/accounts/share/template', { params: httpParams });\n  }\n\n  /**\n   * @param {any} sharesAccount Shares Account\n   * @returns {Observable<any>}\n   */\n  createSharesAccount(sharesAccount: any): Observable<any> {\n    return this.http.post('/accounts/share', sharesAccount);\n  }\n\n  /**\n   * @param {string} accountId: Shares account Id.\n   * @param {any} sharesAccount Shares Account\n   * @returns {Observable<any>}\n   */\n  updateSharesAccount(accountId: string, sharesAccount: any): Observable<any> {\n    return this.http.put(`/accounts/share/${accountId}`, sharesAccount);\n  }\n\n  /**\n   * @param {string} accountId shares account Id\n   * @returns {Observable<any>}\n   */\n  deleteSharesAccount(accountId: string): Observable<any> {\n    return this.http.delete(`/accounts/share/${accountId}`);\n  }\n\n  /**\n   * @param {string} accountId Shares Account Id\n   * @param {string} command Command\n   * @param {any} data Data\n   * @returns {Observable<any>} Shares data.\n   */\n  executeSharesAccountCommand(accountId: string, command: string, data: any): Observable<any> {\n    const httpParams = new HttpParams().set('command', command);\n    return this.http.post(`/accounts/share/${accountId}`, data, { params: httpParams });\n  }\n\n}\n","<mat-card class=\"shares-account-card\">\n\n  <mat-card-header fxLayout=\"column\" class=\"header\">\n\n    <mat-card-title-group class=\"header-title-group\">\n\n      <div class=\"profile-image-container\">\n        <div>\n          <img mat-card-md-image class=\"profile-image\"\n            matTooltip=\"Shares Account\"\n            src=\"assets/images/shares_account_placeholder.png\">\n        </div>\n      </div>\n\n      <div class=\"mat-typography account-card-title\">\n        <mat-card-title>\n          <h3>\n            <i class=\"fa fa-stop\" [ngClass]=\"sharesAccountData.status.code | statusLookup\" [matTooltip]=\"sharesAccountData.status.value\"></i>\n              Account Name : {{sharesAccountData.productName}}\n          </h3>\n        </mat-card-title>\n        <mat-card-subtitle>\n          <p>\n            Account #: {{sharesAccountData.accountNo}} | Client Name: {{sharesAccountData.clientName}}<br/>\n            Current Market Price: {{sharesAccountData.currency.displaySymbol}}&nbsp;{{sharesAccountData.currentMarketPrice}}<br/>\n            Lockin Period: {{sharesAccountData.lockinPeriod ? sharesAccountData.lockinPeriod : 'N/A'}} \n            {{sharesAccountData.lockinPeriod ? sharesAccountData.lockPeriodTypeEnum.value : ''}} \n          </p>\n        </mat-card-subtitle>\n      </div>\n\n    </mat-card-title-group>\n\n    <mat-card-actions class=\"account-actions\">\n\n      <ng-container *ngFor=\"let button of buttonConfig.singleButtons\">\n        <button mat-raised-button *mifosxHasPermission=\"button.taskPermissionName\" (click)=\"doAction(button.name)\">\n          <i class=\"{{button.icon}}\"></i> {{button.name}}</button>\n      </ng-container>\n  \n      <ng-container *ngIf=\"buttonConfig.options.length\">\n        <button mat-raised-button [matMenuTriggerFor]=\"More\">More</button>\n        <mat-menu #More=\"matMenu\">\n        <span *ngFor=\"let option of buttonConfig.options\">\n          <button mat-menu-item *mifosxHasPermission=\"option.taskPermissionName\" (click)=\"doAction(option.name)\">{{option.name}}</button>\n        </span>\n        </mat-menu>\n      </ng-container>\n  \n    </mat-card-actions>\n\n  </mat-card-header>\n\n  <mat-card-content class=\"content\">\n\n    <div class=\"shares-account-tables\" fxLayout=\"row\" fxLayoutGap=\"2%\">\n\n      <div fxFlex=\"49%\">\n        <h4 class=\"table-headers\">Shares Details</h4>\n        <table>\n          <tbody>\n            <tr>\n              <td>Activated On</td>\n              <td>{{sharesAccountData.timeline.activatedOnDate ? (sharesAccountData.timeline.activatedOnDate  | dateFormat) : 'Not Activated'}}</td>\n            </tr>\n            <tr>\n              <td>Currency</td>\n              <td>{{sharesAccountData.currency.name}} [{{sharesAccountData.currency.code}}]</td>\n            </tr>\n            <tr>\n              <td>External Id</td>\n              <td>{{sharesAccountData.externalId ? sharesAccountData.externalId : 'Not Provided'}}</td>\n            </tr>\n            <tr>\n              <td>Linked Savings Account(Dividend Posting)</td>\n              <td>{{sharesAccountData.savingsAccountNumber ? sharesAccountData.savingsAccountNumber : 'Unassigned'}}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <div fxFlex=\"49%\">\n        <h4 class=\"table-headers\">Account Summary</h4>\n        <table>\n          <tbody>\n            <tr>\n              <td>Approved Shares</td>\n              <td>{{sharesAccountData.summary.totalApprovedShares}}</td>\n            </tr>\n            <tr>\n              <td>Pending for Approval Shares</td>\n              <td>{{sharesAccountData.summary.totalPendingForApprovalShares}}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n    </div>\n\n    <nav mat-tab-nav-bar class=\"navigation-tabs\">\n      <a mat-tab-link [routerLink]=\"['./transactions']\" routerLinkActive #transactions=\"routerLinkActive\"\n      [active]=\"transactions.isActive\" *mifosxHasPermission=\"'READ_SHAREACCOUNTPURCHASE'\">\n        Transactions\n      </a>\n      <a mat-tab-link [routerLink]=\"['./charges']\" routerLinkActive #charges=\"routerLinkActive\"\n      [active]=\"charges.isActive\" *mifosxHasPermission=\"'READ_SHAREACCOUNTCHARGE'\">\n        Charges\n      </a>\n      <a mat-tab-link [routerLink]=\"['./dividends']\" routerLinkActive #dividends=\"routerLinkActive\"\n      [active]=\"dividends.isActive\" *mifosxHasPermission=\"'READ_SHAREACCOUNTDIVIDENDS'\">\n        Dividends\n      </a>\n    </nav>\n\n    <router-outlet></router-outlet>\n\n  </mat-card-content>\n\n</mat-card>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\n\n/** Custom Dialogs */\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\n\n/** Custom Services */\nimport { SharesService } from '../shares.service';\n\n/** Custom Buttons Configuration */\nimport { SharesButtonsConfiguration } from './shares-buttons.config';\n\n/**\n * Shares Account View\n */\n@Component({\n  selector: 'mifosx-shares-account-view',\n  templateUrl: './shares-account-view.component.html',\n  styleUrls: ['./shares-account-view.component.scss']\n})\nexport class SharesAccountViewComponent implements OnInit {\n\n  /** Shares Account Data */\n  sharesAccountData: any;\n  /** Button Configurations */\n  buttonConfig: SharesButtonsConfiguration;\n\n  /**\n   * Fetches shares account data from `resolve`\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SharesService} sharesService Shares Service\n   * @param {MatDialog} dialog Mat Dialog\n   */\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private sharesService: SharesService,\n              public dialog: MatDialog) {\n    this.route.data.subscribe((data: { sharesAccountData: any }) => {\n      this.sharesAccountData = data.sharesAccountData;\n    });\n  }\n\n  ngOnInit() {\n    this.setConditionalButtons();\n  }\n\n  /**\n   * Adds options to button config. conditionaly.\n   */\n  setConditionalButtons() {\n    const status = this.sharesAccountData.status.value;\n    this.buttonConfig = new SharesButtonsConfiguration(status);\n    if (this.sharesAccountData.charges) {\n      const charges: any[] = this.sharesAccountData.charges;\n      charges.forEach((charge: any) => {\n        if (charge.name === 'Annual fee - INR') {\n          this.buttonConfig.addOption({\n            name: 'Apply Anuual Fees',\n            taskPermissionName: 'APPLYANNUALFEE_SAVINGSACCOUNT'\n          });\n        }\n      });\n    }\n    if (status === 'Active') {\n      const purchasedShares: any[] = this.sharesAccountData.purchasedShares;\n      let sharesPendingForApproval = false;\n      purchasedShares.forEach((share: any) => {\n        if (share.status.code === 'purchasedSharesStatusType.applied' && share.type.code === 'purchasedSharesType.purchased') {\n          sharesPendingForApproval = true;\n        }\n      });\n      if (!sharesPendingForApproval) {\n        this.buttonConfig.removeButton('Approve Additional Shares');\n        this.buttonConfig.removeButton('Reject Additional Shares');\n      }\n    }\n  }\n\n  /**\n   * Performs button action\n   * @param {string} name Action name\n   */\n  doAction(name: string) {\n    switch (name) {\n      case 'Approve':\n      case 'Reject':\n      case 'Close':\n      case 'Activate':\n      case 'Undo Approval':\n      case 'Apply Additional Shares':\n      case 'Redeem Shares':\n      case 'Approve Additional Shares':\n      case 'Reject Additional Shares':\n        this.router.navigate([`actions/${name}`], { relativeTo: this.route });\n        break;\n      case 'Modify Application':\n        this.router.navigate(['edit'], { relativeTo: this.route });\n        break;\n      case 'Delete':\n        this.deleteSharesAccount();\n        break;\n    }\n  }\n\n  /**\n   * Deletes Shares Account.\n   */\n  private deleteSharesAccount() {\n    const deleteSharesAccountDialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `shares account with id: ${this.sharesAccountData.id}` }\n    });\n    deleteSharesAccountDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        this.sharesService.deleteSharesAccount(this.sharesAccountData.id).subscribe(() => {\n          this.router.navigate(['../../'], { relativeTo: this.route });\n        });\n      }\n    });\n  }\n\n}\n","<div class=\"tab-container mat-typography\">\n\n  <div class=\"m-b-10\">\n    <h3>All Transactions</h3>\n  </div>\n\n  <div class=\"mat-elevation-z1 m-b-25\">\n\n    <table mat-table [dataSource]=\"dataSource\">\n\n      <ng-container matColumnDef=\"transactionDate\">\n        <th mat-header-cell *matHeaderCellDef> Transaction Date </th>\n        <td mat-cell *matCellDef=\"let transaction\"> {{transaction.purchasedDate  | dateFormat}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"transactionType\">\n        <th mat-header-cell *matHeaderCellDef> Transaction Type </th>\n        <td mat-cell *matCellDef=\"let transaction\"> {{transaction.type.value}} {{transaction.type.value !== \"Charge Payment\" ? ('(' + transaction.status.value + ')') : ''}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"totalShares\">\n        <th mat-header-cell *matHeaderCellDef> Total Shares </th>\n        <td mat-cell *matCellDef=\"let transaction\"> {{transaction.numberOfShares}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"purchasedOrRedeemedPrice\">\n        <th mat-header-cell *matHeaderCellDef> Purhcased/Redeemed Price </th>\n        <td mat-cell *matCellDef=\"let transaction\">{{shareAccountData.currency.displaySymbol}}&nbsp;{{transaction.purchasedPrice}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"chargeAmount\">\n        <th mat-header-cell *matHeaderCellDef> Charge Amount </th>\n        <td mat-cell *matCellDef=\"let transaction\">{{shareAccountData.currency.displaySymbol}}&nbsp;{{transaction.type.value === \"Charge Payment\" ? transaction.amount : transaction.chargeAmount}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"amountRecievedOrReturned\">\n        <th mat-header-cell *matHeaderCellDef> Amount Recieved/Returned </th>\n        <td mat-cell *matCellDef=\"let transaction\">{{shareAccountData.currency.displaySymbol}}&nbsp;{{transaction.amount}}</td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n    </table>\n\n  </div>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ActivatedRoute } from '@angular/router';\n\n/**\n * Transactions Tab Component.\n */\n@Component({\n  selector: 'mifosx-transactions-tab',\n  templateUrl: './transactions-tab.component.html',\n  styleUrls: ['./transactions-tab.component.scss']\n})\nexport class TransactionsTabComponent implements OnInit {\n\n  /** Shares Account Data */\n  shareAccountData: any;\n  /** Transactions Data */\n  transactionsData: any;\n  /** Data source for transactions table. */\n  dataSource: MatTableDataSource<any>;\n  /** Columns to be displayed in transactions table. */\n  displayedColumns: string[] = [\n    'transactionDate',\n    'transactionType',\n    'totalShares',\n    'purchasedOrRedeemedPrice',\n    'chargeAmount',\n    'amountRecievedOrReturned'\n  ];\n\n  /**\n   * Retrieves shares account data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute) {\n    this.route.parent.data.subscribe((data: { sharesAccountData: any }) => {\n      this.shareAccountData = data.sharesAccountData;\n      this.transactionsData = this.shareAccountData.purchasedShares;\n    });\n  }\n\n  ngOnInit() {\n    this.dataSource = new MatTableDataSource(this.transactionsData);\n  }\n\n}\n","<div class=\"tab-container mat-typography\">\n\n  <div class=\"m-b-10\">\n    <h3>All Charges</h3>\n  </div>\n\n  <div class=\"mat-elevation-z1 m-b-25\">\n\n    <table mat-table [dataSource]=\"dataSource\">\n\n      <ng-container matColumnDef=\"name\">\n        <th mat-header-cell *matHeaderCellDef> Name </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{ charge.name }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"feeOrPenalty\">\n        <th mat-header-cell *matHeaderCellDef> Fee/Penalty </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{ charge.penalty === true ? 'Penalty' : 'Fee' }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"paymentDueAt\">\n        <th mat-header-cell *matHeaderCellDef> Payment Due At </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{ charge.chargeTimeType.value }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"calculationType\">\n        <th mat-header-cell *matHeaderCellDef> Calculation Type </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{charge.chargeCalculationType.value}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"due\">\n        <th mat-header-cell *matHeaderCellDef> Due </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{charge.currency.displaySymbol}}&nbsp;{{charge.amount}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"paid\">\n        <th mat-header-cell *matHeaderCellDef> Paid </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{charge.currency.displaySymbol}}&nbsp;{{charge.amountPaid}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"waived\">\n        <th mat-header-cell *matHeaderCellDef> Waived </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{charge.currency.displaySymbol}}&nbsp;{{charge.amountWaived}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"outstanding\">\n        <th mat-header-cell *matHeaderCellDef> Outstanding </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{charge.currency.displaySymbol}}&nbsp;{{charge.amountOutstanding}} </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n    </table>\n\n  </div>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ActivatedRoute } from '@angular/router';\n\n/**\n * Charges Tab Component\n */\n@Component({\n  selector: 'mifosx-charges-tab',\n  templateUrl: './charges-tab.component.html',\n  styleUrls: ['./charges-tab.component.scss']\n})\nexport class ChargesTabComponent implements OnInit {\n\n  /** Shares Account Data */\n  sharesAccountData: any;\n  /** Charges Data */\n  chargesData: any[];\n  /** Data source for charges table. */\n  dataSource: MatTableDataSource<any>;\n  /** Columns to be displayed in charges table. */\n  displayedColumns: string[] = [\n    'name',\n    'feeOrPenalty',\n    'paymentDueAt',\n    'calculationType',\n    'due',\n    'paid',\n    'waived',\n    'outstanding',\n  ];\n\n  /**\n   * Retrieves shares account aata from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute) {\n    this.route.parent.data.subscribe((data: { sharesAccountData: any }) => {\n      this.sharesAccountData = data.sharesAccountData;\n      this.chargesData = this.sharesAccountData.charges;\n    });\n  }\n\n  ngOnInit() {\n    const activeCharges = this.chargesData ? this.chargesData.filter(charge => charge.isActive) : [];\n    this.dataSource = new MatTableDataSource(activeCharges);\n  }\n\n}\n","<div class=\"tab-container mat-typography\">\n\n  <div class=\"m-b-10\">\n    <h3>All Dividends</h3>\n  </div>\n\n  <div class=\"mat-elevation-z1 m-b-25\">\n\n    <table mat-table [dataSource]=\"dataSource\" >\n\n      <ng-container matColumnDef=\"transactionDate\">\n        <th mat-header-cell *matHeaderCellDef> Transaction Date </th>\n        <td mat-cell *matCellDef=\"let dividend\"> {{dividend.postedDate  | dateFormat}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"amount\">\n        <th mat-header-cell *matHeaderCellDef> Amount </th>\n        <td mat-cell *matCellDef=\"let dividend\"> {{shareAccountData.currency.displaySymbol}}&nbsp;{{dividend.amount}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"transactionReference\">\n        <th mat-header-cell *matHeaderCellDef> Transaction Reference </th>\n        <td mat-cell *matCellDef=\"let dividend\"> {{dividend.savingsTransactionId}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"status\">\n        <th mat-header-cell *matHeaderCellDef> status </th>\n        <td mat-cell *matCellDef=\"let dividend\"> {{dividend.status.value}} </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n    </table>\n\n  </div>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ActivatedRoute } from '@angular/router';\n\n/**\n * Dividends Tab Component.\n */\n@Component({\n  selector: 'mifosx-dividends-tab',\n  templateUrl: './dividends-tab.component.html',\n  styleUrls: ['./dividends-tab.component.scss']\n})\nexport class DividendsTabComponent implements OnInit {\n\n  /** Shares Account Data */\n  shareAccountData: any;\n  /** Dividends Data */\n  dividendsData: any;\n  /** Data source for dividends table. */\n  dataSource: MatTableDataSource<any>;\n  /** Columns to be displayed in dividends table. */\n  displayedColumns: string[] = [\n    'transactionDate',\n    'amount',\n    'transactionReference',\n    'status'\n  ];\n\n  /**\n   * Retrieves shares account data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute) {\n    this.route.parent.data.subscribe((data: { sharesAccountData: any }) => {\n      this.shareAccountData = data.sharesAccountData;\n      this.dividendsData = this.shareAccountData.dividends;\n    });\n  }\n\n  ngOnInit() {\n    this.dataSource = new MatTableDataSource(this.dividendsData);\n  }\n\n}\n","<form [formGroup]=\"sharesAccountDetailsForm\">\n\n  <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Product Name</mat-label>\n      <mat-select formControlName=\"productId\" required>\n        <mat-option *ngFor=\"let product of productData\" [value]=\"product.id\">\n          {{ product.name }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Product Name is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\" (click)=\"submittedOnDatePicker.open()\">\n      <mat-label>Submitted On</mat-label>\n      <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"submittedOnDatePicker\"\n        formControlName=\"submittedDate\" required>\n      <mat-datepicker-toggle matSuffix [for]=\"submittedOnDatePicker\"></mat-datepicker-toggle>\n      <mat-datepicker #submittedOnDatePicker></mat-datepicker>\n      <mat-error>\n        Submission Date is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>External ID</mat-label>\n      <input matInput formControlName=\"externalId\">\n    </mat-form-field>\n\n  </div>\n\n  <div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n    <button mat-raised-button matStepperPrevious disabled>\n      <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n      Previous\n    </button>\n    <button mat-raised-button matStepperNext>\n      Next&nbsp;&nbsp;\n      <fa-icon icon=\"arrow-right\"></fa-icon>\n    </button>\n  </div>\n\n</form>\n","/** Angular Imports */\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Custom Services */\nimport { SharesService } from 'app/shares/shares.service';\n\n/**\n * Shares Account Details Step\n */\n@Component({\n  selector: 'mifosx-shares-account-details-step',\n  templateUrl: './shares-account-details-step.component.html',\n  styleUrls: ['./shares-account-details-step.component.scss']\n})\nexport class SharesAccountDetailsStepComponent implements OnInit {\n\n  /** Shares Account Template */\n  @Input() sharesAccountTemplate: any;\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Product Data */\n  productData: any;\n  /** Shares Account Details Form */\n  sharesAccountDetailsForm: FormGroup;\n\n  /** Shares Account Template with product data  */\n  @Output() sharesAccountProductTemplate = new EventEmitter();\n\n  /**\n   * Sets share account details form.\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {SharesService} sharesService Shares Service.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private sharesService: SharesService,\n              private settingsService: SettingsService) {\n    this.createSharesAccountDetailsForm();\n  }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.buildDependencies();\n    if (this.sharesAccountTemplate) {\n      this.productData = this.sharesAccountTemplate.productOptions;\n      if (this.sharesAccountTemplate.productId) {\n        this.sharesAccountDetailsForm.patchValue({\n          'productId': this.sharesAccountTemplate.productId,\n          'submittedDate': this.sharesAccountTemplate.timeline.submittedOnDate && new Date(this.sharesAccountTemplate.timeline.submittedOnDate),\n          'externalId': this.sharesAccountTemplate.externalId\n        });\n      }\n    }\n  }\n\n  /**\n   * Creates shares account details form.\n   */\n  createSharesAccountDetailsForm() {\n    this.sharesAccountDetailsForm = this.formBuilder.group({\n      'productId': ['', Validators.required],\n      'submittedDate': ['', Validators.required],\n      'externalId': ['']\n    });\n  }\n\n  /**\n   * Fetches shares account product template on productId value changes\n   */\n  buildDependencies() {\n    const clientId = this.sharesAccountTemplate.clientId;\n    this.sharesAccountDetailsForm.get('productId').valueChanges.subscribe((productId: string) => {\n      this.sharesService.getSharesAccountTemplate(clientId, productId).subscribe((response: any) => {\n        this.sharesAccountProductTemplate.emit(response);\n      });\n    });\n  }\n\n  /**\n   * Returns shares account form value.\n   */\n  get sharesAccountDetails() {\n    return this.sharesAccountDetailsForm.value;\n  }\n\n}\n","<form [formGroup]=\"sharesAccountTermsForm\">\n\n  <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\" fxLayoutAlign.gt-sm=\"start center\">\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Currency</mat-label>\n      <input matInput formControlName=\"currencyCode\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Decimal Places</mat-label>\n      <input type=\"number\" matInput formControlName=\"decimal\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Total Number of Shares</mat-label>\n      <input type=\"number\" matInput formControlName=\"requestedShares\" required>\n      <mat-error>\n        Total Number of Shares is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Today's Price</mat-label>\n      <input type=\"number\" matInput formControlName=\"unitPrice\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Currency in multiples of</mat-label>\n      <input type=\"number\" matInput formControlName=\"currencyMultiple\" >\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Default Savings Account</mat-label>\n      <mat-select formControlName=\"savingsAccountId\" required>\n        <mat-option *ngFor=\"let account of savingsAccountsData\" [value]=\"account.id\">\n          {{ account.accountNo }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Default Savings Account is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\" (click)=\"applicationDatePicker.open()\">\n      <mat-label>Application Date</mat-label>\n      <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"applicationDatePicker\"\n        formControlName=\"applicationDate\" required>\n      <mat-datepicker-toggle matSuffix [for]=\"applicationDatePicker\"></mat-datepicker-toggle>\n      <mat-datepicker #applicationDatePicker></mat-datepicker>\n      <mat-error>\n        Application Date is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-checkbox labelPosition=\"before\" formControlName=\"allowDividendCalculationForInactiveClients\" fxFlex=\"48%\">\n      Allow dividends for inactive clients\n    </mat-checkbox>\n\n    <h4 fxFlex=\"98%\" class=\"mat-h4\">Minimum Active Period</h4>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Frequency</mat-label>\n      <input type=\"number\" matInput formControlName=\"minimumActivePeriod\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Type</mat-label>\n      <mat-select formControlName=\"minimumActivePeriodFrequencyType\">\n        <mat-option *ngFor=\"let minimumActivePeriodFrequencyType of minimumActivePeriodFrequencyTypeData\" [value]=\"minimumActivePeriodFrequencyType.id\">\n          {{ minimumActivePeriodFrequencyType.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <h4 fxFlex=\"98%\" class=\"mat-h4\">Lock-in Period</h4>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Frequency</mat-label>\n      <input type=\"number\" matInput formControlName=\"lockinPeriodFrequency\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Type</mat-label>\n      <mat-select formControlName=\"lockinPeriodFrequencyType\">\n        <mat-option *ngFor=\"let lockinPeriodFrequencyType of lockinPeriodFrequencyTypeData\" [value]=\"lockinPeriodFrequencyType.id\">\n          {{ lockinPeriodFrequencyType.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n  </div>\n\n  <div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n    <button mat-raised-button matStepperPrevious disabled>\n      <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n      Previous\n    </button>\n    <button mat-raised-button matStepperNext>\n      Next&nbsp;&nbsp;\n      <fa-icon icon=\"arrow-right\"></fa-icon>\n    </button>\n  </div>\n\n</form>\n","/** Angular Imports */\nimport { Component, OnChanges, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Shares Account Terms Step\n */\n@Component({\n  selector: 'mifosx-shares-account-terms-step',\n  templateUrl: './shares-account-terms-step.component.html',\n  styleUrls: ['./shares-account-terms-step.component.scss']\n})\nexport class SharesAccountTermsStepComponent implements OnChanges, OnInit {\n\n  /** Shares Account and Product Template */\n  @Input() sharesAccountProductTemplate: any;\n  /** [Optional] Shares Account Template */\n  @Input() sharesAccountTemplate: any;\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Shares Account Terms Form */\n  sharesAccountTermsForm: FormGroup;\n  /** Minimum Active Period Frequency Type Data */\n  minimumActivePeriodFrequencyTypeData: any;\n  /** Lockin Period Frequency Type Data */\n  lockinPeriodFrequencyTypeData: any;\n  /** Savings Accounts Data */\n  savingsAccountsData: any;\n  /** For Edit Shares Account Form */\n  isSavingsPatched = false;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private settingsService: SettingsService) {\n    this.createSharesAccountTermsForm();\n  }\n\n  ngOnChanges() {\n    if (this.sharesAccountProductTemplate) {\n      this.sharesAccountTermsForm.patchValue({\n        'currencyCode': this.sharesAccountProductTemplate.currency.code,\n        'decimal': this.sharesAccountProductTemplate.currency.decimalPlaces,\n        'currencyMultiple': this.sharesAccountProductTemplate.currency.inMultiplesOf,\n        'unitPrice': this.sharesAccountProductTemplate.currentMarketPrice,\n        'savingsAccountId': ''\n      });\n      this.setOptions();\n      if (this.sharesAccountTemplate) {\n        if (!this.isSavingsPatched && this.sharesAccountTemplate.savingsAccountId) {\n          this.sharesAccountTermsForm.get('savingsAccountId').patchValue(this.sharesAccountTemplate.savingsAccountId);\n          this.isSavingsPatched = true;\n        }\n      }\n    }\n  }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    if (this.sharesAccountTemplate) {\n      this.sharesAccountTermsForm.patchValue({\n        'requestedShares': this.sharesAccountTemplate.summary.totalPendingForApprovalShares,\n        'minimumActivePeriod': this.sharesAccountTemplate.minimumActivePeriod,\n        'minimumActivePeriodFrequencyType': this.sharesAccountTemplate.minimumActivePeriod && this.sharesAccountTemplate.minimumActivePeriodTypeEnum.id,\n        'lockinPeriodFrequency': this.sharesAccountTemplate.lockinPeriod,\n        'lockinPeriodFrequencyType': this.sharesAccountTemplate.lockinPeriod && this.sharesAccountTemplate.lockPeriodTypeEnum.id,\n        'applicationDate': this.sharesAccountTemplate.purchasedShares[0].purchasedDate && new Date(this.sharesAccountTemplate.purchasedShares[0].purchasedDate),\n        'allowDividendCalculationForInactiveClients': this.sharesAccountTemplate.allowDividendCalculationForInactiveClients\n      });\n    }\n  }\n\n  /**\n   * Creates shares account terms form.\n   */\n  createSharesAccountTermsForm() {\n    this.sharesAccountTermsForm = this.formBuilder.group({\n      'currencyCode': [{value: '', disabled: true}],\n      'decimal': [{value: '',  disabled: true}],\n      'requestedShares': ['', Validators.required],\n      'unitPrice': [{value: '',  disabled: true}],\n      'currencyMultiple': [{value: '', disabled: true}],\n      'savingsAccountId': ['', Validators.required],\n      'minimumActivePeriod': [''],\n      'minimumActivePeriodFrequencyType': [''],\n      'lockinPeriodFrequency': [''],\n      'lockinPeriodFrequencyType': [''],\n      'applicationDate': ['', Validators.required],\n      'allowDividendCalculationForInactiveClients': [false]\n    });\n  }\n\n  /**\n   * Sets all select dropdown options.\n   */\n  setOptions() {\n    this.minimumActivePeriodFrequencyTypeData = this.sharesAccountProductTemplate.minimumActivePeriodFrequencyTypeOptions;\n    this.lockinPeriodFrequencyTypeData = this.sharesAccountProductTemplate.lockinPeriodFrequencyTypeOptions;\n    this.savingsAccountsData = this.sharesAccountProductTemplate.clientSavingsAccounts;\n  }\n\n  /**\n   * Returns shares account terms form value.\n   */\n  get sharesAccountTerms() {\n    return this.sharesAccountTermsForm.value;\n  }\n\n}\n","<div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n  <mat-form-field fxFlex=\"48%\">\n    <mat-label>Charge</mat-label>\n    <mat-select #charge>\n      <mat-option *ngFor=\"let charge of chargeData | chargesFilter:chargesDataSource:currencyCode.value\" [value]=\"charge\">\n        {{ charge.name }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n\n  <div fxFlex=\"48%\" fxFlexAlign=\"center\">\n    <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"addCharge(charge)\" [disabled]=\"!charge.value\">\n      <fa-icon icon=\"plus\" class=\"m-r-10\"></fa-icon>\n      Add\n    </button>\n  </div>\n\n  <table fxFlex=\"98%\" class=\"mat-elevation-z1\" mat-table [dataSource]=\"chargesDataSource\" [hidden]=\"chargesDataSource.length === 0\">\n\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef> Name </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.name + ', ' + charge.currency.displaySymbol }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"chargeCalculationType\">\n      <th mat-header-cell *matHeaderCellDef> Type </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.chargeCalculationType.value }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"amount\">\n      <th mat-header-cell *matHeaderCellDef> Amount </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.amount || charge.amountOrPercentage }}\n        <button mat-icon-button color=\"primary\" (click)=\"editCharge(charge)\">\n          <fa-icon icon=\"pen\"></fa-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"chargeTimeType\">\n      <th mat-header-cell *matHeaderCellDef> Collected On </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.chargeTimeType.value }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"action\">\n      <th mat-header-cell *matHeaderCellDef> Actions </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        <button mat-icon-button color=\"warn\" (click)=\"deleteCharge(charge)\">\n          <fa-icon icon=\"trash\"></fa-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n  </table>\n\n</div>\n\n<div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n  <button mat-raised-button matStepperPrevious>\n    <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n    Previous\n  </button>\n  <button mat-raised-button matStepperNext>\n    Next&nbsp;&nbsp;\n    <fa-icon icon=\"arrow-right\"></fa-icon>\n  </button>\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, OnChanges, Input } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { FormControl } from '@angular/forms';\n\n/** Custom Dialogs */\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\nimport { FormDialogComponent } from 'app/shared/form-dialog/form-dialog.component';\n\n/** Custom Models */\nimport { FormfieldBase } from 'app/shared/form-dialog/formfield/model/formfield-base';\nimport { InputBase } from 'app/shared/form-dialog/formfield/model/input-base';\n\n/**\n * Shares Account Charges Step\n */\n@Component({\n  selector: 'mifosx-shares-account-charges-step',\n  templateUrl: './shares-account-charges-step.component.html',\n  styleUrls: ['./shares-account-charges-step.component.scss']\n})\nexport class SharesAccountChargesStepComponent implements OnInit, OnChanges {\n\n  /** Shares Account Product Template */\n  @Input() sharesAccountProductTemplate: any;\n  /** Shares Account Template */\n  @Input() sharesAccountTemplate: any;\n  /** Currency Code */\n  @Input() currencyCode: FormControl;\n\n  /** Charge Data */\n  chargeData: any = [];\n  /** Charges Data Source */\n  chargesDataSource: {}[] = [];\n  /** Component is pristine if there has been no changes by user interaction */\n  pristine = true;\n  /** For Edit Shares Account Form */\n  isChargesPatched = false;\n  /** Display columns for charges table */\n  displayedColumns: string[] = ['name', 'chargeCalculationType', 'amount', 'chargeTimeType', 'action'];\n\n  /**\n   * @param {MatDialog} dialog Mat Dialog\n   */\n  constructor(public dialog: MatDialog) {}\n\n  ngOnInit() {\n    this.currencyCode.valueChanges.subscribe(() => {\n      if (!this.isChargesPatched && this.sharesAccountTemplate.charges) {\n        this.chargesDataSource = this.sharesAccountTemplate.charges;\n        this.isChargesPatched = true;\n      } else {\n        this.chargesDataSource = [];\n      }\n    });\n  }\n\n  ngOnChanges() {\n    if (this.sharesAccountProductTemplate) {\n      this.chargeData = this.sharesAccountProductTemplate.charges;\n    }\n  }\n\n  /**\n   * Adds the charge to charges table\n   * @param {any} charge Charge\n   */\n  addCharge(charge: any) {\n    this.chargesDataSource = this.chargesDataSource.concat([charge.value]);\n    charge.value = '';\n    this.pristine = false;\n  }\n\n  /**\n   * Edits Charge Amount\n   * @param {any} charge Charge\n   */\n  editCharge(charge: any) {\n    const formfields: FormfieldBase[] = [\n      new InputBase({\n        controlName: 'amount',\n        label: 'Amount',\n        value: charge.amount || charge.amountOrPercentage,\n        type: 'number',\n        required: false,\n      }),\n    ];\n    const data = {\n      title: 'Edit Charge',\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editNoteDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editNoteDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const newCharge = { ...charge, amount: response.data.value.amount };\n        this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1, newCharge);\n        this.chargesDataSource = this.chargesDataSource.concat([]);\n      }\n    });\n    this.pristine = false;\n  }\n\n  /**\n   * Removes the charge from charges table\n   * @param {any} charge Charge\n   */\n  deleteCharge(charge: any) {\n    const deleteChargeDialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `charge ${charge.name}` }\n    });\n    deleteChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1);\n        this.chargesDataSource = this.chargesDataSource.concat([]);\n      }\n    });\n    this.pristine = false;\n  }\n\n  /**\n   * Returns shares account charges\n   */\n  get sharesAccountCharges() {\n    return { charges: this.chargesDataSource };\n  }\n\n}\n","<div fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\n\n  <h3 class=\"mat-h3\" fxFlexFill>Details</h3>\n\n  <mat-divider fxFlexFill></mat-divider>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Product</span>\n    <span fxFlex=\"60%\">{{ sharesAccount.productId | find:sharesAccountTemplate.productOptions:'id':'name' }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Submitted On</span>\n    <span fxFlex=\"60%\">{{ sharesAccount.submittedDate  | dateFormat }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">External Id</span>\n    <span fxFlex=\"60%\">{{ sharesAccount.externalId || 'Unassigned' }}</span>\n  </div>\n\n  <h3 class=\"mat-h3\" fxFlexFill>Terms</h3>\n\n  <mat-divider fxFlexFill></mat-divider>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Currency</span>\n    <span fxFlex=\"60%\">{{ sharesAccountTermsForm.get('currencyCode').value | find:[sharesAccountProductTemplate.currency]:'code':'displayLabel' }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Decimal Places</span>\n    <span fxFlex=\"60%\">{{ sharesAccountTermsForm.get('decimal').value }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Total Number of Shares</span>\n    <span fxFlex=\"60%\">{{ sharesAccount.requestedShares }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Today's Price</span>\n    <span fxFlex=\"60%\">{{ sharesAccountTermsForm.get('unitPrice').value }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Currency in multiples of</span>\n    <span fxFlex=\"60%\">{{ sharesAccountTermsForm.get('currencyMultiple').value }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Default Savings Account</span>\n    <span fxFlex=\"60%\">{{ sharesAccount.savingsAccountId | find:sharesAccountProductTemplate.clientSavingsAccounts:'id':'accountNo' }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"sharesAccount.minimumActivePeriod\">\n    <span fxFlex=\"40%\">Minimum Active Period</span>\n    <span fxFlex=\"60%\">{{sharesAccount.minimumActivePeriod}}&nbsp;{{sharesAccount.minimumActivePeriodFrequencyType | find:sharesAccountProductTemplate.minimumActivePeriodFrequencyTypeOptions:'id':'value'}}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"sharesAccount.lockinPeriodFrequency\">\n    <span fxFlex=\"40%\">Lock-in Period</span>\n    <span fxFlex=\"60%\">{{sharesAccount.lockinPeriodFrequency}}&nbsp;{{sharesAccount.lockinPeriodFrequencyType | find:sharesAccountProductTemplate.lockinPeriodFrequencyTypeOptions:'id':'value'}}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Application Date</span>\n    <span fxFlex=\"60%\">{{ sharesAccount.applicationDate  | dateFormat }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Allow dividends for inactive clients</span>\n    <span fxFlex=\"60%\">{{ sharesAccount.allowDividendCalculationForInactiveClients }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"sharesAccount.charges.length\" fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\n\n    <h3 class=\"mat-h3\" fxFlexFill>Charges</h3>\n\n    <mat-divider fxFlexFill></mat-divider>\n\n    <table fxFlexFill class=\"mat-elevation-z1\" mat-table [dataSource]=\"sharesAccount.charges\">\n\n      <ng-container matColumnDef=\"name\">\n        <th mat-header-cell *matHeaderCellDef> Name </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.name + ', ' + charge.currency.displaySymbol }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"chargeCalculationType\">\n        <th mat-header-cell *matHeaderCellDef> Type </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.chargeCalculationType.value }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"amount\">\n        <th mat-header-cell *matHeaderCellDef> Amount </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.amount || charge.amountOrPercentage }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"chargeTimeType\">\n        <th mat-header-cell *matHeaderCellDef> Collected On </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.chargeTimeType.value }}\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"chargesDisplayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: chargesDisplayedColumns;\"></tr>\n\n    </table>\n\n  </div>\n\n</div>\n\n<div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n  <button mat-raised-button matStepperPrevious>\n    <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n    Previous\n  </button>\n  <button mat-raised-button [routerLink]=\"['../']\">\n    Cancel\n  </button>\n  <button mat-raised-button color=\"primary\" (click)=\"submit.emit()\">\n    Submit\n  </button>\n</div>\n","/** Angular Imports */\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n/**\n * Shares account preview step\n */\n@Component({\n  selector: 'mifosx-shares-account-preview-step',\n  templateUrl: './shares-account-preview-step.component.html',\n  styleUrls: ['./shares-account-preview-step.component.scss']\n})\nexport class SharesAccountPreviewStepComponent {\n\n  /** Shares Account Product Template */\n  @Input() sharesAccountProductTemplate: any;\n  /** Shares Account Template */\n  @Input() sharesAccountTemplate: any;\n  /** Shares Account Terms Form */\n  @Input() sharesAccountTermsForm: any;\n  /** Shares Account */\n  @Input() sharesAccount: any;\n\n  /** Display columns for charges table. */\n  chargesDisplayedColumns: string[] = ['name', 'chargeCalculationType', 'amount', 'chargeTimeType'];\n\n  /** Form submission event */\n  @Output() submit = new EventEmitter();\n\n  constructor() { }\n\n}\n","<div class=\"container\">\n\n  <mat-horizontal-stepper class=\"mat-elevation-z8\" labelPosition=\"bottom\" #shareProductStepper>\n\n    <ng-template matStepperIcon=\"number\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"edit\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"done\">\n      <fa-icon icon=\"check\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"error\">\n      <fa-icon icon=\"exclamation-triangle\" size=\"lg\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"preview\">\n      <fa-icon icon=\"eye\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <mat-step [stepControl]=\"sharesAccountDetailsForm\">\n\n      <ng-template matStepLabel>DETAILS</ng-template>\n\n      <mifosx-shares-account-details-step\n        [sharesAccountTemplate]=\"sharesAccountTemplate\" \n        (sharesAccountProductTemplate)=\"setTemplate($event)\"\n      >\n      </mifosx-shares-account-details-step>\n\n    </mat-step>\n\n    <mat-step [stepControl]=\"sharesAccountTermsForm\">\n\n      <ng-template matStepLabel>TERMS</ng-template>\n\n      <mifosx-shares-account-terms-step [sharesAccountProductTemplate]=\"sharesAccountProductTemplate\"></mifosx-shares-account-terms-step>\n\n    </mat-step>\n\n    <mat-step>\n\n      <ng-template matStepLabel>CHARGES</ng-template>\n\n      <mifosx-shares-account-charges-step\n        [sharesAccountProductTemplate]=\"sharesAccountProductTemplate\"\n        [sharesAccountTemplate]=\"sharesAccountTemplate\" \n        [currencyCode]=\"sharesAccountTermsForm.get('currencyCode')\"\n      >\n      </mifosx-shares-account-charges-step>\n\n    </mat-step>\n\n    <mat-step *ngIf=\"sharesAccountFormValid\" completed>\n\n      <ng-template matStepLabel>PREVIEW</ng-template>\n\n      <mifosx-shares-account-preview-step\n        [sharesAccountProductTemplate]=\"sharesAccountProductTemplate\"\n        [sharesAccountTemplate]=\"sharesAccountTemplate\"\n        [sharesAccountTermsForm]=\"sharesAccountTermsForm\"\n        [sharesAccount]=\"sharesAccount\"\n        (submit)=\"submit()\"\n      >\n      </mifosx-shares-account-preview-step>\n\n    </mat-step>\n\n  </mat-horizontal-stepper>\n\n</div>\n","/** Angular Imports */\nimport { Component, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n/** Custom Components */\nimport { SharesAccountDetailsStepComponent } from '../shares-account-stepper/shares-account-details-step/shares-account-details-step.component';\nimport { SharesAccountTermsStepComponent } from '../shares-account-stepper/shares-account-terms-step/shares-account-terms-step.component';\nimport { SharesAccountChargesStepComponent } from '../shares-account-stepper/shares-account-charges-step/shares-account-charges-step.component';\n\n/** Custom Services */\nimport { SharesService } from '../shares.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Create Shares Account Component\n */\n@Component({\n  selector: 'mifosx-create-shares-account',\n  templateUrl: './create-shares-account.component.html',\n  styleUrls: ['./create-shares-account.component.scss']\n})\nexport class CreateSharesAccountComponent {\n\n  /** Shares Account Template */\n  sharesAccountTemplate: any;\n  /** Shares Account Product Template */\n  sharesAccountProductTemplate: any;\n\n  /** Shares Account Details Step */\n  @ViewChild(SharesAccountDetailsStepComponent, { static: true }) sharesAccountDetailsStep: SharesAccountDetailsStepComponent;\n  /** Shares Account Terms Step */\n  @ViewChild(SharesAccountTermsStepComponent, { static: true }) sharesAccountTermsStep: SharesAccountTermsStepComponent;\n  /** Shares Account Charges Step */\n  @ViewChild(SharesAccountChargesStepComponent, { static: true }) sharesAccountChargesStep: SharesAccountChargesStepComponent;\n\n  /**\n   * Fetches shares account template from `resolve`\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {Dates} dateUtils Date Utils\n   * @param {SharesService} sharesService Shares Service\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private dateUtils: Dates,\n              private sharesService: SharesService,\n              private settingsService: SettingsService) {\n    this.route.data.subscribe((data: { sharesAccountTemplate: any }) => {\n      this.sharesAccountTemplate = data.sharesAccountTemplate;\n    });\n  }\n\n  /**\n   * Sets shares account product template.\n   * @param {any} $event API response\n   */\n  setTemplate($event: any) {\n    this.sharesAccountProductTemplate = $event;\n  }\n\n  /**\n   * Retrieves shares account details form.\n   */\n  get sharesAccountDetailsForm() {\n    return this.sharesAccountDetailsStep.sharesAccountDetailsForm;\n  }\n\n  /**\n   * Retrieves shares account terms form.\n   */\n  get sharesAccountTermsForm() {\n    return this.sharesAccountTermsStep.sharesAccountTermsForm;\n  }\n\n  /**\n   * Checks validity of overall shares account form.\n   */\n  get sharesAccountFormValid() {\n    return (\n      this.sharesAccountDetailsForm.valid &&\n      this.sharesAccountTermsForm.valid\n    );\n  }\n\n  /**\n   * Retrieves shares account object.\n   */\n  get sharesAccount() {\n    return {\n      ...this.sharesAccountDetailsStep.sharesAccountDetails,\n      ...this.sharesAccountTermsStep.sharesAccountTerms,\n      ...this.sharesAccountChargesStep.sharesAccountCharges\n    };\n  }\n\n  /**\n   * Creates a new share account.\n   */\n  submit() {\n    // TODO: Update once language and date settings are setup\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const sharesAccount = {\n      ...this.sharesAccount,\n      clientId: this.sharesAccountTemplate.clientId,\n      charges: this.sharesAccount.charges.map((charge: any) => ({ chargeId: charge.chargeId, amount: charge.amount })),\n      applicationDate: this.dateUtils.formatDate(this.sharesAccount.applicationDate, dateFormat),\n      submittedDate: this.dateUtils.formatDate(this.sharesAccount.submittedDate, dateFormat),\n      unitPrice: this.sharesAccountTermsForm.get('unitPrice').value,\n      dateFormat,\n      locale\n    };\n    this.sharesService.createSharesAccount(sharesAccount).subscribe((response: any) => {\n      this.router.navigate(['../', response.resourceId], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-horizontal-stepper class=\"mat-elevation-z8\" labelPosition=\"bottom\" #shareProductStepper>\n\n    <ng-template matStepperIcon=\"number\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"edit\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"done\">\n      <fa-icon icon=\"check\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"error\">\n      <fa-icon icon=\"exclamation-triangle\" size=\"lg\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"preview\">\n      <fa-icon icon=\"eye\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <mat-step [stepControl]=\"sharesAccountDetailsForm\">\n\n      <ng-template matStepLabel>DETAILS</ng-template>\n\n      <mifosx-shares-account-details-step\n        [sharesAccountTemplate]=\"sharesAccountAndTemplate\" \n        (sharesAccountProductTemplate)=\"setTemplate($event)\"\n      >\n      </mifosx-shares-account-details-step>\n\n    </mat-step>\n\n    <mat-step [stepControl]=\"sharesAccountTermsForm\">\n\n      <ng-template matStepLabel>TERMS</ng-template>\n\n      <mifosx-shares-account-terms-step \n        [sharesAccountProductTemplate]=\"sharesAccountProductTemplate\"\n        [sharesAccountTemplate]=\"sharesAccountAndTemplate\">\n      </mifosx-shares-account-terms-step>\n\n    </mat-step>\n\n    <mat-step>\n\n      <ng-template matStepLabel>CHARGES</ng-template>\n\n      <mifosx-shares-account-charges-step\n        [sharesAccountProductTemplate]=\"sharesAccountProductTemplate\"\n        [sharesAccountTemplate]=\"sharesAccountAndTemplate\" \n        [currencyCode]=\"sharesAccountTermsForm.get('currencyCode')\"\n      >\n      </mifosx-shares-account-charges-step>\n\n    </mat-step>\n\n    <mat-step *ngIf=\"sharesAccountFormValidAndNotPristine\" completed>\n\n      <ng-template matStepLabel>PREVIEW</ng-template>\n\n      <mifosx-shares-account-preview-step\n        [sharesAccountProductTemplate]=\"sharesAccountProductTemplate\"\n        [sharesAccountTemplate]=\"sharesAccountAndTemplate\"\n        [sharesAccountTermsForm]=\"sharesAccountTermsForm\"\n        [sharesAccount]=\"sharesAccount\"\n        (submit)=\"submit()\"\n      >\n      </mifosx-shares-account-preview-step>\n\n    </mat-step>\n\n  </mat-horizontal-stepper>\n\n</div>\n","/** Angular Imports */\nimport { Component, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n/** Custom Components */\nimport { SharesAccountDetailsStepComponent } from '../shares-account-stepper/shares-account-details-step/shares-account-details-step.component';\nimport { SharesAccountTermsStepComponent } from '../shares-account-stepper/shares-account-terms-step/shares-account-terms-step.component';\nimport { SharesAccountChargesStepComponent } from '../shares-account-stepper/shares-account-charges-step/shares-account-charges-step.component';\n\n/** Custom Services */\nimport { SharesService } from '../shares.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Edit Shares Account Component\n */\n@Component({\n  selector: 'mifosx-edit-shares-account',\n  templateUrl: './edit-shares-account.component.html',\n  styleUrls: ['./edit-shares-account.component.scss']\n})\nexport class EditSharesAccountComponent {\n\n  /** Shares Account and Template */\n  sharesAccountAndTemplate: any;\n  /** Shares Account Product Template */\n  sharesAccountProductTemplate: any;\n\n  /** Shares Account Details Step */\n  @ViewChild(SharesAccountDetailsStepComponent, { static: true }) sharesAccountDetailsStep: SharesAccountDetailsStepComponent;\n  /** Shares Account Terms Step */\n  @ViewChild(SharesAccountTermsStepComponent, { static: true }) sharesAccountTermsStep: SharesAccountTermsStepComponent;\n  /** Shares Account Charges Step */\n  @ViewChild(SharesAccountChargesStepComponent, { static: true }) sharesAccountChargesStep: SharesAccountChargesStepComponent;\n\n  /**\n   * Fetches shares account template from `resolve`\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {Dates} dateUtils Date Utils\n   * @param {SharesService} sharesService Shares Service\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private dateUtils: Dates,\n              private sharesService: SharesService,\n              private settingsService: SettingsService) {\n    this.route.data.subscribe((data: { sharesAccountAndTemplate: any }) => {\n      this.sharesAccountAndTemplate = data.sharesAccountAndTemplate;\n    });\n  }\n\n  /**\n   * Sets shares account product template.\n   * @param {any} $event API response\n   */\n  setTemplate($event: any) {\n    this.sharesAccountProductTemplate = $event;\n  }\n\n  /**\n   * Retrieves shares account details form.\n   */\n  get sharesAccountDetailsForm() {\n    return this.sharesAccountDetailsStep.sharesAccountDetailsForm;\n  }\n\n  /**\n   * Retrieves shares account terms form.\n   */\n  get sharesAccountTermsForm() {\n    return this.sharesAccountTermsStep.sharesAccountTermsForm;\n  }\n\n  /**\n   * Checks validity and pristinity of overall shares account form .\n   */\n  get sharesAccountFormValidAndNotPristine() {\n    return (\n      this.sharesAccountDetailsForm.valid &&\n      this.sharesAccountTermsForm.valid &&\n      (\n        !this.sharesAccountDetailsForm.pristine ||\n        !this.sharesAccountTermsForm.pristine ||\n        !this.sharesAccountChargesStep.pristine\n      )\n    );\n  }\n\n  /**\n   * Retrieves shares account object.\n   */\n  get sharesAccount() {\n    return {\n      ...this.sharesAccountDetailsStep.sharesAccountDetails,\n      ...this.sharesAccountTermsStep.sharesAccountTerms,\n      ...this.sharesAccountChargesStep.sharesAccountCharges\n    };\n  }\n\n  /**\n   * Updates a share account.\n   */\n  submit() {\n    // TODO: Update once language and date settings are setup\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const sharesAccount = {\n      ...this.sharesAccount,\n      clientId: this.sharesAccountAndTemplate.clientId,\n      charges: this.sharesAccount.charges.map((charge: any) => ({ chargeId: charge.chargeId, amount: charge.amount })),\n      applicationDate: this.dateUtils.formatDate(this.sharesAccount.applicationDate, dateFormat),\n      submittedDate: this.dateUtils.formatDate(this.sharesAccount.submittedDate, dateFormat),\n      unitPrice: this.sharesAccountTermsForm.get('unitPrice').value,\n      dateFormat,\n      locale\n    };\n    this.sharesService.updateSharesAccount(this.sharesAccountAndTemplate.id , sharesAccount).subscribe((response: any) => {\n      this.router.navigate(['../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"approveSharesAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"approvedDatePicker.open()\">\n            <mat-label>Approved On Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"approvedDatePicker\" required formControlName=\"approvedDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"approvedDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #approvedDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"approveSharesAccountForm.controls.approvedDate.hasError('required')\">\n              Approved On Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button  [disabled]=\"!approveSharesAccountForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { SharesService } from 'app/shares/shares.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Approve Shares Account Component\n */\n@Component({\n  selector: 'mifosx-approve-shares-account',\n  templateUrl: './approve-shares-account.component.html',\n  styleUrls: ['./approve-shares-account.component.scss']\n})\nexport class ApproveSharesAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Approve Share Account form. */\n  approveSharesAccountForm: FormGroup;\n  /** Shares Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SharesService} sharesService Shares Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Settings Service.\n   */\n  constructor(private formBuilder: FormBuilder,\n              private sharesService: SharesService,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private router: Router,\n              private settingsService: SettingsService) {\n    this.accountId = this.route.parent.snapshot.params['shareAccountId'];\n  }\n\n  /**\n   * Creates the approve shares form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createApproveSharesAccountForm();\n  }\n\n  /**\n   * Creates the approve shares account form.\n   */\n  createApproveSharesAccountForm() {\n    this.approveSharesAccountForm = this.formBuilder.group({\n      'approvedDate': ['', Validators.required],\n      'note': ['']\n    });\n  }\n\n  /**\n   * Submits the form and approves the share account,\n   * if successful redirects to the share account.\n   */\n  submit() {\n    const approveSharesAccountFormData = this.approveSharesAccountForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevApprovedDate: Date = this.approveSharesAccountForm.value.approvedDate;\n    if (approveSharesAccountFormData.approvedDate instanceof Date) {\n      approveSharesAccountFormData.approvedDate = this.dateUtils.formatDate(prevApprovedDate, dateFormat);\n    }\n    const data = {\n      ...approveSharesAccountFormData,\n      dateFormat,\n      locale\n    };\n    this.sharesService.executeSharesAccountCommand(this.accountId, 'approve', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"rejectSharesAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"rejectedDatePicker.open()\">\n            <mat-label>Rejected On Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"rejectedDatePicker\" required formControlName=\"rejectedDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"rejectedDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #rejectedDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"rejectSharesAccountForm.controls.rejectedDate.hasError('required')\">\n              Rejected On Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"warn\" [disabled]=\"!rejectSharesAccountForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { SharesService } from 'app/shares/shares.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Reject Shares Account Component\n */\n@Component({\n  selector: 'mifosx-reject-shares-account',\n  templateUrl: './reject-shares-account.component.html',\n  styleUrls: ['./reject-shares-account.component.scss']\n})\nexport class RejectSharesAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Reject Share Account form. */\n  rejectSharesAccountForm: FormGroup;\n  /** Shares Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SharesService} sharesService Shares Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private sharesService: SharesService,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private router: Router,\n              private settingsService: SettingsService) {\n    this.accountId = this.route.parent.snapshot.params['shareAccountId'];\n  }\n\n  /**\n   * Creates the reject shares form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createRejectSharesAccountForm();\n  }\n\n  /**\n   * Creates the reject shares account form.\n   */\n  createRejectSharesAccountForm() {\n    this.rejectSharesAccountForm = this.formBuilder.group({\n      'rejectedDate': ['', Validators.required],\n      'note': ['']\n    });\n  }\n\n  /**\n   * Submits the form and rejects the share account,\n   * if successful redirects to the share account.\n   */\n  submit() {\n    const rejectSharesAccountFormData = this.rejectSharesAccountForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevRejectedDate: Date = this.rejectSharesAccountForm.value.rejectedDate;\n    if (rejectSharesAccountFormData.rejectedDate instanceof Date) {\n      rejectSharesAccountFormData.rejectedDate = this.dateUtils.formatDate(prevRejectedDate, dateFormat);\n    }\n    const data = {\n      ...rejectSharesAccountFormData,\n      dateFormat,\n      locale\n    };\n    this.sharesService.executeSharesAccountCommand(this.accountId, 'reject', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"closeSharesAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"closedDatePicker.open()\">\n            <mat-label>Closed On Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"closedDatePicker\" required formControlName=\"closedDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"closedDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #closedDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"closeSharesAccountForm.controls.closedDate.hasError('required')\">\n              Closed On Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"warn\" [disabled]=\"!closeSharesAccountForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { SharesService } from 'app/shares/shares.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Close Shares Account Component\n */\n@Component({\n  selector: 'mifosx-close-shares-account',\n  templateUrl: './close-shares-account.component.html',\n  styleUrls: ['./close-shares-account.component.scss']\n})\nexport class CloseSharesAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Close Share Account form. */\n  closeSharesAccountForm: FormGroup;\n  /** Shares Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SharesService} sharesService Shares Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Settings Service.\n   */\n  constructor(private formBuilder: FormBuilder,\n              private sharesService: SharesService,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private router: Router,\n              private settingsService: SettingsService) {\n    this.accountId = this.route.parent.snapshot.params['shareAccountId'];\n  }\n\n  /**\n   * Creates the close shares form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createCloseSharesAccountForm();\n  }\n\n  /**\n   * Creates the close shares account form.\n   */\n  createCloseSharesAccountForm() {\n    this.closeSharesAccountForm = this.formBuilder.group({\n      'closedDate': ['', Validators.required],\n      'note': ['']\n    });\n  }\n\n  /**\n   * Submits the form and closes the share account,\n   * if successful redirects to the share account.\n   */\n  submit() {\n    const closeSharesAccountFormData = this.closeSharesAccountForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevClosedDate: Date = this.closeSharesAccountForm.value.closedDate;\n    if (closeSharesAccountFormData.closedDate instanceof Date) {\n      closeSharesAccountFormData.closedDate = this.dateUtils.formatDate(prevClosedDate, dateFormat);\n    }\n    const data = {\n      ...closeSharesAccountFormData,\n      dateFormat,\n      locale\n    };\n    this.sharesService.executeSharesAccountCommand(this.accountId, 'close', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"activateSharesAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n          <mat-form-field fxFlex (click)=\"activatedDatePicker.open()\">\n            <mat-label>Activated On Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"activatedDatePicker\" required formControlName=\"activatedDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"activatedDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #activatedDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"activateSharesAccountForm.controls.activatedDate.hasError('required')\">\n              Activated On Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button  [disabled]=\"!activateSharesAccountForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { SharesService } from 'app/shares/shares.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Activate Shares Account Component\n */\n@Component({\n  selector: 'mifosx-activate-shares-account',\n  templateUrl: './activate-shares-account.component.html',\n  styleUrls: ['./activate-shares-account.component.scss']\n})\nexport class ActivateSharesAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Activate Share Account form. */\n  activateSharesAccountForm: FormGroup;\n  /** Shares Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SharesService} sharesService Shares Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Settings Service.\n   */\n  constructor(private formBuilder: FormBuilder,\n              private sharesService: SharesService,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private router: Router,\n              private settingsService: SettingsService) {\n    this.accountId = this.route.parent.snapshot.params['shareAccountId'];\n  }\n\n  /**\n   * Creates the activate shares form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createActivateSharesAccountForm();\n  }\n\n  /**\n   * Creates the activate shares account form.\n   */\n  createActivateSharesAccountForm() {\n    this.activateSharesAccountForm = this.formBuilder.group({\n      'activatedDate': ['', Validators.required]\n    });\n  }\n\n  /**\n   * Submits the form and activates the share account,\n   * if successful redirects to the share account.\n   */\n  submit() {\n    const activateSharesAccountFormData = this.activateSharesAccountForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevActivatedDate: Date = this.activateSharesAccountForm.value.activatedDate;\n    if (activateSharesAccountFormData.activatedDate instanceof Date) {\n      activateSharesAccountFormData.activatedDate = this.dateUtils.formatDate(prevActivatedDate, dateFormat);\n    }\n    const data = {\n      ...activateSharesAccountFormData,\n      dateFormat,\n      locale\n    };\n    this.sharesService.executeSharesAccountCommand(this.accountId, 'activate', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","/** Angular Imports */\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { SharesService } from 'app/shares/shares.service';\n\n/**\n * Undo Approval Shares Account Component\n */\n@Component({\n  selector: 'mifosx-undo-approval-shares-account',\n  templateUrl: './undo-approval-shares-account.component.html',\n  styleUrls: ['./undo-approval-shares-account.component.scss']\n})\nexport class UndoApprovalSharesAccountComponent {\n\n  /** Shares Account Id */\n  accountId: any;\n\n  /**\n   * @param {SharesService} sharesService Shares Service\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   */\n  constructor(private sharesService: SharesService,\n              private route: ActivatedRoute,\n              private router: Router) {\n    this.accountId = this.route.parent.snapshot.params['shareAccountId'];\n  }\n\n  /**\n   * Submits the form and undo the approval of share account,\n   * if successful redirects to the share account.\n   */\n  submit() {\n    this.sharesService.executeSharesAccountCommand(this.accountId, 'undoapproval', {}).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div>\n\n          <p class=\"mat-typography confirm-text\">\n            Are you sure you want to undo approval of shares account with ID: {{accountId}} ?\n          </p>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"warn\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"applySharesForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"requestedDatePicker.open()\">\n            <mat-label>Request Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"requestedDatePicker\" required formControlName=\"requestedDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"requestedDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #requestedDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"applySharesForm.controls.requestedDate.hasError('required')\">\n              Request Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Total No. of Shares</mat-label>\n            <input matInput required formControlName=\"requestedShares\">\n            <mat-error *ngIf=\"applySharesForm.controls.requestedShares.hasError('required')\">\n              Requested Shares is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Today's Price</mat-label>\n            <input matInput required formControlName=\"unitPrice\">\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button  [disabled]=\"!applySharesForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { SharesService } from 'app/shares/shares.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Apply Shares Component\n */\n@Component({\n  selector: 'mifosx-apply-shares',\n  templateUrl: './apply-shares.component.html',\n  styleUrls: ['./apply-shares.component.scss']\n})\nexport class ApplySharesComponent implements OnInit {\n\n  /** Shares account data. */\n  sharesAccountData: any;\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Apply Share Account form. */\n  applySharesForm: FormGroup;\n  /** Shares Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SharesService} sharesService Shares Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private sharesService: SharesService,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private router: Router,\n              private settingsService: SettingsService) {\n    this.accountId = this.route.parent.snapshot.params['shareAccountId'];\n    this.route.data.subscribe((data: { shareAccountActionData: any }) => {\n      this.sharesAccountData = data.shareAccountActionData;\n    });\n  }\n\n  /**\n   * Creates the apply shares form.\n   * Fetching data from service as action buttons malfunction\n   * in clients view upon using a common resolver.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createApplySharesAccountForm();\n    this.applySharesForm.get('unitPrice').patchValue(this.sharesAccountData.currentMarketPrice || '');\n  }\n\n  /**\n   * Creates the apply shares form.\n   */\n  createApplySharesAccountForm() {\n    this.applySharesForm = this.formBuilder.group({\n      'requestedDate': ['', Validators.required],\n      'requestedShares': ['', Validators.required],\n      'unitPrice': [{value: '', disabled: true}]\n    });\n  }\n\n  /**\n   * Submits the form and applies additional shares to the share account,\n   * if successful redirects to the share account.\n   */\n  submit() {\n    const applySharesFormData = this.applySharesForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevRequestedDate: Date = this.applySharesForm.value.requestedDate;\n    if (applySharesFormData.requestedDate instanceof Date) {\n      applySharesFormData.requestedDate = this.dateUtils.formatDate(prevRequestedDate, dateFormat);\n    }\n    const data = {\n      ...applySharesFormData,\n      unitPrice: this.applySharesForm.get('unitPrice').value,\n      dateFormat,\n      locale\n    };\n    this.sharesService.executeSharesAccountCommand(this.accountId, 'applyadditionalshares', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"redeemSharesForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"requestedDatePicker.open()\">\n            <mat-label>Request Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"requestedDatePicker\" required formControlName=\"requestedDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"requestedDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #requestedDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"redeemSharesForm.controls.requestedDate.hasError('required')\">\n              Request Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Total No. of Shares</mat-label>\n            <input matInput required formControlName=\"requestedShares\">\n            <mat-error *ngIf=\"redeemSharesForm.controls.requestedShares.hasError('required')\">\n              Requested Shares is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Today's Price</mat-label>\n            <input matInput required formControlName=\"unitPrice\">\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"warn\" [disabled]=\"!redeemSharesForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { SharesService } from 'app/shares/shares.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Redeem Shares Component\n */\n@Component({\n  selector: 'mifosx-redeem-shares',\n  templateUrl: './redeem-shares.component.html',\n  styleUrls: ['./redeem-shares.component.scss']\n})\nexport class RedeemSharesComponent implements OnInit {\n\n  /** Shares account data. */\n  sharesAccountData: any;\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Redeem Share Account form. */\n  redeemSharesForm: FormGroup;\n  /** Shares Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SharesService} sharesService Shares Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Settings Service.\n   */\n  constructor(private formBuilder: FormBuilder,\n              private sharesService: SharesService,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private router: Router,\n              private settingsService: SettingsService) {\n    this.accountId = this.route.parent.snapshot.params['shareAccountId'];\n    this.route.data.subscribe((data: { shareAccountActionData: any }) => {\n      this.sharesAccountData = data.shareAccountActionData;\n    });\n  }\n\n  /**\n   * Creates the apply shares form.\n   * Fetching data from service as action buttons malfunction\n   * in clients view upon using a common resolver.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createRedeemSharesAccountForm();\n    this.redeemSharesForm.get('unitPrice').patchValue(this.sharesAccountData.currentMarketPrice || '');\n  }\n\n  /**\n   * Creates the apply shares form.\n   */\n  createRedeemSharesAccountForm() {\n    this.redeemSharesForm = this.formBuilder.group({\n      'requestedDate': ['', Validators.required],\n      'requestedShares': ['', Validators.required],\n      'unitPrice': [{value: '', disabled: true}]\n    });\n  }\n\n  /**\n   * Submits the form and applies additional shares to the share account,\n   * if successful redirects to the share account.\n   */\n  submit() {\n    const redeemSharesFormData = this.redeemSharesForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevRequestedDate: Date = this.redeemSharesForm.value.requestedDate;\n    if (redeemSharesFormData.requestedDate instanceof Date) {\n      redeemSharesFormData.requestedDate = this.dateUtils.formatDate(prevRequestedDate, dateFormat);\n    }\n    const data = {\n      ...redeemSharesFormData,\n      unitPrice: this.redeemSharesForm.get('unitPrice').value,\n      dateFormat,\n      locale\n    };\n    this.sharesService.executeSharesAccountCommand(this.accountId, 'redeemshares', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","/** Angular Imports */\nimport { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n/**\n * Approve share dialog component.\n */\n@Component({\n  selector: 'mifosx-approve-share-dialog',\n  templateUrl: './approve-share-dialog.component.html',\n  styleUrls: ['./approve-share-dialog.component.scss']\n})\nexport class ApproveShareDialogComponent {\n\n  /**\n   * @param {MatDialogRef} dialogRef Component reference to dialog.\n   * @param {any} data Provides a deleteContext.\n   */\n  constructor(public dialogRef: MatDialogRef<ApproveShareDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any) { }\n\n}\n","<h1 mat-dialog-title>Approve Share</h1>\n<div mat-dialog-content>\n  <p>Are you sure you want to approve share with id: {{ data.shareId }} ?</p>\n</div>\n<mat-dialog-actions align=\"end\">\n  <button mat-raised-button mat-dialog-close>Cancel</button>\n  <button mat-raised-button  [mat-dialog-close]=\"{ approve: true }\">Confirm</button>\n</mat-dialog-actions>\n","<div class=\"container\">\n\n  <div class=\"mat-elevation-z8\">\n\n    <table #sharesTable mat-table [dataSource]=\"dataSource\" matSort>\n\n      <ng-container matColumnDef=\"transactionDate\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Transaction Date </th>\n        <td mat-cell *matCellDef=\"let share\"> {{ share.purchasedDate  | dateFormat }}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"totalShares\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Total Shares </th>\n        <td mat-cell *matCellDef=\"let share\"> {{ share.numberOfShares }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"redeemedPrice\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Purchased/Redeemed Price </th>\n        <td mat-cell *matCellDef=\"let share\"> {{ share.purchasedPrice }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"status\">\n        <th mat-header-cell *matHeaderCellDef> Status </th>\n        <td mat-cell *matCellDef=\"let share\">\n          <i class=\"fa fa-stop\" [ngClass]=\"share.status.code|statusLookup\" [matTooltip]=\"share.status.value\"></i>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"approve\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Confirm Approve </th>\n        <td mat-cell *matCellDef=\"let share\">\n          <button class=\"share-action-button\" mat-raised-button color=\"accent\" matTooltip=\"Approve Share\"\n            (click)=\"approve(share.id)\">\n            <i class=\"fa fa-check\"></i>\n          </button>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n    </table>\n\n    <mat-paginator [pageSizeOptions]=\"[10, 25, 50, 100]\" showFirstLastButtons></mat-paginator>\n\n  </div>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, ViewChild, Input } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ActivatedRoute } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatTable } from '@angular/material/table';\n\n/** Custom Dialogs */\nimport { ApproveShareDialogComponent } from './approve-share-dialog/approve-share-dialog.component';\n\n/** Custom Serices */\nimport { SharesService } from 'app/shares/shares.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Approve shares component.\n */\n@Component({\n  selector: 'mifosx-approve-shares',\n  templateUrl: './approve-shares.component.html',\n  styleUrls: ['./approve-shares.component.scss']\n})\nexport class ApproveSharesComponent implements OnInit {\n\n  /** Shares account data. */\n  sharesAccountData: any;\n\n  /** Shares account Id */\n  accountId: any;\n  /** Shares account data. */\n  sharesData: any[];\n  /** Columns to be displayed in shares table. */\n  displayedColumns: string[] = ['transactionDate', 'totalShares', 'redeemedPrice', 'status', 'approve'];\n  /** Data source for shares table. */\n  dataSource: MatTableDataSource<any>;\n\n  /** Paginator for shares table. */\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  /** Sorter for shares table. */\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n  /** Shares table reference */\n  @ViewChild('sharesTable', { static: true }) sharesTableRef: MatTable<Element>;\n\n  /**\n   * @param {SharesService} sharesService Shares Service\n   * @param {ActivatedRoute} route Activated Route\n   * @param {MatDialog} dialog Dialog reference.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private sharesService: SharesService,\n              private route: ActivatedRoute,\n              public dialog: MatDialog,\n              private settingsService: SettingsService) {\n    this.accountId = this.route.parent.snapshot.params['shareAccountId'];\n    this.route.data.subscribe((data: { shareAccountActionData: any }) => {\n      this.sharesAccountData = data.shareAccountActionData;\n    });\n  }\n\n  /**\n   * Sets the shares table.\n   */\n  ngOnInit() {\n    this.sharesData = this.sharesAccountData.purchasedShares\n    .filter((share: any) => share.status.value === 'Pending Approval');\n    this.setShares();\n  }\n\n  /**\n   * Initializes the data source, paginator and sorter for shares table.\n   */\n  setShares() {\n    this.dataSource = new MatTableDataSource(this.sharesData);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  /**\n   * Approves a share\n   * @param {any} id Share Id\n   */\n  approve(id: any) {\n    const approveSharesDialogRef = this.dialog.open(ApproveShareDialogComponent, {\n      data: { shareId: id }\n    });\n    approveSharesDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.approve) {\n        const locale = this.settingsService.language.code;\n        const dateFormat = this.settingsService.dateFormat;\n        const data = {\n          requestedShares: [{id}],\n          dateFormat,\n          locale\n        };\n        this.sharesService.executeSharesAccountCommand(this.accountId, 'approveadditionalshares', data).subscribe(() => {\n          const share = this.sharesData.find(element => element.id === id);\n          const index = this.sharesData.indexOf(share);\n          this.sharesData.splice(index, 1);\n          this.dataSource.data = this.sharesData;\n          this.sharesTableRef.renderRows();\n        });\n      }\n    });\n  }\n\n}\n","/** Angular Imports */\nimport { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n/**\n * Reject share dialog component.\n */\n@Component({\n  selector: 'mifosx-reject-share-dialog',\n  templateUrl: './reject-share-dialog.component.html',\n  styleUrls: ['./reject-share-dialog.component.scss']\n})\nexport class RejectShareDialogComponent {\n\n  /**\n   * @param {MatDialogRef} dialogRef Component reference to dialog.\n   * @param {any} data Provides a deleteContext.\n   */\n  constructor(public dialogRef: MatDialogRef<RejectShareDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any) { }\n\n}\n","<h1 mat-dialog-title>Reject Share</h1>\n<div mat-dialog-content>\n  <p>Are you sure you want to reject share with id: {{ data.shareId }} ?</p>\n</div>\n<mat-dialog-actions align=\"end\">\n  <button mat-raised-button mat-dialog-close>Cancel</button>\n  <button mat-raised-button color=\"warn\" [mat-dialog-close]=\"{ reject: true }\">Confirm</button>\n</mat-dialog-actions>\n","<div class=\"container\">\n\n  <div class=\"mat-elevation-z8\">\n\n    <table #sharesTable mat-table [dataSource]=\"dataSource\" matSort>\n\n      <ng-container matColumnDef=\"transactionDate\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Transaction Date </th>\n        <td mat-cell *matCellDef=\"let share\"> {{ share.purchasedDate  | dateFormat }}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"totalShares\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Total Shares </th>\n        <td mat-cell *matCellDef=\"let share\"> {{ share.numberOfShares }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"redeemedPrice\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Purchased/Redeemed Price </th>\n        <td mat-cell *matCellDef=\"let share\"> {{ share.purchasedPrice }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"status\">\n        <th mat-header-cell *matHeaderCellDef> Status </th>\n        <td mat-cell *matCellDef=\"let share\">\n          <i class=\"fa fa-stop\" [ngClass]=\"share.status.code|statusLookup\" [matTooltip]=\"share.status.value\"></i>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"reject\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Confirm Reject </th>\n        <td mat-cell *matCellDef=\"let share\">\n          <button class=\"share-action-button\" mat-raised-button color=\"warn\" matTooltip=\"Reject Share\"\n            (click)=\"reject(share.id)\">\n            <i class=\"fa fa-times\"></i>\n          </button>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n    </table>\n\n    <mat-paginator [pageSizeOptions]=\"[10, 25, 50, 100]\" showFirstLastButtons></mat-paginator>\n\n  </div>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, ViewChild, Input } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ActivatedRoute } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatTable } from '@angular/material/table';\n\n/** Custom Dialogs */\nimport { RejectShareDialogComponent } from './reject-share-dialog/reject-share-dialog.component';\n\n/** Custom Serices */\nimport { SharesService } from 'app/shares/shares.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Reject shares component.\n */\n@Component({\n  selector: 'mifosx-reject-shares',\n  templateUrl: './reject-shares.component.html',\n  styleUrls: ['./reject-shares.component.scss']\n})\nexport class RejectSharesComponent implements OnInit {\n\n  /** Shares account data. */\n  sharesAccountData: any;\n\n  /** Shares account Id */\n  accountId: any;\n  /** Shares account data. */\n  sharesData: any[];\n  /** Columns to be displayed in shares table. */\n  displayedColumns: string[] = ['transactionDate', 'totalShares', 'redeemedPrice', 'status', 'reject'];\n  /** Data source for shares table. */\n  dataSource: MatTableDataSource<any>;\n\n  /** Paginator for shares table. */\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  /** Sorter for shares table. */\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n  /** Shares table reference */\n  @ViewChild('sharesTable', { static: true }) sharesTableRef: MatTable<Element>;\n\n  /**\n   * @param {SharesService} sharesService Shares Service\n   * @param {ActivatedRoute} route Activated Route\n   * @param {MatDialog} dialog Mat Dialog\n   * @param {SettingsService} settingsService Settings Service.\n   */\n  constructor(private sharesService: SharesService,\n              private route: ActivatedRoute,\n              public dialog: MatDialog,\n              private settingsService: SettingsService) {\n    this.accountId = this.route.parent.snapshot.params['shareAccountId'];\n    this.route.data.subscribe((data: { shareAccountActionData: any }) => {\n      this.sharesAccountData = data.shareAccountActionData;\n    });\n  }\n\n  /**\n   * Sets the shares table.\n   */\n  ngOnInit() {\n    this.sharesData = this.sharesAccountData.purchasedShares\n    .filter((share: any) => share.status.value === 'Pending Approval');\n    this.setShares();\n  }\n\n  /**\n   * Initializes the data source, paginator and sorter for shares table.\n   */\n  setShares() {\n    this.dataSource = new MatTableDataSource(this.sharesData);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  /**\n   * Rejects a share\n   * @param {any} id Share Id\n   */\n  reject(id: any) {\n    const rejectSharesDialogRef = this.dialog.open(RejectShareDialogComponent, {\n      data: { shareId: id }\n    });\n    rejectSharesDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.reject) {\n        const locale = this.settingsService.language.code;\n        const dateFormat = this.settingsService.dateFormat;\n        const data = {\n          requestedShares: [{id}],\n          dateFormat,\n          locale\n        };\n        this.sharesService.executeSharesAccountCommand(this.accountId, 'rejectadditionalshares', data).subscribe(() => {\n          const share = this.sharesData.find(element => element.id === id);\n          const index = this.sharesData.indexOf(share);\n          this.sharesData.splice(index, 1);\n          this.dataSource.data = this.sharesData;\n          this.sharesTableRef.renderRows();\n        });\n      }\n    });\n  }\n\n}\n","<mifosx-approve-shares-account *ngIf=\"actions['Approve']\"></mifosx-approve-shares-account>\n<mifosx-reject-shares-account *ngIf=\"actions['Reject']\"></mifosx-reject-shares-account>\n<mifosx-close-shares-account *ngIf=\"actions['Close']\"></mifosx-close-shares-account>\n<mifosx-activate-shares-account *ngIf=\"actions['Activate']\"></mifosx-activate-shares-account>\n<mifosx-undo-approval-shares-account *ngIf=\"actions['Undo Approval']\"></mifosx-undo-approval-shares-account>\n<mifosx-apply-shares *ngIf=\"actions['Apply Additional Shares']\"></mifosx-apply-shares>\n<mifosx-redeem-shares *ngIf=\"actions['Redeem Shares']\"></mifosx-redeem-shares>\n<mifosx-approve-shares *ngIf=\"actions['Approve Additional Shares']\"></mifosx-approve-shares>\n<mifosx-reject-shares *ngIf=\"actions['Reject Additional Shares']\"></mifosx-reject-shares>","/** Angular Imports */\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n/** Custom Services */\nimport { SharesService } from '../shares.service';\n\n/**\n * Shares Account Actions Component\n */\n@Component({\n  selector: 'mifosx-shares-account-actions',\n  templateUrl: './shares-account-actions.component.html',\n  styleUrls: ['./shares-account-actions.component.scss']\n})\nexport class SharesAccountActionsComponent {\n\n  /** Shares Account Data */\n  sharesAccountData: any;\n  /** Flag object to store possible actions and render appropriate UI to the user */\n  actions: {\n    'Approve': boolean\n    'Reject': boolean\n    'Close': boolean\n    'Activate': boolean\n    'Undo Approval': boolean\n    'Apply Additional Shares': boolean\n    'Redeem Shares': boolean\n    'Approve Additional Shares': boolean\n    'Reject Additional Shares': boolean\n  } = {\n    'Approve': false,\n    'Reject': false,\n    'Close': false,\n    'Activate': false,\n    'Undo Approval': false,\n    'Apply Additional Shares': false,\n    'Redeem Shares': false,\n    'Approve Additional Shares': false,\n    'Reject Additional Shares': false\n  };\n\n  /**\n   * @param {ActivatedRoute} route Activated Route\n   */\n  constructor(private route: ActivatedRoute) {\n    const name = this.route.snapshot.params['name'];\n    this.actions[name] = true;\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { SharesService } from '../shares.service';\n\n/**\n * Shares Account data resolver.\n */\n@Injectable()\nexport class SharesAccountViewResolver implements Resolve<Object> {\n\n  /**\n   * @param {SharesService} SharesService Shares service.\n   */\n  constructor(private sharesService: SharesService) { }\n\n  /**\n   * Returns the Shares Account data.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const shareAccountId = route.paramMap.get('shareAccountId');\n    return this.sharesService.getSharesAccountData(shareAccountId, false);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { SharesService } from '../shares.service';\n\n/**\n * Shares Account Actions data resolver.\n */\n@Injectable()\nexport class ShareAccountActionsResolver implements Resolve<Object> {\n\n  /**\n   * @param {sharesService} SharesService Shares service.\n   */\n  constructor(private sharesService: SharesService) { }\n\n  /**\n   * Returns the Shares account actions data.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const actionName = route.paramMap.get('name');\n    const shareAccountId = route.paramMap.get('shareAccountId') || route.parent.parent.paramMap.get('shareAccountId');\n    switch (actionName) {\n      case 'Apply Additional Shares':\n      case 'Redeem Shares':\n      case 'Approve Additional Shares':\n      case 'Reject Additional Shares':\n        return this.sharesService.getSharesAccountData(shareAccountId, true);\n      default:\n        return undefined;\n    }\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { SharesService } from '../shares.service';\n\n/**\n * Shares Account Template resolver.\n */\n@Injectable()\nexport class SharesAccountTemplateResolver implements Resolve<Object> {\n\n  /**\n   * @param {SharesService} SharesService Shares service.\n   */\n  constructor(private sharesService: SharesService) { }\n\n  /**\n   * Returns the Shares Account Template.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const clientId = route.parent.parent.paramMap.get('clientId');\n    return this.sharesService.getSharesAccountTemplate(clientId);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { SharesService } from '../shares.service';\n\n/**\n * Shares Account data and template resolver.\n */\n@Injectable()\nexport class SharesAccountAndTemplateResolver implements Resolve<Object> {\n\n  /**\n   * @param {SharesService} SharesService Shares service.\n   */\n  constructor(private sharesService: SharesService) { }\n\n  /**\n   * Returns the Shares Account data and template.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const shareAccountId = route.paramMap.get('shareAccountId');\n    return this.sharesService.getSharesAccountData(shareAccountId, true);\n  }\n\n}\n","/** Angular Imports */\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n/** Translation Imports */\nimport { extract } from '../core/i18n/i18n.service';\n\n/** Custom Components */\nimport { SharesAccountViewComponent } from './shares-account-view/shares-account-view.component';\nimport { TransactionsTabComponent } from './shares-account-view/transactions-tab/transactions-tab.component';\nimport { ChargesTabComponent } from './shares-account-view/charges-tab/charges-tab.component';\nimport { DividendsTabComponent } from './shares-account-view/dividends-tab/dividends-tab.component';\nimport { CreateSharesAccountComponent } from './create-shares-account/create-shares-account.component';\nimport { EditSharesAccountComponent } from './edit-shares-account/edit-shares-account.component';\nimport { SharesAccountActionsComponent } from './shares-account-actions/shares-account-actions.component';\n\n/** Custom Resolvers */\nimport { SharesAccountViewResolver } from './common-resolvers/share-account-view.resolver';\nimport { ShareAccountActionsResolver } from './common-resolvers/share-account-actions.resolver';\nimport { SharesAccountTemplateResolver } from './common-resolvers/shares-account-template.resolver';\nimport { SharesAccountAndTemplateResolver } from './common-resolvers/share-account-and-template.resolver';\n\n/** Shares Routes */\nconst routes: Routes = [\n  {\n    path: '',\n    data: { title: extract('Shares'), breadcrumb: 'Shares', routeParamBreadcrumb: false },\n    children: [\n      {\n        path: 'create',\n        data: { title: extract('Create Shares Account'), breadcrumb: 'Create Shares Account' },\n        component: CreateSharesAccountComponent,\n        resolve: {\n          sharesAccountTemplate: SharesAccountTemplateResolver\n        }\n      },\n      {\n        path: ':shareAccountId',\n        data: { title: extract('Shares Account View'), routeParamBreadcrumb: 'shareAccountId' },\n        children: [\n          {\n            path: '',\n            component: SharesAccountViewComponent,\n            resolve: {\n              sharesAccountData: SharesAccountViewResolver\n            },\n            children: [\n              {\n                path: 'transactions',\n                component: TransactionsTabComponent,\n                data: { title: extract('Shares Account Transactions'), breadcrumb: 'Transactions', routeParamBreadcrumb: false }\n              },\n              {\n                path: 'charges',\n                component: ChargesTabComponent,\n                data: { title: extract('Shares Account Charges'), breadcrumb: 'Charges', routeParamBreadcrumb: false }\n              },\n              {\n                path: 'dividends',\n                component: DividendsTabComponent,\n                data: { title: extract('Shares Account Dividends'), breadcrumb: 'Dividends', routeParamBreadcrumb: false }\n              }\n            ]\n          },\n          {\n            path: 'edit',\n            data: { title: extract('Edit Shares Account'), breadcrumb: 'Edit', routeParamBreadcrumb: false },\n            component: EditSharesAccountComponent,\n            resolve: {\n              sharesAccountAndTemplate: SharesAccountAndTemplateResolver\n            }\n          },\n          {\n            path: 'actions/:name',\n            data: { title: extract('Shares Account Actions'), breadcrumb: 'Actions', routeParamBreadcrumb: 'name' },\n            component: SharesAccountActionsComponent,\n            resolve: {\n              shareAccountActionData: ShareAccountActionsResolver\n            }\n          }\n        ]\n      },\n    ]\n  }\n];\n\n/**\n * Shares Routinf Module\n */\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  providers: [\n    SharesAccountViewResolver,\n    SharesAccountTemplateResolver,\n    SharesAccountAndTemplateResolver,\n    ShareAccountActionsResolver\n  ]\n})\nexport class SharesRoutingModule { }\n","/** Angular Imports */\nimport { NgModule } from '@angular/core';\n\n/** Custom Modules */\nimport { SharesRoutingModule } from './shares-routing.module';\nimport { SharedModule } from 'app/shared/shared.module';\nimport { PipesModule } from '../pipes/pipes.module';\nimport { DirectivesModule } from '../directives/directives.module';\nimport { SharesAccountViewComponent } from './shares-account-view/shares-account-view.component';\nimport { TransactionsTabComponent } from './shares-account-view/transactions-tab/transactions-tab.component';\nimport { DividendsTabComponent } from './shares-account-view/dividends-tab/dividends-tab.component';\nimport { ChargesTabComponent } from './shares-account-view/charges-tab/charges-tab.component';\nimport { CreateSharesAccountComponent } from './create-shares-account/create-shares-account.component';\nimport { SharesAccountDetailsStepComponent } from './shares-account-stepper/shares-account-details-step/shares-account-details-step.component';\nimport { SharesAccountTermsStepComponent } from './shares-account-stepper/shares-account-terms-step/shares-account-terms-step.component';\nimport { SharesAccountChargesStepComponent } from './shares-account-stepper/shares-account-charges-step/shares-account-charges-step.component';\nimport { SharesAccountPreviewStepComponent } from './shares-account-stepper/shares-account-preview-step/shares-account-preview-step.component';\nimport { EditSharesAccountComponent } from './edit-shares-account/edit-shares-account.component';\nimport { SharesAccountActionsComponent } from './shares-account-actions/shares-account-actions.component';\nimport { ApproveSharesAccountComponent } from './shares-account-actions/approve-shares-account/approve-shares-account.component';\nimport { RejectSharesAccountComponent } from './shares-account-actions/reject-shares-account/reject-shares-account.component';\nimport { CloseSharesAccountComponent } from './shares-account-actions/close-shares-account/close-shares-account.component';\nimport { ActivateSharesAccountComponent } from './shares-account-actions/activate-shares-account/activate-shares-account.component';\nimport { UndoApprovalSharesAccountComponent } from './shares-account-actions/undo-approval-shares-account/undo-approval-shares-account.component';\nimport { ApplySharesComponent } from './shares-account-actions/apply-shares/apply-shares.component';\nimport { RedeemSharesComponent } from './shares-account-actions/redeem-shares/redeem-shares.component';\nimport { ApproveSharesComponent } from './shares-account-actions/approve-shares/approve-shares.component';\nimport { ApproveShareDialogComponent } from './shares-account-actions/approve-shares/approve-share-dialog/approve-share-dialog.component';\nimport { RejectSharesComponent } from './shares-account-actions/reject-shares/reject-shares.component';\nimport { RejectShareDialogComponent } from './shares-account-actions/reject-shares/reject-share-dialog/reject-share-dialog.component';\n\n/**\n * Shares Module\n *\n * All components related to Shares functions should be declared here.\n */\n@NgModule({\n  imports: [\n    SharedModule,\n    PipesModule,\n    DirectivesModule,\n    SharesRoutingModule\n  ],\n  declarations: [\n    SharesAccountViewComponent,\n    TransactionsTabComponent,\n    DividendsTabComponent,\n    ChargesTabComponent,\n    CreateSharesAccountComponent,\n    SharesAccountDetailsStepComponent,\n    SharesAccountTermsStepComponent,\n    SharesAccountChargesStepComponent,\n    SharesAccountPreviewStepComponent,\n    EditSharesAccountComponent,\n    SharesAccountActionsComponent,\n    ApproveSharesAccountComponent,\n    RejectSharesAccountComponent,\n    CloseSharesAccountComponent,\n    ActivateSharesAccountComponent,\n    UndoApprovalSharesAccountComponent,\n    ApplySharesComponent,\n    RedeemSharesComponent,\n    ApproveSharesComponent,\n    ApproveShareDialogComponent,\n    RejectSharesComponent,\n    RejectShareDialogComponent\n  ],\n  providers: [ ]\n})\nexport class SharesModule { }\n"]}