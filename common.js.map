{"version":3,"file":"common.js","mappings":"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","names":["AccountTransfersService","http","this","standingInstructionsId","get","httpParams","HttpParams","set","params","standinginstructionsId","data","put","clientId","officeId","accountTypeId","formValue","propNames","Object","getOwnPropertyNames","i","length","propName","post","id","searchData","delete","dateFormat","locale","transferId","s","i0","factory","SavingsAccountViewResolver","savingsService","route","savingAccountId","paramMap","getSavingsAccountData","SavingsDatatableResolver","accountId","parent","datatableName","getSavingsDatatable","SavingsDatatablesResolver","getSavingsDatatables"],"sourceRoot":"webpack:///","sources":["./src/app/account-transfers/account-transfers.service.ts","./src/app/savings/common-resolvers/savings-account-view.resolver.ts","./src/app/savings/common-resolvers/savings-datatable.resolver.ts","./src/app/savings/common-resolvers/savings-datatables.resolver.ts"],"sourcesContent":["/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/**\n * Account Transfers Service.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountTransfersService {\n\n  constructor(private http: HttpClient) { }\n\n  /**\n   * @params standingInstructionsId\n   * Returns the details of a particular Standing Instruction\n   */\n  getStandingInstructionsData(standingInstructionsId: any): Observable<any> {\n    return this.http.get(`/standinginstructions/${standingInstructionsId}`);\n  }\n\n  getStandingInstructionsDataAndTemplate(standingInstructionsId: any): Observable<any> {\n    const httpParams = new HttpParams().set('associations', 'template');\n    return this.http.get(`/standinginstructions/${standingInstructionsId}`, { params: httpParams });\n  }\n\n  updateStandingInstructionsData(standinginstructionsId: any, data: any): Observable<any> {\n    const httpParams = new HttpParams().set('command', 'update');\n    return this.http.put(`/standinginstructions/${standinginstructionsId}`, data, { params: httpParams });\n  }\n\n  getStandingInstructionsTemplate(clientId: any, officeId: any, accountTypeId: string, formValue?: any): Observable<any> {\n    let httpParams = new HttpParams().set('fromAccountType', accountTypeId)\n                                       .set('fromClientId', clientId)\n                                       .set('fromOfficeId', officeId);\n    if (formValue) {\n      const propNames = Object.getOwnPropertyNames(formValue);\n      for (let i = 0; i < propNames.length; i++) {\n        const propName = propNames[i];\n        httpParams = httpParams.set(propName, formValue[propName]);\n      }\n    }\n    return this.http.get(`/standinginstructions/template`, { params: httpParams });\n  }\n\n  createStandingInstructions(data: Object): Observable<any> {\n    return this.http.post(`/standinginstructions`, data);\n  }\n\n  newAccountTranferResource(id: any, accountTypeId: any, formValue?: any): Observable<any> {\n    let httpParams = new HttpParams().set('fromAccountId', id)\n      .set('fromAccountType', accountTypeId);\n    if (formValue) {\n      const propNames = Object.getOwnPropertyNames(formValue);\n      for (let i = 0; i < propNames.length; i++) {\n        const propName = propNames[i];\n        httpParams = httpParams.set(propName, formValue[propName]);\n      }\n    }\n    return this.http.get(`/accounttransfers/template`, { params: httpParams });\n\n  }\n\n  createAccountTransfer(data: any): Observable<any> {\n    return this.http.post(`/accounttransfers`, data);\n  }\n\n  /**\n   * @param clientId Client Id\n   * @param clientName Client Name\n   * @param fromAccountId Account Id\n   * @param locale Locale\n   * @param dateFormat Date Format\n   * @returns {Observable<any>} Standing Instructions\n   */\n  getStandingInstructions(searchData: any): Observable<any> {\n    let httpParams = new HttpParams();\n    const propNames = Object.getOwnPropertyNames(searchData);\n    for (let i = 0; i < propNames.length; i++) {\n      const propName = propNames[i];\n      if (!(searchData[propName] === '' || searchData[propName] === undefined || searchData[propName] === null)) {\n        httpParams = httpParams.set(propName, searchData[propName]);\n      }\n    }\n    return this.http.get(`/standinginstructions`, { params: httpParams });\n  }\n\n  deleteStandingInstrucions(id: any) {\n    const httpParams = new HttpParams().set('command', 'delete');\n    return this.http.delete(`/standinginstructions/${id}`, { params: httpParams });\n  }\n\n\n  getStandingInstructionsTransactions(standingInstructionsId: any, dateFormat: any, locale: any) {\n    const httpParams = new HttpParams().set('associations', 'transactions')\n                                        .set('dateFormat', dateFormat)\n                                        .set('limit', '14')\n                                        .set('locale', locale)\n                                        .set('offset', '0');\n    return this.http.get(`/standinginstructions/${standingInstructionsId}`, { params: httpParams });\n  }\n\n  getViewAccountTransferDetails(transferId: any): Observable<any> {\n    return this.http.get(`/accounttransfers/${transferId}`);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { SavingsService } from '../savings.service';\n\n/**\n * Savings Account data resolver.\n */\n@Injectable()\nexport class SavingsAccountViewResolver implements Resolve<Object> {\n\n  /**\n   * @param {SavingsService} SavingsService Savings service.\n   */\n  constructor(private savingsService: SavingsService) { }\n\n  /**\n   * Returns the Savings Account data.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const savingAccountId = route.paramMap.get('savingAccountId');\n    return this.savingsService.getSavingsAccountData(savingAccountId);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { SavingsService } from '../savings.service';\n\n/**\n * Savings Datatable data resolver.\n */\n@Injectable()\nexport class SavingsDatatableResolver implements Resolve<Object> {\n\n  /**\n   * @param {SavingsService} SavingsService Savings service.\n   */\n  constructor(private savingsService: SavingsService) { }\n\n  /**\n   * Returns the Savings Account's Datatable data.\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const accountId = route.parent.parent.paramMap.get('savingAccountId') || route.parent.parent.paramMap.get('fixedDepositAccountId') || route.parent.parent.paramMap.get('recurringDepositAccountId');\n    const datatableName = route.paramMap.get('datatableName');\n    return this.savingsService.getSavingsDatatable(accountId, datatableName);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { SavingsService } from '../savings.service';\n\n/**\n * Saving Accounts Datatables data resolver.\n */\n@Injectable()\nexport class SavingsDatatablesResolver implements Resolve<Object> {\n\n  /**\n   * @param {SavingsService} SavingsService Savings service.\n   */\n  constructor(private savingsService: SavingsService) { }\n\n  /**\n   * Returns the Saving Account's Datatables data.\n   * @returns {Observable<any>}\n   */\n  resolve(): Observable<any> {\n    return this.savingsService.getSavingsDatatables();\n  }\n\n}\n"]}