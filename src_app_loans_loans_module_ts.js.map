{"version":3,"file":"src_app_loans_loans_module_ts.js","mappings":"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","names":["LoansAccountButtonConfiguration","status","this","setOptions","setButtons","buttonsArray","optionArray","optionPaymentArray","name","icon","taskPermissionName","option","push","t","i0","ctx_r30","ctx_r38","ctx_r46","LoansViewComponent","route","router","loansService","dialog","data","subscribe","u","loanDetailsData","loanDatatables","loanStatus","loanId","snapshot","params","clientId","recalculateInterest","value","active","multiDisburseLoan","transactions","forEach","transaction","type","disbursement","a","disburseTransactionNo","setConditionalButtons","url","includes","entityType","buttonConfig","addOption","loanOfficerName","isVariableInstallmentsAllowed","addButton","canDisburse","button","recoverFromGuarantor","deleteLoanAccount","navigate","relativeTo","queryParams","accountType","open","ConfirmationDialogComponent","heading","dialogContext","afterClosed","response","confirm","loanActionButtons","reload","DeleteDialogComponent","deleteContext","delete","navigateByUrl","skipLocationChange","then","o","selectors","GeneralTabComponent","parent","loanDetails","some","code","loanSummaryColumns","summary","setloanSummaryTableData","setloanDetailsTableData","setloanNonDetailsTableData","loanSummaryTableData","property","original","principalDisbursed","adjustment","principalAdjustments","paid","principalPaid","waived","principalWaived","writtenOff","principalWrittenOff","outstanding","principalOutstanding","overdue","principalOverdue","interestCharged","interestPaid","interestWaived","interestWrittenOff","interestOutstanding","interestOverdue","feeChargesCharged","feeChargesPaid","feeChargesWaived","feeChargesWrittenOff","feeChargesOutstanding","feeChargesOverdue","penaltyChargesCharged","penaltyChargesPaid","penaltyChargesWaived","penaltyChargesWrittenOff","penaltyChargesOutstanding","penaltyChargesOverdue","totalExpectedRepayment","totalRepayment","totalWaived","totalWrittenOff","totalOutstanding","totalOverdue","dataSource","MatTableDataSource","loanDetailsTableData","key","proposedPrincipal","approvedPrincipal","principal","detailsDataSource","AccountDetailsComponent","NotesTabComponent","authenticationService","savedCredentials","getCredentials","username","entityId","r","entityNotes","loanNotes","noteContent","createLoanNote","i","id","resourceId","createdByUsername","createdOn","Date","note","noteId","index","editLoanNote","deleteLoanNote","splice","ctx_r122","RepaymentScheduleTabComponent","EventEmitter","loanDetailsDataRepaymentSchedule","repaymentSchedule","repaymentScheduleDetails","isWaived","installment","isAdditional","ctx_r34","ctx_r49","ctx_r52","ctx_r55","TransactionsTabComponent","tempTransaction","hideAccrualsParam","FormControl","paginator","sort","element","isAccrual","removeItem","filterValue","arguments","filter","trim","toLowerCase","arr","item","f","transactionsData","loanTransaction","manuallyReversed","transactionRelations","length","$event","stopPropagation","transactionType","accrual","MatPaginator","MatSort","OriginalScheduleTabComponent","originalScheduleDetails","originalSchedule","OverdueChargesTabComponent","overdueCharges","ctx_r41","ctx_r43","ChargesTabComponent","dateUtils","settingsService","m","chargesData","charges","actionFlag","chargeTimeType","chargeId","formfields","DatepickerBase","controlName","label","required","title","layout","addButtonText","FormDialogComponent","locale","language","dateFormat","dataObject","transactionDate","formatDate","executeLoansAccountChargesCommand","charge","InputBase","amount","amountOrPercentage","Object","editLoansAccountCharge","deleteLoansAccountCharge","DatatableTabComponent","C","paramMap","get","entityDatatable","loanDatatable","multiRowDatatableFlag","columnHeaders","columnName","LoansAccountCloseComponent","formBuilder","loanService","maxDate","businessDate","createCloseForm","closeLoanForm","group","date","Validators","closeLoanFormData","submitLoanActionButton","ctx","_r0","ctx_r1","UndoApprovalComponent","control","AssignLoanOfficerComponent","createassignOfficerForm","loanOfficers","loanOfficerOptions","assignOfficerForm","toLoanOfficerId","assignmentDate","assignOfficerFormData","fromLoanOfficerId","loanOfficerId","_r2","ForeclosureComponent","createforeclosureForm","onChanges","foreclosureForm","outstandingPrincipalPortion","principalPortion","disabled","outstandingInterestPortion","interestPortion","outstandingFeeChargesPortion","feeChargesPortion","outstandingPenaltyChargesPortion","penaltyChargesPortion","transactionAmount","valueChanges","retrieveLoanForeclosureTemplate","val","transactionDateFormatted","getForeclosureData","command","foreclosuredata","patchValue","foreclosureFormData","loanForclosureData","PrepayLoanComponent","createprepayLoanForm","setPrepayLoanDetails","prepayData","prepayLoanForm","externalId","paymentTypeId","paymentTypes","paymentTypeOptions","prepayDate","getLoanPrepayLoanActionTemplate","showPaymentDetails","addControl","removeControl","prepayLoanFormData","MakeRepaymentComponent","createRepaymentLoanForm","setRepaymentLoanDetails","repaymentLoanForm","repaymentLoanFormData","split","LoanCreditBalanceRefundComponent","createCreditBalanceLoanForm","setCreditBalanceLoanDetails","creditBalanceLoanForm","creditBalanceLoanFormData","WaiveInterestComponent","setLoanInterestForm","loanInterestForm","loanInterestFormData","ctx_r3","WriteOffPageComponent","setWriteOffForm","writeOffForm","writeOffFormData","CloseAsRescheduledComponent","_r12","LoanRescheduleComponent","codes","rescheduleReasons","setRescheduleLoanForm","rescheduleLoanForm","rescheduleFromDate","rescheduleReasonId","submittedOnDate","rescheduleReasonComment","adjustedDueDate","graceOnPrincipal","graceOnInterest","extraTerms","newInterestRate","rescheduleLoanFormData","prevRescheduleFromDate","prevAdjustedDueDate","prevSubmittedOnDate","submitRescheduleData","_r4","RecoveryRepaymentComponent","createRecoveryRepaymentLoanForm","setRecoveryRepaymentLoanDetails","recoveryRepaymentLoanForm","recoveryRepaymentLoanFormData","LoansAccountViewGuarantorDetailsDialogComponent","dialogRef","updateSize","MAT_DIALOG_DATA","ctx_r50","ctx_r54","ctx_r59","ViewGuarantorsComponent","guarantorDetails","guarantors","showDeletedGuarantorsAccounts","deleteGuarantor","guarantorData","ctx_r13","_r18","CreateGuarantorComponent","clientsService","createNewGuarantorForm","setNewGuarantorDetailsForm","buildDependencies","newGuarantorForm","existingClient","clientRelationshipTypeId","savingsId","relationTypes","allowedClientRelationshipTypes","showClientDetailsForm","getFilteredClients","clientsData","pageItems","clientDetails","accountOptions","guarantorAccountResource","accountLinkingOptions","client","displayName","undefined","newGuarantorFormData","prevdob","dob","guarantorTypeId","guarantorTypeOptions","controls","createNewGuarantor","DisburseToSavingsAccountComponent","setDisbursementToSavingsForm","disbursementForm","actualDisbursementDate","fixedEmiAmount","disbursementLoanFormData","RejectLoanComponent","setRejectLoanForm","rejectLoanForm","rejectedOnDate","rejectLoanFormData","DisburseComponent","createDisbursementLoanForm","setDisbursementLoanDetails","disbursementLoanForm","WithdrawnByClientComponent","createWithdrawnByClientLoanForm","withdrawnByClientLoanForm","withdrawnOnDate","withdrawnByClientLoanFormData","AddCollateralComponent","createAddCollateralForm","collateralForm","collateralTypeId","description","createLoanCollateral","UndoDisbursalComponent","actionName","LoanScreenReportsComponent","sanitizer","renderer","templatesData","createLoanScreenReportForm","loanScreenReportForm","templateId","templateWindow","window","document","write","template","print","close","getTemplateData","sanitize","SecurityContext","setProperty","screenReportRef","nativeElement","ApproveLoanComponent","loanData","actionButtonData","setApproveLoanForm","getApproveAssociationsDetails","associationData","approveLoanForm","expectedDisbursementDate","timeline","approvedOnDate","approvalDate","approvedLoanAmount","approvalAmount","approveLoanFormData","_r6","AddLoanChargeComponent","loanChargeOptions","chargeOptions","maxFutureDate","createLoanChargeForm","loanChargeForm","chargeDetails","find","chargeCalculation","chargeCalculationType","chargeTime","loanChargeFormData","dueDate","createLoanCharge","EditRepaymentScheduleComponent","getRepaymentSchedule","repaymentScheduleChanges","getLoanAccountResource","periods","period","idx","SelectBase","options","fromPeriod","toPeriod","periodsVariation","totalDueForPeriod","installmentAmount","wasChanged","changed","responseConfirmation","applyCommandLoanScheduleVariations","wasValidated","getPayload","modifiedinstallments","keys","exceptions","LoanAccountActionsComponent","Close","Foreclosure","Reject","Reschedule","Disburse","Approve","action","actions","FloatingInterestRatesComponent","interestRateData","interestRatesPeriods","ctx_r4","ctx_r6","ctx_r28","ctx_r31","LoanTrancheDetailsComponent","loanServices","l","disallowExpectedDisbursements","disbursementDataSource","disbursementDetails","currentPrincipalAmount","return","calculateTotalDisbursedAmount","totalMultiDisbursed","count","minDate","order","formBase","buildForm","concat","pristine","parseDate","newPrincipal","disbursementData","editDisbursements","toPromise","LoanCollateralTabComponent","_r9","_r11","LoansAccountDetailsStepComponent","createLoansAccountDetailsForm","loansAccountTemplate","productData","productOptions","loanProductId","loansAccountDetailsForm","productId","loanPurposeId","fundId","linkAccountId","createStandingInstructionAtDisbursement","isGroup","getLoansAccountTemplateResource","loansAccountProductTemplate","emit","loanPurposeOptions","fundOptions","loanProductSelected","getRawValue","LoansAccountAddCollateralDialogComponent","collateralTypeData","collateralOptions","addCollateralForm","collateral","quantity","totalValue","totalCollateralValue","collateralData","maxQuantity","basePrice","pctToBase","ctx_r71","ctx_r77","ctx_r89","LoansAccountTermsStepComponent","createloansAccountTermsForm","loansAccountTermsData","currencyDisplaySymbol","currency","displaySymbol","accountNo","loansAccountTermsForm","principalAmount","loanTermFrequency","termFrequency","loanTermFrequencyType","termPeriodFrequencyType","numberOfRepayments","repaymentEvery","repaymentFrequencyType","interestRatePerPeriod","amortizationType","isEqualAmortization","interestType","isFloatingInterestRate","isLoanProductLinkedToFloatingRate","interestCalculationPeriodType","allowPartialPeriodInterestCalcualtion","inArrearsTolerance","graceOnPrincipalPayment","graceOnInterestPayment","graceOnArrearsAgeing","graceOnInterestCharged","maxOutstandingLoanBalance","transactionProcessingStrategyCode","collateralDataSource","allowAttributeOverrides","product","disable","graceOnPrincipalAndInterestPayment","repaymentsStartingFromDate","expectedFirstRepaymentOnDate","repaymentFrequencyNthDayType","repaymentFrequencyDayOfWeekType","setValidators","updateValueAndValidity","interestChargedFromDate","loanIdToClose","isTopup","isMultiDisbursedCompleted","user","collateralId","isCollateralSufficient","loanPrincipal","removed","termFrequencyTypeData","termFrequencyTypeOptions","repaymentFrequencyNthDayTypeData","repaymentFrequencyNthDayTypeOptions","repaymentFrequencyDaysOfWeekTypeData","repaymentFrequencyDaysOfWeekTypeOptions","interestTypeData","interestTypeOptions","amortizationTypeData","amortizationTypeOptions","interestCalculationPeriodTypeData","interestCalculationPeriodTypeOptions","clientActiveLoanData","clientActiveLoanOptions","transactionProcessingStrategyOptions","_r5","_r10","ctx_r45","LoansAccountChargesStepComponent","chargesDataSource","map","chargeData","overDueChargesDataSource","newCharge","indexOf","feeOnMonthDay","feeInterval","LoansAccountScheduleStepComponent","showRepayment","payload","buildLoanRequestPayload","loansAccount","calendarOptions","calculateLoanSchedule","_r15","LoansAccountDatatableStepComponent","datatableInputs","datatableData","columnHeaderData","column","inputItems","input","getInputName","isColumnNullable","isNumeric","columnDisplayType","datatableForm","datatableInput","columnType","isColumnType","expectedType","datatableDataValues","existDate","isDate","registeredTableName","LoansAccountPreviewStepComponent","ctx_r22","CreateLoansAccountComponent","clientService","getCollateralTemplate","setDatatables","datatables","datatable","loansAccountDetailsStep","loansAccountTermsStep","valid","loansAccountDetails","loansAccountTerms","loansAccountChargesStep","loansAccountCharges","loanCollateral","createLoansAccount","LoanDocumentsTabComponent","getLoanDocumentsData","loanDocuments","ele","docUrl","serverUrl","parentEntityId","environment","fileName","fileIsImage","entityDocuments","documentId","downloadLoanDocument","URL","createObjectURL","res","formData","loadLoanDocument","deleteLoanDocument","ctx_r32","StandingInstructionsTabComponent","accountTransfersService","getStandingInstructions","clientName","instructionsData","instructionTableRef","renderRows","instructionId","deleteStandingInstrucions","ctx_r12","EditLoansAccountComponent","loansAccountAndTemplate","getLoansCollateralTemplateResource","loanCollateralOptions","loansAccountData","collateralEle","loanType","isValid","syncRepaymentsWithMeeting","calendarId","recalculationRestFrequencyDate","updateLoansAccount","ctx_r9","ctx_r14","ctx_r18","ctx_r20","ViewChargeComponent","loansAccountCharge","allowPayCharge","chargePayable","allowWaive","maxAllowedDate","ctx_r11","ViewTransactionComponent","organizationService","p","transactionData","loansAccountTransaction","allowEdition","allowTransactionEdition","allowUndo","allowChargeback","repayment","transactionsChargebackRelated","existTransactionRelations","amountRelations","relation","relationType","amountRelationsAllowed","isFullRelated","getPaymentTypesWithCode","accountId","executeLoansAccountTransactionsCommand","max","transactionId","EditTransactionComponent","transactionTemplateData","loansAccountTransactionTemplate","loanAccountId","createEditTransactionForm","editTransactionForm","editTransactionFormData","ViewRecieptComponent","transactionRecieptData","loansTransactionReciept","contentType","headers","file","Blob","body","filecontent","pentahoUrl","bypassSecurityTrustResourceUrl","ExportTransactionsComponent","reportsService","loansAccountId","createTransactionsReportForm","transactionsReportForm","fromDate","toDate","R_startDate","R_endDate","R_selectLoan","getPentahoRunReportData","hideOutput","_r1","GlimAccountComponent","glimOverviewData","glimData","setLoanClientChargeOverview","ctx_r23","ctx_r33","ctx_r42","ctx_r57","ctx_r61","GlimChargesStepComponent","activeClientMembers","selectedMembers","selected","selectAllItems","len","GlimDetailsStepComponent","groupId","_r3","GlimTermsStepComponent","setCustomValidators","transactionProcessingStrategyData","CreateGlimAccountComponent","groupsData","gsimData","selectedClientMembers","totalLoan","isParentAccount","syncDisbursementWithMeeting","JSON","stringify","requestData","memberSelected","totalLoanAmount","requestId","toString","method","relativeUrl","setData","total","buildRequestData","createGlimAccount","LoanDetailsResolver","getLoanAccountAssociationDetails","factory","LoanNotesResolver","getLoanNotes","LoanDatatablesResolver","getLoanDataTables","LoanDatatableResolver","datatableName","getLoanDatatable","LoanActionButtonResolver","loanActionButton","getLoanTemplate","getLoanActionTemplate","rescheduleLoanTemplate","getLoanCollateralTemplate","getGuarantorTemplate","getLoanScreenReportsData","getLoanApprovalTemplate","getLoanChargeTemplateResource","getLoanForeclosureActionTemplate","LoansAccountTemplateResolver","LoanDocumentsResolver","getLoanDocuments","LoansAccountAndTemplateResolver","getLoansAccountAndTemplateResource","LoansAccountChargeResolver","getLoansAccountCharge","LoansAccountTransactionResolver","getLoansAccountTransaction","LoansTransactionRecieptResolver","R_transactionId","LoansAccountTransactionTemplateResolver","getLoansAccountTransactionTemplate","GLIMViewResolver","glimId","getGLIMAccountData","GLIMLoanTemplateResolver","getGLIMLoanAccountTemplate","LoanDelinquencyTagsResolver","getDelinquencyTags","LoanDelinquencyTagsTabComponent","loanDelinquencyTags","loanDelinquencyTagsData","LoanReschedulesResolver","loanRescheduleRequests","ctx_r21","RescheduleLoanTabComponent","loansServices","loanRescheduleData","request","applyCommandLoanRescheduleRequests","result","AdjustLoanChargeComponent","createAdjustLoanChargeForm","adjustLoanChargeForm","getPaymentTypes","routes","path","extract","breadcrumb","routeParamBreadcrumb","children","component","resolve","redirectTo","pathMatch","loanDetailsAssociationData","loadChildren","x","AccountTransfersModule","GSIMAccountsResolver","GroupViewResolver","GroupAccountsResolver","LoansRoutingModule","SavingsAccountViewResolver","imports","RouterModule","LoansModule","SharedModule","DirectivesModule","PipesModule"],"sourceRoot":"webpack:///","sources":["./src/app/loans/loans-view/loan-accounts-button-config.ts","./src/app/loans/loans-view/loans-view.component.html","./src/app/loans/loans-view/loans-view.component.ts","./src/app/loans/loans-view/general-tab/general-tab.component.html","./src/app/loans/loans-view/general-tab/general-tab.component.ts","./src/app/loans/loans-view/account-details/account-details.component.html","./src/app/loans/loans-view/account-details/account-details.component.ts","./src/app/loans/loans-view/notes-tab/notes-tab.component.ts","./src/app/loans/loans-view/notes-tab/notes-tab.component.html","./src/app/loans/loans-view/repayment-schedule-tab/repayment-schedule-tab.component.html","./src/app/loans/loans-view/repayment-schedule-tab/repayment-schedule-tab.component.ts","./src/app/loans/loans-view/transactions-tab/transactions-tab.component.html","./src/app/loans/loans-view/transactions-tab/transactions-tab.component.ts","./src/app/loans/loans-view/original-schedule-tab/original-schedule-tab.component.html","./src/app/loans/loans-view/original-schedule-tab/original-schedule-tab.component.ts","./src/app/loans/loans-view/overdue-charges-tab/overdue-charges-tab.component.html","./src/app/loans/loans-view/overdue-charges-tab/overdue-charges-tab.component.ts","./src/app/loans/loans-view/charges-tab/charges-tab.component.html","./src/app/loans/loans-view/charges-tab/charges-tab.component.ts","./src/app/loans/loans-view/datatable-tab/datatable-tab.component.ts","./src/app/loans/loans-view/datatable-tab/datatable-tab.component.html","./src/app/loans/loans-view/loan-account-actions/loans-account-close/loans-account-close.component.html","./src/app/loans/loans-view/loan-account-actions/loans-account-close/loans-account-close.component.ts","./src/app/loans/loans-view/loan-account-actions/undo-approval/undo-approval.component.html","./src/app/loans/loans-view/loan-account-actions/undo-approval/undo-approval.component.ts","./src/app/loans/loans-view/loan-account-actions/assign-loan-officer/assign-loan-officer.component.html","./src/app/loans/loans-view/loan-account-actions/assign-loan-officer/assign-loan-officer.component.ts","./src/app/loans/loans-view/loan-account-actions/foreclosure/foreclosure.component.html","./src/app/loans/loans-view/loan-account-actions/foreclosure/foreclosure.component.ts","./src/app/loans/loans-view/loan-account-actions/prepay-loan/prepay-loan.component.html","./src/app/loans/loans-view/loan-account-actions/prepay-loan/prepay-loan.component.ts","./src/app/loans/loans-view/loan-account-actions/make-repayment/make-repayment.component.html","./src/app/loans/loans-view/loan-account-actions/make-repayment/make-repayment.component.ts","./src/app/loans/loans-view/loan-account-actions/loan-credit-balance-refund/loan-credit-balance-refund.component.html","./src/app/loans/loans-view/loan-account-actions/loan-credit-balance-refund/loan-credit-balance-refund.component.ts","./src/app/loans/loans-view/loan-account-actions/waive-interest/waive-interest.component.html","./src/app/loans/loans-view/loan-account-actions/waive-interest/waive-interest.component.ts","./src/app/loans/loans-view/loan-account-actions/write-off-page/write-off-page.component.html","./src/app/loans/loans-view/loan-account-actions/write-off-page/write-off-page.component.ts","./src/app/loans/loans-view/loan-account-actions/close-as-rescheduled/close-as-rescheduled.component.html","./src/app/loans/loans-view/loan-account-actions/close-as-rescheduled/close-as-rescheduled.component.ts","./src/app/loans/loans-view/loan-account-actions/loan-reschedule/loan-reschedule.component.html","./src/app/loans/loans-view/loan-account-actions/loan-reschedule/loan-reschedule.component.ts","./src/app/loans/loans-view/loan-account-actions/recovery-repayment/recovery-repayment.component.html","./src/app/loans/loans-view/loan-account-actions/recovery-repayment/recovery-repayment.component.ts","./src/app/loans/custom-dialog/loans-account-view-guarantor-details-dialog/loans-account-view-guarantor-details-dialog.component.html","./src/app/loans/custom-dialog/loans-account-view-guarantor-details-dialog/loans-account-view-guarantor-details-dialog.component.ts","./src/app/loans/loans-view/loan-account-actions/view-guarantors/view-guarantors.component.html","./src/app/loans/loans-view/loan-account-actions/view-guarantors/view-guarantors.component.ts","./src/app/loans/loans-view/loan-account-actions/create-guarantor/create-guarantor.component.html","./src/app/loans/loans-view/loan-account-actions/create-guarantor/create-guarantor.component.ts","./src/app/loans/loans-view/loan-account-actions/disburse-to-savings-account/disburse-to-savings-account.component.html","./src/app/loans/loans-view/loan-account-actions/disburse-to-savings-account/disburse-to-savings-account.component.ts","./src/app/loans/loans-view/loan-account-actions/reject-loan/reject-loan.component.html","./src/app/loans/loans-view/loan-account-actions/reject-loan/reject-loan.component.ts","./src/app/loans/loans-view/loan-account-actions/disburse/disburse.component.html","./src/app/loans/loans-view/loan-account-actions/disburse/disburse.component.ts","./src/app/loans/loans-view/loan-account-actions/withdrawn-by-client/withdrawn-by-client.component.html","./src/app/loans/loans-view/loan-account-actions/withdrawn-by-client/withdrawn-by-client.component.ts","./src/app/loans/loans-view/loan-account-actions/add-collateral/add-collateral.component.html","./src/app/loans/loans-view/loan-account-actions/add-collateral/add-collateral.component.ts","./src/app/loans/loans-view/loan-account-actions/undo-disbursal/undo-disbursal.component.html","./src/app/loans/loans-view/loan-account-actions/undo-disbursal/undo-disbursal.component.ts","./src/app/loans/loans-view/loan-account-actions/loan-screen-reports/loan-screen-reports.component.html","./src/app/loans/loans-view/loan-account-actions/loan-screen-reports/loan-screen-reports.component.ts","./src/app/loans/loans-view/loan-account-actions/approve-loan/approve-loan.component.html","./src/app/loans/loans-view/loan-account-actions/approve-loan/approve-loan.component.ts","./src/app/loans/loans-view/loan-account-actions/add-loan-charge/add-loan-charge.component.html","./src/app/loans/loans-view/loan-account-actions/add-loan-charge/add-loan-charge.component.ts","./src/app/loans/loans-view/loan-account-actions/edit-repayment-schedule/edit-repayment-schedule.component.ts","./src/app/loans/loans-view/loan-account-actions/edit-repayment-schedule/edit-repayment-schedule.component.html","./src/app/loans/loans-view/loan-account-actions/loan-account-actions.component.html","./src/app/loans/loans-view/loan-account-actions/loan-account-actions.component.ts","./src/app/loans/loans-view/floating-interest-rates/floating-interest-rates.component.html","./src/app/loans/loans-view/floating-interest-rates/floating-interest-rates.component.ts","./src/app/loans/loans-view/loan-tranche-details/loan-tranche-details.component.html","./src/app/loans/loans-view/loan-tranche-details/loan-tranche-details.component.ts","./src/app/loans/loans-view/loan-collateral-tab/loan-collateral-tab.component.html","./src/app/loans/loans-view/loan-collateral-tab/loan-collateral-tab.component.ts","./src/app/loans/loans-account-stepper/loans-account-details-step/loans-account-details-step.component.html","./src/app/loans/loans-account-stepper/loans-account-details-step/loans-account-details-step.component.ts","./src/app/loans/custom-dialog/loans-account-add-collateral-dialog/loans-account-add-collateral-dialog.component.html","./src/app/loans/custom-dialog/loans-account-add-collateral-dialog/loans-account-add-collateral-dialog.component.ts","./src/app/loans/loans-account-stepper/loans-account-terms-step/loans-account-terms-step.component.html","./src/app/loans/loans-account-stepper/loans-account-terms-step/loans-account-terms-step.component.ts","./src/app/loans/loans-account-stepper/loans-account-charges-step/loans-account-charges-step.component.html","./src/app/loans/loans-account-stepper/loans-account-charges-step/loans-account-charges-step.component.ts","./src/app/loans/loans-account-stepper/loans-account-schedule-step/loans-account-schedule-step.component.html","./src/app/loans/loans-account-stepper/loans-account-schedule-step/loans-account-schedule-step.component.ts","./src/app/loans/loans-account-stepper/loans-account-datatable-step/loans-account-datatable-step.component.html","./src/app/loans/loans-account-stepper/loans-account-datatable-step/loans-account-datatable-step.component.ts","./src/app/loans/loans-account-stepper/loans-account-preview-step/loans-account-preview-step.component.html","./src/app/loans/loans-account-stepper/loans-account-preview-step/loans-account-preview-step.component.ts","./src/app/loans/create-loans-account/create-loans-account.component.html","./src/app/loans/create-loans-account/create-loans-account.component.ts","./src/app/loans/loans-view/loan-documents-tab/loan-documents-tab.component.ts","./src/app/loans/loans-view/loan-documents-tab/loan-documents-tab.component.html","./src/app/loans/loans-view/standing-instructions-tab/standing-instructions-tab.component.html","./src/app/loans/loans-view/standing-instructions-tab/standing-instructions-tab.component.ts","./src/app/loans/edit-loans-account/edit-loans-account.component.html","./src/app/loans/edit-loans-account/edit-loans-account.component.ts","./src/app/loans/loans-view/view-charge/view-charge.component.html","./src/app/loans/loans-view/view-charge/view-charge.component.ts","./src/app/loans/loans-view/transactions/view-transaction/view-transaction.component.html","./src/app/loans/loans-view/transactions/view-transaction/view-transaction.component.ts","./src/app/loans/loans-view/transactions/edit-transaction/edit-transaction.component.html","./src/app/loans/loans-view/transactions/edit-transaction/edit-transaction.component.ts","./src/app/loans/loans-view/transactions/view-reciept/view-reciept.component.ts","./src/app/loans/loans-view/transactions/view-reciept/view-reciept.component.html","./src/app/loans/loans-view/transactions/export-transactions/export-transactions.component.html","./src/app/loans/loans-view/transactions/export-transactions/export-transactions.component.ts","./src/app/loans/glim-account/glim-account.component.html","./src/app/loans/glim-account/glim-account.component.ts","./src/app/loans/glim-account/create-glim-account/glim-account-stepper/glim-charges-step/glim-charges-step.component.html","./src/app/loans/glim-account/create-glim-account/glim-account-stepper/glim-charges-step/glim-charges-step.component.ts","./src/app/loans/glim-account/create-glim-account/glim-account-stepper/glim-details-step/glim-details-step.component.html","./src/app/loans/glim-account/create-glim-account/glim-account-stepper/glim-details-step/glim-details-step.component.ts","./src/app/loans/glim-account/create-glim-account/glim-account-stepper/glim-terms-step/glim-terms-step.component.html","./src/app/loans/glim-account/create-glim-account/glim-account-stepper/glim-terms-step/glim-terms-step.component.ts","./src/app/loans/glim-account/create-glim-account/create-glim-account.component.html","./src/app/loans/glim-account/create-glim-account/create-glim-account.component.ts","./src/app/loans/common-resolvers/loan-details.resolver.ts","./src/app/loans/common-resolvers/loan-notes.resolver.ts","./src/app/loans/common-resolvers/loan-datatables.resolver.ts","./src/app/loans/common-resolvers/loan-datatable.resolver.ts","./src/app/loans/common-resolvers/loan-action-button.resolver.ts","./src/app/loans/common-resolvers/loans-account-template.resolver.ts","./src/app/loans/common-resolvers/loan-documents.resolver.ts","./src/app/loans/common-resolvers/loans-account-and-template.resolver.ts","./src/app/loans/common-resolvers/loans-account-charge.resolver.ts","./src/app/loans/common-resolvers/loans-account-transaction.resolver.ts","./src/app/loans/common-resolvers/loans-transaction-reciept.resolver.ts","./src/app/loans/common-resolvers/loans-account-transaction-template.resolver.ts","./src/app/loans/glim-account/glim-account-view.resolver.ts","./src/app/loans/common-resolvers/glim-loan-template.resolver.ts","./src/app/loans/common-resolvers/loan-delinquency-tags.resolver.ts","./src/app/loans/loans-view/loan-delinquency-tags-tab/loan-delinquency-tags-tab.component.html","./src/app/loans/loans-view/loan-delinquency-tags-tab/loan-delinquency-tags-tab.component.ts","./src/app/loans/common-resolvers/loan-reschedules.resolver.ts","./src/app/loans/loans-view/reschedule-loan-tab/reschedule-loan-tab.component.html","./src/app/loans/loans-view/reschedule-loan-tab/reschedule-loan-tab.component.ts","./src/app/loans/loans-view/loan-account-actions/adjust-loan-charge/adjust-loan-charge.component.html","./src/app/loans/loans-view/loan-account-actions/adjust-loan-charge/adjust-loan-charge.component.ts","./src/app/loans/loans-routing.module.ts","./src/app/loans/loans.module.ts"],"sourcesContent":["/** Recurring Deposits Account Buttons Configuration */\nexport class LoansAccountButtonConfiguration {\n\n    optionArray: {\n        name: string,\n        taskPermissionName?: string,\n    }[];\n\n    optionPaymentArray: {\n      name: string,\n      taskPermissionName?: string,\n    }[];\n\n    buttonsArray: {\n        name: string,\n        icon: string,\n        taskPermissionName?: string,\n    }[];\n\n    constructor(status: string) {\n        this.setOptions(status);\n        this.setButtons(status);\n    }\n\n    get singleButtons() {\n        return this.buttonsArray;\n    }\n\n    get options() {\n        return this.optionArray;\n    }\n\n    get optionsPayment() {\n      return this.optionPaymentArray;\n  }\n\n    setButtons(status: string) {\n        switch (status) {\n            case 'Active':\n                this.buttonsArray = [\n                    {\n                        name: 'Add Loan Charge',\n                        icon: 'plus',\n                        taskPermissionName: 'CREATE_LOANCHARGE',\n                    },\n                    {\n                        name: 'Foreclosure',\n                        icon: 'heart-broken',\n                        taskPermissionName: 'FORECLOSURE_LOAN',\n                    },\n                    {\n                        name: 'Make Repayment',\n                        icon: 'coins',\n                        taskPermissionName: 'REPAYMENT_LOAN',\n                    },\n                    {\n                        name: 'Undo Disbursal',\n                        icon: 'undo',\n                        taskPermissionName: 'DISBURSALUNDO_LOAN',\n                    }\n                ];\n                break;\n            case 'Submitted and pending approval':\n                this.buttonsArray = [\n                    {\n                        name: 'Add Loan Charge',\n                        icon: 'plus',\n                        taskPermissionName: 'CREATE_LOANCHARGE',\n                    },\n                    {\n                        name: 'Approve',\n                        icon: 'check',\n                        taskPermissionName: 'APPROVE_LOAN',\n                    },\n                    {\n                        name: 'Modify Application',\n                        icon: 'edit',\n                        taskPermissionName: 'UPDATE_LOAN',\n                    },\n                    {\n                        name: 'Reject',\n                        icon: 'times',\n                        taskPermissionName: 'REJECT_LOAN',\n                    },\n                ];\n                break;\n            case 'Approved':\n                this.buttonsArray = [\n                    {\n                        name: 'Disburse',\n                        icon: 'hand-holding-usd',\n                        taskPermissionName: 'DISBURSE_LOAN',\n                    },\n                    {\n                        name: 'Disburse to Savings',\n                        icon: 'piggy-bank',\n                        taskPermissionName: 'DISBURSETOSAVINGS_LOAN',\n                    },\n                    {\n                        name: 'Undo Approval',\n                        icon: 'undo',\n                        taskPermissionName: 'APPROVALUNDO_LOAN',\n                    },\n                ];\n                break;\n            case 'Overpaid':\n                this.buttonsArray = [\n                    {\n                        name: 'Transfer Funds',\n                        icon: 'exchange',\n                        taskPermissionName: 'CREATE_ACCOUNTTRANSFER',\n                    },\n                    {\n                        name: 'Credit Balance Refund',\n                        icon: 'coins',\n                        taskPermissionName: 'CREATE_CREDIT_BALANCE_REFUND',\n                    }\n                ];\n                break;\n            case 'Closed (written off)':\n                this.buttonsArray = [\n                    {\n                        name: 'Recovery Payment',\n                        icon: 'briefcase',\n                        taskPermissionName: 'RECOVERYPAYMENT_LOAN',\n                    },\n                ];\n                break;\n            case 'Closed (obligations met)':\n                this.buttonsArray = [\n                  {\n                    name: 'Goodwill Credit',\n                    icon: 'coins',\n                    taskPermissionName: 'CREATE_GOODWILL_TRANSACTION',\n                  },\n                  {\n                      name: 'Payout Refund',\n                      icon: 'coins',\n                      taskPermissionName: 'CREATE_PAYOUT_REFUND',\n                  },\n                  {\n                      name: 'Merchant Issued Refund',\n                      icon: 'coins',\n                      taskPermissionName: 'CREATE_MERCHANT_ISSUED_REFUND',\n                  }\n                ];\n                break;\n            default:\n                this.buttonsArray = [];\n        }\n    }\n\n    setOptions(status: string) {\n        switch (status) {\n            case 'Active':\n                this.optionArray = [\n                    {\n                        name: 'Waive Interest',\n                        taskPermissionName: 'WAIVEINTERESTPORTION_LOAN',\n                    },\n                    {\n                        name: 'Reschedule',\n                        taskPermissionName: 'CREATE_RESCHEDULELOAN',\n                    },\n                    {\n                        name: 'Write Off',\n                        taskPermissionName: 'WRITEOFF_LOAN',\n                    },\n                    {\n                        name: 'Close (as Rescheduled)',\n                        taskPermissionName: 'CLOSEASRESCHEDULED_LOAN',\n                    },\n                    {\n                        name: 'Close',\n                        taskPermissionName: 'CLOSE_LOAN',\n                    },\n                    {\n                        name: 'Loan Screen Report',\n                        taskPermissionName: 'READ_LOAN',\n                    },\n                    {\n                        name: 'View Guarantors',\n                        taskPermissionName: 'READ_GUARANTOR',\n                    },\n                    {\n                        name: 'Create Guarantor',\n                        taskPermissionName: 'CREATE_GUARANTOR',\n                    },\n                    {\n                        name: 'Recover From Guarantor',\n                        taskPermissionName: 'RECOVERGUARANTEES_LOAN',\n                    },\n                ];\n                this.optionPaymentArray = [\n                    {\n                        name: 'Goodwill Credit',\n                        taskPermissionName: 'CREATE_GOODWILL_TRANSACTION',\n                    },\n                    {\n                        name: 'Payout Refund',\n                        taskPermissionName: 'CREATE_PAYOUT_REFUND',\n                    },\n                    {\n                        name: 'Merchant Issued Refund',\n                        taskPermissionName: 'CREATE_MERCHANT_ISSUED_REFUND',\n                    }\n                ];\n                break;\n            case 'Submitted and pending approval':\n                this.optionArray = [\n                    {\n                        name: 'Withdrawn by client',\n                        taskPermissionName: 'WITHDRAW_LOAN',\n                    },\n                    {\n                        name: 'Delete',\n                        taskPermissionName: 'DELETE_LOAN',\n                    },\n                    {\n                        name: 'Add Collateral',\n                        taskPermissionName: 'CREATE_COLLATERAL',\n                    },\n                    {\n                        name: 'View Guarantors',\n                        taskPermissionName: 'READ_GUARANTOR',\n                    },\n                    {\n                        name: 'Create Guarantor',\n                        taskPermissionName: 'CREATE_GUARANTOR',\n                    },\n                    {\n                        name: 'Loan Screen Reports',\n                        taskPermissionName: 'READ_LOAN',\n                    },\n                ];\n                this.optionPaymentArray = [];\n                break;\n            case 'Approved':\n                this.optionArray = [\n                    {\n                        name: 'Add Loan Charge',\n                        taskPermissionName: 'CREATE_LOANCHARGE',\n                    },\n                    {\n                        name: 'View Guarantors',\n                        taskPermissionName: 'READ_GUARANTOR',\n                    },\n                    {\n                        name: 'Create Guarantor',\n                        taskPermissionName: 'CREATE_GUARANTOR',\n                    },\n                    {\n                        name: 'Loan Screen Report',\n                        taskPermissionName: 'READ_LOAN',\n                    },\n                ];\n                this.optionPaymentArray = [];\n                break;\n            default:\n                this.optionArray = [];\n                this.optionPaymentArray = [];\n        }\n    }\n\n    addOption(option: { name: string, icon?: string, taskPermissionName?: string }) {\n        this.optionArray.push(option);\n    }\n\n    addButton(option: { name: string, icon: string, taskPermissionName?: string }) {\n        this.buttonsArray.push(option);\n    }\n\n}\n","<mat-card class=\"loan-card\">\n\n  <mat-card-header fxLayout=\"column\" class=\"header\">\n\n    <mat-card-title-group class=\"header-title-group\">\n\n      <div class=\"profile-image-container\">\n        <div>\n          <img mat-card-md-image class=\"profile-image\" matTooltip=\"Loans Account\"\n            [src]=\"'assets/images/loans_account_placeholder.png'\">\n        </div>\n      </div>\n\n      <div class=\"mat-typography loan-card-title\">\n        <mat-card-title>\n          <div fxLayout=\"row\" fxLayout.lt-md=\"column\">\n\n            <div fxFlex=\"60%\">\n              <h3>\n                <i class=\"fa fa-stop\" matTooltip=\"{{ loanDetailsData.status.value }}\"\n                  [ngClass]=\"loanDetailsData.inArrears?'status-active-overdue':(loanDetailsData.status.code|statusLookup)\"></i>\n                Loan Product: {{loanDetailsData.loanProductName}}<span\n                  class=\"m-l-10\">({{loanDetailsData.accountNo}})</span>\n              </h3>\n              <span class=\"loans-overview\">\n                {{entityType}} Name: {{loanDetailsData.clientName ||\n                loanDetailsData.groupName}}<span class=\"m-l-10\">({{loanDetailsData.clientAccountNo}})</span><br />\n              </span>\n              <span class=\"loans-overview\" *ngIf=\"loanDetailsData.delinquencyRange\">\n                Loan Account Classification : {{loanDetailsData?.delinquencyRange.classification}}<br />\n              </span>\n              <span class=\"loans-overview\"\n                *ngIf=\"loanDetailsData.delinquent && loanDetailsData.delinquent.pastDueDays > 0\">\n                Past Due Days : {{loanDetailsData?.delinquent.pastDueDays | formatNumber}}<br />\n              </span>\n              <span class=\"loans-overview\" *ngIf=\"loanDetailsData.delinquent && loanDetailsData.delinquent.delinquentDays > 0\n                && loanDetailsData.delinquent.pastDueDays != loanDetailsData.delinquent.delinquentDays\">\n                Delinquent Days : {{loanDetailsData?.delinquent.delinquentDays | formatNumber}}\n              </span>\n            </div>\n\n            <div *ngIf=\"loanDetailsData.summary\" class=\"loans-overview mat-typography\" fxFlex=\"40%\">\n              <h3> Loan Account OverView </h3>\n              <span>Current Balance: {{loanDetailsData.currency.displaySymbol}}\n                {{loanDetailsData.summary.totalOutstanding | formatNumber}}</span><br>\n              <span *ngIf=\"loanDetailsData.inArrears\">Arrears By: {{loanDetailsData.summary.totalOverdue | formatNumber}}\n                <span *ngIf=\"!(loanDetailsData.summary.totalOverdue>=0)\">Not Provided</span>\n              </span><br>\n              <span *ngIf=\"loanDetailsData.inArrears\">Arrears Since: {{loanDetailsData.summary.overdueSinceDate |\n                dateFormat}}\n              </span>\n              <span *ngIf=\"loanDetailsData.totalOverpaid && loanDetailsData.totalOverpaid > 0\">\n                Overpaid By: {{loanDetailsData.currency.displaySymbol}} {{loanDetailsData.totalOverpaid | formatNumber}}\n              </span>\n            </div>\n\n            <span fxFlex=\"auto\"></span>\n\n            <div fxFlex=\"4%\">\n              <button mat-icon-button [matMenuTriggerFor]=\"accountMenu\" aria-label=\"Loan account actions\"\n                yPosition=\"below\">\n                <mat-icon matListIcon class=\"actions-menu\">\n                  <fa-icon icon=\"bars\" size=\"sm\"></fa-icon>\n                </mat-icon>\n              </button>\n            </div>\n\n          </div>\n        </mat-card-title>\n      </div>\n\n      <mat-menu #accountMenu=\"matMenu\">\n        <ng-container *ngFor=\"let item of buttonConfig.singleButtons\">\n          <button mat-menu-item *mifosxHasPermission=\"item.taskPermissionName\" (click)=\"loanAction(item.name)\">\n            <mat-icon matListIcon>\n              <fa-icon icon=\"{{item.icon}}\" size=\"sm\"></fa-icon>\n            </mat-icon>\n            <span> {{item.name}} </span>\n          </button>\n        </ng-container>\n\n        <ng-container *ngIf=\"buttonConfig.optionsPayment.length\" class=\"loan-span\">\n          <button mat-menu-item [matMenuTriggerFor]=\"Payments\">Payments</button>\n          <mat-menu #Payments=\"matMenu\">\n            <span *ngFor=\"let item of buttonConfig.optionsPayment\">\n              <button mat-menu-item *mifosxHasPermission=\"item.taskPermissionName\"\n                (click)=\"loanAction(item.name)\">{{item.name}}</button>\n            </span>\n          </mat-menu>\n        </ng-container>\n\n        <ng-container *ngIf=\"buttonConfig.options.length\" class=\"loan-span\">\n          <button mat-menu-item [matMenuTriggerFor]=\"More\">More</button>\n          <mat-menu #More=\"matMenu\">\n            <span *ngFor=\"let item of buttonConfig.options\">\n              <button mat-menu-item *mifosxHasPermission=\"item.taskPermissionName\"\n                (click)=\"loanAction(item.name)\">{{item.name}}</button>\n            </span>\n          </mat-menu>\n        </ng-container>\n      </mat-menu>\n\n    </mat-card-title-group>\n\n  </mat-card-header>\n\n  <mat-card-content>\n    <nav mat-tab-nav-bar class=\"navigation-tabs\">\n      <a mat-tab-link [routerLink]=\"['./general']\" routerLinkActive #general=\"routerLinkActive\"\n        [active]=\"general.isActive\">\n        General\n      </a>\n      <a mat-tab-link [routerLink]=\"['./accountdetail']\" routerLinkActive #accountdetail=\"routerLinkActive\"\n        [active]=\"accountdetail.isActive\">\n        Account Details\n      </a>\n      <ng-container *ngIf=\"loanDetailsData.originalSchedule\">\n        <a mat-tab-link [routerLink]=\"['./original-schedule']\" routerLinkActive #originalSchedule=\"routerLinkActive\"\n          [active]=\"originalSchedule.isActive\">\n          Original Schedule\n        </a>\n      </ng-container>\n      <a mat-tab-link [routerLink]=\"['./repayment-schedule']\" routerLinkActive #repaymentSchedule=\"routerLinkActive\"\n        [active]=\"repaymentSchedule.isActive\">\n        Repayment Schedule\n      </a>\n      <ng-container *ngIf=\"loanDetailsData.transactions\">\n        <a mat-tab-link [routerLink]=\"['./transactions']\" routerLinkActive #transactions=\"routerLinkActive\"\n          [active]=\"transactions.isActive\">\n          Transactions\n        </a>\n      </ng-container>\n      <ng-container>\n        <a mat-tab-link [routerLink]=\"['./delinquencytags']\" routerLinkActive #delinquencytags=\"routerLinkActive\"\n          [active]=\"delinquencytags.isActive\">\n          Delinquency Tags\n        </a>\n      </ng-container>\n      <ng-container *ngIf=\"loanDetailsData.collateral\">\n        <a mat-tab-link [routerLink]=\"['./loan-collateral']\" routerLinkActive #loanCollateralDetails=\"routerLinkActive\"\n          [active]=\"loanCollateralDetails.isActive\">\n          Loan Collateral Details\n        </a>\n      </ng-container>\n      <ng-container *ngIf=\"loanDetailsData.multiDisburseLoan\">\n        <a mat-tab-link [routerLink]=\"['./loan-tranche-details']\" routerLinkActive\n          #loanTrancheDetails=\"routerLinkActive\" [active]=\"loanTrancheDetails.isActive\">\n          Loan Tranche Details\n        </a>\n      </ng-container>\n      <ng-container *ngIf=\"loanDetailsData.overdueCharges.length > 0\">\n        <a mat-tab-link [routerLink]=\"['./overdue-charges']\" routerLinkActive #overduecharges=\"routerLinkActive\"\n          [active]=\"overduecharges.isActive\">\n          Overdue Charges\n        </a>\n      </ng-container>\n      <ng-container *ngIf=\"loanDetailsData.isLoanProductLinkedToFloatingRate\">\n        <a mat-tab-link [routerLink]=\"['./floating-interest-rates']\" routerLinkActive\n          #floatingInterestRates=\"routerLinkActive\" [active]=\"floatingInterestRates.isActive\">\n          Floating Interest Rates\n        </a>\n      </ng-container>\n      <ng-container *ngIf=\"loanDetailsData.charges\">\n        <a mat-tab-link [routerLink]=\"['./charges']\" routerLinkActive #charges=\"routerLinkActive\"\n          [active]=\"charges.isActive\">\n          Charges\n        </a>\n      </ng-container>\n      <a mat-tab-link [routerLink]=\"['./loan-reschedules']\" routerLinkActive #loanReschedules=\"routerLinkActive\"\n        [active]=\"loanReschedules.isActive\">\n        Loan Reschedules\n      </a>\n      <a mat-tab-link [routerLink]=\"['./loan-documents']\" routerLinkActive #loanDocuments=\"routerLinkActive\"\n        [active]=\"loanDocuments.isActive\">\n        Loan Documents\n      </a>\n      <a mat-tab-link *mifosxHasPermission=\"'READ_LOANNOTE'\" [routerLink]=\"['./notes']\" routerLinkActive\n        #notes=\"routerLinkActive\" [active]=\"notes.isActive\">\n        Notes\n      </a>\n      <ng-container *ngIf=\"loanDetailsData.clientId\">\n        <a mat-tab-link [routerLink]=\"['./standing-instruction']\" routerLinkActive\n          #standingInstruction=\"routerLinkActive\" [active]=\"standingInstruction.isActive\">\n          Standing Instruction\n        </a>\n      </ng-container>\n      <ng-container *ngFor=\"let loanDatatable of loanDatatables\">\n        <a mat-tab-link *mifosxHasPermission=\"'READ_' + loanDatatable.registeredTableName\"\n          [routerLink]=\"['./datatables',loanDatatable.registeredTableName]\" routerLinkActive\n          #datatable=\"routerLinkActive\" [active]=\"datatable.isActive\">\n          {{loanDatatable.registeredTableName}}\n        </a>\n      </ng-container>\n    </nav>\n\n    <router-outlet></router-outlet>\n\n  </mat-card-content>\n\n</mat-card>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\n\n/** Custom Services */\nimport { LoansService } from '../loans.service';\n\n/** Custom Buttons Configuration */\nimport { LoansAccountButtonConfiguration } from './loan-accounts-button-config';\n\n/** Dialog Components */\nimport { ConfirmationDialogComponent } from '../../shared/confirmation-dialog/confirmation-dialog.component';\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\nimport { LoanStatus } from '../models/loan-status.nodel';\n\n@Component({\n  selector: 'mifosx-loans-view',\n  templateUrl: './loans-view.component.html',\n  styleUrls: ['./loans-view.component.scss']\n})\nexport class LoansViewComponent implements OnInit {\n\n  /** Loan Details Data */\n  loanDetailsData: any;\n  /** Loan Datatables */\n  loanDatatables: any;\n  /** Recalculate Interest */\n  recalculateInterest: any;\n  /** Status */\n  status: string;\n  entityType: string;\n  /** Loan Id */\n  loanId: number;\n  /** Client Id */\n  clientId: number;\n  /** Button Configuration */\n  buttonConfig: LoansAccountButtonConfiguration;\n  /** Disburse Transaction number */\n  disburseTransactionNo = 0;\n\n  loanStatus: LoanStatus;\n\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              public loansService: LoansService,\n              public dialog: MatDialog) {\n    this.route.data.subscribe((data: { loanDetailsData: any, loanDatatables: any}) => {\n      this.loanDetailsData = data.loanDetailsData;\n      this.loanDatatables = data.loanDatatables;\n      this.loanStatus = this.loanDetailsData.status;\n    });\n    this.loanId = this.route.snapshot.params['loanId'];\n    this.clientId = this.loanDetailsData.clientId;\n  }\n\n  ngOnInit() {\n    this.recalculateInterest = this.loanDetailsData.recalculateInterest || true;\n    this.status = this.loanDetailsData.status.value;\n    if (this.loanDetailsData.status.active && this.loanDetailsData.multiDisburseLoan) {\n      if (this.loanDetailsData && this.loanDetailsData.transactions) {\n        this.loanDetailsData.transactions.forEach((transaction: any) => {\n          if (transaction.type.disbursement) {\n            this.disburseTransactionNo++;\n          }\n        });\n      }\n    }\n    this.setConditionalButtons();\n    if (this.router.url.includes('clients')) {\n      this.entityType = 'Client';\n    } else if (this.router.url.includes('groups')) {\n      this.entityType = 'Group';\n    } else if (this.router.url.includes('centers')) {\n      this.entityType = 'Center';\n    }\n  }\n\n  // Defines the buttons based on the status of the loan account\n  setConditionalButtons() {\n    this.buttonConfig = new LoansAccountButtonConfiguration(this.status);\n\n    if (this.status === 'Submitted and pending approval') {\n\n      this.buttonConfig.addOption({\n        name: (this.loanDetailsData.loanOfficerName ? 'Change Loan Officer' : 'Assign Loan Officer'),\n        icon: 'user-tie',\n        taskPermissionName: 'DISBURSE_LOAN'\n      });\n\n      if (this.loanDetailsData.isVariableInstallmentsAllowed) {\n        this.buttonConfig.addOption({\n          name: 'Edit Repayment Schedule',\n          icon: 'edit',\n          taskPermissionName: 'ADJUST_REPAYMENT_SCHEDULE'\n        });\n      }\n\n    } else if (this.status === 'Approved') {\n\n      this.buttonConfig.addButton({\n        name: (this.loanDetailsData.loanOfficerName ? 'Change Loan Officer' : 'Assign Loan Officer'),\n        icon: 'user-tie',\n        taskPermissionName: 'DISBURSE_LOAN'\n      });\n\n    } else if (this.status === 'Active') {\n      if (this.loanDetailsData.canDisburse || this.loanDetailsData.multiDisburseLoan) {\n        this.buttonConfig.addButton({\n          name: 'Disburse',\n          icon: 'hand-holding-usd',\n          taskPermissionName: 'DISBURSE_LOAN'\n        });\n      }\n      if (this.loanDetailsData.canDisburse) {\n        this.buttonConfig.addButton({\n          name: 'Disburse to Savings',\n          icon: 'piggy-bank',\n          taskPermissionName: 'DISBURSETOSAVINGS_LOAN'\n        });\n      }\n      if (this.loanDetailsData.multiDisburseLoan && this.disburseTransactionNo > 1) {\n        this.buttonConfig.addButton({\n          name: 'Undo Last Disbursal',\n          icon: 'undo',\n          taskPermissionName: 'DISBURSALLASTUNDO_LOAN'\n        });\n      }\n      // loan officer not assigned to loan, below logic\n      // helps to display otherwise not\n      if (!this.loanDetailsData.loanOfficerName) {\n        this.buttonConfig.addButton({\n          name: 'Assign Loan Officer',\n          icon: 'user-tie',\n          taskPermissionName: 'UPDATELOANOFFICER_LOAN'\n        });\n      }\n\n      if (this.recalculateInterest) {\n        this.buttonConfig.addButton({\n          name: 'Prepay Loan',\n          icon: 'coins',\n          taskPermissionName: 'REPAYMENT_LOAN'\n        });\n      }\n\n    }\n  }\n\n  loanAction(button: string) {\n    switch (button) {\n      case 'Recover From Guarantor':\n        this.recoverFromGuarantor();\n        break;\n      case 'Delete':\n        this.deleteLoanAccount();\n        break;\n      case 'Modify Application':\n        this.router.navigate(['edit-loans-account'], { relativeTo: this.route});\n        break;\n      case 'Transfer Funds':\n        const queryParams: any = { loanId: this.loanId, accountType: 'fromloans' };\n        this.router.navigate(['transfer-funds/make-account-transfer'], { relativeTo: this.route, queryParams: queryParams });\n        break;\n      default:\n        this.router.navigate(['actions', button], { relativeTo: this.route });\n        break;\n    }\n  }\n\n  /**\n   * Recover from guarantor action\n   */\n  private recoverFromGuarantor() {\n    const recoverFromGuarantorDialogRef = this.dialog.open(ConfirmationDialogComponent, {\n      data: { heading: 'Recover from Guarantor', dialogContext: 'Are you sure you want recover from Guarantor', type: 'Mild' }\n    });\n    recoverFromGuarantorDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.loansService.loanActionButtons(this.loanId, 'recoverGuarantees').subscribe(() => {\n          this.reload();\n        });\n      }\n    });\n  }\n\n  /**\n   * Delete loan Account\n   */\n  private deleteLoanAccount() {\n    const deleteGuarantorDialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `with loan id: ${this.loanId}` }\n    });\n    deleteGuarantorDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        this.loansService.deleteLoanAccount(this.loanId).subscribe(() => {\n          this.router.navigate(['../../'], { relativeTo: this.route });\n        });\n      }\n    });\n  }\n\n  /**\n   * Refetches data for the component\n   * TODO: Replace by a custom reload component instead of hard-coded back-routing.\n   */\n  private reload() {\n    const clientId = this.clientId;\n    const url: string = this.router.url;\n    this.router.navigateByUrl(`/clients/${clientId}/loans-accounts`, { skipLocationChange: true })\n      .then(() => this.router.navigate([url]));\n  }\n\n}\n","<div class=\"tab-container mat-typography\">\n\n  <ng-container *ngIf=\"loanDetails.summary\">\n    <h3>Performance History</h3>\n    <div fxLayout=\"row\" fxLayoutGap=\"32px\" class=\"performance-history-container\">\n      <table>\n        <tbody>\n          <tr>\n            <td fxFlex=\"25%\">\n              <b>Number of Repayments :</b>\n            </td>\n            <td fxFlex=\"25%\" class=\"left\">\n              {{loanDetails?.numberOfRepayments | formatNumber}}\n            </td>\n            <td fxFlex=\"25%\">\n              <b>Maturity Date :</b>\n            </td>\n            <td fxFlex=\"25%\" class=\"left\">\n              {{loanDetails?.timeline.expectedMaturityDate | dateFormat}}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </ng-container>\n\n  <div *ngIf=\"loanDetails.summary\">\n\n    <h3> Loan Summary </h3>\n\n    <table mat-table [dataSource]=\"dataSource\">\n      <ng-container matColumnDef=\"Empty\">\n        <th mat-header-cell *matHeaderCellDef>  </th>\n        <td mat-cell *matCellDef=\"let ele\"> {{ ele.property }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"Original\">\n        <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Original </th>\n        <td mat-cell class=\"r-amount\" *matCellDef=\"let ele\"> {{ ele.original | currency }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"Paid\">\n        <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Paid </th>\n        <td mat-cell class=\"r-amount amount-minus\" *matCellDef=\"let ele\"> {{ ele.paid | currency }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"Adjustments\">\n        <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Credit Adjustments </th>\n        <td mat-cell class=\"r-amount amount-plus\" *matCellDef=\"let ele\"> {{ ele.adjustment | currency }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"Waived\">\n        <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Waived </th>\n        <td mat-cell class=\"r-amount amount-minus\" *matCellDef=\"let ele\"> {{ ele.waived | currency }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"Written Off\">\n        <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Written Off </th>\n        <td mat-cell class=\"r-amount amount-minus\" *matCellDef=\"let ele\"> {{ ele.writtenOff | currency }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"Outstanding\">\n        <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Outstanding </th>\n        <td mat-cell class=\"r-amount\" *matCellDef=\"let ele\"> {{ ele.outstanding | currency }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"Over Due\">\n        <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Over Due </th>\n        <td mat-cell class=\"r-amount\" *matCellDef=\"let ele\"> {{ ele.overdue | currency }} </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"loanSummaryColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: loanSummaryColumns;\"></tr>\n    </table>\n\n  </div>\n\n  <div *ngIf=\"loanDetails.summary\">\n\n    <h3> Loan Details</h3>\n    <table mat-table [dataSource]=\"detailsDataSource\">\n\n      <ng-container matColumnDef=\"Key\">\n        <th mat-header-cell *matHeaderCellDef> Key </th>\n        <td mat-cell *matCellDef=\"let ele\"> {{ ele.key }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"Value\">\n        <th mat-header-cell *matHeaderCellDef> Value </th>\n        <td mat-cell *matCellDef=\"let ele\">\n          <ng-container *ngIf=\"ele.key === 'Disbursement Date'\" >\n            <span *ngIf=\"loanDetails.timeline.actualDisbursementDate\"> {{loanDetails.timeline.actualDisbursementDate  | dateFormat}} </span>\n            <span *ngIf=\"!loanDetails.timeline.actualDisbursementDate\"> Not Available </span>\n          </ng-container>\n\n          <ng-container *ngIf=\"ele.key === 'Loan Purpose'\">\n            <span *ngIf=\"loanDetails.loanPurchaseName\"> {{loanDetails.loanPurchaseName}} </span>\n            <span *ngIf=\"!loanDetails.loanPurchaseName\"> Not Available </span>\n          </ng-container>\n\n          <ng-container *ngIf=\"ele.key === 'Loan Officer'\">\n            <span *ngIf=\"!loanDetails.loanOfficerName\"> Unassigned </span>\n            <span *ngIf=\"loanDetails.loanOfficerName\"> {{loanDetails.loanOfficerName}} &nbsp;\n              <span *ngIf=\"loanDetails.loanOfficerName\">\n                    <!-- <a ng-click=\"clickEvent('unassignloanofficer', loanDetails.id)\" *mifosxHasPermission = \"'REMOVELOANOFFICER_LOAN'\"><i\n                      class=\"fa fa-times\"></i></a> -->\n              </span>\n            </span>\n          </ng-container>\n\n          <ng-container *ngIf=\"ele.key === 'Currency'\">\n            <span> {{loanDetails.currency.name }} {{loanDetails.currency.code}} </span>\n          </ng-container>\n\n          <ng-container *ngIf=\"ele.key === 'External Id'\">\n            <span *ngIf=\"loanDetails.externalId\"> {{loanDetails.externalId}} </span>\n            <span *ngIf=\"!loanDetails.externalId\"> Not Available </span>\n          </ng-container>\n\n          <ng-container *ngIf=\"ele.key === 'Proposed Amount' || ele.key === 'Approved Amount' || ele.key === 'Disburse Amount'\">\n            {{ ele.value }}\n          </ng-container>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"loanDetailsColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: loanDetailsColumns;\"></tr>\n\n    </table>\n\n  </div>\n\n  <div *ngIf=\"!loanDetails.summary\">\n\n    <h3> Loan Details </h3>\n    <table mat-table [dataSource]=\"detailsDataSource\">\n\n      <ng-container matColumnDef=\"Key\">\n        <th mat-header-cell *matHeaderCellDef> Key </th>\n        <td mat-cell *matCellDef=\"let ele\"> {{ ele.key }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"Value\">\n        <th mat-header-cell *matHeaderCellDef> Value </th>\n        <td mat-cell *matCellDef=\"let ele\">\n          <ng-container *ngIf=\"ele.key === 'Disbursement Date'\" >\n            <span *ngIf=\"loanDetails.timeline.actualDisbursementDate\"> {{loanDetails.timeline.actualDisbursementDate  | dateFormat}} </span>\n            <span *ngIf=\"!loanDetails.timeline.actualDisbursementDate\"> Not Available </span>\n          </ng-container>\n\n          <ng-container *ngIf=\"ele.key === 'Loan Officer'\">\n            <span *ngIf=\"!loanDetails.loanOfficerName\"> Unassigned </span>\n            <span *ngIf=\"loanDetails.loanOfficerName\"> {{loanDetails.loanOfficerName}} &nbsp;\n              <span *ngIf=\"loanDetails.loanOfficerName\">\n                    <!-- <a ng-click=\"clickEvent('unassignloanofficer', loanDetails.id)\" *mifosxHasPermission = \"'REMOVELOANOFFICER_LOAN'\"><i\n                      class=\"fa fa-times\"></i></a> -->\n              </span>\n            </span>\n          </ng-container>\n\n          <ng-container *ngIf=\"ele.key === 'Currency'\">\n            <span> {{loanDetails.currency.name }} </span>\n          </ng-container>\n\n          <ng-container *ngIf=\"ele.key === 'External Id'\">\n            <span *ngIf=\"loanDetails.externalId\"> {{loanDetails.externalId}} </span>\n            <span *ngIf=\"!loanDetails.externalId\"> Not Available </span>\n          </ng-container>\n\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"loanDetailsColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: loanDetailsColumns;\"></tr>\n\n    </table>\n  </div>\n\n  <div *ngIf=\"!loanDetails.summary\">\n    <h3> Loan Purpose </h3>\n    <div class=\"container\">\n      <div fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\n\n        <div fxFlexFill>\n            <span fxFlex=\"50%\">Loan Purpose:</span>\n            <span fxFlex=\"50%\" *ngIf=\"loanDetails.loanPurposeName\">\n              {{ loanDetails.loanPurposeName }}\n            </span>\n            <span fxFlex=\"50%\" *ngIf=\"!loanDetails.loanPurposeName\">\n              Not Provided\n            </span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"50%\">Proposed Amount:</span>\n          <span fxFlex=\"50%\">{{ loanDetails.proposedPrincipal | currency}}</span>\n        </div>\n\n        <div fxFlexFill *ngIf=\"showApprovedAmountBasedOnStatus()\">\n          <span fxFlex=\"50%\">Approved Amount:</span>\n          <span fxFlex=\"50%\">{{ loanDetails.approvedPrincipal | currency }}</span>\n        </div>\n\n        <div fxFlexFill *ngIf=\"showDisbursedAmountBasedOnStatus()\">\n          <span fxFlex=\"50%\">Disburse Amount:</span>\n          <span fxFlex=\"50%\">{{ loanDetails.principal | currency }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"50%\">Arrears By:</span>\n          <span fxFlex=\"50%\"> Not Provided</span>\n        </div>\n\n      </div>\n    </div>\n  </div>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { MatTableDataSource } from '@angular/material/table';\n\n@Component({\n  selector: 'mifosx-general-tab',\n  templateUrl: './general-tab.component.html',\n  styleUrls: ['./general-tab.component.scss']\n})\nexport class GeneralTabComponent implements OnInit {\n\n  loanDetails: any;\n  status: any;\n  loanSummaryColumns: string[] = ['Empty', 'Original', 'Paid', 'Waived', 'Written Off', 'Outstanding', 'Over Due'];\n  loanDetailsColumns: string[] = ['Key', 'Value'];\n  loanSummaryTableData: {\n    'property': string,\n    'original': string,\n    'adjustment': string,\n    'paid': string,\n    'waived': string,\n    'writtenOff': string,\n    'outstanding': string,\n    'overdue': string\n  }[];\n  loanDetailsTableData: {\n    'key': string,\n    'value'?: string\n  }[];\n\n  /** Data source for loans summary table. */\n  dataSource: MatTableDataSource<any>;\n  detailsDataSource: MatTableDataSource<any>;\n\n  constructor(private route: ActivatedRoute) {\n    this.route.parent.data.subscribe((data: { loanDetailsData: any, }) => {\n      this.loanDetails = data.loanDetailsData;\n      if (this.loanDetails.transactions) {\n        this.loanDetails.transactions.some((transaction: any) => {\n          if (transaction.type.code === 'loanTransactionType.chargeback') {\n            this.loanSummaryColumns = ['Empty', 'Original', 'Adjustments', 'Paid', 'Waived', 'Written Off', 'Outstanding', 'Over Due'];\n            return;\n          }\n        });\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.status = this.loanDetails.value;\n    if (this.loanDetails.summary) {\n      this.setloanSummaryTableData();\n      this.setloanDetailsTableData();\n    } else {\n      this.setloanNonDetailsTableData();\n    }\n  }\n\n  setloanSummaryTableData() {\n    this.loanSummaryTableData = [\n      {\n        'property': 'Principal',\n        'original': this.loanDetails.summary.principalDisbursed,\n        'adjustment': this.loanDetails.summary.principalAdjustments || 0,\n        'paid': this.loanDetails.summary.principalPaid,\n        'waived': this.loanDetails.summary.principalWaived || 0,\n        'writtenOff': this.loanDetails.summary.principalWrittenOff,\n        'outstanding': this.loanDetails.summary.principalOutstanding,\n        'overdue': this.loanDetails.summary.principalOverdue,\n\n    },\n    {\n        'property': 'Interest',\n        'original': this.loanDetails.summary.interestCharged,\n        'adjustment': '0',\n        'paid': this.loanDetails.summary.interestPaid,\n        'waived': this.loanDetails.summary.interestWaived,\n        'writtenOff': this.loanDetails.summary.interestWrittenOff,\n        'outstanding': this.loanDetails.summary.interestOutstanding,\n        'overdue': this.loanDetails.summary.interestOverdue,\n    },\n    {\n        'property': 'Fees',\n        'original': this.loanDetails.summary.feeChargesCharged,\n        'adjustment': '0',\n        'paid': this.loanDetails.summary.feeChargesPaid,\n        'waived': this.loanDetails.summary.feeChargesWaived,\n        'writtenOff': this.loanDetails.summary.feeChargesWrittenOff,\n        'outstanding': this.loanDetails.summary.feeChargesOutstanding,\n        'overdue': this.loanDetails.summary.feeChargesOverdue,\n    },\n    {\n        'property': 'Penalties',\n        'original': this.loanDetails.summary.penaltyChargesCharged,\n        'adjustment': '0',\n        'paid': this.loanDetails.summary.penaltyChargesPaid,\n        'waived': this.loanDetails.summary.penaltyChargesWaived,\n        'writtenOff': this.loanDetails.summary.penaltyChargesWrittenOff,\n        'outstanding': this.loanDetails.summary.penaltyChargesOutstanding,\n        'overdue': this.loanDetails.summary.penaltyChargesOverdue,\n    },\n    {\n        'property': 'Total',\n        'original': this.loanDetails.summary.totalExpectedRepayment,\n        'adjustment': this.loanDetails.summary.principalAdjustments || 0,\n        'paid': this.loanDetails.summary.totalRepayment,\n        'waived': this.loanDetails.summary.totalWaived,\n        'writtenOff': this.loanDetails.summary.totalWrittenOff,\n        'outstanding': this.loanDetails.summary.totalOutstanding,\n        'overdue': this.loanDetails.summary.totalOverdue,\n    }\n    ];\n    this.dataSource = new MatTableDataSource(this.loanSummaryTableData);\n  }\n\n  setloanDetailsTableData() {\n\n    this.loanDetailsTableData = [\n      {\n        'key': 'Disbursement Date'\n      },\n      {\n        'key': 'Loan Purpose'\n      },\n      {\n        'key': 'Loan Officer'\n      },\n      {\n        'key': 'Currency'\n      },\n      {\n        'key': 'External Id'\n      },\n      {\n        'key': 'Proposed Amount',\n        'value': this.loanDetails.proposedPrincipal,\n      },\n      {\n        'key': 'Approved Amount',\n        'value': this.loanDetails.approvedPrincipal,\n      },\n      {\n        'key': 'Disburse Amount',\n        'value': this.loanDetails.principal,\n      },\n    ];\n    this.detailsDataSource = new MatTableDataSource(this.loanDetailsTableData);\n\n  }\n\n  setloanNonDetailsTableData() {\n    this.loanDetailsTableData = [\n      {\n        'key': 'Disbursement Date'\n      },\n      {\n        'key': 'Currency'\n      },\n      {\n        'key': 'Loan Officer'\n      },\n      {\n        'key': 'External Id'\n      }\n    ];\n    this.detailsDataSource = new MatTableDataSource(this.loanDetailsTableData);\n  }\n\n  showApprovedAmountBasedOnStatus() {\n    if (this.status === 'Submitted and pending approval' || this.status === 'Withdrawn by applicant' || this.status === 'Rejected') {\n        return false;\n    }\n    return true;\n  }\n\n  showDisbursedAmountBasedOnStatus = function() {\n    if (this.status === 'Submitted and pending approval' || this.status === 'Withdrawn by applicant' || this.status === 'Rejected' ||\n        this.status === 'Approved') {\n        return false;\n    }\n    return true;\n  };\n}\n","<div class=\"container\">\n\n    <div fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\n\n        <div fxFlexFill>\n            <span fxFlex=\"50%\">Repayment Strategy:</span>\n            <span fxFlex=\"50%\">{{ loanDetails.transactionProcessingStrategyName }}</span>\n        </div>\n\n        <div fxFlexFill>\n            <span fxFlex=\"50%\">Repayments:</span>\n            <span fxFlex=\"50%\">{{loanDetails.numberOfRepayments}} every {{loanDetails.repaymentEvery}}&nbsp;{{loanDetails.repaymentFrequencyType.value}}\n            <span *ngIf=\"loanDetails.repaymentFrequencyType?.id == 2 && loanDetails.repaymentFrequencyNthDayType?.id != 0 && loanDetails.repaymentFrequencyDayOfWeekType?.id != 0\">\n              &nbsp;on&nbsp;{{loanDetails.repaymentFrequencyNthDayType?.value}}&nbsp;{{loanDetails.repaymentFrequencyDayOfWeekType?.value}}\n            </span>\n            </span>\n        </div>\n\n        <div fxFlexFill>\n            <span fxFlex=\"50%\"> Amortization </span>\n            <span fxFlex=\"50%\"> {{loanDetails.amortizationType.value}} </span>\n        </div>\n\n        <div fxFlexFill>\n            <span fxFlex=\"50%\"> Equal Amortization </span>\n            <span fxFlex=\"50%\"> {{loanDetails.isEqualAmortization}} </span>\n        </div>\n\n        <div fxFlexFill>\n            <span fxFlex=\"50%\"> Interest </span>\n            <span fxFlex=\"50%\"> {{loanDetails.annualInterestRate}} per annum ({{loanDetails.interestRatePerPeriod}}%&nbsp; {{loanDetails.interestRateFrequencyType.value}}) - {{loanDetails.interestType.value}} </span>\n        </div>\n\n        <div fxFlexFill>\n            <span fxFlex=\"50%\"> Grace: On Principal Payment</span>\n            <span fxFlex=\"50%\"> {{loanDetails.graceOnPrincipalPayment}} </span>\n        </div>\n\n        <div fxFlexFill>\n            <span fxFlex=\"50%\"> Grace: On Interest Payment</span>\n            <span fxFlex=\"50%\"> {{loanDetails.graceOnInterestPayment}} </span>\n        </div>\n\n        <div fxFlexFill>\n            <span fxFlex=\"50%\"> Grace on Arrears Ageing</span>\n            <span fxFlex=\"50%\"> {{loanDetails.graceOnArrearsAgeing}} </span>\n        </div>\n\n        <div fxFlexFill>\n            <span fxFlex=\"50%\"> Fund Source</span>\n            <span fxFlex=\"50%\"> {{loanDetails.fundName}} </span>\n        </div>\n\n        <div fxFlexFill>\n            <span fxFlex=\"50%\"> Interest Free Period</span>\n            <span fxFlex=\"50%\"> {{loanDetails.graceOnInterestCharged}} </span>\n        </div>\n\n        <div fxFlexFill>\n            <span fxFlex=\"50%\"> Interest Calculation Period</span>\n            <span fxFlex=\"50%\"> {{loanDetails.interestCalculationPeriodType.value}} </span>\n        </div>\n\n        <div fxFlexFill>\n            <span fxFlex=\"50%\"> Allow Partial Interest Calculation with same as repayment</span>\n            <span fxFlex=\"50%\"> {{loanDetails.allowPartialPeriodInterestCalcualtion}} </span>\n        </div>\n\n        <div fxFlexFill>\n            <span fxFlex=\"50%\"> Interest Type</span>\n            <span fxFlex=\"50%\"> {{loanDetails.interestType.value}} </span>\n        </div>\n\n        <div fxFlexFill>\n            <span fxFlex=\"50%\"> Submitted on</span>\n            <span fxFlex=\"50%\"> {{loanDetails.timeline.submittedOnDate  | dateFormat }} </span>\n        </div>\n\n        <div fxFlexFill>\n            <span fxFlex=\"50%\"> Approved on</span>\n            <span fxFlex=\"50%\"> {{loanDetails.timeline.approvedOnDate  | dateFormat }} </span>\n        </div>\n\n        <div fxFlexFill>\n            <span fxFlex=\"50%\"> Disbursed on</span>\n            <span fxFlex=\"50%\"> {{loanDetails.timeline.actualDisbursementDate  | dateFormat }} </span>\n        </div>\n\n        <div fxFlexFill>\n            <span fxFlex=\"50%\"> Matures on</span>\n            <span fxFlex=\"50%\"> {{loanDetails.timeline.expectedMaturityDate  | dateFormat }} </span>\n        </div>\n\n        <div fxFlexFill *ngIf=\"loanDetails.canDefineInstallmentAmount\">\n            <span fxFlex=\"50%\"> Fixed EMI amount</span>\n            <span fxFlex=\"50%\"> {{loanDetails.fixedEmiAmount | formatNumber}} </span>\n        </div>\n\n        <div fxFlexFill *ngIf=\"loanDetails.isTopup\">\n            <span fxFlex=\"50%\"> Is Topup Loan?</span>\n            <span fxFlex=\"50%\"> {{loanDetails.isTopup}} </span>\n        </div>\n\n        <div fxFlexFill *ngIf=\"loanDetails.isTopup\">\n            <span fxFlex=\"50%\"> Loan closed with Topup </span>\n            <span fxFlex=\"50%\"> <a href=\"#\">{{loanDetails.closureLoanAccountNo}}</a> </span>\n        </div>\n\n        <div fxFlexFill *ngIf=\"loanDetails.isTopup\">\n            <span fxFlex=\"50%\"> Topup closure amount</span>\n            <span fxFlex=\"50%\"> {{loanDetails.topupAmount| formatNumber}} </span>\n        </div>\n\n        <div fxFlexFill>\n            <span fxFlex=\"50%\"> Recalculate Interest based on new terms</span>\n            <span fxFlex=\"50%\">  {{loanDetails.isInterestRecalculationEnabled ? 'Yes' : 'No'  }} </span>\n        </div>\n\n        <div fxFlexFill>\n            <span fxFlex=\"50%\"> Days in year</span>\n            <span fxFlex=\"50%\"> {{loanDetails.daysInYearType.value}} </span>\n        </div>\n\n        <div fxFlexFill>\n            <span fxFlex=\"50%\"> Days in month</span>\n            <span fxFlex=\"50%\"> {{loanDetails.daysInMonthType.value }} </span>\n        </div>\n\n        <div fxFlexFill *ngIf=\"loanDetails.isInterestRecalculationEnabled\">\n            <span fxFlex=\"50%\"> Interest recalculation compounding on</span>\n            <span fxFlex=\"50%\"> {{loanDetails.interestRecalculationData.interestRecalculationCompoundingType.value}} </span>\n        </div>\n\n        <div fxFlexFill *ngIf=\"loanDetails.isInterestRecalculationEnabled\">\n            <span fxFlex=\"50%\"> Advance payments adjustment type</span>\n            <span fxFlex=\"50%\"> {{loanDetails.interestRecalculationData.rescheduleStrategyType.value}} </span>\n        </div>\n\n        <div fxFlexFill *ngIf=\"loanDetails.isInterestRecalculationEnabled\">\n            <span fxFlex=\"50%\"> Frequency for recalculate Outstanding Principal</span>\n            <span fxFlex=\"50%\"> {{loanDetails.interestRecalculationData.calendarData.humanReadable}} </span>\n        </div>\n\n        <div fxFlexFill *ngIf=\"loanDetails.isInterestRecalculationEnabled && loanDetails.interestRecalculationData.interestRecalculationCompoundingType.id !=0\">\n            <span fxFlex=\"50%\"> Frequency for compounding</span>\n            <span fxFlex=\"50%\"> {{loanDetails.interestRecalculationData.compoundingCalendarData.humanReadable}} </span>\n        </div>\n\n        <div fxFlexFill *ngIf=\"loanDetails.isVariableInstallmentsAllowed\">\n            <span fxFlex=\"50%\"> Variable Installments Allowed</span>\n            <span fxFlex=\"50%\"> {{loanDetails.isVariableInstallmentsAllowed}} </span>\n        </div>\n\n        <div fxFlexFill *ngIf=\"loanDetails.isVariableInstallmentsAllowed\">\n            <span fxFlex=\"50%\"> Gap between Installments:(Min</span>\n            <span fxFlex=\"50%\"> {{loanDetails.minimumGap}}&nbsp;Days&nbsp;, Max:{{loanDetails.maximumGap}}&nbsp;Days) </span>\n        </div>\n\n    </div>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'mifosx-account-details',\n  templateUrl: './account-details.component.html',\n  styleUrls: ['./account-details.component.scss']\n})\nexport class AccountDetailsComponent implements OnInit {\n\n  loanDetails: any;\n  dataObject: {\n    property: string,\n    value: string\n  }[];\n\n  constructor(private route: ActivatedRoute) {\n    this.route.parent.data.subscribe((data: { loanDetailsData: any, }) => {\n      this.loanDetails = data.loanDetailsData;\n    });\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n/** Custom Components */\n\n/** Custom Services */\nimport { LoansService } from '../../loans.service';\nimport { AuthenticationService } from '../../../core/authentication/authentication.service';\n\n@Component({\n  selector: 'mifosx-notes-tab',\n  templateUrl: './notes-tab.component.html',\n  styleUrls: ['./notes-tab.component.scss']\n})\nexport class NotesTabComponent implements OnInit {\n\n  entityId: string;\n  username: string;\n  entityNotes: any;\n\n  constructor(private route: ActivatedRoute,\n    private loansService: LoansService,\n    private authenticationService: AuthenticationService) {\n    const savedCredentials = this.authenticationService.getCredentials();\n    this.username = savedCredentials.username;\n    this.entityId = this.route.snapshot.params['loanId'];\n    this.route.data.subscribe((data: { loanNotes: any }) => {\n      this.entityNotes = data.loanNotes;\n    });\n  }\n\n  ngOnInit() { }\n\n  addNote(noteContent: any) {\n    this.loansService.createLoanNote(this.entityId, noteContent).subscribe((response: any) => {\n      this.entityNotes.push({\n        id: response.resourceId,\n        createdByUsername: this.username,\n        createdOn: new Date(),\n        note: noteContent.note\n      });\n    });\n  }\n\n  editNote(noteId: string, noteContent: any, index: number) {\n    this.loansService.editLoanNote(this.entityId, noteId, noteContent).subscribe(() => {\n      this.entityNotes[index].note = noteContent.note;\n    });\n  }\n\n  deleteNote(noteId: string, index: number) {\n    this.loansService.deleteLoanNote(this.entityId, noteId)\n      .subscribe(() => {\n        this.entityNotes.splice(index, 1);\n    });\n  }\n\n}\n","<mifosx-entity-notes-tab [entityId]=\"entityId\"\n  [entityNotes]=\"entityNotes\"\n  [callbackAdd]=\"addNote\"\n  [callbackEdit]=\"editNote\"\n  [callbackDelete]=\"deleteNote\"\n>\n</mifosx-entity-notes-tab>\n","<div class=\"container\">\n\n  <table mat-table [dataSource]=\"repaymentScheduleDetails.periods\" *ngIf=\"!forEditing\">\n\n    <ng-container matColumnDef=\"number\">\n      <th mat-header-cell class=\"center\" *matHeaderCellDef> # </th>\n      <td mat-cell class=\"right\" *matCellDef=\"let ele\"> {{ ele.period }} </td>\n      <td mat-footer-cell *matFooterCellDef> &nbsp; </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"days\">\n      <th mat-header-cell class=\"center\" *matHeaderCellDef> Days </th>\n      <td mat-cell class=\"center\" *matCellDef=\"let ele\" [ngClass]=\"installmentStyle(ele)\"> {{ ele.daysInPeriod }} </td>\n      <td mat-footer-cell class=\"center\" *matFooterCellDef> <b> Total</b> </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"date\">\n      <th mat-header-cell class=\"center\" *matHeaderCellDef> Date </th>\n      <td mat-cell class=\"m-r-5\" *matCellDef=\"let ele\" [ngClass]=\"installmentStyle(ele)\"> {{ ele.dueDate  | dateFormat}} </td>\n      <td mat-footer-cell *matFooterCellDef>  </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"paiddate\">\n      <th mat-header-cell class=\"center\" *matHeaderCellDef> Paid Date </th>\n      <td mat-cell class=\"center\" *matCellDef=\"let ele\" [ngClass]=\"installmentStyle(ele)\"> {{ ele.obligationsMetOnDate  | dateFormat}} </td>\n      <td mat-footer-cell *matFooterCellDef>  </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"check\">\n      <th mat-header-cell *matHeaderCellDef> &nbsp; </th>\n      <td mat-cell class=\"center\" *matCellDef=\"let ele\" [ngClass]=\"installmentStyle(ele)\">\n        <span *ngIf=\"ele.obligationsMetOnDate\"> <i class=\"fa fa-check\"></i> </span>\n      </td>\n      <td mat-footer-cell *matFooterCellDef> </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"balanceOfLoan\">\n      <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Balance Of Loan </th>\n      <td mat-cell class=\"r-amount\" *matCellDef=\"let ele\" [ngClass]=\"installmentStyle(ele)\"> {{ ele.principalLoanBalanceOutstanding | formatNumber }} </td>\n      <td mat-footer-cell class=\"r-amount\" *matFooterCellDef> &nbsp; </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"principalDue\">\n      <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Principal Due </th>\n      <td mat-cell class=\"check r-amount\" *matCellDef=\"let ele\" [ngClass]=\"installmentStyle(ele)\"> {{ ele.principalDue | formatNumber }} </td>\n      <td mat-footer-cell class=\"check r-amount\" *matFooterCellDef> <b> {{ repaymentScheduleDetails.totalPrincipalExpected | currency }}</b>  </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"interest\">\n      <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Interest </th>\n      <td mat-cell class=\"r-amount\" *matCellDef=\"let ele\" [ngClass]=\"installmentStyle(ele)\"> {{ ele.interestOriginalDue | formatNumber}} </td>\n      <td mat-footer-cell class=\"r-amount\" *matFooterCellDef> <b> {{ repaymentScheduleDetails.totalInterestCharged | currency }} </b> </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"fees\">\n      <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Fees </th>\n      <td mat-cell class=\"r-amount\" *matCellDef=\"let ele\" [ngClass]=\"installmentStyle(ele)\"> {{ ele.feeChargesDue | formatNumber}} </td>\n      <td mat-footer-cell class=\"r-amount\" *matFooterCellDef> <b> {{ repaymentScheduleDetails.totalFeeChargesCharged | currency }} </b> </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"penalties\">\n      <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Penalties </th>\n      <td mat-cell class=\"r-amount\" *matCellDef=\"let ele\" [ngClass]=\"installmentStyle(ele)\"> {{ ele.penaltyChargesDue | formatNumber}} </td>\n      <td mat-footer-cell class=\"r-amount\" *matFooterCellDef> <b> {{ repaymentScheduleDetails.totalPenaltyChargesCharged | currency }} </b> </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"due\">\n      <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Due </th>\n      <td mat-cell class=\"r-amount\" *matCellDef=\"let ele\" [ngClass]=\"installmentStyle(ele)\"> {{ ele.totalDueForPeriod | formatNumber}} </td>\n      <td mat-footer-cell class=\"r-amount\" *matFooterCellDef> <b> {{ repaymentScheduleDetails.totalRepaymentExpected | currency }} </b> </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"paid\">\n      <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Paid </th>\n      <td mat-cell class=\"r-amount\" *matCellDef=\"let ele\" [ngClass]=\"installmentStyle(ele)\"> {{ ele.totalPaidForPeriod | formatNumber}} </td>\n      <td mat-footer-cell class=\"r-amount\" *matFooterCellDef> <b> {{ repaymentScheduleDetails.totalRepayment | currency }} </b> </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"inadvance\">\n      <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> In advance </th>\n      <td mat-cell class=\"r-amount\" *matCellDef=\"let ele\" [ngClass]=\"installmentStyle(ele)\"> {{ ele.totalPaidInAdvanceForPeriod | formatNumber}} </td>\n      <td mat-footer-cell class=\"r-amount\" *matFooterCellDef> <b> {{ repaymentScheduleDetails.totalPaidInAdvance | currency }} </b> </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"late\">\n      <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Late </th>\n      <td mat-cell class=\"r-amount\" *matCellDef=\"let ele\" [ngClass]=\"installmentStyle(ele)\"> {{ ele.totalPaidLateForPeriod | formatNumber}} </td>\n      <td mat-footer-cell class=\"r-amount\" *matFooterCellDef> <b> {{ repaymentScheduleDetails.totalPaidLate | currency }} </b> </td>\n    </ng-container>\n\n    <ng-container *ngIf=\"isWaived\">\n      <ng-container matColumnDef=\"waived\">\n        <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Waived </th>\n        <td mat-cell class=\"r-amount\" *matCellDef=\"let ele\" [ngClass]=\"installmentStyle(ele)\"> {{ ele.totalWaivedForPeriod | formatNumber}} </td>\n        <td mat-footer-cell class=\"r-amount\" *matFooterCellDef> <b> {{ repaymentScheduleDetails.totalWaived | currency }} </b> </td>\n      </ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"!isWaived\">\n      <ng-container matColumnDef=\"waived\">\n        <th mat-header-cell *matHeaderCellDef> </th>\n        <td mat-cell *matCellDef=\"let ele\"> </td>\n        <td mat-footer-cell *matFooterCellDef> <b> </b> </td>\n      </ng-container>\n    </ng-container>\n\n    <ng-container matColumnDef=\"outstanding\">\n      <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Outstanding </th>\n      <td mat-cell class=\"r-amount\" *matCellDef=\"let ele\"> {{ ele.totalOutstandingForPeriod | formatNumber}} </td>\n      <td mat-footer-cell class=\"r-amount\" *matFooterCellDef> <b> {{ repaymentScheduleDetails.totalOutstanding | currency }} </b> </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"header\">\n      <th mat-header-cell *matHeaderCellDef [attr.colspan]=\"5\"> </th>\n    </ng-container>\n\n    <ng-container matColumnDef=\"header-amount\">\n      <th mat-header-cell class=\"center\" *matHeaderCellDef [attr.colspan]=\"2\"> Loan Amount and Balance </th>\n    </ng-container>\n\n    <ng-container matColumnDef=\"header-total-cost\">\n      <th mat-header-cell class=\"center\" *matHeaderCellDef [attr.colspan]=\"3\"> Total Cost of Loan </th>\n    </ng-container>\n\n    <ng-container matColumnDef=\"header-installment-totals\">\n      <th mat-header-cell class=\"center\" *matHeaderCellDef [attr.colspan]=\"6\"> Installment Totals </th>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"['header', 'header-amount', 'header-total-cost', 'header-installment-totals']\"></tr>\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    <tr mat-footer-row *matFooterRowDef=\"displayedColumns\"></tr>\n\n  </table>\n\n  <!-- Repayment Schedule to be Edited -->\n  <div *ngIf=\"forEditing\" fxLayout=\"column\" fxFlex=\"100%\" >\n\n    <table mat-table [dataSource]=\"repaymentScheduleDetails.periods\">\n\n      <ng-container matColumnDef=\"number\">\n        <th mat-header-cell class=\"center\" *matHeaderCellDef> # </th>\n        <td mat-cell *matCellDef=\"let ele\"> {{ ele.period }} </td>\n        <td mat-footer-cell *matFooterCellDef> &nbsp; </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"date\">\n        <th mat-header-cell class=\"center\" *matHeaderCellDef> Date </th>\n        <td mat-cell class=\"m-r-10\" *matCellDef=\"let ele\"> {{ ele.dueDate  | dateFormat}} </td>\n        <td mat-footer-cell *matFooterCellDef>  </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"balanceOfLoan\">\n        <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Balance Of Loan </th>\n        <td mat-cell class=\"r-amount\" *matCellDef=\"let ele\"> {{ ele.principalLoanBalanceOutstanding | formatNumber }} </td>\n        <td mat-footer-cell class=\"r-amount\" *matFooterCellDef> &nbsp; </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"principalDue\">\n        <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Principal Due </th>\n        <td mat-cell class=\"check r-amount\" *matCellDef=\"let ele\"> {{ ele.principalDue | formatNumber }} </td>\n        <td mat-footer-cell class=\"check r-amount\" *matFooterCellDef> <b> {{ repaymentScheduleDetails.totalPrincipalExpected | currency }}</b>  </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"interest\">\n        <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Interest </th>\n        <td mat-cell class=\"r-amount\" *matCellDef=\"let ele\"> {{ ele.interestOriginalDue | formatNumber}} </td>\n        <td mat-footer-cell class=\"r-amount\" *matFooterCellDef> <b> {{ repaymentScheduleDetails.totalInterestCharged | currency }} </b> </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"fees\">\n        <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Fees </th>\n        <td mat-cell class=\"r-amount\" *matCellDef=\"let ele\"> {{ ele.feeChargesDue | formatNumber}} </td>\n        <td mat-footer-cell class=\"r-amount\" *matFooterCellDef> <b> {{ repaymentScheduleDetails.totalFeeChargesCharged | currency }} </b> </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"due\">\n        <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Installment Amount </th>\n        <td mat-cell class=\"r-amount\" *matCellDef=\"let ele\">\n          <span *ngIf=\"!ele.changed\">\n            {{ ele.totalDueForPeriod | formatNumber}}\n          </span>\n          <span *ngIf=\"ele.changed\" class=\"amount-changed\">\n            <b>{{ ele.totalDueForPeriod | formatNumber}}</b>\n          </span>\n        </td>\n        <td mat-footer-cell class=\"r-amount\" *matFooterCellDef> <b> {{ repaymentScheduleDetails.totalRepaymentExpected | currency }} </b> </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef> Actions </th>\n        <td mat-cell class=\"center\" *matCellDef=\"let ele\">\n          <button *ngIf=\"ele.period\" type=\"button\" color=\"primary\" mat-icon-button matTooltip=\"Edit\" matTooltipPosition=\"above\" (click)=\"editPeriod(ele)\">\n            <fa-icon icon=\"edit\" size=\"lg\"></fa-icon>\n          </button>\n        </td>\n        <td mat-footer-cell *matFooterCellDef>  </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumnsEdit\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumnsEdit;\"></tr>\n      <tr mat-footer-row *matFooterRowDef=\"displayedColumnsEdit\"></tr>\n\n    </table>\n\n  </div>\n\n</div>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'mifosx-repayment-schedule-tab',\n  templateUrl: './repayment-schedule-tab.component.html',\n  styleUrls: ['./repayment-schedule-tab.component.scss']\n})\nexport class RepaymentScheduleTabComponent implements OnInit {\n\n  /** Loan Repayment Schedule to be Edited */\n  @Input() forEditing = false;\n  /** Loan Repayment Schedule Details Data */\n  @Input() repaymentScheduleDetails: any = null;\n  loanDetailsDataRepaymentSchedule: any = [];\n\n  /** Stores if there is any waived amount */\n  isWaived: boolean;\n  /** Columns to be displayed in original schedule table. */\n  displayedColumns: string[] = ['number', 'days', 'date', 'paiddate', 'check', 'balanceOfLoan', 'principalDue', 'interest', 'fees', 'penalties', 'due', 'paid', 'inadvance', 'late', 'waived', 'outstanding'];\n  /** Columns to be displayed in editable schedule table. */\n  displayedColumnsEdit: string[] = ['number', 'date', 'balanceOfLoan', 'principalDue', 'interest', 'fees', 'due'];\n\n  /** Form functions event */\n  @Output() editPeriod = new EventEmitter();\n\n  /**\n   * Retrieves the loans with associations data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute) {\n    this.route.parent.data.subscribe((data: { loanDetailsData: any }) => {\n      this.loanDetailsDataRepaymentSchedule = data.loanDetailsData ? data.loanDetailsData.repaymentSchedule : [];\n    });\n  }\n\n  ngOnInit() {\n    if (this.repaymentScheduleDetails == null) {\n      this.repaymentScheduleDetails = this.loanDetailsDataRepaymentSchedule;\n    }\n    this.isWaived = this.repaymentScheduleDetails.totalWaived > 0;\n  }\n\n  installmentStyle(installment: any): string {\n    if (installment.isAdditional) {\n      return 'additional';\n    }\n    return '';\n  }\n\n}\n","<div class=\"container\">\n\n  <div fxLayout=\"row\" fxLayoutAlign=\"end\" fxLayoutGap=\"20px\" class=\"transaction-buttons\" *ngIf=\"checkStatus()\">\n    <mat-checkbox [formControl]=\"hideAccrualsParam\" (click)=\"hideAccruals()\" class=\"accruals\">Hide Accruals</mat-checkbox>\n    <button mat-raised-button color=\"primary\" class=\"transaction-button\" [routerLink]=\"['export']\">\n      Export\n    </button>\n    <button mat-raised-button color=\"primary\" class=\"transaction-button\">\n      View Journal Entries\n    </button>\n  </div>\n\n  <table mat-table [dataSource]=\"dataSource\" matSort>\n\n      <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Id </th>\n        <td mat-cell *matCellDef=\"let transaction\" [ngClass]=\"loanTransactionColor(transaction)\"> {{ transaction.id }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"office\">\n        <th mat-header-cell *matHeaderCellDef> Office </th>\n        <td mat-cell *matCellDef=\"let transaction\" [ngClass]=\"loanTransactionColor(transaction)\"> {{ transaction.officeName }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"externalId\">\n        <th mat-header-cell *matHeaderCellDef> External Id </th>\n        <td mat-cell *matCellDef=\"let transaction\" [ngClass]=\"loanTransactionColor(transaction)\">\n          <mifosx-external-identifier externalId=\"{{transaction.externalId}}\"></mifosx-external-identifier>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"date\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Transaction Date </th>\n        <td mat-cell *matCellDef=\"let transaction\" [ngClass]=\"loanTransactionColor(transaction)\"> {{ transaction.date  | dateFormat }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"transactionType\">\n        <th mat-header-cell *matHeaderCellDef> Transaction Type </th>\n        <td mat-cell *matCellDef=\"let transaction\" [ngClass]=\"loanTransactionColor(transaction)\"> {{ transaction.type.value  }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"amount\">\n        <th mat-header-cell class=\"center\" *matHeaderCellDef> Amount </th>\n        <td mat-cell class=\"r-amount td-min-space\" *matCellDef=\"let transaction\" [ngClass]=\"loanTransactionColor(transaction)\"> {{ transaction.amount | formatNumber }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"principal\">\n        <th mat-header-cell class=\"center\" *matHeaderCellDef> Breakdown </th>\n        <td mat-cell class=\"r-amount td-min-space\" *matCellDef=\"let transaction\" [ngClass]=\"loanTransactionColor(transaction)\"> {{ transaction.principalPortion | formatNumber }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"interest\">\n        <th mat-header-cell *matHeaderCellDef> </th>\n        <td mat-cell class=\"r-amount td-min-space\" *matCellDef=\"let transaction\" [ngClass]=\"loanTransactionColor(transaction)\"> {{ transaction.interestPortion | formatNumber }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"fee\">\n        <th mat-header-cell *matHeaderCellDef>  </th>\n        <td mat-cell class=\"r-amount td-min-space\" *matCellDef=\"let transaction\" [ngClass]=\"loanTransactionColor(transaction)\"> {{ transaction.feeChargesPortion | formatNumber }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"penalties\">\n        <th mat-header-cell *matHeaderCellDef>  </th>\n        <td mat-cell class=\"r-amount td-min-space\" *matCellDef=\"let transaction\" [ngClass]=\"loanTransactionColor(transaction)\"> {{ transaction.penaltyChargesPortion | formatNumber }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"loanBalance\">\n        <th mat-header-cell class=\"r-amount\" *matHeaderCellDef> Loan Balance </th>\n        <td mat-cell class=\"r-amount td-min-space\" *matCellDef=\"let transaction\" [ngClass]=\"loanTransactionColor(transaction)\"> {{ transaction.outstandingLoanBalance | formatNumber }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell class=\"center\" *matHeaderCellDef> Actions </th>\n        <td mat-cell *matCellDef=\"let transaction\" class=\"center td-min-space\">\n          <button class=\"account-action-button\" *ngIf=\"!transaction.manuallyReversed\" mat-raised-button color=\"primary\" (click)=\"routeEdit($event)\"\n            [routerLink]=\"[transaction.id, 'reciept']\" matTooltip=\"View Receipts\">\n            <i class=\"fa fa-file-text\"></i>\n          </button>\n          <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"View Journal Entries\" matTooltipPosition=\"left\"\n            (click)=\"routeEdit($event)\" [routerLink]=\"['/','journal-entry', 'view', 'L'+transaction.id ]\">\n            <i class=\"fa fa-arrow-circle-right\"></i>\n          </button>\n        </td>\n      </ng-container>\n\n    <!-- Sub header -->\n    <ng-container matColumnDef=\"header\">\n      <th mat-header-cell *matHeaderCellDef [attr.colspan]=\"6\"> </th>\n    </ng-container>\n\n    <ng-container matColumnDef=\"header-principal\">\n      <th mat-header-cell class=\"r-amount\" *matHeaderCellDef [attr.colspan]=\"1\"> Principal </th>\n    </ng-container>\n\n    <ng-container matColumnDef=\"header-interest\">\n      <th mat-header-cell class=\"r-amount\" *matHeaderCellDef [attr.colspan]=\"1\"> Interest </th>\n    </ng-container>\n\n    <ng-container matColumnDef=\"header-fees\">\n      <th mat-header-cell class=\"r-amount\" *matHeaderCellDef [attr.colspan]=\"1\"> Fees </th>\n    </ng-container>\n\n    <ng-container matColumnDef=\"header-penalties\">\n      <th mat-header-cell class=\"r-amount\" *matHeaderCellDef [attr.colspan]=\"1\"> Penalties </th>\n    </ng-container>\n\n    <ng-container matColumnDef=\"header-action\">\n      <th mat-header-cell *matHeaderCellDef [attr.colspan]=\"1\">  </th>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-header-row *matHeaderRowDef=\"['header', 'header-principal', 'header-interest', 'header-fees', 'header-penalties', 'header-action']\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" class=\"select-row\" (click)=\"showTransactions(row)\"></tr>\n\n  </table>\n\n  <mat-paginator [pageSize]=\"50\" [pageSizeOptions]=\"[50, 100, 200]\" showFirstLastButtons></mat-paginator>\n\n</div>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormControl } from '@angular/forms';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\n\n@Component({\n  selector: 'mifosx-transactions-tab',\n  templateUrl: './transactions-tab.component.html',\n  styleUrls: ['./transactions-tab.component.scss']\n})\nexport class TransactionsTabComponent implements OnInit {\n\n  /** Loan Details Data */\n  transactions: any;\n  /** Temporary Transaction Data */\n  tempTransaction: any;\n  /** Form control to handle accural parameter */\n  hideAccrualsParam: FormControl;\n  /** Stores the status of the loan account */\n  status: string;\n  /** Columns to be displayed in original schedule table. */\n  displayedColumns: string[] = ['id', 'office', 'externalId', 'date', 'transactionType', 'amount', 'principal', 'interest', 'fee', 'penalties', 'loanBalance', 'actions'];\n\n  dataSource: MatTableDataSource<any>;\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  /**\n   * Retrieves the loans with associations data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute,\n    private router: Router) {\n    this.route.parent.parent.data.subscribe((data: { loanDetailsData: any }) => {\n      this.transactions = data.loanDetailsData.transactions;\n      this.tempTransaction = data.loanDetailsData.transactions;\n      this.status = data.loanDetailsData.status.value;\n    });\n  }\n\n  ngOnInit() {\n    this.hideAccrualsParam = new FormControl(false);\n    this.dataSource = new MatTableDataSource(this.transactions);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n    this.tempTransaction.forEach((element: any) => {\n      if (this.isAccrual(element.type)) {\n        this.tempTransaction = this.removeItem(this.tempTransaction, element);\n      }\n    });\n  }\n\n  /**\n   * Checks Status of the loan account\n   */\n  checkStatus() {\n    if (this.status === 'Active' || this.status === 'Closed (obligations met)' || this.status === 'Overpaid' ||\n      this.status === 'Closed (rescheduled)' || this.status === 'Closed (written off)') {\n      return true;\n    }\n    return false;\n  }\n\n  hideAccruals() {\n    if (!this.hideAccrualsParam.value) {\n      this.dataSource = new MatTableDataSource(this.tempTransaction);\n    } else {\n      this.dataSource = new MatTableDataSource(this.transactions);\n    }\n  }\n\n  applyFilter(filterValue: string = '') {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  removeItem(arr: any, item: any) {\n    return arr.filter((f: any) => f !== item);\n  }\n\n  /**\n   * Show Transactions Details\n   * @param transactionsData Transactions Data\n   * DISBURSEMENT:1\n   * REPAYMENT:2\n   * WAIVE_INTEREST:4\n   * WAIVE_CHARGES:9\n   * ACCRUAL:10\n   * CREDIT_BALANCE_REFUND:20\n   * MERCHANT_ISSUED_REFUND:21\n   * PAYOUT_REFUND:22\n   * GOODWILL_CREDIT:23\n   * CHARGE_ADJUSTMENT:26\n   */\n  showTransactions(transactionsData: any) {\n    if ([1, 2, 4, 9, 20, 21, 22, 23, 26].includes(transactionsData.type.id)) {\n      this.router.navigate([transactionsData.id], { relativeTo: this.route });\n    }\n  }\n\n  loanTransactionColor(loanTransaction: any): string {\n    if (loanTransaction.manuallyReversed) {\n      return 'strike';\n    }\n    if (loanTransaction.transactionRelations && loanTransaction.transactionRelations.length > 0) {\n      return 'linked';\n    }\n    if (this.isAccrual(loanTransaction.type)) {\n      return 'accrual';\n    }\n    return '';\n  }\n\n  /**\n   * Stops the propagation to view pages.\n   * @param $event Mouse Event\n   */\n  routeEdit($event: MouseEvent) {\n    $event.stopPropagation();\n  }\n\n  private isAccrual(transactionType: any): boolean  {\n    return (transactionType.accrual || transactionType.code === 'loanTransactionType.overdueCharge');\n  }\n\n}\n","<div class=\"container\">\n\n  <table mat-table [dataSource]=\"originalScheduleDetails.periods\" matSort>\n\n    <ng-container matColumnDef=\"date\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Date </th>\n      <td mat-cell *matCellDef=\"let ele\"> {{ ele.dueDate  | dateFormat}} </td>\n      <td mat-footer-cell *matFooterCellDef> <b> Total</b> </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"principalDue\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Principal Due </th>\n      <td mat-cell *matCellDef=\"let ele\"> {{ ele.principalDue | formatNumber }} </td>\n      <td mat-footer-cell *matFooterCellDef> <b> {{ originalScheduleDetails.totalPrincipalExpected | formatNumber }} </b> </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"balanceOfLoan\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Balance Of Loan </th>\n      <td mat-cell *matCellDef=\"let ele\"> {{ ele.principalLoanBalanceOutstanding | formatNumber }} </td>\n      <td mat-footer-cell *matFooterCellDef> &nbsp; </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"interest\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Interest </th>\n      <td mat-cell *matCellDef=\"let ele\"> {{ ele.interestOriginalDue | formatNumber}} </td>\n      <td mat-footer-cell *matFooterCellDef> <b> {{ originalScheduleDetails.totalInterestCharged | formatNumber }} </b> </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"fees\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Fees </th>\n      <td mat-cell *matCellDef=\"let ele\"> {{ ele.feeChargesDue | formatNumber}} </td>\n      <td mat-footer-cell *matFooterCellDef> <b> {{ originalScheduleDetails.totalFeeChargesCharged | formatNumber }} </b> </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"penalties\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Penalties </th>\n      <td mat-cell *matCellDef=\"let ele\"> {{ ele.penaltyChargesDue | formatNumber}} </td>\n      <td mat-footer-cell *matFooterCellDef> <b> {{ originalScheduleDetails.totalPenaltyChargesCharged | formatNumber }} </b> </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"outstanding\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Outstanding </th>\n      <td mat-cell *matCellDef=\"let ele\"> {{ ele.totalOutstandingForPeriod | formatNumber}} </td>\n      <td mat-footer-cell *matFooterCellDef> <b> {{ originalScheduleDetails.totalRepaymentExpected | formatNumber }} </b> </td>\n    </ng-container>\n\n    <!-- Header row first group -->\n    <ng-container matColumnDef=\"header\">\n      <th mat-header-cell *matHeaderCellDef [attr.colspan]=\"1\"> </th>\n    </ng-container>\n\n    <!-- Header row second group -->\n    <ng-container matColumnDef=\"header-amount\">\n      <th mat-header-cell *matHeaderCellDef [attr.colspan]=\"2\"> Loan Amount and Balance </th>\n    </ng-container>\n\n    <ng-container matColumnDef=\"header-total-cost\">\n      <th mat-header-cell *matHeaderCellDef [attr.colspan]=\"3\"> Total Cost of Loan </th>\n    </ng-container>\n\n    <ng-container matColumnDef=\"header-installment-totals\">\n      <th mat-header-cell *matHeaderCellDef [attr.colspan]=\"1\"> Installment Totals </th>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"['header', 'header-amount', 'header-total-cost', 'header-installment-totals']\"></tr>\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    <tr mat-footer-row *matFooterRowDef=\"displayedColumns\"></tr>\n\n  </table>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'mifosx-original-schedule-tab',\n  templateUrl: './original-schedule-tab.component.html',\n  styleUrls: ['./original-schedule-tab.component.scss']\n})\nexport class OriginalScheduleTabComponent implements OnInit {\n\n  /** Loan Details Data */\n  originalScheduleDetails: any;\n  /** Columns to be displayed in original schedule table. */\n  displayedColumns: string[] = ['date', 'principalDue', 'balanceOfLoan', 'interest', 'fees', 'penalties', 'outstanding'];\n\n  /**\n   * Retrieves the loans with associations data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute) {\n    this.route.parent.data.subscribe((data: { loanDetailsData: any }) => {\n      this.originalScheduleDetails = data.loanDetailsData.originalSchedule;\n    });\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<div class=\"container\">\n\n  <table mat-table [dataSource]=\"dataSource\" matSort>\n\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\n      <td mat-cell *matCellDef=\"let charge\"> {{ charge.name }},{{ charge.currency.displaySymbol }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"type\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Type </th>\n      <td mat-cell *matCellDef=\"let charge\"> {{ charge.chargeCalculationType.value }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"amount\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Amount </th>\n      <td mat-cell *matCellDef=\"let charge\"> {{ charge.amount| formatNumber }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"collectedon\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Collected On </th>\n      <td mat-cell *matCellDef=\"let charge\"> {{ charge.chargeTimeType.value }} </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n\n  <mat-paginator [pageSizeOptions]=\"[10, 25, 50, 100]\" showFirstLastButtons></mat-paginator>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ActivatedRoute } from '@angular/router';\n\n/**\n * Overdue charges tab component\n */\n@Component({\n  selector: 'mifosx-overdue-charges-tab',\n  templateUrl: './overdue-charges-tab.component.html',\n  styleUrls: ['./overdue-charges-tab.component.scss']\n})\nexport class OverdueChargesTabComponent implements OnInit {\n\n  /** Stores the resolved loan data */\n  loanDetails: any;\n  /** Stores the overdue data */\n  overdueCharges: any;\n\n  /** Columns to be displayed in overdue charges table. */\n  displayedColumns: string[] = ['name', 'type', 'amount', 'collectedon'];\n  /** Data source for codes table. */\n  dataSource: MatTableDataSource<any>;\n\n  /** Paginator for codes table. */\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  /** Sorter for codes table. */\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  /**\n   * Retrieves the loans data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute) {\n    this.route.parent.data.subscribe(( data: { loanDetailsData: any }) => {\n      this.loanDetails = data.loanDetailsData;\n    });\n  }\n\n  ngOnInit() {\n    this.overdueCharges = this.loanDetails.overdueCharges;\n    this.dataSource = new MatTableDataSource(this.overdueCharges);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n}\n","<div class=\"tab-container\">\n\n  <table mat-table [dataSource]=\"dataSource\" matSort>\n\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\n      <td mat-cell *matCellDef=\"let charge\"> {{ charge.name }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"feepenalty\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Fee/Penalty </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        <span *ngIf=\"charge.penalty\">Penalty</span>\n        <span *ngIf=\"!charge.penalty\">Fee</span>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"paymentdueat\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Payment due at </th>\n      <td mat-cell *matCellDef=\"let charge\"> {{ charge.chargeTimeType.value }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"dueDate\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Due as of </th>\n      <td mat-cell *matCellDef=\"let charge\"> {{ charge.dueDate | dateFormat }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"calculationtype\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Calculation Type </th>\n      <td mat-cell *matCellDef=\"let charge\"> {{ charge.chargeCalculationType.value }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"due\">\n      <th mat-header-cell class=\"r-amount\" *matHeaderCellDef mat-sort-header> Due </th>\n      <td mat-cell class=\"r-amount\" *matCellDef=\"let charge\"> {{ charge.currency.displaySymbol }} {{ charge.amount|\n        number }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"paid\">\n      <th mat-header-cell class=\"r-amount\" *matHeaderCellDef mat-sort-header> Paid </th>\n      <td mat-cell class=\"r-amount\" *matCellDef=\"let charge\"> {{ charge.currency.displaySymbol }}{{ charge.amountPaid|\n        number }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"waived\">\n      <th mat-header-cell class=\"r-amount\" *matHeaderCellDef mat-sort-header> Waived </th>\n      <td mat-cell class=\"r-amount\" *matCellDef=\"let charge\"> {{ charge.currency.displaySymbol }}{{ charge.amountWaived|\n        number }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"outstanding\">\n      <th mat-header-cell class=\"r-amount\" *matHeaderCellDef mat-sort-header> Outstanding </th>\n      <td mat-cell class=\"r-amount\" *matCellDef=\"let charge\"> {{ charge.currency.displaySymbol }}{{\n        charge.amountOutstanding| formatNumber }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"actions\">\n      <th mat-header-cell class=\"center\" *matHeaderCellDef mat-sort-header> Actions </th>\n      <td mat-cell class=\"center\" *matCellDef=\"let charge\">\n        <span *ngIf=\"status === 'Submitted and pending approval'\">\n          <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"Edit Charge\"\n            (click)=\"routeEdit($event); editCharge(charge)\">\n            <i class=\"fa fa-pencil\"></i>\n          </button>\n          <button class=\"account-action-button\" mat-raised-button color=\"warn\" matTooltip=\"Delete Charge\"\n            (click)=\"routeEdit($event); deleteCharge(charge.id)\">\n            <i class=\"fa fa-trash\"></i>\n          </button>\n        </span>\n        <button class=\"account-action-button\" mat-raised-button color=\"accent\" matTooltip=\"Adjust Charge\"\n          *ngIf=\"!charge.paid && status=='Active'\"\n          (click)=\"routeEdit($event); adjustCharge(charge.id)\">\n          <i class=\"fa fa-pencil\"></i>\n        </button>\n        <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"Pay Charge\"\n          *ngIf=\"charge.chargePayable && !charge.paid && status=='Active'\"\n          (click)=\"routeEdit($event); payCharge(charge.id)\">\n          <i class=\"fa fa-dollar\"></i>\n        </button>\n        <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"Waive Charge\"\n          *ngIf=\"!charge.actionFlag\" (click)=\"routeEdit($event); waiveCharge(charge.id)\">\n          <i class=\"fa fa-flag\"></i>\n        </button>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" class=\"select-row\" [routerLink]=\"[row.id]\"></tr>\n  </table>\n\n  <mat-paginator [pageSizeOptions]=\"[10, 25, 50, 100]\" showFirstLastButtons></mat-paginator>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource, MatTable } from '@angular/material/table';\n\n/** Custom Services */\nimport { LoansService } from 'app/loans/loans.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Custom Dialogs */\nimport { FormDialogComponent } from 'app/shared/form-dialog/form-dialog.component';\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\nimport { ConfirmationDialogComponent } from 'app/shared/confirmation-dialog/confirmation-dialog.component';\n\n/** Custom Models */\nimport { FormfieldBase } from 'app/shared/form-dialog/formfield/model/formfield-base';\nimport { InputBase } from 'app/shared/form-dialog/formfield/model/input-base';\nimport { DatepickerBase } from 'app/shared/form-dialog/formfield/model/datepicker-base';\nimport { Dates } from 'app/core/utils/dates';\n\n@Component({\n  selector: 'mifosx-charges-tab',\n  templateUrl: './charges-tab.component.html',\n  styleUrls: ['./charges-tab.component.scss']\n})\nexport class ChargesTabComponent implements OnInit {\n\n  /** Loan Details Data */\n  loanDetails: any;\n  /** Charges Data */\n  chargesData: any;\n  /** Status */\n  status: any;\n  /** Columns to be displayed in charges table. */\n  displayedColumns: string[] = ['name', 'feepenalty', 'paymentdueat', 'dueDate', 'calculationtype', 'due', 'paid', 'waived', 'outstanding', 'actions'];\n  /** Data source for charges table. */\n  dataSource: MatTableDataSource<any>;\n\n  /** Paginator for charges table. */\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  /** Sorter for charges table. */\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  /**\n   * Retrieves the loans data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private loansService: LoansService,\n              private route: ActivatedRoute,\n              private dateUtils: Dates,\n              private router: Router,\n              public dialog: MatDialog,\n              private settingsService: SettingsService) {\n    this.route.parent.data.subscribe(( data: { loanDetailsData: any }) => {\n      this.loanDetails = data.loanDetailsData;\n    });\n  }\n\n  ngOnInit() {\n    this.chargesData = this.loanDetails.charges;\n    this.status = this.loanDetails.status.value;\n    let actionFlag;\n    this.chargesData.forEach((element: any) => {\n      if (element.paid || element.waived || element.chargeTimeType.value === 'Disbursement' || this.loanDetails.status.value !== 'Active') {\n        actionFlag = true;\n      } else {\n        actionFlag = false;\n      }\n      element.actionFlag = actionFlag;\n    });\n    this.dataSource = new MatTableDataSource(this.chargesData);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  /**\n   * Asjust the Loan charge.\n   * @param {any} chargeId Charge Id\n   */\n  adjustCharge(chargeId: string) {\n    this.router.navigate([`${chargeId}/adjustment`], { relativeTo: this.route });\n  }\n\n  /**\n   * Pays the charge.\n   * @param {any} chargeId Charge Id\n   */\n  payCharge(chargeId: any) {\n    const formfields: FormfieldBase[] = [\n      new DatepickerBase({\n        controlName: 'transactionDate',\n        label: 'Payment Date',\n        value: '',\n        type: 'date',\n        required: true\n      })\n    ];\n    const data = {\n      title: `Pay Charge ${chargeId}`,\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const payChargeDialogRef = this.dialog.open(FormDialogComponent, { data });\n    payChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const locale = this.settingsService.language.code;\n        const dateFormat = this.settingsService.dateFormat;\n        const prevTransactionDate: Date = response.data.value.transactionDate;\n        const dataObject = {\n          transactionDate: this.dateUtils.formatDate(prevTransactionDate, dateFormat),\n          dateFormat,\n          locale\n        };\n        this.loansService.executeLoansAccountChargesCommand(this.loanDetails.id, 'pay', dataObject, chargeId)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Waive's the charge\n   * @param {any} chargeId Charge Id\n   */\n  waiveCharge(chargeId: any) {\n    const waiveChargeDialogRef = this.dialog.open(ConfirmationDialogComponent, { data: { heading: 'Waive Charge', dialogContext: `Are you sure you want to waive charge with id: ${chargeId}`, type: 'Basic' } });\n    waiveChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.loansService.executeLoansAccountChargesCommand(this.loanDetails.id, 'waive', {}, chargeId)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Edits the charge\n   * @param {any} charge Charge\n   */\n  editCharge(charge: any) {\n    const formfields: FormfieldBase[] = [\n      new InputBase({\n        controlName: 'amount',\n        label: 'Amount',\n        value: charge.amount || charge.amountOrPercentage,\n        type: 'number',\n        required: true\n      })\n    ];\n    const data = {\n      title: `Edit Charge ${charge.id}`,\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editChargeDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const locale = this.settingsService.language.code;\n        const dateFormat = this.settingsService.dateFormat;\n        const dataObject = {\n          ...response.data.value,\n          dateFormat,\n          locale\n        };\n        this.loansService.editLoansAccountCharge(this.loanDetails.id, dataObject, charge.id)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Deletes the charge\n   * @param {any} chargeId Charge Id\n   */\n  deleteCharge(chargeId: any) {\n    const deleteChargeDialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `charge id:${chargeId}` }\n    });\n    deleteChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        this.loansService.deleteLoansAccountCharge(this.loanDetails.id, chargeId)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Stops the propagation to view charge page.\n   * @param $event Mouse Event\n   */\n  routeEdit($event: MouseEvent) {\n    $event.stopPropagation();\n  }\n\n  /**\n   * Refetches data fot the component\n   * TODO: Replace by a custom reload component instead of hard-coded back-routing.\n   */\n  private reload() {\n    const clientId = this.loanDetails.clientId;\n    const url: string = this.router.url;\n    this.router.navigateByUrl(`/clients/${clientId}/loans-accounts`, { skipLocationChange: true })\n      .then(() => this.router.navigate([url]));\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'mifosx-datatable-tab',\n  templateUrl: './datatable-tab.component.html',\n  styleUrls: ['./datatable-tab.component.scss']\n})\nexport class DatatableTabComponent {\n\n  entityId: string;\n  /** Loan Datatable */\n  entityDatatable: any;\n  /** Multi Row Datatable Flag */\n  multiRowDatatableFlag: boolean;\n\n  /**\n   * Fetches data table data from `resolve`\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute) {\n    this.entityId = this.route.parent.parent.snapshot.paramMap.get('loanId');\n\n    this.route.data.subscribe((data: { loanDatatable: any }) => {\n      this.entityDatatable = data.loanDatatable;\n      this.multiRowDatatableFlag = this.entityDatatable.columnHeaders[0].columnName === 'id' ? true : false;\n    });\n  }\n\n}\n","<div class=\"tab-container mat-typography\">\n  <mifosx-entity-datatable-tab\n    entityType=\"Loan Account\"\n    [entityId]=\"entityId\"\n    [multiRowDatatableFlag]=\"multiRowDatatableFlag\"\n    [entityDatatable]=\"entityDatatable\"\n  >\n  </mifosx-entity-datatable-tab>\n</div>\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"closeLoanForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"closedDatePicker.open()\">\n            <mat-label>Closed On</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"closedDatePicker\" required\n              formControlName=\"transactionDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"closedDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #closedDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"closeLoanForm.controls.transactionDate.hasError('required')\">\n              Closed Date <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n        <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!closeLoanForm.valid\"\n            *mifosxHasPermission=\"'CLOSE_LOAN'\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, Input } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { LoansService } from 'app/loans/loans.service';\n\n/** Custom Services */\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n@Component({\n  selector: 'mifosx-loans-account-close',\n  templateUrl: './loans-account-close.component.html',\n  styleUrls: ['./loans-account-close.component.scss']\n})\nexport class LoansAccountCloseComponent implements OnInit {\n\n  @Input() dataObject: any;\n\n  /** Close form. */\n  closeLoanForm: FormGroup;\n  /** Loan Id */\n  loanId: any;\n  /** Minimum Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Date allowed. */\n  maxDate = new Date();\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {LoansService} systemService Loan Service.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private loanService: LoansService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private dateUtils: Dates,\n    private settingsService: SettingsService) {\n      this.loanId = this.route.snapshot.params['loanId'];\n    }\n\n  /**\n   * Creates the close form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createCloseForm();\n  }\n\n  /**\n   * Creates the create close form.\n   */\n  createCloseForm() {\n    this.closeLoanForm = this.formBuilder.group({\n      'transactionDate': [new Date(this.dataObject.date) || new Date(), Validators.required],\n      'note': []\n    });\n  }\n\n  /**\n   * Submits the close form and creates a close,\n   * if successful redirects to view created close.\n   */\n  submit() {\n    const closeLoanFormData = this.closeLoanForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const preTransactionDate = this.closeLoanForm.value.transactionDate;\n    if (closeLoanFormData.transactionDate instanceof Date) {\n      closeLoanFormData.transactionDate = this.dateUtils.formatDate(preTransactionDate, dateFormat);\n    }\n    const data = {\n      ...closeLoanFormData,\n      dateFormat,\n      locale\n    };\n    this.loanService.submitLoanActionButton(this.loanId, data, 'close')\n      .subscribe((response: any) => {\n        this.router.navigate(['../../general'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <mat-card-content>\n\n      <div fxLayout=\"column\">\n\n        <mat-form-field fxFlex>\n          <mat-label>Note</mat-label>\n          <textarea matInput [formControl]=\"note\"></textarea>\n        </mat-form-field>\n\n        <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" (click)=\"submit()\"\n            *mifosxHasPermission=\"'APPROVALUNDO_LOAN'\">Submit</button>\n        </mat-card-actions>\n\n      </div>\n\n    </mat-card-content>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports. */\nimport { Component, OnInit } from '@angular/core';\nimport { FormControl, FormBuilder } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services. */\nimport { LoansService } from 'app/loans/loans.service';\n/**\n * Undo Loan component.\n */\n@Component({\n  selector: 'mifosx-undo-approval',\n  templateUrl: './undo-approval.component.html',\n  styleUrls: ['./undo-approval.component.scss']\n})\nexport class UndoApprovalComponent implements OnInit {\n\n  /** Form Controller. */\n  note: FormControl;\n\n  /**\n   * @param loanService Loan Service.\n   * @param route Activated Route.\n   * @param router Router.\n   */\n  constructor(private loanService: LoansService,\n              private formBuilder: FormBuilder,\n              private route: ActivatedRoute,\n              private router: Router) { }\n\n  ngOnInit() {\n    this.note = this.formBuilder.control('');\n  }\n\n  /**\n   * Submits undo approval form.\n   */\n  submit() {\n    const loanId = this.route.snapshot.params['loanId'];\n    this.loanService.loanActionButtons(loanId, 'undoapproval', { 'note': this.note.value }).subscribe((response: any) => {\n      this.router.navigate(['../../general'], {relativeTo: this.route});\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"assignOfficerForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field>\n            <mat-label> To Loan Officer</mat-label>\n            <mat-select required formControlName=\"toLoanOfficerId\">\n              <mat-option *ngFor=\"let loanOfficer of loanOfficers\" [value]=\"loanOfficer.id\">\n                {{ loanOfficer.displayName }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"assignOfficerForm.controls.toLoanOfficerId.hasError('required')\">\n              Loan Officer is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field (click)=\"assignOnDatePicker.open()\">\n            <mat-label>Assignment Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"assignOnDatePicker\" required\n              formControlName=\"assignmentDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"assignOnDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #assignOnDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"assignOfficerForm.controls.assignmentDate.hasError('required')\">\n              Assignment Date <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n        </div>\n\n        <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!assignOfficerForm.valid\"\n            *mifosxHasPermission=\"'BULKREASSIGN_LOAN'\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { LoansService } from 'app/loans/loans.service';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\n/** Custom Services */\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n@Component({\n  selector: 'mifosx-assign-loan-officer',\n  templateUrl: './assign-loan-officer.component.html',\n  styleUrls: ['./assign-loan-officer.component.scss']\n})\nexport class AssignLoanOfficerComponent implements OnInit {\n\n  @Input() dataObject: any;\n  /** Loan Id */\n  loanId: string;\n  loanOfficers: any[];\n  /** Minimum Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Date allowed. */\n  maxDate = new Date();\n  /** Assign loan Officer form. */\n  assignOfficerForm: FormGroup;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {LoansService} systemService Loan Service.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private loanService: LoansService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private dateUtils: Dates,\n    private settingsService: SettingsService) {\n      this.loanId = this.route.snapshot.params['loanId'];\n    }\n\n  /**\n   * Creates the assign officer form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createassignOfficerForm();\n    this.loanOfficers = this.dataObject.loanOfficerOptions;\n  }\n\n  /**\n   * Creates the create close form.\n   */\n  createassignOfficerForm() {\n    this.assignOfficerForm = this.formBuilder.group({\n      'toLoanOfficerId': ['', Validators.required],\n      'assignmentDate': [new Date(), Validators.required]\n    });\n  }\n\n  submit() {\n    const assignOfficerFormData = this.assignOfficerForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const assignmentDate = this.assignOfficerForm.value.assignmentDate;\n    if (assignOfficerFormData.assignmentDate instanceof Date) {\n      assignOfficerFormData.assignmentDate = this.dateUtils.formatDate(assignmentDate, dateFormat);\n    }\n    const data = {\n      ...assignOfficerFormData,\n      dateFormat,\n      locale\n    };\n    data.fromLoanOfficerId = this.dataObject.loanOfficerId || '';\n    this.loanService.loanActionButtons(this.loanId, 'assignLoanOfficer', data)\n      .subscribe((response: any) => {\n        this.router.navigate([`../../general`], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"foreclosureForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"transactionsDatePicker.open()\">\n            <mat-label>Transaction Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"transactionsDatePicker\" required\n              formControlName=\"transactionDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"transactionsDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #transactionsDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"foreclosureForm.controls.transactionDate.hasError('required')\">\n              Transaction Date <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Principal</mat-label>\n            <input matInput formControlName=\"outstandingPrincipalPortion\">\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Interest</mat-label>\n            <input matInput formControlName=\"outstandingInterestPortion\">\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Fee Amount</mat-label>\n            <input matInput formControlName=\"outstandingFeeChargesPortion\">\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Penalty Amount</mat-label>\n            <input matInput required formControlName=\"outstandingPenaltyChargesPortion\">\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Transaction Amount</mat-label>\n            <input matInput required formControlName=\"transactionAmount\">\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n        <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!foreclosureForm.valid\"\n            *mifosxHasPermission=\"'FORECLOSURE_LOAN'\">Foreclosure</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { LoansService } from 'app/loans/loans.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n@Component({\n  selector: 'mifosx-foreclosure',\n  templateUrl: './foreclosure.component.html',\n  styleUrls: ['./foreclosure.component.scss']\n})\nexport class ForeclosureComponent implements OnInit {\n  @Input() dataObject: any;\n\n  loanId: any;\n  foreclosureForm: FormGroup;\n  /** Minimum Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Date allowed. */\n  maxDate = new Date();\n  foreclosuredata: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {LoansService} systemService Loan Service.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private loanService: LoansService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private dateUtils: Dates,\n    private settingsService: SettingsService) {\n      this.loanId = this.route.snapshot.params['loanId'];\n    }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createforeclosureForm();\n    this.onChanges();\n  }\n\n  createforeclosureForm() {\n    this.foreclosureForm = this.formBuilder.group({\n      'transactionDate': [this.dataObject.date && new Date(this.dataObject.date), Validators.required],\n      'outstandingPrincipalPortion': [{value: this.dataObject.principalPortion || 0, disabled: true}],\n      'outstandingInterestPortion': [{value: this.dataObject.interestPortion || 0, disabled: true}],\n      'outstandingFeeChargesPortion': [{value: this.dataObject.feeChargesPortion || 0, disabled: true}],\n      'outstandingPenaltyChargesPortion': [{value: this.dataObject.penaltyChargesPortion || 0, disabled: true}],\n      'transactionAmount': [{value: this.dataObject.amount, disabled: true}],\n      'note': ['', Validators.required]\n    });\n  }\n\n  onChanges(): void {\n    this.foreclosureForm.get('transactionDate').valueChanges.subscribe(val => {\n      this.retrieveLoanForeclosureTemplate(val);\n    });\n\n  }\n\n  retrieveLoanForeclosureTemplate(val: any) {\n    const dateFormat = this.settingsService.dateFormat;\n    const transactionDateFormatted = this.dateUtils.formatDate(val, dateFormat);\n    const data = {\n      command: 'foreclosure',\n      dateFormat: this.settingsService.dateFormat,\n      locale: this.settingsService.language.code,\n      transactionDate: transactionDateFormatted\n    };\n    this.loanService.getForeclosureData(this.loanId, data)\n    .subscribe((response: any) => {\n      this.foreclosuredata = response;\n\n      this.foreclosureForm.patchValue({\n        outstandingPrincipalPortion: this.foreclosuredata.principalPortion,\n        outstandingInterestPortion: this.foreclosuredata.interestPortion,\n        outstandingFeeChargesPortion: this.foreclosuredata.feeChargesPortion,\n        outstandingPenaltyChargesPortion: this.foreclosuredata.penaltyChargesPortion,\n      });\n    });\n  }\n\n  submit() {\n    const foreclosureFormData = this.foreclosureForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevTransactionDate = this.foreclosureForm.value.transactionDate;\n    if (foreclosureFormData.transactionDate instanceof Date) {\n      foreclosureFormData.transactionDate = this.dateUtils.formatDate(prevTransactionDate, dateFormat);\n    }\n    const data = {\n      ...foreclosureFormData,\n      dateFormat,\n      locale\n    };\n\n    this.loanService.loanForclosureData(this.loanId, data)\n      .subscribe((response: any) => {\n        this.router.navigate([`../../general`], { relativeTo: this.route });\n      });\n    }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"prepayLoanForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"transactionDatePicker.open()\">\n            <mat-label>Transaction Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"transactionDatePicker\" required\n              formControlName=\"transactionDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"transactionDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #transactionDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"prepayLoanForm.controls.transactionDate.hasError('required')\">\n              Transaction Date <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <div fxLayout=\"row wrap\" class=\"content\">\n            <div fxFlex=\"50%\" class=\"mat-body-strong\">\n              {{ 'Principal' | translate }}\n            </div>\n\n            <div fxFlex=\"50%\" class=\"r-amount right-label\">\n              {{ prepayData.principalPortion | formatNumber }}\n            </div>\n\n            <div fxFlex=\"50%\" class=\"mat-body-strong\">\n              {{ 'Interest' | translate }}\n            </div>\n\n            <div fxFlex=\"50%\" class=\"r-amount right-label\">\n              {{ prepayData.interestPortion | formatNumber }}\n            </div>\n\n            <div fxFlex=\"50%\" class=\"mat-body-strong\">\n              {{ 'Fees' | translate }}\n            </div>\n\n            <div fxFlex=\"50%\" class=\"r-amount right-label\">\n              {{ prepayData.feeChargesPortion | formatNumber }}\n            </div>\n\n            <div fxFlex=\"50%\" class=\"mat-body-strong\">\n              {{ 'Penalties' | translate }}\n            </div>\n\n            <div fxFlex=\"50%\" class=\"r-amount right-label\">\n              {{ prepayData.penaltyChargesPortion | formatNumber }}\n            </div>\n          </div>\n\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Transaction Amount</mat-label>\n            <span matTextSuffix class=\"m-l-10\">{{ prepayData.currency.code }}</span>\n            <span fxFlex=\"auto\"></span>\n            <input type=\"number\" matInput required class=\"right-input\" formControlName=\"transactionAmount\">\n            <mat-error *ngIf=\"prepayLoanForm.controls.transactionAmount.hasError('required')\">\n              Transaction Amount <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>External Id</mat-label>\n            <input matInput formControlName=\"externalId\">\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Payment Type</mat-label>\n            <mat-select formControlName=\"paymentTypeId\">\n              <mat-option *ngFor=\"let paymentType of paymentTypes\" [value]=\"paymentType.id\">\n                {{ paymentType.name }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <div fxFlexFill>\n            <span fxFlex=\"75%\" class=\"expandcollapsebutton m-l-10 m-t-40\" (click)=\"addPaymentDetails()\">\n              <mat-slide-toggle>\n                <div [className]=\"showPaymentDetails ? 'enabled' : 'disabled'\">\n                  <span class=\"m-l-10\">Show Payment Details</span>\n                </div>\n              </mat-slide-toggle>\n            </span>\n          </div>\n\n          <ng-container *ngIf=\"showPaymentDetails\">\n            <mat-form-field>\n              <mat-label> Account #</mat-label>\n              <input matInput formControlName=\"accountNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Cheque #</mat-label>\n              <input matInput formControlName=\"checkNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Routing Code</mat-label>\n              <input matInput formControlName=\"routingCode\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Reciept #</mat-label>\n              <input matInput formControlName=\"receiptNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Bank #</mat-label>\n              <input matInput formControlName=\"bankNumber\">\n            </mat-form-field>\n          </ng-container>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n        <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!prepayLoanForm.valid\"\n            *mifosxHasPermission=\"'REPAYMENT_LOAN'\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { LoansService } from 'app/loans/loans.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n\n/**\n * Loan Prepay Loan Option\n */\n@Component({\n  selector: 'mifosx-prepay-loan',\n  templateUrl: './prepay-loan.component.html',\n  styleUrls: ['./prepay-loan.component.scss']\n})\nexport class PrepayLoanComponent implements OnInit {\n\n  @Input() dataObject: any;\n  /** Loan Id */\n  loanId: string;\n  /** Payment Types */\n  paymentTypes: any;\n  /** Principal Portion */\n  principalPortion: any;\n  /** Interest Portion */\n  interestPortion: any;\n  /** Show Payment Details */\n  showPaymentDetails = false;\n  /** Minimum Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Date allowed. */\n  maxDate = new Date();\n  /** Prepay Loan form. */\n  prepayLoanForm: FormGroup;\n\n  prepayData: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {LoansService} loanService Loan Service.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private loanService: LoansService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private dateUtils: Dates,\n    private settingsService: SettingsService) {\n      this.loanId = this.route.snapshot.params['loanId'];\n    }\n\n  /**\n   * Creates the prepay loan form\n   * and initialize with the required values\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createprepayLoanForm();\n    this.setPrepayLoanDetails();\n    this.prepayData = this.dataObject;\n  }\n\n  /**\n   * Creates the prepay loan form.\n   */\n  createprepayLoanForm() {\n    this.prepayLoanForm = this.formBuilder.group({\n      'transactionDate': [new Date(), Validators.required],\n      'transactionAmount': ['', Validators.required],\n      'externalId': [''],\n      'paymentTypeId': [''],\n      'note': ['']\n    });\n  }\n\n  /**\n   * Sets the value in the prepay loan form\n   */\n  setPrepayLoanDetails() {\n    this.paymentTypes = this.dataObject.paymentTypeOptions;\n    this.prepayLoanForm.patchValue({\n      transactionAmount: this.dataObject.amount\n    });\n    this.prepayLoanForm.get('transactionDate').valueChanges.subscribe((transactionDate: string) => {\n      const prepayDate = this.dateUtils.formatDate(transactionDate, this.settingsService.dateFormat);\n\n      this.loanService.getLoanPrepayLoanActionTemplate(this.loanId, prepayDate)\n      .subscribe((response: any) => {\n        this.prepayData = response;\n        this.prepayLoanForm.patchValue({\n          transactionAmount: this.prepayData.amount\n        });\n      });\n    });\n  }\n\n  /**\n   * Add payment detail fields to the UI.\n   */\n  addPaymentDetails() {\n    this.showPaymentDetails = !this.showPaymentDetails;\n    if (this.showPaymentDetails) {\n      this.prepayLoanForm.addControl('accountNumber', new FormControl(''));\n      this.prepayLoanForm.addControl('checkNumber', new FormControl(''));\n      this.prepayLoanForm.addControl('routingCode', new FormControl(''));\n      this.prepayLoanForm.addControl('receiptNumber', new FormControl(''));\n      this.prepayLoanForm.addControl('bankNumber', new FormControl(''));\n    } else {\n      this.prepayLoanForm.removeControl('accountNumber');\n      this.prepayLoanForm.removeControl('checkNumber');\n      this.prepayLoanForm.removeControl('routingCode');\n      this.prepayLoanForm.removeControl('receiptNumber');\n      this.prepayLoanForm.removeControl('bankNumber');\n    }\n  }\n\n  /**\n   * Submits the prepay loan form\n   */\n  submit() {\n    const prepayLoanFormData = this.prepayLoanForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevTransactionDate: Date = this.prepayLoanForm.value.transactionDate;\n    if (prepayLoanFormData.transactionDate instanceof Date) {\n      prepayLoanFormData.transactionDate = this.dateUtils.formatDate(prevTransactionDate, dateFormat);\n    }\n    const data = {\n      ...prepayLoanFormData,\n      dateFormat,\n      locale\n    };\n    this.loanService.submitLoanActionButton(this.loanId, data, 'repayment')\n      .subscribe((response: any) => {\n        this.router.navigate(['../../general'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"repaymentLoanForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"transactionDatePicker.open()\">\n            <mat-label>Transaction Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"transactionDatePicker\" required\n              formControlName=\"transactionDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"transactionDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #transactionDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"repaymentLoanForm.controls.transactionDate.hasError('required')\">\n              Transaction Date <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <div fxLayout=\"row wrap\" class=\"content\">\n            <div fxFlex=\"50%\" class=\"mat-body-strong\">\n              {{ 'Principal' | translate }}\n            </div>\n\n            <div fxFlex=\"50%\" class=\"r-amount right-label\">\n              {{ dataObject.principalPortion | formatNumber }}\n            </div>\n\n            <div fxFlex=\"50%\" class=\"mat-body-strong\">\n              {{ 'Interest' | translate }}\n            </div>\n\n            <div fxFlex=\"50%\" class=\"r-amount right-label\">\n              {{ dataObject.interestPortion | formatNumber }}\n            </div>\n\n            <div fxFlex=\"50%\" class=\"mat-body-strong\">\n              {{ 'Fees' | translate }}\n            </div>\n\n            <div fxFlex=\"50%\" class=\"r-amount right-label\">\n              {{ dataObject.feeChargesPortion | formatNumber }}\n            </div>\n\n            <div fxFlex=\"50%\" class=\"mat-body-strong\">\n              {{ 'Penalties' | translate }}\n            </div>\n\n            <div fxFlex=\"50%\" class=\"r-amount right-label\">\n              {{ dataObject.penaltyChargesPortion | formatNumber }}\n            </div>\n          </div>\n\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Transaction Amount</mat-label>\n            <span matTextSuffix class=\"m-l-10\">{{ dataObject.currency.code }}</span>\n            <span fxFlex=\"auto\"></span>\n            <input type=\"number\" matInput required class=\"right-input\" formControlName=\"transactionAmount\">\n            <mat-error *ngIf=\"repaymentLoanForm.controls.transactionAmount.hasError('required')\">\n              Transaction Amount <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>External Id</mat-label>\n            <input matInput formControlName=\"externalId\">\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Payment Type</mat-label>\n            <mat-select formControlName=\"paymentTypeId\">\n              <mat-option *ngFor=\"let paymentType of paymentTypes\" [value]=\"paymentType.id\">\n                {{ paymentType.name }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <div fxFlexFill>\n            <span fxFlex=\"75%\" class=\"expandcollapsebutton m-l-10 m-t-40\" (click)=\"addPaymentDetails()\">\n              <mat-slide-toggle>\n                <div [className]=\"showPaymentDetails ? 'enabled' : 'disabled'\">\n                  <span class=\"m-l-10\">Show Payment Details</span>\n                </div>\n              </mat-slide-toggle>\n            </span>\n          </div>\n\n          <ng-container *ngIf=\"showPaymentDetails\">\n            <mat-form-field>\n              <mat-label> Account #</mat-label>\n              <input matInput formControlName=\"accountNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Cheque #</mat-label>\n              <input matInput formControlName=\"checkNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Routing Code</mat-label>\n              <input matInput formControlName=\"routingCode\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Reciept #</mat-label>\n              <input matInput formControlName=\"receiptNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Bank #</mat-label>\n              <input matInput formControlName=\"bankNumber\">\n            </mat-form-field>\n          </ng-container>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n        <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!repaymentLoanForm.valid\"\n            *mifosxHasPermission=\"'REPAYMENT_LOAN'\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { LoansService } from 'app/loans/loans.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Loan Make Repayment Component\n */\n@Component({\n  selector: 'mifosx-make-repayment',\n  templateUrl: './make-repayment.component.html',\n  styleUrls: ['./make-repayment.component.scss']\n})\nexport class MakeRepaymentComponent implements OnInit {\n\n  @Input() dataObject: any;\n  /** Loan Id */\n  loanId: string;\n  /** Payment Type Options */\n  paymentTypes: any;\n  /** Show payment details */\n  showPaymentDetails = false;\n  /** Minimum Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Date allowed. */\n  maxDate = new Date();\n  /** Repayment Loan Form */\n  repaymentLoanForm: FormGroup;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {LoansService} loanService Loan Service.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private loanService: LoansService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private dateUtils: Dates,\n    private settingsService: SettingsService) {\n      this.loanId = this.route.snapshot.params['loanId'];\n    }\n\n  /**\n   * Creates the repayment loan form\n   * and initialize with the required values\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createRepaymentLoanForm();\n    this.setRepaymentLoanDetails();\n  }\n\n  /**\n   * Creates the create close form.\n   */\n  createRepaymentLoanForm() {\n    this.repaymentLoanForm = this.formBuilder.group({\n      'transactionDate': [this.settingsService.businessDate, Validators.required],\n      'transactionAmount': ['', Validators.required],\n      'externalId': '',\n      'paymentTypeId': '',\n      'note': ''\n    });\n  }\n\n  setRepaymentLoanDetails() {\n    this.paymentTypes = this.dataObject.paymentTypeOptions;\n    this.repaymentLoanForm.patchValue({\n      transactionAmount: this.dataObject.amount\n    });\n  }\n\n  /**\n   * Add payment detail fields to the UI.\n   */\n  addPaymentDetails() {\n    this.showPaymentDetails = !this.showPaymentDetails;\n    if (this.showPaymentDetails) {\n      this.repaymentLoanForm.addControl('accountNumber', new FormControl(''));\n      this.repaymentLoanForm.addControl('checkNumber', new FormControl(''));\n      this.repaymentLoanForm.addControl('routingCode', new FormControl(''));\n      this.repaymentLoanForm.addControl('receiptNumber', new FormControl(''));\n      this.repaymentLoanForm.addControl('bankNumber', new FormControl(''));\n    } else {\n      this.repaymentLoanForm.removeControl('accountNumber');\n      this.repaymentLoanForm.removeControl('checkNumber');\n      this.repaymentLoanForm.removeControl('routingCode');\n      this.repaymentLoanForm.removeControl('receiptNumber');\n      this.repaymentLoanForm.removeControl('bankNumber');\n    }\n  }\n\n  /** Submits the repayment form */\n  submit() {\n    const repaymentLoanFormData = this.repaymentLoanForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevTransactionDate: Date = this.repaymentLoanForm.value.transactionDate;\n    if (repaymentLoanFormData.transactionDate instanceof Date) {\n      repaymentLoanFormData.transactionDate = this.dateUtils.formatDate(prevTransactionDate, dateFormat);\n    }\n    const data = {\n      ...repaymentLoanFormData,\n      dateFormat,\n      locale\n    };\n    const command = this.dataObject.type.code.split('.')[1];\n    this.loanService.submitLoanActionButton(this.loanId, data, command)\n      .subscribe((response: any) => {\n        this.router.navigate(['../../transactions'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"creditBalanceLoanForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"transactionDatePicker.open()\">\n            <mat-label>Transaction Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"transactionDatePicker\" required\n              formControlName=\"transactionDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"transactionDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #transactionDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"creditBalanceLoanForm.controls.transactionDate.hasError('required')\">\n              Transaction Date <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Transaction Amount</mat-label>\n            <input matInput required formControlName=\"transactionAmount\">\n            <mat-error *ngIf=\"creditBalanceLoanForm.controls.transactionAmount.hasError('required')\">\n              Transaction Amount <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>External Id</mat-label>\n            <input matInput formControlName=\"externalId\">\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n        <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!creditBalanceLoanForm.valid\"\n            *mifosxHasPermission=\"'REPAYMENT_LOAN'\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\nimport { LoansService } from 'app/loans/loans.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n@Component({\n  selector: 'mifosx-loan-credit-balance-refund',\n  templateUrl: './loan-credit-balance-refund.component.html',\n  styleUrls: ['./loan-credit-balance-refund.component.scss']\n})\nexport class LoanCreditBalanceRefundComponent implements OnInit {\n\n  @Input() dataObject: any;\n  /** Loan Id */\n  loanId: string;\n  /** Minimum Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Date allowed. */\n  maxDate = new Date();\n  /** Credit Balance Loan Form */\n  creditBalanceLoanForm: FormGroup;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {LoansService} loanService Loan Service.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private loanService: LoansService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private dateUtils: Dates,\n    private settingsService: SettingsService) {\n      this.loanId = this.route.snapshot.params['loanId'];\n    }\n\n  /**\n   * Creates the Credit Balance loan form\n   * and initialize with the required values\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createCreditBalanceLoanForm();\n    this.setCreditBalanceLoanDetails();\n  }\n\n  /**\n   * Creates the create close form.\n   */\n  createCreditBalanceLoanForm() {\n    this.creditBalanceLoanForm = this.formBuilder.group({\n      'transactionDate': [new Date(), Validators.required],\n      'transactionAmount': ['', Validators.required],\n      'externalId': '',\n      'note': ''\n    });\n  }\n\n  setCreditBalanceLoanDetails() {\n    this.creditBalanceLoanForm.patchValue({\n      transactionAmount: this.dataObject.amount\n    });\n  }\n\n  /** Submits the Credit Balance form */\n  submit() {\n    const creditBalanceLoanFormData = this.creditBalanceLoanForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevTransactionDate: Date = this.creditBalanceLoanForm.value.transactionDate;\n    if (creditBalanceLoanFormData.transactionDate instanceof Date) {\n      creditBalanceLoanFormData.transactionDate = this.dateUtils.formatDate(prevTransactionDate, dateFormat);\n    }\n    const data = {\n      ...creditBalanceLoanFormData,\n      dateFormat,\n      locale\n    };\n    const command = this.dataObject.type.code.split('.')[1];\n    this.loanService.submitLoanActionButton(this.loanId, data, command)\n      .subscribe((response: any) => {\n        this.router.navigate(['../../transactions'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"loanInterestForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"interestDatePicker.open()\">\n            <mat-label>Interest waived on</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"interestDatePicker\" required\n              formControlName=\"transactionDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"interestDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #interestDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"loanInterestForm.controls.transactionDate.hasError('required')\">\n              Interest Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Transaction amount</mat-label>\n            <input matInput required formControlName=\"transactionAmount\">\n            <mat-error *ngIf=\"loanInterestForm.controls.transactionAmount.hasError('required')\">\n              Transaction Amount is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n        <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!loanInterestForm.valid\"\n            *mifosxHasPermission=\"'WAIVEINTERESTPORTION_LOAN'\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports. */\nimport { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n/** Custom Services. */\nimport { LoansService } from 'app/loans/loans.service';\nimport { Dates } from 'app/core/utils/dates';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Waive Interest component.\n */\n@Component({\n  selector: 'mifosx-waive-interest',\n  templateUrl: './waive-interest.component.html',\n  styleUrls: ['./waive-interest.component.scss']\n})\nexport class WaiveInterestComponent implements OnInit {\n\n  @Input() dataObject: any;\n\n  /** Loan Interest form. */\n  loanInterestForm: FormGroup;\n  /** Minimum Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Date allowed. */\n  maxDate = new Date();\n\n  /**\n   * Get data from `Resolver`.\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {Router} router Router.\n   * @param {LoansService} loanService Loan Service.\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private formBuilder: FormBuilder,\n              private router: Router,\n              private settingsService: SettingsService,\n              private dateUtils: Dates,\n              private loanService: LoansService,\n              private route: ActivatedRoute) { }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.setLoanInterestForm();\n  }\n\n  /**\n   * Set Loan Interest form.\n   */\n  setLoanInterestForm() {\n    this.loanInterestForm = this.formBuilder.group({\n      'transactionAmount': [this.dataObject.amount, Validators.required],\n      'transactionDate': [this.dataObject.date && new Date(this.dataObject.date), Validators.required],\n      'note': ['']\n    });\n  }\n\n  /**\n   * Submits loan interest form.\n   */\n  submit() {\n    const loanInterestFormData = this.loanInterestForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevTransactionDate = this.loanInterestForm.value.transactionDate;\n    if (loanInterestFormData.transactionDate instanceof Date) {\n      loanInterestFormData.transactionDate = this.dateUtils.formatDate(prevTransactionDate, dateFormat);\n    }\n    const data = {\n      ...loanInterestFormData,\n      dateFormat,\n      locale\n    };\n    const loanId = this.route.snapshot.params['loanId'];\n    this.loanService.submitLoanActionButton(loanId, data, 'waiveinterest').subscribe((response: any) => {\n      this.router.navigate(['../../general'], {relativeTo: this.route});\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <mat-card-content>\n\n      <form [formGroup]=\"writeOffForm\">\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"writeOffDatePicker.open()\">\n            <mat-label>Write off on</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"writeOffDatePicker\" required\n              formControlName=\"transactionDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"writeOffDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #writeOffDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"writeOffForm.controls.transactionDate.hasError('required')\">\n              Write Off Date <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Amount</mat-label>\n            <input matInput formControlName=\"amount\">\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n      </form>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" (click)=\"submit()\"\n          *mifosxHasPermission=\"'WRITEOFF_LOAN'\">Submit</button>\n      </mat-card-actions>\n\n    </mat-card-content>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports. */\nimport { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\n\n/** Custom Services. */\nimport { LoansService } from 'app/loans/loans.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Write Off component.\n */\n@Component({\n  selector: 'mifosx-write-off-page',\n  templateUrl: './write-off-page.component.html',\n  styleUrls: ['./write-off-page.component.scss']\n})\nexport class WriteOffPageComponent implements OnInit {\n\n  @Input() dataObject: any;\n\n  /** Minimum Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Date allowed. */\n  maxDate = new Date();\n\n  /** Write Off form. */\n  writeOffForm: FormGroup;\n\n  /**\n   * Get data from `Resolver`.\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {LoansService} loanService Loan Service.\n   * @param {Dates} dateUtils Date Utils.\n   * @param {Router} router Router.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private route: ActivatedRoute,\n              private loanService: LoansService,\n              private dateUtils: Dates,\n              private router: Router,\n              private settingsService: SettingsService) { }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.setWriteOffForm();\n  }\n\n  /**\n   * Set Write Off form.\n   */\n  setWriteOffForm() {\n    this.writeOffForm = this.formBuilder.group({\n      'transactionDate': [this.dataObject.date && new Date(this.dataObject.date), Validators.required],\n      'amount': [{value: this.dataObject.amount, disabled: true}],\n      'note': ['']\n    });\n  }\n\n  /**\n   * Submits write off form.\n   */\n  submit() {\n    const writeOffFormData = this.writeOffForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevTransactionDate = this.writeOffForm.value.transactionDate;\n    if (writeOffFormData.transactionDate instanceof Date) {\n      writeOffFormData.transactionDate = this.dateUtils.formatDate(prevTransactionDate, dateFormat);\n    }\n    const data = {\n      ...writeOffFormData,\n      dateFormat,\n      locale\n    };\n    const loanId = this.route.snapshot.params['loanId'];\n    delete data.amount;\n    this.loanService.submitLoanActionButton(loanId, data, 'writeoff').subscribe((response: any) => {\n      this.router.navigate(['../../general'], {relativeTo: this.route});\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"closeLoanForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"closedDatePicker.open()\">\n            <mat-label>Closed On</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"closedDatePicker\" required\n              formControlName=\"transactionDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"closedDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #closedDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"closeLoanForm.controls.transactionDate.hasError('required')\">\n              Closed Date <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n        <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!closeLoanForm.valid\"\n            *mifosxHasPermission=\"'CLOSEASRESCHEDULED_LOAN'\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { LoansService } from 'app/loans/loans.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n@Component({\n  selector: 'mifosx-close-as-rescheduled',\n  templateUrl: './close-as-rescheduled.component.html',\n  styleUrls: ['./close-as-rescheduled.component.scss']\n})\nexport class CloseAsRescheduledComponent implements OnInit {\n\n  @Input() dataObject: any;\n\n  /** Close form. */\n  closeLoanForm: FormGroup;\n  /** Loan Id */\n  loanId: any;\n  /** Minimum Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Date allowed. */\n  maxDate = new Date();\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {LoansService} systemService Loan Service.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private loanService: LoansService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private dateUtils: Dates,\n    private settingsService: SettingsService) {\n      this.loanId = this.route.snapshot.params['loanId'];\n    }\n\n  /**\n   * Creates the close form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createCloseForm();\n  }\n\n  /**\n   * Creates the create close form.\n   */\n  createCloseForm() {\n    this.closeLoanForm = this.formBuilder.group({\n      'transactionDate': [new Date(this.dataObject.date) || new Date(), Validators.required],\n      'note': []\n    });\n  }\n\n  /**\n   * Submits the close form and creates a close,\n   * if successful redirects to view created close.\n   */\n  submit() {\n    const closeLoanFormData = this.closeLoanForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const transactionDate = this.closeLoanForm.value.transactionDate;\n    if (closeLoanFormData.transactionDate instanceof Date) {\n      closeLoanFormData.transactionDate = this.dateUtils.formatDate(transactionDate, dateFormat);\n    }\n    const data = {\n      ...closeLoanFormData,\n      dateFormat,\n      locale\n    };\n    this.loanService.submitLoanActionButton(this.loanId, data, 'close-rescheduled')\n      .subscribe((response: any) => {\n        this.router.navigate(['../../general'], { relativeTo: this.route });\n    });\n  }\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"rescheduleLoanForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"rescheduleDatePicker.open()\">\n            <mat-label>Reschedule from Installment On</mat-label>\n            <input matInput [min]=\"minDate\" [matDatepicker]=\"rescheduleDatePicker\" required\n              formControlName=\"rescheduleFromDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"rescheduleDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #rescheduleDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"rescheduleLoanForm.controls.rescheduleFromDate.hasError('required')\">\n              Reschedule Date <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Reason for Rescheduling</mat-label>\n            <mat-select formControlName=\"rescheduleReasonId\">\n              <mat-option *ngFor=\"let rescheduleReasonCode of codes\" [value]=\"rescheduleReasonCode.id\">\n                {{ rescheduleReasonCode.name }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"rescheduleLoanForm.controls.rescheduleReasonId.hasError('required')\">\n              Reason for Rescheduling <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field (click)=\"submittedDatePicker.open()\">\n            <mat-label>Submitted On</mat-label>\n            <input matInput [min]=\"minDate\" [matDatepicker]=\"submittedDatePicker\" required\n              formControlName=\"submittedOnDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"submittedDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #submittedDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"rescheduleLoanForm.controls.submittedOnDate.hasError('required')\">\n              Submitted On Date <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Comments</mat-label>\n            <textarea matInput formControlName=\"rescheduleReasonComment\"></textarea>\n          </mat-form-field>\n\n          <mat-checkbox [formControl]=\"changeRepaymentDate\"> Change Repayment Date </mat-checkbox>\n\n          <ng-container *ngIf=\"changeRepaymentDate.value\" (click)=\"installmentrescheduledDatePicker.open()\">\n            <mat-form-field>\n              <mat-label>Installment Rescheduled to</mat-label>\n              <input matInput [min]=\"minDate\" [matDatepicker]=\"installmentrescheduledDatePicker\"\n                formControlName=\"adjustedDueDate\">\n              <mat-datepicker-toggle matSuffix [for]=\"installmentrescheduledDatePicker\"></mat-datepicker-toggle>\n              <mat-datepicker #installmentrescheduledDatePicker></mat-datepicker>\n            </mat-form-field>\n          </ng-container>\n\n          <mat-checkbox [formControl]=\"introduceGracePeriods\"> Introduce Mid-term grace periods </mat-checkbox>\n\n          <ng-container *ngIf=\"introduceGracePeriods.value\">\n            <mat-form-field>\n              <mat-label>Principal Grace Periods </mat-label>\n              <input matInput formControlName=\"graceOnPrincipal\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Interest Grace Periods </mat-label>\n              <input matInput formControlName=\"graceOnInterest\">\n            </mat-form-field>\n          </ng-container>\n\n          <mat-checkbox [formControl]=\"extendRepaymentPeriod\"> Extend Repayment Period </mat-checkbox>\n\n          <ng-container *ngIf=\"extendRepaymentPeriod.value\">\n            <mat-form-field>\n              <mat-label>Number Of new Repayments</mat-label>\n              <input matInput formControlName=\"extraTerms\">\n            </mat-form-field>\n          </ng-container>\n\n          <mat-checkbox [formControl]=\"adjustinterestrates\"> Adjust interest rates for remainder of loan </mat-checkbox>\n          <ng-container *ngIf=\"adjustinterestrates.value\">\n            <mat-form-field>\n              <mat-label>New Interest Rate</mat-label>\n              <input matInput formControlName=\"newInterestRate\">\n            </mat-form-field>\n          </ng-container>\n\n        </div>\n\n        <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!rescheduleLoanForm.valid\"\n            *mifosxHasPermission=\"'APPROVE_RESCHEDULELOAN'\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { LoansService } from 'app/loans/loans.service';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n@Component({\n  selector: 'mifosx-loan-reschedule',\n  templateUrl: './loan-reschedule.component.html',\n  styleUrls: ['./loan-reschedule.component.scss']\n})\nexport class LoanRescheduleComponent implements OnInit {\n\n  @Input() dataObject: any;\n  loanId: any;\n  rescheduleLoanForm: FormGroup;\n\n  /** Minimum Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Date allowed. */\n  maxDate = new Date();\n  codes: any;\n\n  changeRepaymentDate = new FormControl(false);\n  introduceGracePeriods = new FormControl(false);\n  extendRepaymentPeriod = new FormControl(false);\n  adjustinterestrates = new FormControl(false);\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {LoansService} systemService Loan Service.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private loanService: LoansService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private dateUtils: Dates,\n    private settingsService: SettingsService) {\n      this.loanId = this.route.snapshot.params['loanId'];\n    }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.codes = this.dataObject.rescheduleReasons;\n    this.setRescheduleLoanForm();\n  }\n\n  setRescheduleLoanForm() {\n    this.rescheduleLoanForm = this.formBuilder.group({\n      'rescheduleFromDate': [new Date(), Validators.required],\n      'rescheduleReasonId': ['', Validators.required],\n      'submittedOnDate': [new Date(), Validators.required],\n      'rescheduleReasonComment': [''],\n      'adjustedDueDate': [''],\n      'graceOnPrincipal': [''],\n      'graceOnInterest': [''],\n      'extraTerms': [''],\n      'newInterestRate': ['']\n    });\n\n  }\n\n  submit() {\n    const rescheduleLoanFormData = this.rescheduleLoanForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevRescheduleFromDate = this.rescheduleLoanForm.value.rescheduleFromDate;\n    const prevAdjustedDueDate = this.rescheduleLoanForm.value.adjustedDueDate;\n    const prevSubmittedOnDate = this.rescheduleLoanForm.value.submittedOnDate;\n    if (prevRescheduleFromDate instanceof Date) {\n      rescheduleLoanFormData.rescheduleFromDate = this.dateUtils.formatDate(prevRescheduleFromDate, dateFormat);\n    }\n    if (prevAdjustedDueDate instanceof Date) {\n      rescheduleLoanFormData.adjustedDueDate = this.dateUtils.formatDate(prevAdjustedDueDate, dateFormat);\n    }\n    if (prevSubmittedOnDate instanceof Date) {\n      rescheduleLoanFormData.submittedOnDate = this.dateUtils.formatDate(prevSubmittedOnDate, dateFormat);\n    }\n    const data = {\n      ...rescheduleLoanFormData,\n      dateFormat,\n      locale\n    };\n    data.loanId = this.loanId;\n    this.loanService.submitRescheduleData(data).subscribe((response: any) => {\n\n      // TODO: needs to be updated\n      // mentioned in Community App:\n      // location.path('/loans-accounts/' + scope.loanId + '/viewreschedulerequest/'+ data.resourceId);\n        this.router.navigate(['../../general'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"recoveryRepaymentLoanForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"transactionDatePicker.open()\">\n            <mat-label>Transaction Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"transactionDatePicker\" required\n              formControlName=\"transactionDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"transactionDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #transactionDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"recoveryRepaymentLoanForm.controls.transactionDate.hasError('required')\">\n              Transaction Date <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Transaction Amount</mat-label>\n            <input matInput required formControlName=\"transactionAmount\">\n            <mat-error *ngIf=\"recoveryRepaymentLoanForm.controls.transactionAmount.hasError('required')\">\n              Transaction Amount <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Payment Type</mat-label>\n            <mat-select formControlName=\"paymentTypeId\">\n              <mat-option *ngFor=\"let paymentType of paymentTypes\" [value]=\"paymentType.id\">\n                {{ paymentType.name }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <div fxFlexFill>\n            <span fxFlex=\"75%\" class=\"expandcollapsebutton m-l-10 m-t-40\" (click)=\"addPaymentDetails()\">\n              <mat-slide-toggle>\n                <div [className]=\"showPaymentDetails ? 'enabled' : 'disabled'\">\n                  <span class=\"m-l-10\">Show Payment Details</span>\n                </div>\n              </mat-slide-toggle>\n            </span>\n          </div>\n\n          <ng-container *ngIf=\"showPaymentDetails\">\n            <mat-form-field>\n              <mat-label> Account #</mat-label>\n              <input matInput formControlName=\"accountNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Cheque #</mat-label>\n              <input matInput formControlName=\"checkNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Routing Code</mat-label>\n              <input matInput formControlName=\"routingCode\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Reciept #</mat-label>\n              <input matInput formControlName=\"receiptNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Bank #</mat-label>\n              <input matInput formControlName=\"bankNumber\">\n            </mat-form-field>\n          </ng-container>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n        <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!recoveryRepaymentLoanForm.valid\"\n            *mifosxHasPermission=\"'REPAYMENT_LOAN'\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { LoansService } from 'app/loans/loans.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Loan Recovery Repayment Action\n */\n@Component({\n  selector: 'mifosx-recovery-repayment',\n  templateUrl: './recovery-repayment.component.html',\n  styleUrls: ['./recovery-repayment.component.scss']\n})\nexport class RecoveryRepaymentComponent implements OnInit {\n\n  @Input() dataObject: any;\n  /** Loan Id */\n  loanId: string;\n  /** Payment Type Options */\n  paymentTypes: any;\n  /** Show payment details */\n  showPaymentDetails = false;\n  /** Minimum Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Date allowed. */\n  maxDate = new Date();\n  /** Recovery Repayment Loan Form */\n  recoveryRepaymentLoanForm: FormGroup;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {LoansService} loanService Loan Service.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private loanService: LoansService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private dateUtils: Dates,\n    private settingsService: SettingsService) {\n    this.loanId = this.route.snapshot.params['loanId'];\n  }\n\n  /**\n   * Creates the recovery repayment loan form\n   * and initialize with the required values\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createRecoveryRepaymentLoanForm();\n    this.setRecoveryRepaymentLoanDetails();\n  }\n\n  /**\n   * Creates the recovery repayment loan form\n   */\n  createRecoveryRepaymentLoanForm() {\n    this.recoveryRepaymentLoanForm = this.formBuilder.group({\n      'transactionDate': [new Date(), Validators.required],\n      'transactionAmount': ['', Validators.required],\n      'paymentTypeId': [''],\n      'note': ['']\n    });\n  }\n\n  /** Sets Recovery Payment Loan Details */\n  setRecoveryRepaymentLoanDetails() {\n    this.paymentTypes = this.dataObject.paymentTypeOptions;\n    this.recoveryRepaymentLoanForm.patchValue({\n      transactionAmount: this.dataObject.amount,\n      transactionDate: new Date(this.dataObject.date)\n    });\n  }\n\n  /**\n   * Add payment detail fields to the UI.\n   */\n  addPaymentDetails() {\n    this.showPaymentDetails = !this.showPaymentDetails;\n    if (this.showPaymentDetails) {\n      this.recoveryRepaymentLoanForm.addControl('accountNumber', new FormControl(''));\n      this.recoveryRepaymentLoanForm.addControl('checkNumber', new FormControl(''));\n      this.recoveryRepaymentLoanForm.addControl('routingCode', new FormControl(''));\n      this.recoveryRepaymentLoanForm.addControl('receiptNumber', new FormControl(''));\n      this.recoveryRepaymentLoanForm.addControl('bankNumber', new FormControl(''));\n    } else {\n      this.recoveryRepaymentLoanForm.removeControl('accountNumber');\n      this.recoveryRepaymentLoanForm.removeControl('checkNumber');\n      this.recoveryRepaymentLoanForm.removeControl('routingCode');\n      this.recoveryRepaymentLoanForm.removeControl('receiptNumber');\n      this.recoveryRepaymentLoanForm.removeControl('bankNumber');\n    }\n  }\n\n  /** Submits the recovery payment form */\n  submit() {\n    const recoveryRepaymentLoanFormData = this.recoveryRepaymentLoanForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevTransactionDate: Date = this.recoveryRepaymentLoanForm.value.transactionDate;\n    if (recoveryRepaymentLoanFormData.transactionDate instanceof Date) {\n      recoveryRepaymentLoanFormData.transactionDate = this.dateUtils.formatDate(prevTransactionDate, dateFormat);\n    }\n    const data = {\n      ...recoveryRepaymentLoanFormData,\n      dateFormat,\n      locale\n    };\n    this.loanService.submitLoanActionButton(this.loanId, data, 'recoverypayment')\n      .subscribe((response: any) => {\n        this.router.navigate(['../../general'], { relativeTo: this.route });\n      });\n  }\n\n}\n","<h1 mat-dialog-title>Guarantor Detail</h1>\n\n<div mat-dialog-content fxLayout=\"column\">\n\n  <div fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\n\n    <div fxFlexFill>\n      <span fxFlex=\"50%\">First Name:</span>\n      <span fxFlex=\"50%\">{{ data.guarantorData.firstname }}</span>\n    </div>\n\n    <div fxFlexFill>\n      <span fxFlex=\"50%\">Last Name:</span>\n      <span fxFlex=\"50%\">{{ data.guarantorData.lastname }}</span>\n    </div>\n\n    <div fxFlexFill>\n      <span fxFlex=\"50%\">Relationship:</span>\n      <span fxFlex=\"50%\">{{ data.guarantorData.clientRelationshipType.name }}</span>\n    </div>\n\n    <div fxFlexFill>\n      <span fxFlex=\"50%\">Guarantor Type:</span>\n      <span fxFlex=\"50%\">{{ data.guarantorData.guarantorType.value }}</span>\n    </div>\n\n    <div fxFlexFill>\n      <span fxFlex=\"50%\">Status:</span>\n      <span fxFlex=\"50%\">\n        <span *ngIf=\"data.guarantorData.status\">\n          Active\n        </span>\n        <span *ngIf=\"!data.guarantorData.status\">\n          Deleted\n        </span></span>\n    </div>\n\n  </div>\n\n</div>\n\n<mat-dialog-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n  <button mat-raised-button mat-dialog-close> Cancel </button>\n</mat-dialog-actions>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'mifosx-loans-account-view-guarantor-details-dialog',\n  templateUrl: './loans-account-view-guarantor-details-dialog.component.html',\n  styleUrls: ['./loans-account-view-guarantor-details-dialog.component.scss']\n})\nexport class LoansAccountViewGuarantorDetailsDialogComponent implements OnInit {\n\n  constructor(public dialogRef: MatDialogRef<LoansAccountViewGuarantorDetailsDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any) {\n  }\n\n  ngOnInit() {\n    this.dialogRef.updateSize('400px');\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <div class=\"view-guarantors-account-tables\" fxLayout=\"row\" fxLayoutGap=\"2%\">\n\n      <div fxFlex=\"49%\">\n        <table>\n          <tbody>\n            <tr>\n              <td>Disbursement Date</td>\n              <td>{{dataObject.timeline.actualDisbursementDate}}<span\n                  *ngIf=\"!dataObject.timeline.actualDisbursementDate\">Not Available</span></td>\n            </tr>\n            <tr>\n              <td>Currency</td>\n              <td>{{dataObject.currency.name}}</td>\n            </tr>\n            <tr>\n              <td>Loan Officer</td>\n              <td>{{dataObject.loanOfficerName}} <span *ngIf=\"!dataObject.loanOfficerName\">Unassigned</span>\n                <span *ngIf=\"dataObject.loanOfficerName\">\n                  <fa-icon icon=\"times\"></fa-icon>\n                </span></td>\n            </tr>\n            <tr>\n              <td>External Id</td>\n              <td>{{dataObject.externalId}}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <div fxFlex=\"49%\">\n        <table>\n          <tbody>\n            <tr>\n              <td>Loan Purpose</td>\n              <td>\n                {{dataObject.loanPurposeName}} <span *ngIf=\"!dataObject.loanPurposeName\"> Not Provided </span>\n              </td>\n            </tr>\n            <tr>\n              <td>Approved Amount</td>\n              <td>\n                <span>{{dataObject.approvedPrincipal | formatNumber}}</span>\n              </td>\n            </tr>\n            <tr>\n              <td>Disburse Amount</td>\n              <td>\n                <span>{{dataObject.principal | formatNumber}}</span>\n              </td>\n            </tr>\n            <tr>\n              <td>Arrears By</td>\n              <td>{{dataObject.summary.totalOverdue | formatNumber}}\n                <span *ngIf=\"dataObject.summary.totalOverdue < 0\">Not Provided</span>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n\n    <div fxFlexFill *ngIf=\"guarantorDetails\" fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\n\n      <!-- guarantors details table -->\n      <div class=\"heading-content\">\n        <div fxLayout=\"column\" fxFlex=\"50%\">\n          <div class=\"heading-name\">\n            <h3>Guarantors Details</h3>\n          </div>\n        </div>\n        <div fxLayout=\"column\" fxFlex=\"50%\">\n          <div fxLayout=\"row\" fxLayoutAlign=\"flex-end\">\n            <button mat-raised-button class=\"f-right\" color=\"primary\"\n              (click)=\"toggleGuarantorsDetailsOverview()\">{{showDeletedGuarantorsAccounts?'Hide Deleted Guarantors':'Show Deleted Guarantors'}}</button>\n          </div>\n        </div>\n      </div>\n\n      <table fxFlexFill mat-table\n        [dataSource]=\"guarantorDetails|accountsFilter:'guarantor':showDeletedGuarantorsAccounts\">\n        <ng-container matColumnDef=\"fullname\">\n          <th mat-header-cell *matHeaderCellDef> Name </th>\n          <td mat-cell *matCellDef=\"let guarantor\">\n            <span *ngIf=\"!guarantor.guarantorFundingDetails\">\n              {{guarantor.firstname}} &nbsp; {{guarantor.lastname}}\n            </span>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"relationship\">\n          <th mat-header-cell *matHeaderCellDef> Relationship </th>\n          <td mat-cell *matCellDef=\"let guarantor\">\n            <span *ngIf=\"!guarantor.guarantorFundingDetails\">\n              {{guarantor.clientRelationshipType.name}}\n            </span>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"guarantortype\">\n          <th mat-header-cell *matHeaderCellDef> Guarantor Type </th>\n          <td mat-cell *matCellDef=\"let guarantor\">\n            <span *ngIf=\"!guarantor.guarantorFundingDetails\">\n              {{guarantor.guarantorType.value}}\n            </span>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"depositAccount\">\n          <th mat-header-cell *matHeaderCellDef> Deposit Account </th>\n          <td mat-cell *matCellDef=\"let guarantor\">\n            <span *ngIf=\"!guarantor.guarantorFundingDetails\">\n\n            </span>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"amount\">\n          <th mat-header-cell *matHeaderCellDef> Amount </th>\n          <td mat-cell *matCellDef=\"let guarantor\">\n            <span *ngIf=\"!guarantor.guarantorFundingDetails\">\n\n            </span>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"remainingAmount\">\n          <th mat-header-cell *matHeaderCellDef> Remaining Amount </th>\n          <td mat-cell *matCellDef=\"let guarantor\">\n            <span *ngIf=\"!guarantor.guarantorFundingDetails\">\n\n            </span>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"status\">\n          <th mat-header-cell *matHeaderCellDef> Status </th>\n          <td mat-cell *matCellDef=\"let guarantor\">\n            <span *ngIf=\"!guarantor.guarantorFundingDetails\">\n              <span *ngIf=\"guarantor.status\">\n                Active\n              </span>\n              <span *ngIf=\"!guarantor.status\">\n                Deleted\n              </span>\n            </span>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"action\">\n          <th mat-header-cell *matHeaderCellDef> Action </th>\n          <td mat-cell *matCellDef=\"let guarantor; let id = index\">\n            <span *ngIf=\"!guarantor.guarantorFundingDetails\">\n              <button mat-raised-button class=\"account-action-button\" color=\"primary\"\n                *mifosxHasPermission=\"'READ_SAVINGSACCOUNT'\" (click)=\"viewGuarantorDetails(guarantor)\">\n                <fa-icon icon=\"eye\" class=\"m-r-10\"></fa-icon>\n              </button>\n              <button mat-raised-button class=\"account-action-button\" color=\"primary\"\n                *ngIf=\"guarantor.status && guarantor.guarantorType.id == 3 && guarantor.id\">\n                <fa-icon icon=\"edit\" class=\"m-r-10\"></fa-icon>\n              </button>\n              <span *ngIf=\"guarantor.status\">\n                <button mat-raised-button class=\"account-action-button\" color=\"warn\"\n                  *mifosxHasPermission=\"'DELETE_GUARANTOR'\" (click)=\"deleteGuarantor(guarantor.id)\">\n                  <fa-icon icon=\"trash\" class=\"m-r-10\"></fa-icon>\n                </button>\n              </span>\n            </span>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"guarantorsDisplayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: guarantorsDisplayedColumns\"></tr>\n\n      </table>\n    </div>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\n\n/** Custom Services */\nimport { LoansService } from 'app/loans/loans.service';\n\n/** Dialog Components */\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\nimport { LoansAccountViewGuarantorDetailsDialogComponent } from 'app/loans/custom-dialog/loans-account-view-guarantor-details-dialog/loans-account-view-guarantor-details-dialog.component';\n\n/**\n * View Guarantors Action\n */\n@Component({\n  selector: 'mifosx-view-guarantors',\n  templateUrl: './view-guarantors.component.html',\n  styleUrls: ['./view-guarantors.component.scss']\n})\nexport class ViewGuarantorsComponent implements OnInit {\n\n  @Input() dataObject: any;\n  guarantorDetails: any;\n  showDeletedGuarantorsAccounts = false;\n  loanId: any;\n  guarantorsDisplayedColumns: string[] = ['fullname', 'relationship', 'guarantortype', 'depositAccount', 'amount', 'remainingAmount', 'status', 'action'];\n\n  /** View and perform various action on existing list of guarantors\n   * @param {MatDialog} dialog Dialog\n   * @param {LoansService} loansService Loans Service\n   * @param {route} Route Route\n   * @param {router} Router Router\n   */\n  constructor(public dialog: MatDialog,\n              public loansService: LoansService,\n              private route: ActivatedRoute,\n              private router: Router) {\n    this.loanId = this.route.snapshot.params['loanId'];\n  }\n\n  ngOnInit() {\n    this.guarantorDetails = this.dataObject.guarantors;\n  }\n\n  toggleGuarantorsDetailsOverview() {\n    this.showDeletedGuarantorsAccounts = !this.showDeletedGuarantorsAccounts;\n  }\n\n  deleteGuarantor(id: any) {\n    const deleteGuarantorDialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `the guarantor id: ${id}` }\n    });\n    deleteGuarantorDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        this.loansService.deleteGuarantor(this.loanId, id).subscribe(() => {\n          this.reload();\n        });\n      }\n    });\n  }\n\n  viewGuarantorDetails(guarantorData: any) {\n    const viewGuarantorDetailsDialogRef = this.dialog.open(LoansAccountViewGuarantorDetailsDialogComponent, {\n      data: { guarantorData: guarantorData }\n    });\n    viewGuarantorDetailsDialogRef.afterClosed().subscribe(() => {});\n  }\n\n  /**\n   * Refetches data for the component\n   * TODO: Replace by a custom reload component instead of hard-coded back-routing.\n   */\n  private reload() {\n    const clientId = this.dataObject.clientId;\n    const url: string = this.router.url;\n    this.router.navigateByUrl(`/clients/${clientId}/loans-accounts`, { skipLocationChange: true })\n      .then(() => this.router.navigate([url]));\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"newGuarantorForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-checkbox labelPosition=\"before\" formControlName=\"existingClient\">\n            Existing Client\n          </mat-checkbox>\n\n          <ng-container *ngIf=\"!showClientDetailsForm\">\n\n            <mat-form-field fxFlex=\"30%\">\n              <mat-label>Name</mat-label>\n              <input matInput formControlName=\"name\" [matAutocomplete]=\"clientsAutocomplete\">\n              <mat-error *ngIf=\"newGuarantorForm.controls.name.hasError('required')\">\n                Name <strong>is required</strong>\n              </mat-error>\n            </mat-form-field>\n\n            <mat-autocomplete autoActiveFirstOption #clientsAutocomplete=\"matAutocomplete\" [displayWith]=\"displayClient\"\n              (optionSelected)=\"clientSelected($event.option.value)\">\n              <mat-option *ngFor=\"let client of clientsData\" [value]=\"client\">\n                {{ client.displayName }}\n              </mat-option>\n            </mat-autocomplete>\n\n            <mat-form-field>\n              <mat-label>Relationship</mat-label>\n              <mat-select formControlName=\"clientRelationshipTypeId\">\n                <mat-option *ngFor=\"let relationType of relationTypes\" [value]=\"relationType.id\">\n                  {{ relationType.name }}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n\n            <ng-container *ngIf=\"accountOptions.length > 0\">\n\n              <mat-form-field>\n                <mat-label>Account</mat-label>\n                <mat-select formControlName=\"savingsId\">\n                  <mat-option *ngFor=\"let accountOption of accountOptions\" [value]=\"accountOption.id\">\n                    {{ accountOption.productName }} - {{ accountOption.accountNo }}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n\n              <mat-form-field>\n                <mat-label>Amount</mat-label>\n                <input type=\"number\" matInput required formControlName=\"amount\">\n              </mat-form-field>\n\n            </ng-container>\n\n          </ng-container>\n\n          <ng-container *ngIf=\"showClientDetailsForm\">\n\n            <mat-form-field>\n              <mat-label>Relationship</mat-label>\n              <mat-select formControlName=\"clientRelationshipTypeId\">\n                <mat-option *ngFor=\"let relationType of relationTypes\" [value]=\"relationType.id\">\n                  {{ relationType.name }}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>First Name</mat-label>\n              <input matInput required formControlName=\"firstname\">\n              <mat-error *ngIf=\"newGuarantorForm.controls.firstname.hasError('required')\">\n                First Name <strong>is required</strong>\n              </mat-error>\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Last Name</mat-label>\n              <input matInput required formControlName=\"lastname\">\n              <mat-error *ngIf=\"newGuarantorForm.controls.lastname.hasError('required')\">\n                Last Name <strong>is required</strong>\n              </mat-error>\n            </mat-form-field>\n\n            <mat-form-field (click)=\"dobDatePicker.open()\">\n              <mat-label>Date Of Birth</mat-label>\n              <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"dobDatePicker\" formControlName=\"dob\">\n              <mat-datepicker-toggle matSuffix [for]=\"dobDatePicker\"></mat-datepicker-toggle>\n              <mat-datepicker #dobDatePicker></mat-datepicker>\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Address Line 1</mat-label>\n              <input matInput formControlName=\"addressLine1\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Address Line 2</mat-label>\n              <input matInput formControlName=\"addressLine2\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>City</mat-label>\n              <input matInput formControlName=\"city\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Zip</mat-label>\n              <input matInput formControlName=\"zip\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Mobile</mat-label>\n              <input type=\"number\" matInput formControlName=\"mobileNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Residence Phone #</mat-label>\n              <input type=\"number\" matInput formControlName=\"housePhoneNumber\">\n            </mat-form-field>\n\n          </ng-container>\n\n        </div>\n\n        <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!newGuarantorForm.valid\"\n            *mifosxHasPermission=\"'CREATE_GUARANTOR'\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n    <ng-container *ngIf=\"!(newGuarantorForm.controls.name === undefined)\">\n      <div class=\"mat-table\">\n        <div class=\"mat-header-row\">\n          <div class=\"mat-header-cell\">Client Details</div>\n        </div>\n        <div class=\"mat-row\">\n          <div class=\"mat-cell\">Name</div>\n          <div class=\"mat-cell\">{{newGuarantorForm.controls.name.value.displayName}}</div>\n        </div>\n        <div class=\"mat-row\">\n          <div class=\"mat-cell\">Id</div>\n          <div class=\"mat-cell\">{{newGuarantorForm.controls.name.value.id}}</div>\n        </div>\n        <div class=\"mat-row\">\n          <div class=\"mat-cell\">Office</div>\n          <div class=\"mat-cell\">{{newGuarantorForm.controls.name.value.officeName}}</div>\n        </div>\n      </div>\n    </ng-container>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, Input, AfterViewInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { LoansService } from 'app/loans/loans.service';\nimport { ClientsService } from 'app/clients/clients.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Create Guarantor Action\n */\n@Component({\n  selector: 'mifosx-create-guarantor',\n  templateUrl: './create-guarantor.component.html',\n  styleUrls: ['./create-guarantor.component.scss']\n})\nexport class CreateGuarantorComponent implements OnInit, AfterViewInit {\n\n  @Input() dataObject: any;\n  /** New Guarantor Form */\n  newGuarantorForm: FormGroup;\n  /** Loan ID */\n  loanId: string;\n  /** Relation Types */\n  relationTypes: any;\n  /** Show Client Details Form */\n  showClientDetailsForm = false;\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Client data. */\n  clientsData: any = [];\n  /** Account Options */\n  accountOptions: any = [];\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {LoansService} loanService Loan Service.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private loanService: LoansService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private dateUtils: Dates,\n    private clientsService: ClientsService,\n    private settingsService: SettingsService) {\n    this.loanId = this.route.snapshot.params['loanId'];\n  }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createNewGuarantorForm();\n    this.setNewGuarantorDetailsForm();\n    this.buildDependencies();\n  }\n\n  /** Create Guarantor Details Form */\n  createNewGuarantorForm() {\n    this.newGuarantorForm = this.formBuilder.group({\n      'existingClient': [''],\n      'name': ['', Validators.required],\n      'clientRelationshipTypeId': [''],\n      'savingsId': [''],\n      'amount': ['']\n    });\n  }\n\n  /** Sets Guarantor Details Form */\n  setNewGuarantorDetailsForm() {\n    this.relationTypes = this.dataObject.allowedClientRelationshipTypes;\n    this.newGuarantorForm.patchValue({\n      existingClient: true\n    });\n  }\n\n  /**\n   * Add guarantor detail fields to the UI.\n   */\n  buildDependencies() {\n    this.newGuarantorForm.get('existingClient').valueChanges.subscribe(() => {\n      this.showClientDetailsForm = !this.showClientDetailsForm;\n      if (this.showClientDetailsForm) {\n        this.newGuarantorForm.addControl('firstname', new FormControl(''));\n        this.newGuarantorForm.addControl('lastname', new FormControl(''));\n        this.newGuarantorForm.addControl('dob', new FormControl(''));\n        this.newGuarantorForm.addControl('addressLine1', new FormControl(''));\n        this.newGuarantorForm.addControl('addressLine2', new FormControl(''));\n        this.newGuarantorForm.addControl('city', new FormControl(''));\n        this.newGuarantorForm.addControl('zip', new FormControl(''));\n        this.newGuarantorForm.addControl('mobileNumber', new FormControl(''));\n        this.newGuarantorForm.addControl('housePhoneNumber', new FormControl(''));\n        this.newGuarantorForm.removeControl('name');\n        this.newGuarantorForm.removeControl('savingsId');\n        this.newGuarantorForm.removeControl('amount');\n      } else {\n        this.newGuarantorForm.addControl('name', new FormControl(''));\n        this.newGuarantorForm.addControl('savingsId', new FormControl(''));\n        this.newGuarantorForm.addControl('amount', new FormControl(''));\n        this.newGuarantorForm.removeControl('firstname');\n        this.newGuarantorForm.removeControl('lastname');\n        this.newGuarantorForm.removeControl('dob');\n        this.newGuarantorForm.removeControl('addressLine1');\n        this.newGuarantorForm.removeControl('addressLine2');\n        this.newGuarantorForm.removeControl('city');\n        this.newGuarantorForm.removeControl('zip');\n        this.newGuarantorForm.removeControl('mobileNumber');\n        this.newGuarantorForm.removeControl('housePhoneNumber');\n      }\n    });\n  }\n\n  /**\n   * Subscribes to Clients search filter:\n   */\n  ngAfterViewInit() {\n    if (this.newGuarantorForm.value.existingClient) {\n      this.newGuarantorForm.get('name').valueChanges.subscribe((value: string) => {\n        if (value.length >= 2) {\n          this.clientsService.getFilteredClients('displayName', 'ASC', true, value)\n            .subscribe((data: any) => {\n              this.clientsData = data.pageItems;\n            });\n        }\n      });\n    }\n  }\n\n  clientSelected(clientDetails: any) {\n    this.accountOptions = [];\n    this.loanService.guarantorAccountResource(this.loanId, clientDetails.id).subscribe((response: any) => {\n      this.accountOptions = response.accountLinkingOptions;\n    });\n  }\n\n  /**\n   * Displays Client name in form control input.\n   * @param {any} client Client data.\n   * @returns {string} Client name if valid otherwise undefined.\n   */\n  displayClient(client: any): string | undefined {\n    return client ? client.displayName : undefined;\n  }\n\n  /** Submits the new guarantor details form */\n  submit() {\n    const newGuarantorFormData = this.newGuarantorForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n\n    const prevdob: Date = this.newGuarantorForm.value.dob;\n    const guarantorTypeId: number = this.newGuarantorForm.value.existingClient ? this.dataObject.guarantorTypeOptions[0].id : this.dataObject.guarantorTypeOptions[2].id;\n    const data = {\n      ...newGuarantorFormData,\n      locale,\n      dateFormat,\n      guarantorTypeId\n    };\n\n    if (this.newGuarantorForm.value.existingClient) {\n      data['entityId'] = this.newGuarantorForm.controls.name.value.id;\n    } else {\n      if (newGuarantorFormData.dob instanceof Date) {\n        data['dob'] = this.dateUtils.formatDate(prevdob, dateFormat);\n      }\n    }\n\n    delete data.existingClient;\n    delete data.name;\n\n    this.loanService.createNewGuarantor(this.loanId, data)\n      .subscribe((response: any) => {\n        this.router.navigate(['../../general'], { relativeTo: this.route });\n      });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"disbursementForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"disbursementDatePicker.open()\">\n            <mat-label>Disbursement On</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"disbursementDatePicker\" required\n              formControlName=\"actualDisbursementDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"disbursementDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #disbursementDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"disbursementForm.controls.actualDisbursementDate.hasError('required')\">\n              Disbursement Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Transaction amount</mat-label>\n            <input matInput type=\"number\" required formControlName=\"transactionAmount\">\n            <mat-error *ngIf=\"disbursementForm.controls.transactionAmount.hasError('required')\">\n              Transaction Amount is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field *ngIf=\"dataObject.fixedEmiAmount\">\n            <mat-label>Fixed EMI amount</mat-label>\n            <input matInput type=\"number\" formControlName=\"fixedEmiAmount\">\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n        <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!disbursementForm.valid\"\n            *mifosxHasPermission=\"'DISBURSETOSAVINGS_LOAN'\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\nimport { LoansService } from 'app/loans/loans.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n@Component({\n  selector: 'mifosx-disburse-to-savings-account',\n  templateUrl: './disburse-to-savings-account.component.html',\n  styleUrls: ['./disburse-to-savings-account.component.scss']\n})\nexport class DisburseToSavingsAccountComponent implements OnInit {\n\n  @Input() dataObject: any;\n\n  /** Minimum Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Date allowed. */\n  maxDate = new Date();\n  /** Disbursement Loan form. */\n  disbursementForm: FormGroup;\n\n  /**\n   * Get data from `Resolver`.\n   * @param {FormBuilder} formBuilder FormBuilder.\n   * @param {ActivatedRoute} route ActivatedRoute.\n   * @param {Router} router Router.\n   * @param {LoansService} loanService Loan Service.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private dateUtils: Dates,\n    private loanService: LoansService,\n    private settingsService: SettingsService) {\n  }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.setDisbursementToSavingsForm();\n  }\n\n  /**\n   * Set Disbursement Loan form.\n   */\n  setDisbursementToSavingsForm() {\n    this.disbursementForm = this.formBuilder.group({\n      'actualDisbursementDate': [new Date(), Validators.required],\n      'transactionAmount': [this.dataObject.amount, Validators.required],\n      'note': ['']\n    });\n    if (this.dataObject.fixedEmiAmount) {\n      this.disbursementForm.addControl('fixedEmiAmount', new FormControl(this.dataObject.fixedEmiAmount, [Validators.required]));\n    }\n  }\n\n  /**\n   * Submit Disburse Form.\n   */\n  submit() {\n    const disbursementLoanFormData = this.disbursementForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevActualDisbursementDate: Date = this.disbursementForm.value.actualDisbursementDate;\n    if (disbursementLoanFormData.actualDisbursementDate instanceof Date) {\n      disbursementLoanFormData.actualDisbursementDate = this.dateUtils.formatDate(prevActualDisbursementDate, dateFormat);\n    }\n    const data = {\n      ...disbursementLoanFormData,\n      dateFormat,\n      locale\n    };\n    const loanId = this.route.snapshot.params['loanId'];\n    this.loanService.loanActionButtons(loanId, 'disbursetosavings', data).subscribe((response: any) => {\n      this.router.navigate(['../../general'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"rejectLoanForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"rejectedDatePicker.open()\">\n            <mat-label>Rejected On</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"rejectedDatePicker\" required\n              formControlName=\"rejectedOnDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"rejectedDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #rejectedDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"rejectLoanForm.controls.rejectedOnDate.hasError('required')\">\n              Rejected Date <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n        <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!rejectLoanForm.valid\"\n            *mifosxHasPermission=\"'REJECT_LOAN'\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports. */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n/** Custom services. */\nimport { LoansService } from 'app/loans/loans.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Reject Loan component.\n */\n@Component({\n  selector: 'mifosx-reject-loan',\n  templateUrl: './reject-loan.component.html',\n  styleUrls: ['./reject-loan.component.scss']\n})\nexport class RejectLoanComponent implements OnInit {\n\n  /** Loan Id. */\n  loanId: any;\n  /** Reject Loan form. */\n  rejectLoanForm: FormGroup;\n  /** Minimum Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Date allowed. */\n  maxDate = new Date();\n\n  /**\n   * Retrieve data from `Resolver`.\n   * @param formBuilder Form Builder.\n   * @param router Router.\n   * @param route Activated Route.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private router: Router,\n              private route: ActivatedRoute,\n              private loanService: LoansService,\n              private dateUtils: Dates,\n              private settingsService: SettingsService ) {\n    this.loanId = this.route.snapshot.params['loanId'];\n  }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.setRejectLoanForm();\n  }\n\n  /**\n   * Set Reject Loan form.\n   */\n  setRejectLoanForm() {\n    this.rejectLoanForm = this.formBuilder.group({\n      'rejectedOnDate': [new Date(), Validators.required],\n      'note': ['']\n    });\n  }\n\n  /**\n   * Submit Reject Loan form.\n   */\n  submit() {\n    const rejectLoanFormData = this.rejectLoanForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevRejectedOnDate = this.rejectLoanForm.value.rejectedOnDate;\n    if (rejectLoanFormData.rejectedOnDate instanceof Date) {\n      rejectLoanFormData.rejectedOnDate = this.dateUtils.formatDate(prevRejectedOnDate, dateFormat);\n    }\n    const data = {\n      ...rejectLoanFormData,\n      dateFormat,\n      locale\n    };\n    this.loanService.loanActionButtons(this.loanId, 'reject', data).subscribe((response: any) => {\n      this.router.navigate(['../../general'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"disbursementLoanForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"actualDisbursementDatePicker.open()\">\n            <mat-label>Disbursed On</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"actualDisbursementDatePicker\" required\n              formControlName=\"actualDisbursementDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"actualDisbursementDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #actualDisbursementDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"disbursementLoanForm.controls.actualDisbursementDate.hasError('required')\">\n              Disbursed On Date<strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Transaction Amount</mat-label>\n            <input matInput required formControlName=\"transactionAmount\">\n            <mat-error *ngIf=\"disbursementLoanForm.controls.transactionAmount.hasError('required')\">\n              Transaction Amount <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>External Id</mat-label>\n            <input matInput formControlName=\"externalId\">\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Payment Type</mat-label>\n            <mat-select formControlName=\"paymentTypeId\">\n              <mat-option *ngFor=\"let paymentType of paymentTypes\" [value]=\"paymentType.id\">\n                {{ paymentType.name }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <div fxFlexFill>\n            <span fxFlex=\"75%\" class=\"expandcollapsebutton m-l-10 m-t-40\" (click)=\"addPaymentDetails()\">\n              <mat-slide-toggle>\n                <div [className]=\"showPaymentDetails ? 'enabled' : 'disabled'\">\n                  <span class=\"m-l-10\">Show Payment Details</span>\n                </div>\n              </mat-slide-toggle>\n            </span>\n          </div>\n\n          <ng-container *ngIf=\"showPaymentDetails\">\n            <mat-form-field>\n              <mat-label> Account #</mat-label>\n              <input matInput formControlName=\"accountNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Cheque #</mat-label>\n              <input matInput formControlName=\"checkNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Routing Code</mat-label>\n              <input matInput formControlName=\"routingCode\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Reciept #</mat-label>\n              <input matInput formControlName=\"receiptNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Bank #</mat-label>\n              <input matInput formControlName=\"bankNumber\">\n            </mat-form-field>\n          </ng-container>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n        <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!disbursementLoanForm.valid\"\n            *mifosxHasPermission=\"'DISBURSE_LOAN'\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { LoansService } from 'app/loans/loans.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Disburse Loan Option\n */\n@Component({\n  selector: 'mifosx-disburse',\n  templateUrl: './disburse.component.html',\n  styleUrls: ['./disburse.component.scss']\n})\nexport class DisburseComponent implements OnInit {\n\n  @Input() dataObject: any;\n  /** Loan Id */\n  loanId: string;\n  /** Payment Type Options */\n  paymentTypes: any;\n  /** Show payment details */\n  showPaymentDetails = false;\n  /** Minimum Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Date allowed. */\n  maxDate = new Date();\n  /** Disbursement Loan Form */\n  disbursementLoanForm: FormGroup;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {LoansService} loanService Loan Service.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private loanService: LoansService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private dateUtils: Dates,\n    private settingsService: SettingsService) {\n    this.loanId = this.route.snapshot.params['loanId'];\n  }\n\n\n  /**\n   * Creates the disbursement loan form\n   * and initialize with the required values\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createDisbursementLoanForm();\n    this.setDisbursementLoanDetails();\n  }\n\n  /**\n   * Creates the disbursement loan form.\n   */\n  createDisbursementLoanForm() {\n    this.disbursementLoanForm = this.formBuilder.group({\n      'actualDisbursementDate': [this.settingsService.businessDate, Validators.required],\n      'transactionAmount': ['', Validators.required],\n      'externalId': '',\n      'paymentTypeId': '',\n      'note': ''\n    });\n  }\n\n  setDisbursementLoanDetails() {\n    this.paymentTypes = this.dataObject.paymentTypeOptions;\n    this.disbursementLoanForm.patchValue({\n      transactionAmount: this.dataObject.amount,\n      // actualDisbursementDate: new Date(this.dataObject.date)\n    });\n  }\n\n  /**\n   * Add payment detail fields to the UI.\n   */\n  addPaymentDetails() {\n    this.showPaymentDetails = !this.showPaymentDetails;\n    if (this.showPaymentDetails) {\n      this.disbursementLoanForm.addControl('accountNumber', new FormControl(''));\n      this.disbursementLoanForm.addControl('checkNumber', new FormControl(''));\n      this.disbursementLoanForm.addControl('routingCode', new FormControl(''));\n      this.disbursementLoanForm.addControl('receiptNumber', new FormControl(''));\n      this.disbursementLoanForm.addControl('bankNumber', new FormControl(''));\n    } else {\n      this.disbursementLoanForm.removeControl('accountNumber');\n      this.disbursementLoanForm.removeControl('checkNumber');\n      this.disbursementLoanForm.removeControl('routingCode');\n      this.disbursementLoanForm.removeControl('receiptNumber');\n      this.disbursementLoanForm.removeControl('bankNumber');\n    }\n  }\n\n  /** Submits the disbursement form */\n  submit() {\n    const disbursementLoanFormData = this.disbursementLoanForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevActualDisbursementDate: Date = this.disbursementLoanForm.value.actualDisbursementDate;\n    if (disbursementLoanFormData.actualDisbursementDate instanceof Date) {\n      disbursementLoanFormData.actualDisbursementDate = this.dateUtils.formatDate(prevActualDisbursementDate, dateFormat);\n    }\n    const data = {\n      ...disbursementLoanFormData,\n      dateFormat,\n      locale\n    };\n    this.loanService.loanActionButtons(this.loanId, 'disburse', data )\n      .subscribe((response: any) => {\n        this.router.navigate(['../../general'], { relativeTo: this.route });\n      });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"withdrawnByClientLoanForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"withdrawnOnDatePicker.open()\">\n            <mat-label>Withdrawn On</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"withdrawnOnDatePicker\" required\n              formControlName=\"withdrawnOnDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"withdrawnOnDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #withdrawnOnDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"withdrawnByClientLoanForm.controls.withdrawnOnDate.hasError('required')\">\n              Withdrawn On Date <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n        <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../../general']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!withdrawnByClientLoanForm.valid\"\n            *mifosxHasPermission=\"'WITHDRAW_LOAN'\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { LoansService } from 'app/loans/loans.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Withdrawn By Applicant Loan Form\n */\n@Component({\n  selector: 'mifosx-withdrawn-by-client',\n  templateUrl: './withdrawn-by-client.component.html',\n  styleUrls: ['./withdrawn-by-client.component.scss']\n})\nexport class WithdrawnByClientComponent implements OnInit {\n\n  @Input() dataObject: any;\n  /** Loan Id */\n  loanId: string;\n  /** Minimum Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Date allowed. */\n  maxDate = new Date();\n  /** Withdrawn By Applicant Loan Form */\n  withdrawnByClientLoanForm: FormGroup;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {LoansService} loanService Loan Service.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private loanService: LoansService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private dateUtils: Dates,\n    private settingsService: SettingsService) {\n    this.loanId = this.route.snapshot.params['loanId'];\n  }\n\n  /**\n   * Creates the withdraw by Applicant loan form\n   * and initialize with the required values\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createWithdrawnByClientLoanForm();\n  }\n\n  /**\n   * Creates the create withdraw by applicant form.\n   */\n  createWithdrawnByClientLoanForm() {\n    this.withdrawnByClientLoanForm = this.formBuilder.group({\n      'withdrawnOnDate': [new Date(), Validators.required],\n      'note': ''\n    });\n  }\n\n  /** Submits the withdraw by appplicant form */\n  submit() {\n    const withdrawnByClientLoanFormData = this.withdrawnByClientLoanForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevTransactionDate: Date = this.withdrawnByClientLoanForm.value.withdrawnOnDate;\n    if (withdrawnByClientLoanFormData.withdrawnOnDate instanceof Date) {\n      withdrawnByClientLoanFormData.withdrawnOnDate = this.dateUtils.formatDate(prevTransactionDate, dateFormat);\n    }\n    const data = {\n      ...withdrawnByClientLoanFormData,\n      dateFormat,\n      locale\n    };\n    this.loanService.loanActionButtons(this.loanId, 'withdrawnByApplicant', data)\n      .subscribe((response: any) => {\n        this.router.navigate(['../../general'], { relativeTo: this.route });\n      });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"collateralForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field>\n            <mat-label>Collateral Type</mat-label>\n            <mat-select required formControlName=\"collateralTypeId\">\n              <mat-option *ngFor=\"let collateral of dataObject.allowedCollateralTypes\" [value]=\"collateral.id\">\n                {{ collateral.name }}</mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"collateralForm.controls.collateralTypeId.hasError('required')\">\n              Collateral type <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Value</mat-label>\n            <input matInput required formControlName=\"value\">\n            <mat-error *ngIf=\"collateralForm.controls.value.hasError('required')\">\n              Value is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Description</mat-label>\n            <textarea matInput formControlName=\"description\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n\n        </div>\n\n        <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!collateralForm.valid\"\n            *mifosxHasPermission=\"'CREATE_COLLATERAL'\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports. */\nimport { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services. */\nimport { LoansService } from 'app/loans/loans.service';\n\n/**\n * Add Collateral component.\n */\n@Component({\n  selector: 'mifosx-add-collateral',\n  templateUrl: './add-collateral.component.html',\n  styleUrls: ['./add-collateral.component.scss']\n})\nexport class AddCollateralComponent implements OnInit {\n\n  @Input() dataObject: any;\n\n  /** Collateral form. */\n  collateralForm: FormGroup;\n  /** Loan Id. */\n  loanId: string;\n\n  /**\n   * Retrieve data from `Resolver`.\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {Router} router Router.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {LoansService} LoansService loans service.\n   */\n  constructor(private formBuilder: FormBuilder,\n              private router: Router,\n              private route: ActivatedRoute,\n              private loanService: LoansService ) { }\n\n  ngOnInit() {\n    this.createAddCollateralForm();\n  }\n\n  /**\n   * Set Collateral form.\n   */\n  createAddCollateralForm() {\n    this.collateralForm = this.formBuilder.group({\n      'collateralTypeId': ['', Validators.required],\n      'value': ['', Validators.required],\n      'description': ['']\n    });\n  }\n\n  /**\n   * Submits collateral form.\n   */\n  submit() {\n    const collateralTypeId = this.collateralForm.value.collateralTypeId;\n    this.collateralForm.patchValue({\n      'collateralTypeId': collateralTypeId\n    });\n    const loanId = this.route.snapshot.params['loanId'];\n    const collateralForm = this.collateralForm.value;\n    collateralForm.locale = 'en';\n    this.loanService.createLoanCollateral(loanId, collateralForm).subscribe((response: any) => {\n      this.router.navigate(['../../general'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <mat-card-content>\n\n      <div fxLayout=\"column\">\n\n        <mat-form-field fxFlex>\n          <mat-label>Note</mat-label>\n          <textarea matInput required [formControl]=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n        </mat-form-field>\n\n      </div>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" (click)=\"submit()\"\n          *mifosxHasPermission=\"'DISBURSALUNDO_LOAN'\">Submit</button>\n      </mat-card-actions>\n\n    </mat-card-content>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, Input, OnInit } from '@angular/core';\nimport { FormControl, FormBuilder, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n/** Custom Services */\nimport { LoansService } from '../../../loans.service';\n\n/**\n * Undo Disbursal component.\n */\n@Component({\n  selector: 'mifosx-undo-disbursal',\n  templateUrl: './undo-disbursal.component.html',\n  styleUrls: ['./undo-disbursal.component.scss']\n})\nexport class UndoDisbursalComponent implements OnInit {\n\n  @Input() actionName: string;\n\n  /** Loan ID. */\n  loanId: any;\n  /** Undo disbursal form. */\n  note: FormControl;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {LoansService} loansService Loans Service.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   */\n  constructor(private formBuilder: FormBuilder,\n              private loansService: LoansService,\n              private router: Router,\n              private route: ActivatedRoute) {\n    this.loanId = this.route.snapshot.params['loanId'];\n  }\n\n  /**\n   * Creates the undo disbursal form.\n   */\n  ngOnInit() {\n    this.note = this.formBuilder.control('', Validators.required);\n  }\n\n  /**\n   * Submits the undo disbursal form.\n   */\n  submit() {\n    let command = 'undodisbursal';\n    if (this.actionName === 'Undo Last Disbursal') {\n      command = 'undolastdisbursal';\n    }\n    this.loansService.loanActionButtons(this.loanId, command, {'note': this.note.value}).subscribe((response: any) => {\n      this.router.navigate(['../../general'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container m-b-20\">\n\n  <mat-card>\n\n    <form [formGroup]=\"loanScreenReportForm\" (ngSubmit)=\"generate()\">\n\n      <mat-card-content>\n\n        <div>\n\n          <mat-form-field fxFlex>\n            <mat-label>Loan Screen Reports</mat-label>\n            <mat-select formControlName=\"templateId\">\n              <mat-option *ngFor=\"let template of templatesData\" [value]=\"template.id\">\n                {{ template.name }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"loanScreenReportForm.controls.templateId.hasError('required')\">\n              Screen Report is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n        </div>\n\n        <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!loanScreenReportForm.valid\">\n            <fa-icon icon=\"cogs\" size=\"sm\" class=\"m-r-10\"></fa-icon>Generate Report\n          </button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n\n<div #output class=\"container\">\n\n  <mat-card fxLayout=\"column\" fxLayoutGap=\"3%\">\n\n    <div fxLayoutAlign=\"end\">\n      <button mat-stroked-button color=\"primary\" [disabled]=\"!template\" (click)=\"print()\">\n        <fa-icon icon=\"file\" class=\"m-r-10\"></fa-icon>\n        Print\n      </button>\n    </div>\n\n    <div #screenReport class=\"screen-report\">\n      <p>Please select a screen report.</p>\n    </div>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, Renderer2, ViewChild, ElementRef, SecurityContext, Input } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { LoansService } from 'app/loans/loans.service';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * Loans Screen Reports Component.\n */\n@Component({\n  selector: 'mifosx-loan-screen-reports',\n  templateUrl: './loan-screen-reports.component.html',\n  styleUrls: ['./loan-screen-reports.component.scss']\n})\nexport class LoanScreenReportsComponent implements OnInit {\n\n  @Input() dataObject: any;\n  /** Loan Screen Reportform. */\n  loanScreenReportForm: FormGroup;\n  /** Templates Data */\n  templatesData: any;\n  /** Loan Id */\n  loanId: any;\n  /** HTML Template */\n  template: any;\n\n  /** Screen report output reference */\n  @ViewChild('screenReport', { static: true }) screenReportRef: ElementRef;\n\n  /**\n   * Fetches Loan Action Data from `resolve`\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {LoansService} loansService Loans Service\n   * @param {ActivatedRoute} route Activated Route\n   * @param {DomSanitizer} sanitizer DOM Sanitizer\n   * @param {Renderer2} renderer Renderer 2\n   */\n  constructor(private formBuilder: FormBuilder,\n    private loansService: LoansService,\n    private route: ActivatedRoute,\n    private sanitizer: DomSanitizer,\n    private renderer: Renderer2) {\n    this.loanId = this.route.snapshot.params['loanId'];\n  }\n\n  /**\n   * Creates the loan screen report form.\n   */\n  ngOnInit() {\n    this.templatesData = this.dataObject;\n    this.createLoanScreenReportForm();\n  }\n\n  /**\n   * Creates the loan screen report form.\n   */\n  createLoanScreenReportForm() {\n    this.loanScreenReportForm = this.formBuilder.group({\n      'templateId': ['']\n    });\n  }\n\n  /**\n   * Prints loan screen report\n   */\n  print() {\n    const templateWindow = window.open('', 'Screen Report', 'height=400,width=600');\n    templateWindow.document.write('<html><head>');\n    templateWindow.document.write('</head><body>');\n    templateWindow.document.write(this.template);\n    templateWindow.document.write('</body></html>');\n    templateWindow.print();\n    templateWindow.close();\n  }\n\n  /**\n   * Submits the form and generates screen report for the loan.\n   */\n  generate() {\n    const templateId = this.loanScreenReportForm.get('templateId').value;\n    this.loansService.getTemplateData(templateId, this.loanId).subscribe((response: any) => {\n      this.template = this.sanitizer.sanitize(SecurityContext.HTML, response);\n      this.renderer.setProperty(this.screenReportRef.nativeElement, 'innerHTML', this.template);\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"approveLoanForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"approvedDatePicker.open()\">\n            <mat-label>Approved On</mat-label>\n            <input matInput [min]=\"minDate\" [matDatepicker]=\"approvedDatePicker\" required\n              formControlName=\"approvedOnDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"approvedDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #approvedDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"approveLoanForm.controls.approvedOnDate.hasError('required')\">\n              Approved Date <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field (click)=\"disbursementDatePicker.open()\">\n            <mat-label>Expected disbursement on</mat-label>\n            <input matInput [min]=\"minDate\" [matDatepicker]=\"disbursementDatePicker\"\n              formControlName=\"expectedDisbursementDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"disbursementDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #disbursementDatePicker></mat-datepicker>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Approved Amount</mat-label>\n            <input matInput type=\"number\" formControlName=\"approvedLoanAmount\">\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Transaction Amount</mat-label>\n            <input matInput type=\"number\" required formControlName=\"approvedLoanAmount\">\n            <mat-error *ngIf=\"approveLoanForm.controls.approvedLoanAmount.hasError('required')\">\n              Transaction Amount is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n        <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!approveLoanForm.valid\"\n            *mifosxHasPermission=\"'APPROVE_LOAN'\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports. */\nimport { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\n\n/** Custom Services. */\nimport { LoansService } from 'app/loans/loans.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Approve Loan component.\n */\n@Component({\n  selector: 'mifosx-approve-loan',\n  templateUrl: './approve-loan.component.html',\n  styleUrls: ['./approve-loan.component.scss']\n})\nexport class ApproveLoanComponent implements OnInit {\n\n  /** Approve Loan form. */\n  approveLoanForm: FormGroup;\n  /** Loan data. */\n  loanData: any = new Object();\n  /** Association Data */\n  associationData: any;\n  /** Minimum Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Loan Id */\n  loanId: any;\n\n  /**\n   * Retrieve data from `Resolver`.\n   * @param formBuilder Form Builder.\n   * @param route Activated Route.\n   * @param dateUtils Date Utils.\n   * @param loanService Loan Service.\n   * @param router Router.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private dateUtils: Dates,\n    private loanService: LoansService,\n    private router: Router,\n    private settingsService: SettingsService) {\n    this.route.data.subscribe((data: { actionButtonData: any }) => {\n      this.loanData = data.actionButtonData;\n    });\n    this.loanId = this.route.snapshot.params['loanId'];\n  }\n\n  ngOnInit() {\n    this.setApproveLoanForm();\n    this.loanService.getApproveAssociationsDetails(this.loanId).subscribe((response: any) => {\n      this.associationData = response;\n      this.approveLoanForm.patchValue({\n        'expectedDisbursementDate': new Date(response.timeline.expectedDisbursementDate)\n      });\n    });\n  }\n\n  /**\n   * Set Approve Loan form.\n   */\n  setApproveLoanForm() {\n    this.approveLoanForm = this.formBuilder.group({\n      'approvedOnDate': [this.loanData.approvalDate && new Date(this.loanData.approvalDate), Validators.required],\n      'expectedDisbursementDate': [''],\n      'approvedLoanAmount': [this.loanData.approvalAmount, Validators.required],\n      'note': ['']\n    });\n  }\n\n  /**\n   * Submits Approve form.\n   */\n  submit() {\n    const approveLoanFormData = this.approveLoanForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const approvedOnDate = this.approveLoanForm.value.approvedOnDate;\n    const expectedDisbursementDate = this.approveLoanForm.value.expectedDisbursementDate;\n    if (approveLoanFormData.approvedOnDate instanceof Date) {\n      approveLoanFormData.approvedOnDate = this.dateUtils.formatDate(approvedOnDate, dateFormat);\n    }\n    if (approveLoanFormData.expectedDisbursementDate instanceof Date) {\n      approveLoanFormData.expectedDisbursementDate = this.dateUtils.formatDate(expectedDisbursementDate, dateFormat);\n    }\n    const data = {\n      ...approveLoanFormData,\n      dateFormat,\n      locale\n    };\n    this.loanService.loanActionButtons(this.loanId, 'approve', data).subscribe((response: any) => {\n      this.router.navigate(['../../general'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"loanChargeForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n          <mat-form-field>\n            <mat-label>Charge</mat-label>\n            <mat-select required formControlName=\"chargeId\">\n              <mat-option *ngFor=\"let loanCharge of loanChargeOptions\" [value]=\"loanCharge.id\">\n                {{ loanCharge.name + ' (' + loanCharge?.currency.name + ')' }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"loanChargeForm.controls.chargeId.hasError('required')\">\n              Charge is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Amount</mat-label>\n            <input type=\"number\" required matInput formControlName=\"amount\" />\n            <mat-error *ngIf=\"loanChargeForm.controls.amount.hasError('required')\">\n              Amount is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Charge Calculation</mat-label>\n            <input matInput formControlName=\"chargeCalculation\" />\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Charge Time</mat-label>\n            <input matInput formControlName=\"chargeTime\" />\n          </mat-form-field>\n\n          <mat-form-field *ngIf=\"loanChargeForm.controls['dueDate']\" (click)=\"dueDatePicker.open()\">\n            <mat-label>Due On</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"dueDatePicker\" required\n              formControlName=\"dueDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"dueDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #dueDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"loanChargeForm.controls.dueDate.hasError('required')\">\n              Due Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n        </div>\n\n        <mat-card-actions fxLayoutGap=\"5px\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!loanChargeForm.valid\"\n            *mifosxHasPermission=\"'CREATE_LOANCHARGE'\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n/** Custom Services */\nimport { LoansService } from '../../../loans.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Create Add Loan Charge component.\n */\n@Component({\n  selector: 'mifosx-add-loan-charge',\n  templateUrl: './add-loan-charge.component.html',\n  styleUrls: ['./add-loan-charge.component.scss']\n})\nexport class AddLoanChargeComponent implements OnInit {\n\n  /** Minimum Due Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Due Date allowed. */\n  maxDate = new Date();\n  /** Add Loan Charge form. */\n  loanChargeForm: FormGroup;\n  /** loan charge options. */\n  loanChargeOptions: {\n    id: number;\n    name: string;\n    amount: number;\n    currency: {\n      name: string;\n    };\n    chargeCalculationType: {\n      value: any;\n    };\n    chargeTimeType: {\n      id: number;\n      value: any;\n    };\n  }[];\n  /** loan Id of the loan account. */\n  loanId: string;\n\n  /**\n   * Retrieves the loan charge template data from `resolve`.\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {AccountingService} accountingService Accounting Service.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private route: ActivatedRoute,\n              private router: Router,\n              private dateUtils: Dates,\n              private loansService: LoansService,\n              private settingsService: SettingsService) {\n    this.route.data.subscribe((data: { actionButtonData: any }) => {\n      this.loanChargeOptions = data.actionButtonData.chargeOptions;\n    });\n    this.loanId = this.route.snapshot.params['loanId'];\n  }\n\n  /**\n   * Creates the Loan Charge form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.maxFutureDate;\n    this.createLoanChargeForm();\n    this.loanChargeForm.controls.chargeId.valueChanges.subscribe(chargeId => {\n      const chargeDetails = this.loanChargeOptions.find(option => {\n        return option.id === chargeId;\n      });\n      if (chargeDetails.chargeTimeType.id === 2) {\n        this.loanChargeForm.addControl('dueDate', new FormControl('', Validators.required));\n      } else {\n        this.loanChargeForm.removeControl('dueDate');\n      }\n      this.loanChargeForm.patchValue({\n        'amount': chargeDetails.amount,\n        'chargeCalculation': chargeDetails.chargeCalculationType.value,\n        'chargeTime': chargeDetails.chargeTimeType.value\n      });\n    });\n  }\n\n  /**\n   * Creates the Loan Charge form.\n   */\n  createLoanChargeForm() {\n    this.loanChargeForm = this.formBuilder.group({\n      'chargeId': ['', Validators.required],\n      'amount': ['', Validators.required],\n      'chargeCalculation': [{ value: '', disabled: true }],\n      'chargeTime': [{ value: '', disabled: true }]\n    });\n  }\n\n  submit() {\n    const loanChargeFormData = this.loanChargeForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevDueDate: Date = this.loanChargeForm.value.dueDate;\n    if (loanChargeFormData.dueDate instanceof Date) {\n      loanChargeFormData.dueDate = this.dateUtils.formatDate(prevDueDate, dateFormat);\n    }\n    const data = {\n      ...loanChargeFormData,\n      dateFormat,\n      locale\n    };\n    this.loansService.createLoanCharge(this.loanId, 'charges', data).subscribe(res => {\n      this.router.navigate(['../../general'], { relativeTo: this.route });\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\nimport { LoansService } from 'app/loans/loans.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { ConfirmationDialogComponent } from 'app/shared/confirmation-dialog/confirmation-dialog.component';\nimport { FormDialogComponent } from 'app/shared/form-dialog/form-dialog.component';\nimport { FormfieldBase } from 'app/shared/form-dialog/formfield/model/formfield-base';\nimport { InputBase } from 'app/shared/form-dialog/formfield/model/input-base';\nimport { SelectBase } from 'app/shared/form-dialog/formfield/model/select-base';\n\n@Component({\n  selector: 'mifosx-edit-repayment-schedule',\n  templateUrl: './edit-repayment-schedule.component.html',\n  styleUrls: ['./edit-repayment-schedule.component.scss']\n})\nexport class EditRepaymentScheduleComponent implements OnInit {\n\n  /** Loan ID. */\n  loanId: string;\n  /** Indicates If the Schedule has been changed */\n  wasChanged = false;\n  /** Indicates If the Schedule has been validated */\n  wasValidated = false;\n  /** Stores the Repayment Schedule data */\n  repaymentScheduleDetails: any[] = [];\n  /** Stores the Installments changed */\n  repaymentScheduleChanges: any = {};\n\n  /**\n   * @param {LoansService} systemService Loan Service.\n   * @param {Router} router Router for navigation.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {MatDialog} dialog Confirmation Dialogs.\n   * @param {Dates} dateUtils Dates Utils.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private loansService: LoansService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private dialog: MatDialog,\n    private dateUtils: Dates,\n    private settingsService: SettingsService) {\n    this.loanId = this.route.snapshot.params['loanId'];\n    this.getRepaymentSchedule();\n  }\n\n  ngOnInit(): void {\n    this.repaymentScheduleChanges = {};\n  }\n\n  getRepaymentSchedule(): void {\n    this.loansService.getLoanAccountResource(this.loanId, 'repaymentSchedule').subscribe((response: any) => {\n      this.repaymentScheduleDetails = response.repaymentSchedule;\n    });\n  }\n\n  applyPattern(): void {\n    const periods: any = [];\n    this.repaymentScheduleDetails['periods'].forEach((period: any) => {\n      if (period.period) {\n        periods.push({idx: period.period, dueDate: this.dateUtils.formatDate(period.dueDate, this.settingsService.dateFormat) });\n      }\n    });\n    const formfields: FormfieldBase[] = [\n      new SelectBase({\n        controlName: 'fromPeriod',\n        label: 'From Date',\n        value: '',\n        options: { label: 'dueDate', value: 'idx', data: periods },\n        required: true\n      }),\n      new SelectBase({\n        controlName: 'toPeriod',\n        label: 'To Date',\n        value: '',\n        options: { label: 'dueDate', value: 'idx', data: periods },\n        required: true\n      }),\n      new InputBase({\n        controlName: 'amount',\n        label: 'Installment Amount',\n        value: '',\n        type: 'number',\n        required: true\n      }),\n    ];\n    const data = {\n      title: 'Pattern Update',\n      formfields: formfields\n    };\n    const addDialogRef = this.dialog.open(FormDialogComponent, { data });\n    addDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const fromPeriod = response.data.value.fromPeriod;\n        const toPeriod = response.data.value.toPeriod;\n        const amount = response.data.value.amount;\n        const periodsVariation: any = [];\n        this.repaymentScheduleDetails['periods'].forEach((period: any) => {\n          const dueDate = this.dateUtils.formatDate(period.dueDate, this.settingsService.dateFormat);\n          if (period.period && fromPeriod <= period.period && toPeriod >= period.period) {\n            if (period.totalDueForPeriod !== amount) {\n              period.totalDueForPeriod = amount;\n              this.repaymentScheduleChanges[dueDate] = {dueDate: dueDate, installmentAmount: amount};\n              this.wasChanged = true;\n              period['changed'] = true;\n            }\n          }\n          periodsVariation.push(period);\n        });\n        this.repaymentScheduleDetails['periods'] = periodsVariation;\n      }\n    });\n  }\n\n  reset(): void {\n    const recoverScheduleDialogRef = this.dialog.open(ConfirmationDialogComponent, {\n      data: { heading: 'Recover Original Schedule', dialogContext: 'Are you sure you want recover the Original Schedule'}\n    });\n    recoverScheduleDialogRef.afterClosed().subscribe((responseConfirmation: any) => {\n      if (responseConfirmation.confirm) {\n        this.loansService.applyCommandLoanScheduleVariations(this.loanId, 'deleteVariations', {}).subscribe((response: any) => {\n          this.getRepaymentSchedule();\n          this.wasChanged = false;\n          this.wasValidated = false;\n        });\n      }\n    });\n  }\n\n  validate(): void {\n    this.loansService.applyCommandLoanScheduleVariations(this.loanId, 'calculateLoanSchedule', this.getPayload()).subscribe((response: any) => {\n      this.repaymentScheduleDetails['periods'] = [];\n      response['periods'].forEach((period: any) => {\n        period['changed'] = true;\n        this.repaymentScheduleDetails['periods'].push(period);\n        this.wasValidated = true;\n      });\n    });\n  }\n\n  submit(): void {\n    this.loansService.applyCommandLoanScheduleVariations(this.loanId, 'addVariations', this.getPayload()).subscribe((response: any) => {\n      this.router.navigate(['../../repayment-schedule'], { relativeTo: this.route });\n    });\n  }\n\n  private getPayload(): any {\n    const modifiedinstallments: any = [];\n    Object.keys(this.repaymentScheduleChanges).forEach((key: string) => {\n      modifiedinstallments.push(this.repaymentScheduleChanges[key]);\n    });\n    const dateFormat = this.settingsService.dateFormat;\n    const locale = this.settingsService.language.code;\n    return {\n      exceptions: {\n        modifiedinstallments\n      },\n      dateFormat,\n      locale\n    };\n  }\n\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n    <mat-card-content>\n\n      <div fxLayout=\"column\">\n        <mifosx-repayment-schedule-tab fxFlex=\"100%\"\n          [repaymentScheduleDetails]=\"repaymentScheduleDetails\"\n          [forEditing]=\"true\">\n        </mifosx-repayment-schedule-tab>\n      </div>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\n        <button type=\"button\" (click)=\"reset()\">Reset</button>\n        <button type=\"button\" color=\"primary\" mat-raised-button (click)=\"applyPattern()\">Pattern</button>\n        <button type=\"button\" color=\"primary\" mat-raised-button [disabled]=\"!wasChanged\" (click)=\"validate()\">Validate</button>\n        <button type=\"button\" color=\"primary\" mat-raised-button [disabled]=\"!wasValidated\" (click)=\"submit()\">Submit</button>\n      </mat-card-actions>\n\n    </mat-card-content>\n\n  </mat-card>\n\n</div>\n","<mifosx-loans-account-close [dataObject]=\"actionButtonData\" *ngIf=\"actions['Close']\"></mifosx-loans-account-close>\n<mifosx-undo-approval *ngIf=\"actions['Undo Approval']\"></mifosx-undo-approval>\n<mifosx-assign-loan-officer *ngIf=\"actions['Assign Loan Officer']\" [dataObject]=\"actionButtonData\" ></mifosx-assign-loan-officer>\n<mifosx-foreclosure [dataObject]=\"actionButtonData\" *ngIf=\"actions['Foreclosure']\"></mifosx-foreclosure>\n<mifosx-prepay-loan [dataObject]=\"actionButtonData\" *ngIf=\"actions['Prepay Loan']\"></mifosx-prepay-loan>\n<mifosx-make-repayment [dataObject]=\"actionButtonData\" *ngIf=\"actions['Make Repayment']\"></mifosx-make-repayment>\n<mifosx-make-repayment [dataObject]=\"actionButtonData\" *ngIf=\"actions['Goodwill Credit']\"></mifosx-make-repayment>\n<mifosx-make-repayment [dataObject]=\"actionButtonData\" *ngIf=\"actions['Payout Refund']\"></mifosx-make-repayment>\n<mifosx-make-repayment [dataObject]=\"actionButtonData\" *ngIf=\"actions['Merchant Issued Refund']\"></mifosx-make-repayment>\n<mifosx-loan-credit-balance-refund [dataObject]=\"actionButtonData\" *ngIf=\"actions['Credit Balance Refund']\"></mifosx-loan-credit-balance-refund>\n<mifosx-waive-interest [dataObject]=\"actionButtonData\" *ngIf=\"actions['Waive Interest']\"></mifosx-waive-interest>\n<mifosx-write-off-page [dataObject]=\"actionButtonData\" *ngIf=\"actions['Write Off']\"></mifosx-write-off-page>\n<mifosx-close-as-rescheduled [dataObject]=\"actionButtonData\" *ngIf=\"actions['Close (as Rescheduled)']\"></mifosx-close-as-rescheduled>\n<mifosx-loan-reschedule [dataObject]=\"actionButtonData\" *ngIf=\"actions['Reschedule']\"></mifosx-loan-reschedule>\n<mifosx-recovery-repayment [dataObject]=\"actionButtonData\" *ngIf=\"actions['Recovery Payment']\"></mifosx-recovery-repayment>\n<mifosx-view-guarantors [dataObject]=\"actionButtonData\" *ngIf=\"actions['View Guarantors']\"></mifosx-view-guarantors>\n<mifosx-create-guarantor [dataObject]=\"actionButtonData\" *ngIf=\"actions['Create Guarantor']\"></mifosx-create-guarantor>\n<mifosx-disburse-to-savings-account [dataObject]=\"actionButtonData\" *ngIf=\"actions['Disburse to Savings']\"></mifosx-disburse-to-savings-account>\n<mifosx-reject-loan *ngIf=\"actions['Reject']\"></mifosx-reject-loan>\n<mifosx-disburse [dataObject]=\"actionButtonData\" *ngIf=\"actions['Disburse']\"></mifosx-disburse>\n<mifosx-withdrawn-by-client *ngIf=\"actions['Withdrawn by Client']\"></mifosx-withdrawn-by-client>\n<mifosx-add-collateral [dataObject]=\"actionButtonData\" *ngIf=\"actions['Add Collateral']\"></mifosx-add-collateral>\n<mifosx-undo-disbursal *ngIf=\"actions['Undo Disbursal'] || actions['Undo Last Disbursal']\" [actionName]=\"actionName\"></mifosx-undo-disbursal>\n<mifosx-loan-screen-reports [dataObject]=\"actionButtonData\" *ngIf=\"actions['Loan Screen Reports']\"></mifosx-loan-screen-reports>\n<mifosx-approve-loan *ngIf=\"actions['Approve']\" ></mifosx-approve-loan>\n<mifosx-add-loan-charge *ngIf=\"actions['Add Loan Charge']\"></mifosx-add-loan-charge>\n<mifosx-edit-repayment-schedule *ngIf=\"actions['Edit Repayment Schedule']\"></mifosx-edit-repayment-schedule>\n","/** Angular Imports. */\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n/**\n * Loan Account Actions component.\n */\n@Component({\n  selector: 'mifosx-loan-account-actions',\n  templateUrl: './loan-account-actions.component.html',\n  styleUrls: ['./loan-account-actions.component.scss']\n})\nexport class LoanAccountActionsComponent {\n\n  /** flag object to store possible actions and render appropriate UI to the user */\n  actions: { 'Close': boolean,\n            'Undo Approval': boolean,\n            'Write Off': boolean,\n            'Add Collateral': boolean,\n            'Assign Loan Officer': boolean,\n            'Foreclosure': boolean,\n            'Prepay Loan': boolean,\n            'Reject': boolean,\n            'Disburse to Savings': boolean,\n            'Make Repayment': boolean,\n            'Waive Interest': boolean,\n            'Close (as Rescheduled)': boolean,\n            'Reschedule': boolean,\n            'Recovery Payment': boolean,\n            'View Guarantors': boolean,\n            'Create Guarantor': boolean,\n            'Disburse': boolean,\n            'Withdrawn by Client': boolean,\n            'Undo Disbursal': boolean,\n            'Undo Last Disbursal': boolean,\n            'Loan Screen Reports': boolean,\n            'Approve': boolean,\n            'Add Loan Charge': boolean,\n            'Goodwill Credit': boolean,\n            'Merchant Issued Refund': boolean,\n            'Payout Refund': boolean,\n            'Credit Balance Refund': boolean,\n            'Edit Repayment Schedule': boolean\n         } = {\n              'Close': false,\n              'Undo Approval': false,\n              'Write Off':  false,\n              'Add Collateral':  false,\n              'Assign Loan Officer':  false,\n              'Foreclosure':  false,\n              'Prepay Loan':  false,\n              'Reject':  false,\n              'Disburse to Savings':  false,\n              'Make Repayment':  false,\n              'Waive Interest':  false,\n              'Close (as Rescheduled)':  false,\n              'Reschedule':  false,\n              'Recovery Payment':  false,\n              'View Guarantors':  false,\n              'Create Guarantor':  false,\n              'Disburse':  false,\n              'Withdrawn by Client':  false,\n              'Undo Disbursal':  false,\n              'Undo Last Disbursal':  false,\n              'Loan Screen Reports':  false,\n              'Approve':  false,\n              'Add Loan Charge':  false,\n              'Goodwill Credit': false,\n              'Merchant Issued Refund': false,\n              'Payout Refund': false,\n              'Credit Balance Refund': false,\n              'Edit Repayment Schedule': false\n          };\n\n  actionButtonData: any;\n  actionName: any;\n\n  /**\n   * @param route Activated Route.\n   */\n  constructor(private route: ActivatedRoute) {\n      this.route.data.subscribe(( data: { actionButtonData: any }) => {\n        this.actionButtonData = data.actionButtonData;\n      });\n\n    this.route.params.subscribe(params => {\n      this.actionName = params['action'];\n      if (this.actionName === 'Change Loan Officer') {\n        this.actionName = 'Assign Loan Officer';\n      }\n      for (const key of Object.keys(this.actions)) {\n        this.actions[key] = false;\n      }\n      this.actions[this.actionName] = true;\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <table mat-table [dataSource]=\"interestRateData\">\n\n    <ng-container matColumnDef=\"fromDate\">\n      <th mat-header-cell *matHeaderCellDef> From Date </th>\n      <td mat-cell *matCellDef=\"let ele\"> {{ ele.fromDate  | dateFormat}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"interestRate\">\n      <th mat-header-cell *matHeaderCellDef> Interest Rate </th>\n      <td mat-cell *matCellDef=\"let ele\"> {{ ele.effectiveInterestRate }} </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'mifosx-floating-interest-rates',\n  templateUrl: './floating-interest-rates.component.html',\n  styleUrls: ['./floating-interest-rates.component.scss']\n})\nexport class FloatingInterestRatesComponent implements OnInit {\n\n  /** Loan Details */\n  loanDetails: any;\n  /** Interest Rate Data */\n  interestRateData: any;\n  /** Columns to be displayed in charges table. */\n  displayedColumns: string[] = ['fromDate', 'interestRate'];\n\n  /**\n   * Retrieves the loans data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute) {\n    this.route.parent.data.subscribe(( data: { loanDetailsData: any }) => {\n      this.loanDetails = data.loanDetailsData;\n    });\n  }\n\n  ngOnInit() {\n    this.interestRateData = this.loanDetails.interestRatesPeriods;\n  }\n\n}\n","<div class=\"container\">\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Maximum allowed outstanding balance:</span>\n    <span fxFlex=\"60%\">{{ loanDetails.maxOutstandingLoanBalance | formatNumber }}</span>\n  </div>\n\n  <h3>Loan Tranche Details</h3>\n\n  <div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"flex-end\" fxLayoutGap=\"2%\">\n    <button mat-raised-button color=\"primary\" *ngIf=\"showAddTrancheButtons()\"\n      (click)=\"addDisbursementDataEntry()\">\n      <fa-icon icon=\"plus\" class=\"m-r-10\"></fa-icon>Add\n    </button>\n    <button mat-raised-button color=\"primary\" *ngIf=\"!pristine\"\n      (click)=\"editDisbursementData()\">\n      Apply Changes\n    </button>\n  </div>\n\n  <table mat-table [dataSource]=\"disbursementDataSource\" *ngIf=\"disbursementDataSource.length > 0\">\n\n    <ng-container matColumnDef=\"expected disbursement on\">\n      <th mat-header-cell *matHeaderCellDef> Expected Disbursement On </th>\n      <td mat-cell *matCellDef=\"let ele\"> {{ ele.expectedDisbursementDate | dateFormat}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"disbursed on\">\n      <th mat-header-cell *matHeaderCellDef> Disbursed On </th>\n      <td mat-cell *matCellDef=\"let ele\">\n        <span *ngIf=\"ele.actualDisbursementDate\">\n          {{ ele.actualDisbursementDate | dateFormat }}\n        </span>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"principal\">\n      <th mat-header-cell *matHeaderCellDef> Principal </th>\n      <td mat-cell *matCellDef=\"let ele\"> {{ ele.principal }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"action\">\n      <th mat-header-cell *matHeaderCellDef> Actions </th>\n      <td mat-cell *matCellDef=\"let ele; let rowIndex = index\">\n        <span *ngIf=\"ele.actualDisbursementDate\">\n          <i class=\"fa fa-check \"></i>\n        </span>\n        <button type=\"button\" mat-icon-button color=\"primary\"\n          (click)=\"editDisbursementDataEntry(rowIndex)\" matTooltip=\"Edit\"\n          matTooltipPosition=\"left\" *ngIf=\"!ele.actualDisbursementDate && showActionsTrancheButtons()\">\n          <fa-icon icon=\"edit\"></fa-icon>\n        </button>\n        <button type=\"button\" mat-icon-button color=\"warn\"\n          (click)=\"removeDisbursementDataEntry(rowIndex)\" matTooltip=\"Delete\"\n          matTooltipPosition=\"left\" *ngIf=\"!ele.actualDisbursementDate && showActionsTrancheButtons()\">\n          <fa-icon icon=\"trash\"></fa-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"expectedDisbursementColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: expectedDisbursementColumns;\"></tr>\n  </table>\n\n  <div *ngIf=\"loanDetails.emiAmountVariations.length > 0\">\n\n    <h3>Installment Amount Variations: </h3>\n\n    <table mat-table [dataSource]=\"loanDetails.emiAmountVariations\">\n\n      <ng-container matColumnDef=\"emi amount variation from\">\n        <th mat-header-cell *matHeaderCellDef> Applicable From Date </th>\n        <td mat-cell *matCellDef=\"let ele\"> {{ ele.termVariationApplicableFrom | dateFormat}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"fixed emi amount\">\n        <th mat-header-cell *matHeaderCellDef> Installment Amount </th>\n        <td mat-cell *matCellDef=\"let ele\"> {{ ele.termValue }} </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"emivariationColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: emivariationColumns;\"></tr>\n    </table>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\nimport { LoansService } from 'app/loans/loans.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\nimport { FormDialogComponent } from 'app/shared/form-dialog/form-dialog.component';\nimport { DatepickerBase } from 'app/shared/form-dialog/formfield/model/datepicker-base';\nimport { FormfieldBase } from 'app/shared/form-dialog/formfield/model/formfield-base';\nimport { InputBase } from 'app/shared/form-dialog/formfield/model/input-base';\n\n@Component({\n  selector: 'mifosx-loan-tranche-details',\n  templateUrl: './loan-tranche-details.component.html',\n  styleUrls: ['./loan-tranche-details.component.scss'],\n})\nexport class LoanTrancheDetailsComponent implements OnInit {\n  loanDetails: any;\n  return: any;\n  status: any;\n  count: number;\n  expectedDisbursementColumns: string[] = ['expected disbursement on', 'disbursed on', 'principal', 'action'];\n  emivariationColumns: string[] = ['emi amount variation from', 'fixed emi amount'];\n\n  loanId: number;\n  currentPrincipalAmount: number;\n  minDate = new Date(2000, 0, 1);\n  maxDate = new Date(2100, 0, 1);\n  disbursementDataSource: {}[] = [];\n  totalMultiDisbursed: number = null;\n  disallowExpectedDisbursements = false;\n  pristine = true;\n\n  /**\n   * Retrieves the loans data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute,\n    public dialog: MatDialog,\n    private loanServices: LoansService,\n    private settingsService: SettingsService,\n    private dateUtils: Dates) {\n    this.route.parent.data.subscribe((data: { loanDetailsData: any }) => {\n      this.loanId = data.loanDetailsData.id;\n      this.loanDetails = data.loanDetailsData;\n      this.disallowExpectedDisbursements = this.loanDetails.disallowExpectedDisbursements || false;\n      this.disbursementDataSource = data.loanDetailsData.disbursementDetails;\n      this.currentPrincipalAmount = this.loanDetails.approvedPrincipal;\n    });\n  }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.maxFutureDate;\n    this.status = this.loanDetails.status.value;\n  }\n\n  showAddTrancheButtons() {\n    this.return = true;\n    if (\n      this.status === 'Closed (obligations met)' ||\n      this.status === 'Overpaid' ||\n      this.status === 'Closed (rescheduled)' ||\n      this.status === 'Closed (written off)' ||\n      this.status === 'Submitted and pending approval' ||\n      this.disallowExpectedDisbursements\n    ) {\n      this.return = false;\n    }\n\n    this.calculateTotalDisbursedAmount();\n\n    if (this.totalMultiDisbursed === this.currentPrincipalAmount || this.return === false) {\n      return false;\n    }\n\n    return true;\n  }\n\n  showActionsTrancheButtons() {\n    if (\n      this.status === 'Closed (obligations met)' ||\n      this.status === 'Overpaid' ||\n      this.status === 'Closed (rescheduled)' ||\n      this.status === 'Closed (written off)' ||\n      this.status === 'Submitted and pending approval' ||\n      this.disallowExpectedDisbursements\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Adds the Principal Disbursed.\n   */\n  calculateTotalDisbursedAmount() {\n    this.totalMultiDisbursed = 0;\n    this.count = 0;\n    this.disbursementDataSource.forEach((item: any) => {\n      this.totalMultiDisbursed += (item.principal * 1);\n      this.count += 1;\n    });\n  }\n\n  buildForm(expectedDisbursementDate: Date, principal: number): FormfieldBase[] {\n    const formBase: FormfieldBase[] = [\n      new DatepickerBase({\n        controlName: 'expectedDisbursementDate',\n        label: 'Expected Disbursement Date',\n        value: expectedDisbursementDate || '',\n        type: 'datetime-local',\n        minDate: this.minDate,\n        maxDate: this.maxDate,\n        required: true,\n        order: 1\n      }),\n      new InputBase({\n        controlName: 'principal',\n        label: 'Principal',\n        value: principal,\n        type: 'number',\n        required: true,\n        order: 2\n      })\n    ];\n    return formBase;\n  }\n\n  /**\n   * Adds the Disbursement Data entry form to given Disbursement Data entry.\n   */\n  addDisbursementDataEntry() {\n    this.calculateTotalDisbursedAmount();\n\n    const data = {\n      title: 'Add Disbursement Details',\n      layout: { addButtonText: 'Add' },\n      formfields: this.buildForm(new Date(), (this.currentPrincipalAmount - this.totalMultiDisbursed))\n    };\n    const disbursementDialogRef = this.dialog.open(FormDialogComponent, { data });\n    disbursementDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const principal = response.data.value.principal * 1;\n        if ((this.totalMultiDisbursed + principal) <= this.currentPrincipalAmount) {\n          this.disbursementDataSource = this.disbursementDataSource.concat(response.data.value);\n          this.pristine = false;\n        }\n      }\n    });\n  }\n\n  /**\n   * Edit the Disbursement Data entry form to given Disbursement Data entry.\n   */\n  editDisbursementDataEntry(index: number) {\n    const principal: number = this.disbursementDataSource[index]['principal'] * 1;\n    const expectedDisbursementDate: Date = this.dateUtils.parseDate(this.disbursementDataSource[index]['expectedDisbursementDate']);\n\n    const data = {\n      title: 'Edit Disbursement Details',\n      layout: { addButtonText: 'Save' },\n      formfields: this.buildForm(expectedDisbursementDate, principal)\n    };\n    const disbursementDialogRef = this.dialog.open(FormDialogComponent, { data });\n    disbursementDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const newPrincipal = response.data.value.principal * 1;\n        if ((this.totalMultiDisbursed - principal + newPrincipal) <= this.currentPrincipalAmount) {\n          this.disbursementDataSource[index]['principal'] = newPrincipal;\n          this.disbursementDataSource[index]['expectedDisbursementDate'] = response.data.value.expectedDisbursementDate;\n          this.pristine = false;\n        }\n      }\n    });\n  }\n\n  removeDisbursementDataEntry(index: any) {\n    const dialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `this` }\n    });\n    dialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        const principal = this.disbursementDataSource[index]['principal'] * 1;\n        this.disbursementDataSource.splice(index, 1);\n        this.disbursementDataSource = this.disbursementDataSource.concat([]);\n        this.totalMultiDisbursed -= principal;\n        this.pristine = false;\n      }\n    });\n  }\n\n  editDisbursementData() {\n    const disbursementData: any = [];\n    this.disbursementDataSource.forEach((item: any) => {\n      disbursementData.push({\n        expectedDisbursementDate: this.dateUtils.formatDate(item.expectedDisbursementDate, this.settingsService.dateFormat),\n        principal: item.principal\n      });\n    });\n\n    const payload = {\n      disbursementData: disbursementData,\n      dateFormat: this.settingsService.dateFormat,\n      locale: this.settingsService.language.code\n    };\n    this.loanServices.editDisbursements(this.loanId, payload).toPromise()\n    .then(result => {\n      this.pristine = true;\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <table mat-table [dataSource]=\"loanDetails.collateral\">\n\n    <ng-container matColumnDef=\"id\">\n      <th mat-header-cell *matHeaderCellDef> ID </th>\n      <td mat-cell *matCellDef=\"let ele\"> {{ ele.clientCollateralId }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"quantity\">\n      <th mat-header-cell *matHeaderCellDef> Quantity </th>\n      <td mat-cell *matCellDef=\"let ele\"> {{ ele.quantity }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"total\">\n      <th mat-header-cell *matHeaderCellDef> Total Value </th>\n      <td mat-cell *matCellDef=\"let ele\"> {{ ele.total }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"totalCollateral\">\n      <th mat-header-cell *matHeaderCellDef> Total Collateral Value </th>\n      <td mat-cell *matCellDef=\"let ele\"> {{ ele.totalCollateral }} </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'mifosx-loan-collateral-tab',\n  templateUrl: './loan-collateral-tab.component.html',\n  styleUrls: ['./loan-collateral-tab.component.scss']\n})\nexport class LoanCollateralTabComponent implements OnInit {\n\n  /** Loan Details */\n  loanDetails: any;\n  /** Columns to be displayed in collateral table. */\n  displayedColumns: string[] = ['id', 'quantity', 'total', 'totalCollateral'];\n\n  /**\n   * Retrieves the loans data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute) {\n    this.route.parent.data.subscribe((data: { loanDetailsData: any }) => {\n      this.loanDetails = data.loanDetailsData;\n    });\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<form [formGroup]=\"loansAccountDetailsForm\">\n\n  <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Product Name</mat-label>\n      <mat-select formControlName=\"productId\" required>\n        <mat-option *ngFor=\"let product of productData\" [value]=\"product.id\">\n          {{ product.name }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Product Name is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\" *ngIf=\"loanProductSelected\">\n      <mat-label>Loan officer</mat-label>\n      <mat-select formControlName=\"loanOfficerId\">\n        <mat-option *ngFor=\"let loanOfficer of loanOfficerOptions\" [value]=\"loanOfficer.id\">\n          {{ loanOfficer.displayName }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n\n  <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\" *ngIf=\"loanProductSelected\">\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Loan purpose</mat-label>\n      <mat-select formControlName=\"loanPurposeId\">\n        <mat-option *ngFor=\"let loanPurpose of loanPurposeOptions\" [value]=\"loanPurpose.id\">\n          {{ loanPurpose.name }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Fund</mat-label>\n      <mat-select formControlName=\"fundId\">\n        <mat-option *ngFor=\"let fund of fundOptions\" [value]=\"fund.id\">\n          {{ fund.name }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\" (click)=\"submitPicker.open()\">\n      <mat-label>Submitted on</mat-label>\n      <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"submitPicker\" required\n        formControlName=\"submittedOnDate\">\n      <mat-datepicker-toggle matSuffix [for]=\"submitPicker\"></mat-datepicker-toggle>\n      <mat-datepicker #submitPicker></mat-datepicker>\n      <mat-error *ngIf=\"loansAccountDetailsForm.controls.submittedOnDate?.hasError('required')\">\n        Submitted on is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\" (click)=\"disbursementPicker.open()\">\n      <mat-label>Disbursement on</mat-label>\n      <input matInput [min]=\"loansAccountDetailsForm.value.submittedOnDate\" [max]=\"maxDate\" [matDatepicker]=\"disbursementPicker\" required\n        formControlName=\"expectedDisbursementDate\">\n      <mat-datepicker-toggle matSuffix [for]=\"disbursementPicker\"></mat-datepicker-toggle>\n      <mat-datepicker #disbursementPicker></mat-datepicker>\n      <mat-error *ngIf=\"loansAccountDetailsForm.controls.submittedOnDate?.hasError('required')\">\n        Disbursement on is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>External id</mat-label>\n      <input matInput formControlName=\"externalId\">\n    </mat-form-field>\n\n    <mat-divider fxFlex=\"98%\"></mat-divider>\n\n    <h3 class=\"mat-h3\" fxFlexFill>Savings Linkage</h3>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Link savings</mat-label>\n      <mat-select formControlName=\"linkAccountId\">\n        <mat-option *ngFor=\"let savingaccount of accountLinkingOptions\" [value]=\"savingaccount.id\">\n          ({{ savingaccount.accountNo }}) {{ savingaccount.productName }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-checkbox fxFlex=\"48%\" formControlName=\"createStandingInstructionAtDisbursement\">\n      <p>Create standing instructions at disbursement</p>\n    </mat-checkbox>\n  </div>\n\n  <div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n    <button mat-raised-button matStepperPrevious disabled>\n      <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n      Previous\n    </button>\n    <button mat-raised-button matStepperNext>\n      Next&nbsp;&nbsp;\n      <fa-icon icon=\"arrow-right\"></fa-icon>\n    </button>\n    <button mat-raised-button *ngIf=\"loanId\" [routerLink]=\"['../', 'general']\">\n      Cancel\n    </button>\n  </div>\n\n</form>\n","/** Angular Imports */\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Custom Services */\nimport { LoansService } from '../../loans.service';\n\n/**\n * Loans Account Details Step\n */\n@Component({\n  selector: 'mifosx-loans-account-details-step',\n  templateUrl: './loans-account-details-step.component.html',\n  styleUrls: ['./loans-account-details-step.component.scss']\n})\nexport class LoansAccountDetailsStepComponent implements OnInit {\n\n  /** Loans Account Template */\n  @Input() loansAccountTemplate: any;\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date(2100, 0, 1);\n  /** Product Data */\n  productData: any;\n  /** Loan Officer Data */\n  loanOfficerOptions: any;\n  /** Loan Purpose Options */\n  loanPurposeOptions: any;\n  /** Fund Options */\n  fundOptions: any;\n  /** Account Linking Options */\n  accountLinkingOptions: any;\n  /** For edit loan accounts form */\n  isFieldOfficerPatched = false;\n  /** Loans Account Details Form */\n  loansAccountDetailsForm: FormGroup;\n\n  loanId: any = null;\n\n  loanProductSelected = false;\n\n  /** Loans Account Template with product data  */\n  @Output() loansAccountProductTemplate = new EventEmitter();\n  /**\n   * Sets loans account details form.\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {LoansService} loansService Loans Service.\n   * @param {SettingsService} settingsService SettingsService\n   */\n  constructor(private formBuilder: FormBuilder,\n    private loansService: LoansService,\n    private route: ActivatedRoute,\n    private settingsService: SettingsService) {\n    this.loanId = this.route.snapshot.params['loanId'];\n  }\n\n  ngOnInit() {\n    this.createLoansAccountDetailsForm();\n    this.maxDate = this.settingsService.maxFutureDate;\n    this.buildDependencies();\n    if (this.loansAccountTemplate) {\n      this.productData = this.loansAccountTemplate.productOptions;\n      if (this.loansAccountTemplate.loanProductId) {\n        this.loansAccountDetailsForm.patchValue({\n          'productId': this.loansAccountTemplate.loanProductId,\n          'submittedOnDate': this.loansAccountTemplate.timeline.submittedOnDate && new Date(this.loansAccountTemplate.timeline.submittedOnDate),\n          'loanOfficerId': this.loansAccountTemplate.loanOfficerId,\n          'loanPurposeId': this.loansAccountTemplate.loanPurposeId,\n          'fundId': this.loansAccountTemplate.fundId,\n          'expectedDisbursementDate': this.loansAccountTemplate.timeline.expectedDisbursementDate && new Date(this.loansAccountTemplate.timeline.expectedDisbursementDate),\n          'externalId': this.loansAccountTemplate.externalId\n        });\n      }\n    }\n  }\n\n  /**\n   * Creates loans account details form.\n   */\n  createLoansAccountDetailsForm() {\n    this.loansAccountDetailsForm = this.formBuilder.group({\n      'productId': ['', Validators.required],\n      'loanOfficerId': [''],\n      'loanPurposeId': [''],\n      'fundId': [''],\n      'submittedOnDate': [this.settingsService.businessDate, Validators.required],\n      'expectedDisbursementDate': ['', Validators.required],\n      'externalId': [''],\n      'linkAccountId': [''],\n      'createStandingInstructionAtDisbursement': ['']\n    });\n  }\n\n  /**\n   * Fetches loans account product template on productId value changes\n   */\n  buildDependencies() {\n    const entityId = (this.loansAccountTemplate.clientId) ? this.loansAccountTemplate.clientId : this.loansAccountTemplate.group.id;\n    const isGroup = (this.loansAccountTemplate.clientId) ? false : true;\n    this.loansAccountDetailsForm.get('productId').valueChanges.subscribe((productId: string) => {\n      this.loansService.getLoansAccountTemplateResource(entityId, isGroup, productId).subscribe((response: any) => {\n        this.loansAccountProductTemplate.emit(response);\n        this.loanOfficerOptions = response.loanOfficerOptions;\n        this.loanPurposeOptions = response.loanPurposeOptions;\n        this.fundOptions = response.fundOptions;\n        this.accountLinkingOptions = response.accountLinkingOptions;\n        this.loanProductSelected = true;\n        if (response.createStandingInstructionAtDisbursement) {\n          this.loansAccountDetailsForm.get('createStandingInstructionAtDisbursement').patchValue(response.createStandingInstructionAtDisbursement);\n        }\n      });\n    });\n  }\n\n  /**\n   * Returns loans account details form value.\n   */\n  get loansAccountDetails() {\n    return this.loansAccountDetailsForm.getRawValue();\n  }\n\n}\n","<h1 mat-dialog-title>Add Loan Collateral</h1>\n\n<div mat-dialog-content [formGroup]=\"addCollateralForm\" fxLayout=\"column\">\n\n  <mat-form-field>\n    <mat-label>Collateral</mat-label>\n    <mat-select formControlName=\"collateral\" required>\n      <mat-option *ngFor=\"let collateralType of collateralTypeData\" [value]=\"collateralType\" >\n        {{ collateralType.name }}\n      </mat-option>\n    </mat-select>\n    <mat-error>\n      Collateral is <strong>required</strong>\n    </mat-error>\n  </mat-form-field>\n\n  <mat-form-field>\n    <mat-label>Quantity</mat-label>\n    <input type=\"number\" [max]=\"maxQuantity\" [min]=\"0\" matInput formControlName=\"quantity\" required>\n    <mat-error *ngIf=\"addCollateralForm.controls.quantity.hasError('required')\">\n      Quantity is <strong>required</strong>\n    </mat-error>\n    <mat-error *ngIf=\"addCollateralForm.controls.quantity.hasError('max')\">\n      Quantity can not be more than <strong>{{ maxQuantity }}</strong>\n    </mat-error>\n  </mat-form-field>\n\n  <mat-form-field>\n    <mat-label>Total Value</mat-label>\n    <input type=\"text\" matInput formControlName=\"totalValue\" [disabled]=\"true\">\n  </mat-form-field>\n\n  <mat-form-field>\n    <mat-label>Total Collateral Value</mat-label>\n    <input type=\"text\" matInput formControlName=\"totalCollateralValue\" [disabled]=\"true\">\n  </mat-form-field>\n\n</div>\n\n<mat-dialog-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n  <button mat-raised-button mat-dialog-close> Cancel </button>\n  <button mat-raised-button color=\"primary\" [mat-dialog-close]=\"{ data: addCollateralForm }\"\n    [disabled]=\"!addCollateralForm.valid || addCollateralForm.pristine\">{{ layout.addButtonText }}</button>\n</mat-dialog-actions>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'mifosx-loans-account-add-collateral-dialog',\n  templateUrl: './loans-account-add-collateral-dialog.component.html',\n  styleUrls: ['./loans-account-add-collateral-dialog.component.scss']\n})\nexport class LoansAccountAddCollateralDialogComponent implements OnInit {\n\n  layout: {\n    addButtonText?: string\n  } = {\n      addButtonText: 'Add'\n    };\n\n  addCollateralForm: FormGroup;\n  /** All Collateral Options */\n  collateralTypeData: any;\n  /** Selected Collateral */\n  collateralData: any;\n  /** Maximum ALlowed Quantity of selected collateral  */\n  maxQuantity: any = 0;\n\n  constructor(public dialogRef: MatDialogRef<LoansAccountAddCollateralDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private formBuilder: FormBuilder) {\n    this.createAddCollateralForm();\n  }\n\n  ngOnInit() {\n    this.dialogRef.updateSize('400px');\n    this.collateralTypeData = this.data.collateralOptions;\n    this.buildDependencies();\n  }\n\n  createAddCollateralForm() {\n    this.addCollateralForm = this.formBuilder.group({\n      'collateral': ['', Validators.required],\n      'quantity': ['', Validators.required],\n      'totalValue': [{value: '', disabled: true}],\n      'totalCollateralValue': [{value: '', disabled: true}],\n    });\n  }\n\n  /**\n   * Subscribe to Form controls value changes\n   */\n   buildDependencies() {\n    this.addCollateralForm.controls.collateral.valueChanges.subscribe((collateral: any) => {\n      this.collateralData = collateral;\n      this.maxQuantity = collateral.quantity;\n    });\n\n    this.addCollateralForm.controls.quantity.valueChanges.subscribe((quantity: any) => {\n      this.addCollateralForm.patchValue({\n        'totalValue': this.collateralData.basePrice * quantity,\n        'totalCollateralValue': this.collateralData.basePrice * this.collateralData.pctToBase * quantity / 100\n      });\n    });\n  }\n\n}\n","<form [formGroup]=\"loansAccountTermsForm\">\n\n  <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Principal {{currencyDisplaySymbol}}</mat-label>\n      <input type=\"number\" matInput formControlName=\"principalAmount\">\n      <mat-error *ngIf=\"loansAccountTermsForm.controls.principalAmount.hasError('required')\">\n        Principal is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <h4 fxFlex=\"98%\" class=\"mat-h4\">Term Options</h4>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Loan Term</mat-label>\n      <input type=\"number\" matInput required formControlName=\"loanTermFrequency\">\n      <mat-error *ngIf=\"loansAccountTermsForm.controls.loanTermFrequency.hasError('required')\">\n        Loan Term is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Frequency</mat-label>\n      <mat-select required formControlName=\"loanTermFrequencyType\">\n        <mat-option *ngFor=\"let type of termFrequencyTypeData\" [value]=\"type.id\">\n          {{ type.value }}\n        </mat-option>\n      </mat-select>\n      <mat-error *ngIf=\"loansAccountTermsForm.controls.loanTermFrequencyType.hasError('required')\">\n        Frequency is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Number of repayments</mat-label>\n      <input type=\"number\" matInput formControlName=\"numberOfRepayments\">\n      <mat-error *ngIf=\"loansAccountTermsForm.controls.numberOfRepayments.hasError('required')\">\n        Number of repayments is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\" (click)=\"repaymentsPicker.open()\">\n      <mat-label>First repayment on</mat-label>\n      <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"repaymentsPicker\"\n        formControlName=\"repaymentsStartingFromDate\">\n      <mat-datepicker-toggle matSuffix [for]=\"repaymentsPicker\"></mat-datepicker-toggle>\n      <mat-datepicker #repaymentsPicker></mat-datepicker>\n    </mat-form-field>\n\n    <h4 fxFlex=\"98%\" class=\"mat-h4\">Repaid Every</h4>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Repaid every</mat-label>\n      <input matInput required formControlName=\"repaymentEvery\">\n      <mat-error *ngIf=\"loansAccountTermsForm.controls.repaymentEvery.hasError('required')\">\n        Repaid every is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Frequency</mat-label>\n      <mat-select formControlName=\"repaymentFrequencyType\" required>\n        <mat-option *ngFor=\"let repaymentFrequencyType of termFrequencyTypeData\" [value]=\"repaymentFrequencyType.id\">\n          {{ repaymentFrequencyType.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\" *ngIf=\"loansAccountTermsForm.controls.repaymentFrequencyType.value == 2\">\n      <mat-label>Select On</mat-label>\n      <mat-select formControlName=\"repaymentFrequencyNthDayType\">\n        <mat-option *ngFor=\"let repaymentFrequencyNthDayType of repaymentFrequencyNthDayTypeData\"\n          [value]=\"repaymentFrequencyNthDayType.id\">\n          {{ repaymentFrequencyNthDayType.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\" *ngIf=\"loansAccountTermsForm.controls.repaymentFrequencyType.value == 2\">\n      <mat-label>Select Day</mat-label>\n      <mat-select formControlName=\"repaymentFrequencyDayOfWeekType\">\n        <mat-option *ngFor=\"let repaymentFrequencyDayOfWeekType of repaymentFrequencyDaysOfWeekTypeData\"\n          [value]=\"repaymentFrequencyDayOfWeekType.id\">\n          {{ repaymentFrequencyDayOfWeekType.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\" (click)=\"interestPicker.open()\">\n      <mat-label>Interest charged from</mat-label>\n      <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"interestPicker\"\n        formControlName=\"interestChargedFromDate\">\n      <mat-datepicker-toggle matSuffix [for]=\"interestPicker\"></mat-datepicker-toggle>\n      <mat-datepicker #interestPicker></mat-datepicker>\n    </mat-form-field>\n\n    <ng-container *ngIf=\"!loansAccountTemplate?.isLoanProductLinkedToFloatingRate\">\n\n      <mat-form-field fxFlex=\"48%\">\n        <mat-label>Nominal interest rate</mat-label>\n        <input type=\"number\" matInput formControlName=\"interestRatePerPeriod\">\n      </mat-form-field>\n\n      <mat-form-field fxFlex=\"48%\">\n        <mat-label>Interest method</mat-label>\n        <mat-select formControlName=\"interestType\">\n          <mat-option *ngFor=\"let interestType of interestTypeData\" [value]=\"interestType.id\">\n            {{ interestType.value }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <mat-checkbox fxFlex=\"48%\" formControlName=\"isEqualAmortization\"\n        [checked]=\"loansAccountTermsData?.isEqualAmortization\">\n        <p>Is Equal Amortization</p>\n      </mat-checkbox>\n\n    </ng-container>\n\n    <ng-container *ngIf=\"loansAccountTermsData?.isLoanProductLinkedToFloatingRate\">\n\n      <div fxFlex=\"48%\" fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n        <mat-form-field fxFlex=\"48%\">\n          <mat-label>Interest Method</mat-label>\n          <mat-select formControlName=\"interestType\">\n            <mat-option *ngFor=\"let interestType of interestTypeData\" [value]=\"interestType.id\">\n              {{ interestType.value }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <mat-checkbox fxFlex=\"48%\" formControlName=\"isFloatingInterestRate\">\n          <p>Is Floating Rate?</p>\n        </mat-checkbox>\n\n      </div>\n\n    </ng-container>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Amortization</mat-label>\n      <mat-select required formControlName=\"amortizationType\">\n        <mat-option *ngFor=\"let amortizationType of amortizationTypeData\" [value]=\"amortizationType.id\">\n          {{ amortizationType.value }}\n        </mat-option>\n      </mat-select>\n      <mat-error *ngIf=\"loansAccountTermsForm.controls.amortizationType.hasError('required')\">\n        Amortization Type is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <h4 fxFlex=\"98%\" class=\"mat-h4\">Interest Calculations</h4>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Interest calculation period</mat-label>\n      <mat-select formControlName=\"interestCalculationPeriodType\">\n        <mat-option *ngFor=\"let interestCalculationPeriodType of interestCalculationPeriodTypeData\"\n          [value]=\"interestCalculationPeriodType.id\">\n          {{ interestCalculationPeriodType.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-checkbox fxFlex=\"48%\" formControlName=\"allowPartialPeriodInterestCalcualtion\">\n      <p>Calculate interest for exact days in partial period</p>\n    </mat-checkbox>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Arrears tolerance {{currencyDisplaySymbol}}</mat-label>\n      <input matInput type=\"number\" formControlName=\"inArrearsTolerance\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Interest free period</mat-label>\n      <input matInput formControlName=\"graceOnInterestCharged\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Repayment strategy</mat-label>\n      <mat-select formControlName=\"transactionProcessingStrategyCode\">\n        <mat-option *ngFor=\"let transactionProcessingStrategy of transactionProcessingStrategyOptions\" [value]=\"transactionProcessingStrategy.code\">\n          {{ transactionProcessingStrategy.name }}\n        </mat-option>\n      </mat-select>\n      <mat-error *ngIf=\"loansAccountTermsForm.controls.transactionProcessingStrategyCode.hasError('required')\">\n        Repayment Strategy is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <h4 fxFlex=\"98%\" class=\"mat-h4\">Moratorium</h4>\n\n    <mat-form-field fxFlex=\"23%\">\n      <mat-label>Grace on principal payment</mat-label>\n      <input type=\"number\" matInput formControlName=\"graceOnPrincipalPayment\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"23%\">\n      <mat-label>Grace on interest payment</mat-label>\n      <input type=\"number\" matInput formControlName=\"graceOnInterestPayment\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>On arrears ageing</mat-label>\n      <input type=\"number\" matInput formControlName=\"graceOnArrearsAgeing\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\" *ngIf=\"loansAccountTermsData?.canDefineInstallmentAmount\">\n      <mat-label>Installment Amount</mat-label>\n      <input type=\"number\" matInput formControlName=\"fixedEmiAmount\">\n    </mat-form-field>\n\n    <ng-container *ngIf=\"loansAccountTermsData?.canUseForTopup\">\n\n      <mat-checkbox fxFlex=\"48%\" formControlName=\"isTopup\">\n        <p>Is Topup Loan?</p>\n      </mat-checkbox>\n\n      <mat-form-field fxFlex=\"48%\" *ngIf=\"loansAccountTermsForm.controls.isTopup.value\">\n        <mat-label>Loan closed with Topup</mat-label>\n        <mat-select formControlName=\"loanIdToClose\">\n          <mat-option *ngFor=\"let clientActiveLoan of clientActiveLoanData\" [value]=\"clientActiveLoan.id\">\n            {{ clientActiveLoan.accountNo }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n    </ng-container>\n\n    <mat-divider fxFlex=\"98%\"></mat-divider>\n\n    <div fxFlexFill>\n      <span fxFlex=\"40%\">Recalculate Interest</span>\n      <span fxFlex=\"60%\">{{ loansAccountTermsData?.isInterestRecalculationEnabled? 'Yes' : 'No' }}</span>\n    </div>\n\n    <div fxFlexFill *ngIf=\"loansAccountTermsData?.isInterestRecalculationEnabled\">\n      <span fxFlex=\"40%\">Days in year</span>\n      <span fxFlex=\"60%\">{{ loansAccountTermsData.daysInYearType.value}}</span>\n    </div>\n\n    <ng-container *ngIf=\"loansAccountTermsData?.isInterestRecalculationEnabled\">\n\n      <div fxFlexFill *ngIf=\"loansAccountTermsData?.isInterestRecalculationEnabled\">\n        <span fxFlex=\"40%\">Advance payments adjustment type</span>\n        <span fxFlex=\"60%\">{{ loansAccountTermsData.interestRecalculationData.rescheduleStrategyType.value }}</span>\n      </div>\n\n      <div fxFlexFill *ngIf=\"loansAccountTermsData?.isInterestRecalculationEnabled\">\n        <span fxFlex=\"40%\">Days in month</span>\n        <span fxFlex=\"60%\">{{ loansAccountTermsData.daysInMonthType.value }}</span>\n      </div>\n\n    </ng-container>\n\n    <ng-container *ngIf=\"loansAccountTermsData?.isInterestRecalculationEnabled\">\n\n      <div fxFlexFill>\n        <span fxFlex=\"40%\">Interest recalculation compounding on</span>\n        <span fxFlex=\"60%\">{{ loansAccountTermsData.interestRecalculationData.interestRecalculationCompoundingType.value\n          }}</span>\n      </div>\n\n      <div fxFlexFill>\n        <span fxFlex=\"40%\">Frequency Interval for recalculation</span>\n        <span fxFlex=\"60%\">\n          <span>{{ loansAccountTermsData.interestRecalculationData.recalculationRestFrequencyType.value}}</span>\n          <span *ngIf=\"loansAccountTermsData.interestRecalculationData.recalculationRestFrequencyType.id == 3 &&\n                loansAccountTermsData.interestRecalculationData.recalculationRestFrequencyWeekday != null\">\n            on {{ loansAccountTermsData.interestRecalculationData.recalculationRestFrequencyWeekday.value}}</span>\n          <span *ngIf=\"loansAccountTermsData.interestRecalculationData.recalculationRestFrequencyType.id == 4 &&\n                loansAccountTermsData.interestRecalculationData.recalculationRestFrequencyOnDay != null\">on day\n            {{ loansAccountTermsData.interestRecalculationData.recalculationRestFrequencyOnDay}}</span>\n          <span *ngIf=\"loansAccountTermsData.interestRecalculationData.recalculationRestFrequencyType.id == 4 &&\n                loansAccountTermsData.interestRecalculationData.recalculationRestFrequencyOnDay == null &&\n                loansAccountTermsData.interestRecalculationData.recalculationRestFrequencyNthDay != null\">on\n            {{ loansAccountTermsData.interestRecalculationData.recalculationRestFrequencyNthDay.value}}\n            {{ loansAccountTermsData.interestRecalculationData.recalculationRestFrequencyWeekday.value}}</span>\n        </span>\n      </div>\n\n    </ng-container>\n\n    <div fxFlexFill\n      *ngIf=\"loansAccountTermsData?.isInterestRecalculationEnabled && loansAccountTermsData.interestRecalculationData.recalculationRestFrequencyType.id != 1\">\n      <span fxFlex=\"40%\">Frequency Interval for recalculation</span>\n      <span fxFlex=\"60%\">{{ loansAccountTermsData.interestRecalculationData.recalculationRestFrequencyInterval}}</span>\n    </div>\n\n    <ng-container *ngIf=\"multiDisburseLoan\">\n      <mat-divider fxFlex=\"98%\"></mat-divider>\n      <div fxFlexFill *ngIf=\"allowAddDisbursementDetails()\">\n        <h4 fxFlex=\"98%\" class=\"mat-h4\">Loan Tranche Details</h4>\n        <mat-form-field fxFlex=\"48%\">\n          <mat-label>Maximum allowed outstanding balance</mat-label>\n          <input matInput required formControlName=\"maxOutstandingLoanBalance\">\n        </mat-form-field>\n        <span fxFlex>\n          <button type=\"button\" mat-icon-button color=\"primary\" (click)=\"addDisbursementDataEntry(disbursementData)\"\n            [disabled]=\"isMultiDisbursedCompleted\">\n            <fa-icon icon=\"plus-circle\" size=\"lg\"></fa-icon>\n          </button>\n        </span>\n      </div>\n      <div fxFlexFill *ngIf=\"!allowAddDisbursementDetails()\">\n        <h4 fxFlex=\"98%\" class=\"mat-h4\">Loan Tranche Details are not allowed for this Loan Product</h4>\n      </div>\n\n      <table mat-table [dataSource]=\"disbursementDataSource\" [hidden]=\"disbursementDataSource.length === 0\">\n\n        <ng-container matColumnDef=\"expectedDisbursementDate\">\n          <th mat-header-cell *matHeaderCellDef> Eexpected Disbursement Date </th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.expectedDisbursementDate | dateFormat }} </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"principal\">\n          <th mat-header-cell *matHeaderCellDef> Principal </th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.principal }} </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"actions\">\n          <th mat-header-cell *matHeaderCellDef> Actions </th>\n          <td mat-cell *matCellDef=\"let row; let rowIndex = index\">\n            <button type=\"button\" mat-icon-button color=\"warn\" (click)=\"removeDisbursementDataEntry(rowIndex)\"\n              matTooltip=\"Delete\" matTooltipPosition=\"left\">\n              <fa-icon icon=\"trash\"></fa-icon>\n            </button>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"disbursementDisplayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: disbursementDisplayedColumns;\"></tr>\n\n      </table>\n    </ng-container>\n\n    <ng-container\n      *ngIf=\"loansAccountTermsData?.isInterestRecalculationEnabled  && loansAccountTermsData.interestRecalculationData.interestRecalculationCompoundingType.id != 0\">\n\n      <div fxFlexFill>\n        <span fxFlex=\"40%\">Frequency for compounding</span>\n        <span fxFlex=\"60%\">{{\n          loansAccountTermsData.interestRecalculationData.recalculationCompoundingFrequencyType.value}}\n          <span *ngIf=\"loansAccountTermsData.interestRecalculationData.recalculationCompoundingFrequencyType.id == 3 &&\n            loansAccountTermsData.interestRecalculationData.recalculationCompoundingFrequencyWeekday != null\">\n            on {{ loansAccountTermsData.interestRecalculationData.recalculationCompoundingFrequencyWeekday.value}}\n          </span>\n          <span *ngIf=\"loansAccountTermsData.interestRecalculationData.recalculationCompoundingFrequencyType.id == 4 &&\n            loansAccountTermsData.interestRecalculationData.recalculationCompoundingFrequencyOnDay != null\">on day\n            {{ loansAccountTermsData.interestRecalculationData.recalculationCompoundingFrequencyOnDay}}\n          </span>\n          <span *ngIf=\"loansAccountTermsData.interestRecalculationData.recalculationCompoundingFrequencyType.id == 4 &&\n            loansAccountTermsData.interestRecalculationData.recalculationCompoundingFrequencyOnDay == null &&\n            loansAccountTermsData.interestRecalculationData.recalculationCompoundingFrequencyNthDay != null\">on\n            {{ loansAccountTermsData.interestRecalculationData.recalculationCompoundingFrequencyNthDay.value}}\n            {{ loansAccountTermsData.interestRecalculationData.recalculationCompoundingFrequencyWeekday.value}}\n          </span>\n        </span>\n      </div>\n    </ng-container>\n\n    <div fxFlexFill\n      *ngIf=\"loansAccountTermsData?.isInterestRecalculationEnabled && loansAccountTermsData.interestRecalculationData.interestRecalculationCompoundingType.id != 0 && loansAccountTermsData.interestRecalculationData.recalculationCompoundingFrequencyType.id != 1\">\n      <span fxFlex=\"40%\">Frequency Interval for compounding</span>\n      <span fxFlex=\"60%\">{{\n        loansAccountTermsData.interestRecalculationData.recalculationCompoundingFrequencyInterval}}</span>\n    </div>\n\n    <mat-divider fxFlex=\"98%\"></mat-divider>\n\n    <div fxFlex=\"50%\">\n      <div fxLayout=\"column\" fxFlex=\"50%\" class=\"table_name\">\n        <h4 fxFlex=\"98%\" class=\"mat-h4\">Collaterals Data</h4>\n      </div>\n\n      <div fxLayout=\"column\" fxFlex=\"50%\">\n        <div fxLayout=\"row\" fxLayoutAlign=\"flex-end\">\n          <button mat-raised-button color=\"primary\" (click)=\"addCollateral()\">\n            <fa-icon icon=\"plus\" class=\"m-r-10\"></fa-icon>Add\n          </button>\n        </div>\n      </div>\n    </div>\n    <table mat-table class=\"mat-elevation-z1\" [dataSource]=\"collateralDataSource\">\n\n      <ng-container matColumnDef=\"type\">\n        <th mat-header-cell *matHeaderCellDef> Name </th>\n        <td mat-cell *matCellDef=\"let ele\"> {{ ele.type.name }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"value\">\n        <th mat-header-cell *matHeaderCellDef> Quantity </th>\n        <td mat-cell *matCellDef=\"let ele\"> {{ ele.value }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"totalValue\">\n        <th mat-header-cell *matHeaderCellDef> Total Value </th>\n        <td mat-cell *matCellDef=\"let ele\"> {{ ele.type.basePrice*ele.value }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"totalCollateralValue\">\n        <th mat-header-cell *matHeaderCellDef> Total Collateral Value </th>\n        <td mat-cell *matCellDef=\"let ele\"> {{ ele.type.pctToBase*ele.type.basePrice*ele.value/100 }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"action\">\n        <th mat-header-cell *matHeaderCellDef> Actions </th>\n        <td mat-cell *matCellDef=\"let ele; let collateralIndex = index\">\n          <button mat-icon-button color=\"warn\" (click)=\"deleteCollateral(collateralIndex)\">\n            <fa-icon icon=\"trash\"></fa-icon>\n          </button>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"loanCollateralDisplayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: loanCollateralDisplayedColumns;\"></tr>\n    </table>\n  </div>\n\n  <div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n    <button mat-raised-button matStepperPrevious>\n      <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n      Previous\n    </button>\n    <button mat-raised-button matStepperNext>\n      Next&nbsp;&nbsp;\n      <fa-icon icon=\"arrow-right\"></fa-icon>\n    </button>\n    <button mat-raised-button *ngIf=\"loanId\" [routerLink]=\"['../', 'general']\">\n      Cancel\n    </button>\n  </div>\n\n</form>\n","/** Angular Imports */\nimport { Component, OnInit, Input, OnChanges } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { LoansAccountAddCollateralDialogComponent } from 'app/loans/custom-dialog/loans-account-add-collateral-dialog/loans-account-add-collateral-dialog.component';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\nimport { FormDialogComponent } from 'app/shared/form-dialog/form-dialog.component';\nimport { DatepickerBase } from 'app/shared/form-dialog/formfield/model/datepicker-base';\nimport { FormfieldBase } from 'app/shared/form-dialog/formfield/model/formfield-base';\nimport { InputBase } from 'app/shared/form-dialog/formfield/model/input-base';\n\n/**\n * Create Loans Account Terms Step\n */\n@Component({\n  selector: 'mifosx-loans-account-terms-step',\n  templateUrl: './loans-account-terms-step.component.html',\n  styleUrls: ['./loans-account-terms-step.component.scss']\n})\nexport class LoansAccountTermsStepComponent implements OnInit, OnChanges {\n\n  /** Loans Account Product Template */\n  @Input() loansAccountProductTemplate: any;\n  /** Loans Account Template */\n  @Input() loansAccountTemplate: any;\n  loansAccountTermsData: any;\n\n  /** Is Multi Disburse Loan  */\n  multiDisburseLoan: any;\n  // @Input() loansAccountFormValid: LoansAccountFormValid\n  @Input() loansAccountFormValid: boolean;\n  // @Input collateralOptions: Collateral Options\n  @Input() collateralOptions: any;\n  // @Input loanPrincipal: Loan Principle\n  @Input() loanPrincipal: any;\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date(2100, 0, 1);\n  /** Loans Account Terms Form */\n  loansAccountTermsForm: FormGroup;\n  /** Term Frequency Type Data */\n  termFrequencyTypeData: any;\n  /** Repayment Frequency Nth Day Type Data */\n  repaymentFrequencyNthDayTypeData: any;\n  /** Repayment Frequency Days of Week Type Data */\n  repaymentFrequencyDaysOfWeekTypeData: any;\n  /** Interest Type Data */\n  interestTypeData: any;\n  /** Amortization Type Data */\n  amortizationTypeData: any;\n  /** Interest Calculation Period Type Data */\n  interestCalculationPeriodTypeData: any;\n  /** Client Active Loan Data */\n  clientActiveLoanData: any;\n  /** Multi Disbursement Data */\n  disbursementDataSource: {}[] = [];\n  currencyDisplaySymbol = '$';\n  /** Loan Transaction strategies */\n  transactionProcessingStrategyOptions: any = [];\n\n  /** Check if value of collateral added  is more than principal amount */\n  isCollateralSufficient = false;\n  /** Total value of all collateral added to a loan */\n  totalCollateralValue: any = 0;\n  /** Collateral Data Source */\n  collateralDataSource: {}[] = [];\n  /** Columns to be displayed in collateral table. */\n  loanCollateralDisplayedColumns: string[] = ['type', 'value', 'totalValue', 'totalCollateralValue', 'action'];\n  /** Disbursement Data Displayed Columns */\n  disbursementDisplayedColumns: string[] = ['expectedDisbursementDate', 'principal', 'actions'];\n  /** Multi Disbursement Control */\n  totalMultiDisbursed: any = 0;\n  isMultiDisbursedCompleted = false;\n\n  /** Component is pristine if there has been no changes by user interaction */\n  pristine = true;\n\n  loanId: any = null;\n\n  /**\n   * Create Loans Account Terms Form\n   * @param formBuilder FormBuilder\n   * @param {SettingsService} settingsService SettingsService\n   */\n  constructor(private formBuilder: FormBuilder,\n    private settingsService: SettingsService,\n    private route: ActivatedRoute,\n    public dialog: MatDialog) {\n      this.loanId = this.route.snapshot.params['loanId'];\n      this.createloansAccountTermsForm();\n  }\n  /**\n   * Executes on change of input values\n   */\n  ngOnChanges() {\n    if (this.loansAccountProductTemplate) {\n      this.loansAccountTermsData = this.loansAccountProductTemplate;\n      this.currencyDisplaySymbol = this.loansAccountTermsData.currency.displaySymbol;\n      if (this.loanId != null && this.loansAccountTemplate.accountNo) {\n        this.loansAccountTermsData = this.loansAccountTemplate;\n      }\n\n      this.loansAccountTermsForm.patchValue({\n        'principalAmount': this.loansAccountTermsData.principal,\n        'loanTermFrequency': this.loansAccountTermsData.termFrequency,\n        'loanTermFrequencyType': this.loansAccountTermsData.termPeriodFrequencyType.id,\n        'numberOfRepayments': this.loansAccountTermsData.numberOfRepayments,\n        'repaymentEvery': this.loansAccountTermsData.repaymentEvery,\n        'repaymentFrequencyType': this.loansAccountTermsData.repaymentFrequencyType.id,\n        'interestRatePerPeriod': this.loansAccountTermsData.interestRatePerPeriod,\n        'amortizationType': this.loansAccountTermsData.amortizationType.id,\n        'isEqualAmortization': this.loansAccountTermsData.isEqualAmortization,\n        'interestType': this.loansAccountTermsData.interestType.id,\n        'isFloatingInterestRate': this.loansAccountTermsData.isLoanProductLinkedToFloatingRate ? false : '',\n        'interestCalculationPeriodType': this.loansAccountTermsData.interestCalculationPeriodType.id,\n        'allowPartialPeriodInterestCalcualtion': this.loansAccountTermsData.allowPartialPeriodInterestCalcualtion,\n        'inArrearsTolerance': this.loansAccountTermsData.inArrearsTolerance,\n        'graceOnPrincipalPayment': this.loansAccountTermsData.graceOnPrincipalPayment,\n        'graceOnInterestPayment': this.loansAccountTermsData.graceOnInterestPayment,\n        'graceOnArrearsAgeing': this.loansAccountTermsData.graceOnArrearsAgeing,\n        'graceOnInterestCharged': this.loansAccountTermsData.graceOnInterestCharged,\n        'fixedEmiAmount': this.loansAccountTermsData.fixedEmiAmount,\n        'maxOutstandingLoanBalance': this.loansAccountTermsData.maxOutstandingLoanBalance,\n        'transactionProcessingStrategyCode': this.loansAccountTermsData.transactionProcessingStrategyCode\n      });\n\n      this.multiDisburseLoan = this.loansAccountTermsData.multiDisburseLoan;\n      if (this.loansAccountTermsData.disbursementDetails) {\n        this.disbursementDataSource = this.loansAccountTermsData.disbursementDetails;\n        this.totalMultiDisbursed = 0;\n        this.disbursementDataSource.forEach((item: any) => {\n          this.totalMultiDisbursed += item.principal;\n        });\n      }\n\n      this.collateralDataSource = this.loansAccountTermsData.collateral || [];\n\n      const allowAttributeOverrides = this.loansAccountTermsData.product.allowAttributeOverrides;\n      if (!allowAttributeOverrides.repaymentEvery) {\n        this.loansAccountTermsForm.controls.repaymentEvery.disable();\n        this.loansAccountTermsForm.controls.repaymentFrequencyType.disable();\n      }\n      if (!allowAttributeOverrides.interestType) {\n        this.loansAccountTermsForm.controls.interestType.disable();\n      }\n      if (!allowAttributeOverrides.amortizationType) {\n        this.loansAccountTermsForm.controls.amortizationType.disable();\n      }\n      if (!allowAttributeOverrides.interestCalculationPeriodType) {\n        this.loansAccountTermsForm.controls.interestCalculationPeriodType.disable();\n        this.loansAccountTermsForm.controls.allowPartialPeriodInterestCalcualtion.disable();\n      }\n      if (!allowAttributeOverrides.inArrearsTolerance) {\n        this.loansAccountTermsForm.controls.inArrearsTolerance.disable();\n      }\n      if (!allowAttributeOverrides.transactionProcessingStrategyCode) {\n        this.loansAccountTermsForm.controls.transactionProcessingStrategyCode.disable();\n      }\n      if (!allowAttributeOverrides.graceOnPrincipalAndInterestPayment) {\n        this.loansAccountTermsForm.controls.graceOnPrincipalPayment.disable();\n      }\n      if (!allowAttributeOverrides.graceOnPrincipalAndInterestPayment) {\n        this.loansAccountTermsForm.controls.graceOnInterestPayment.disable();\n      }\n      if (!allowAttributeOverrides.graceOnArrearsAgeing) {\n        this.loansAccountTermsForm.controls.graceOnArrearsAgeing.disable();\n      }\n      this.setOptions();\n    }\n  }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.maxFutureDate;\n    this.loansAccountTermsData = this.loansAccountProductTemplate;\n    if (this.loanId != null && this.loansAccountTemplate.accountNo) {\n      this.loansAccountTermsData = this.loansAccountTemplate;\n    }\n\n    if (this.loansAccountTermsData) {\n      if (this.loansAccountTermsData.loanProductId) {\n        this.loansAccountTermsForm.patchValue({\n          'repaymentsStartingFromDate': this.loansAccountTermsData.expectedFirstRepaymentOnDate && new Date(this.loansAccountTermsData.expectedFirstRepaymentOnDate)\n        });\n      }\n      this.loansAccountTermsForm.patchValue({\n        'principalAmount': this.loansAccountTermsData.principal,\n        'loanTermFrequency': this.loansAccountTermsData.termFrequency,\n        'loanTermFrequencyType': this.loansAccountTermsData.termPeriodFrequencyType.id,\n        'numberOfRepayments': this.loansAccountTermsData.numberOfRepayments,\n        'repaymentEvery': this.loansAccountTermsData.repaymentEvery,\n        'repaymentFrequencyType': this.loansAccountTermsData.repaymentFrequencyType.id,\n        'interestRatePerPeriod': this.loansAccountTermsData.interestRatePerPeriod,\n        'amortizationType': this.loansAccountTermsData.amortizationType.id,\n        'isEqualAmortization': this.loansAccountTermsData.isEqualAmortization,\n        'interestType': this.loansAccountTermsData.interestType.id,\n        'isFloatingInterestRate': this.loansAccountTermsData.isLoanProductLinkedToFloatingRate ? false : '',\n        'interestCalculationPeriodType': this.loansAccountTermsData.interestCalculationPeriodType.id,\n        'allowPartialPeriodInterestCalcualtion': this.loansAccountTermsData.allowPartialPeriodInterestCalcualtion,\n        'inArrearsTolerance': this.loansAccountTermsData.inArrearsTolerance,\n        'graceOnPrincipalPayment': this.loansAccountTermsData.graceOnPrincipalPayment,\n        'graceOnInterestPayment': this.loansAccountTermsData.graceOnInterestPayment,\n        'graceOnArrearsAgeing': this.loansAccountTermsData.graceOnArrearsAgeing,\n        'graceOnInterestCharged': this.loansAccountTermsData.graceOnInterestCharged,\n        'fixedEmiAmount': this.loansAccountTermsData.fixedEmiAmount,\n        'maxOutstandingLoanBalance': this.loansAccountTermsData.maxOutstandingLoanBalance,\n        'transactionProcessingStrategyCode': this.loansAccountTermsData.transactionProcessingStrategyCode\n      });\n    }\n    this.createloansAccountTermsForm();\n    // this.setCustomValidators();\n  }\n\n  allowAddDisbursementDetails() {\n    return (this.multiDisburseLoan && !this.loansAccountTermsData.disallowExpectedDisbursements);\n  }\n\n  /** Custom Validators for the form */\n  setCustomValidators() {\n    const repaymentFrequencyNthDayType = this.loansAccountTermsForm.get('repaymentFrequencyNthDayType');\n    const repaymentFrequencyDayOfWeekType = this.loansAccountTermsForm.get('repaymentFrequencyDayOfWeekType');\n\n    this.loansAccountTermsForm.get('repaymentFrequencyType').valueChanges\n      .subscribe(repaymentFrequencyType => {\n\n        if (repaymentFrequencyType === 2) {\n          repaymentFrequencyNthDayType.setValidators([Validators.required]);\n          repaymentFrequencyDayOfWeekType.setValidators([Validators.required]);\n        } else {\n          repaymentFrequencyNthDayType.setValidators(null);\n          repaymentFrequencyDayOfWeekType.setValidators(null);\n        }\n\n        repaymentFrequencyNthDayType.updateValueAndValidity();\n        repaymentFrequencyDayOfWeekType.updateValueAndValidity();\n      });\n  }\n\n  /** Create Loans Account Terms Form */\n  createloansAccountTermsForm() {\n    this.loansAccountTermsForm = this.formBuilder.group({\n      'principalAmount': ['', Validators.required],\n      'loanTermFrequency': ['', Validators.required],\n      'loanTermFrequencyType': ['', Validators.required],\n      'numberOfRepayments': ['', Validators.required],\n      'repaymentEvery': ['', Validators.required],\n      'repaymentFrequencyType': ['', Validators.required],\n      'repaymentFrequencyNthDayType': [''],\n      'repaymentFrequencyDayOfWeekType': [''],\n      'repaymentsStartingFromDate': [''],\n      'interestChargedFromDate': [''],\n      'interestRatePerPeriod': [''],\n      'interestType': [''],\n      'isFloatingInterestRate': [''],\n      'isEqualAmortization': [''],\n      'amortizationType': ['', Validators.required],\n      'interestCalculationPeriodType': [''],\n      'allowPartialPeriodInterestCalcualtion': [''],\n      'inArrearsTolerance': [''],\n      'graceOnInterestCharged': [''],\n      'graceOnPrincipalPayment': [''],\n      'graceOnInterestPayment': [''],\n      'graceOnArrearsAgeing': [''],\n      'loanIdToClose': [''],\n      'fixedEmiAmount': [''],\n      'isTopup': [''],\n      'maxOutstandingLoanBalance': [''],\n      'transactionProcessingStrategyCode': ['', Validators.required]\n    });\n  }\n\n  /**\n   * Gets the Disbursement Data array.\n   * @returns {Array} Disbursement Data array.\n   */\n  get disbursementData() {\n    return {\n      disbursementData: this.disbursementDataSource\n    };\n  }\n\n  /**\n   * Adds the Disbursement Data entry form to given Disbursement Data entry.\n   */\n  addDisbursementDataEntry() {\n    const currentPrincipalAmount = this.loansAccountTermsForm.get('principalAmount').value;\n    const formfields: FormfieldBase[] = [\n      new DatepickerBase({\n        controlName: 'expectedDisbursementDate',\n        label: 'Expected Disbursement Date',\n        value: new Date() || '',\n        type: 'datetime-local',\n        minDate: this.minDate,\n        maxDate: this.maxDate,\n        required: true,\n        order: 1\n      }),\n      new InputBase({\n        controlName: 'principal',\n        label: 'Principal',\n        value: (currentPrincipalAmount - this.totalMultiDisbursed),\n        type: 'number',\n        required: true,\n        order: 2\n      })\n    ];\n    const data = {\n      title: 'Add Disbursement Details',\n      layout: { addButtonText: 'Add' },\n      formfields: formfields\n    };\n    const disbursementDialogRef = this.dialog.open(FormDialogComponent, { data });\n    disbursementDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const principal = response.data.value.principal * 1;\n        if ((this.totalMultiDisbursed + principal) <= currentPrincipalAmount) {\n          this.disbursementDataSource = this.disbursementDataSource.concat(response.data.value);\n          this.totalMultiDisbursed += principal;\n          this.isMultiDisbursedCompleted = (this.totalMultiDisbursed === currentPrincipalAmount);\n          this.pristine = false;\n        }\n      }\n    });\n  }\n\n  /**\n   * Removes the Disbursement Data entry form from given Disbursement Data entry form array at given index.\n   * @param {number} index Array index from where Disbursement Data entry form needs to be removed.\n   */\n  removeDisbursementDataEntry(index: number) {\n    const currentPrincipalAmount = this.loansAccountTermsForm.get('principalAmount').value;\n    const dialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `this` }\n    });\n    dialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        const principal = this.disbursementDataSource[index]['principal'] * 1;\n        this.disbursementDataSource.splice(index, 1);\n        this.disbursementDataSource = this.disbursementDataSource.concat([]);\n        this.totalMultiDisbursed -= principal;\n        this.isMultiDisbursedCompleted = (this.totalMultiDisbursed === currentPrincipalAmount);\n      }\n    });\n  }\n\n  /**\n   * Add a Collateral to the loan\n   */\n  addCollateral() {\n    const addCollateralDialogRef = this.dialog.open(LoansAccountAddCollateralDialogComponent, {\n      data: { collateralOptions: this.collateralOptions }\n    });\n    addCollateralDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const collateralData = {\n          type: response.data.value.collateral,\n          value: response.data.value.quantity,\n        };\n        this.totalCollateralValue += collateralData.type.pctToBase * collateralData.type.basePrice * collateralData.value / 100;\n        this.collateralDataSource = this.collateralDataSource.concat(collateralData);\n        this.collateralOptions = this.collateralOptions.filter((user: any) => user.collateralId !== response.data.value.collateral.collateralId);\n        if (this.loanPrincipal < this.totalCollateralValue) {\n          this.isCollateralSufficient = true;\n        } else {\n          this.isCollateralSufficient = false;\n        }\n      }\n    });\n  }\n  /**\n   * Delete a added collateral from loan\n   * @param id ID od the collateral to be deleted\n   */\n  deleteCollateral(id: any) {\n    const deleteCollateralDialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `collateral` }\n    });\n    deleteCollateralDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        const removed: any = this.collateralDataSource.splice(id, 1);\n        this.collateralOptions = this.collateralOptions.concat(removed[0].type);\n        this.totalCollateralValue -= removed[0].type.pctToBase * removed[0].type.basePrice * removed[0].value / 100;\n        this.collateralDataSource = this.collateralDataSource.concat([]);\n        this.pristine = false;\n        if (this.loanPrincipal < this.totalCollateralValue) {\n          this.isCollateralSufficient = true;\n        } else {\n          this.isCollateralSufficient = false;\n        }\n      }\n    });\n  }\n\n  /**\n   * Sets all select dropdown options.\n   */\n  setOptions() {\n    this.termFrequencyTypeData = this.loansAccountProductTemplate.termFrequencyTypeOptions;\n    this.repaymentFrequencyNthDayTypeData = this.loansAccountProductTemplate.repaymentFrequencyNthDayTypeOptions;\n    this.repaymentFrequencyDaysOfWeekTypeData = this.loansAccountProductTemplate.repaymentFrequencyDaysOfWeekTypeOptions;\n    this.interestTypeData = this.loansAccountProductTemplate.interestTypeOptions;\n    this.amortizationTypeData = this.loansAccountProductTemplate.amortizationTypeOptions;\n    this.interestCalculationPeriodTypeData = this.loansAccountProductTemplate.interestCalculationPeriodTypeOptions;\n    this.clientActiveLoanData = this.loansAccountProductTemplate.clientActiveLoanOptions;\n    this.transactionProcessingStrategyOptions = this.loansAccountProductTemplate.transactionProcessingStrategyOptions;\n  }\n\n  /**\n   * Returns loans account terms form value.\n   */\n  get loansAccountTerms() {\n    return this.loansAccountTermsForm.getRawValue();\n  }\n\n  get loanCollateral() {\n    return {\n      collateral: this.collateralDataSource\n    };\n  }\n\n}\n","<div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n  <mat-form-field fxFlex=\"48%\">\n    <mat-label>Charge</mat-label>\n    <mat-select #charge>\n      <mat-option *ngFor=\"let charge of chargeData\" [value]=\"charge\">\n        {{ charge.name }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n\n  <div fxFlex=\"48%\" fxFlexAlign=\"center\">\n    <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"addCharge(charge)\" [disabled]=\"!charge.value\">\n      <fa-icon icon=\"plus\" class=\"m-r-10\"></fa-icon>\n      Add\n    </button>\n  </div>\n\n  <table fxFlex=\"98%\" class=\"mat-elevation-z1\" mat-table [dataSource]=\"chargesDataSource\"\n    [hidden]=\"chargesDataSource.length === 0\">\n\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef> Name </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.name + ', ' + charge.currency.displaySymbol }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"chargeCalculationType\">\n      <th mat-header-cell *matHeaderCellDef> Type </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.chargeCalculationType.value }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"amount\">\n      <th mat-header-cell *matHeaderCellDef> Amount </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.amount }}\n        <button mat-icon-button color=\"primary\" (click)=\"editChargeAmount(charge)\">\n          <fa-icon icon=\"pen\"></fa-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"chargeTimeType\">\n      <th mat-header-cell *matHeaderCellDef> Collected On </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.chargeTimeType.value }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"date\">\n      <th mat-header-cell *matHeaderCellDef> Date </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        <span\n          *ngIf=\"charge.chargeTimeType.value === 'Specified due date' || charge.chargeTimeType.value === 'Weekly Fee'\">\n          {{(charge.dueDate | dateFormat) || 'Unassigned'}}\n        </span>\n        <span *ngIf=\"charge.chargeTimeType.value === 'Monthly Fee' || charge.chargeTimeType.value === 'Annual Fee'\">\n          {{(charge.feeOnMonthDay | dateFormat) || 'Unassigned'}}\n        </span>\n        <span\n          *ngIf=\"!(charge.chargeTimeType.value === 'Monthly Fee' || charge.chargeTimeType.value === 'Annual Fee'\n                      || charge.chargeTimeType.value === 'Specified due date' || charge.chargeTimeType.value === 'Weekly Fee')\">\n          N/A\n        </span>\n        <button mat-icon-button color=\"primary\" *ngIf=\"charge.chargeTimeType.value === 'Weekly Fee' || charge.chargeTimeType.value === 'Annual Fee'\n              || charge.chargeTimeType.value === 'Specified due date'\" (click)=\"editChargeDate(charge)\">\n          <fa-icon icon=\"pen\"></fa-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"action\">\n      <th mat-header-cell *matHeaderCellDef> Actions </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        <button mat-icon-button color=\"warn\" (click)=\"deleteCharge(charge)\">\n          <fa-icon icon=\"trash\"></fa-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"chargesDisplayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: chargesDisplayedColumns;\"></tr>\n\n  </table>\n\n  <mat-divider fxFlex=\"98%\"></mat-divider>\n\n  <h4 fxFlex=\"98%\" class=\"mat-h4\">Overdue Charges</h4>\n\n  <table mat-table class=\"mat-elevation-z1\" [dataSource]=\"overDueChargesDataSource\">\n\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef> Name </th>\n      <td mat-cell *matCellDef=\"let charge\"> {{ charge.name }},{{ charge.currency.displaySymbol }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"type\">\n      <th mat-header-cell *matHeaderCellDef> Type </th>\n      <td mat-cell *matCellDef=\"let charge\"> {{ charge.chargeCalculationType.value }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"amount\">\n      <th mat-header-cell *matHeaderCellDef> Amount </th>\n      <td mat-cell *matCellDef=\"let charge\"> {{ charge.amount| formatNumber }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"collectedon\">\n      <th mat-header-cell *matHeaderCellDef> Collected On </th>\n      <td mat-cell *matCellDef=\"let charge\"> {{ charge.chargeTimeType.value }} </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"overdueChargesDisplayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: overdueChargesDisplayedColumns;\"></tr>\n  </table>\n\n</div>\n\n<div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n  <button mat-raised-button matStepperPrevious>\n    <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n    Previous\n  </button>\n  <button mat-raised-button matStepperNext [disabled]=\"!loansAccountFormValid\">\n    Next&nbsp;&nbsp;\n    <fa-icon icon=\"arrow-right\"></fa-icon>\n  </button>\n  <button mat-raised-button *ngIf=\"loanId\" [routerLink]=\"['../', 'general']\">\n    Cancel\n  </button>\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, Input, OnChanges } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\n\n/** Dialog Components */\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\nimport { FormDialogComponent } from 'app/shared/form-dialog/form-dialog.component';\nimport { LoansAccountAddCollateralDialogComponent } from 'app/loans/custom-dialog/loans-account-add-collateral-dialog/loans-account-add-collateral-dialog.component';\n\n/** Custom Services */\nimport { DatepickerBase } from 'app/shared/form-dialog/formfield/model/datepicker-base';\nimport { FormfieldBase } from 'app/shared/form-dialog/formfield/model/formfield-base';\nimport { InputBase } from 'app/shared/form-dialog/formfield/model/input-base';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\nimport { ActivatedRoute } from '@angular/router';\n\n/**\n * Recurring Deposit Account Charges Step\n */\n@Component({\n  selector: 'mifosx-loans-account-charges-step',\n  templateUrl: './loans-account-charges-step.component.html',\n  styleUrls: ['./loans-account-charges-step.component.scss']\n})\nexport class LoansAccountChargesStepComponent implements OnInit, OnChanges {\n\n  // @Input loansAccountProductTemplate: LoansAccountProductTemplate\n  @Input() loansAccountProductTemplate: any;\n  // @Imput loansAccountTemplate: LoansAccountTemplate\n  @Input() loansAccountTemplate: any;\n  // @Input() loansAccountFormValid: LoansAccountFormValid\n  @Input() loansAccountFormValid: boolean;\n\n  /** Charges Data */\n  chargeData: any;\n  /** Charges Data Source */\n  chargesDataSource: {}[] = [];\n  /** Overdue Charges Data Source */\n  overDueChargesDataSource: {}[] = [];\n  /** Collateral Data Source */\n  collateralDataSource: {}[] = [];\n  /** Charges table columns */\n  chargesDisplayedColumns: string[] = ['name', 'chargeCalculationType', 'amount', 'chargeTimeType', 'date', 'action'];\n  /** Columns to be displayed in overdue charges table. */\n  overdueChargesDisplayedColumns: string[] = ['name', 'type', 'amount', 'collectedon'];\n  /** Component is pristine if there has been no changes by user interaction */\n  pristine = true;\n  /** Check if value of collateral added  is more than principal amount */\n  isCollateralSufficient = false;\n  /** Total value of all collateral added to a loan */\n  totalCollateralValue: any = 0;\n  loanId: any = null;\n\n  /**\n   * Loans Account Charges Form Step\n   * @param {dialog} MatDialog Mat Dialog\n   * @param {Dates} dateUtils Date Utils\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(public dialog: MatDialog,\n    private dateUtils: Dates,\n    private route: ActivatedRoute,\n    private settingsService: SettingsService) {\n    this.loanId = this.route.snapshot.params['loanId'];\n  }\n\n  ngOnInit() {\n    if (this.loansAccountTemplate && this.loansAccountTemplate.charges) {\n      this.chargesDataSource = this.loansAccountTemplate.charges.map((charge: any) => ({ ...charge, id: charge.chargeId })) || [];\n    }\n  }\n\n  /**\n   * Executes on change of input values\n   */\n  ngOnChanges() {\n    if (this.loansAccountProductTemplate) {\n      this.chargeData = this.loansAccountProductTemplate.chargeOptions;\n      if (this.loansAccountProductTemplate.overdueCharges) {\n        this.overDueChargesDataSource = this.loansAccountProductTemplate.overdueCharges;\n      }\n      if (this.loansAccountProductTemplate.charges) {\n        this.chargesDataSource = this.loansAccountProductTemplate.charges.map((charge: any) => ({ ...charge, id: charge.chargeId })) || [];\n      }\n    }\n  }\n\n  /**\n   * Add a charge\n   */\n  addCharge(charge: any) {\n    this.chargesDataSource = this.chargesDataSource.concat([charge.value]);\n    charge.value = '';\n    this.pristine = false;\n  }\n\n  /**\n   * Edits the Charge Amount\n   * @param {any} charge Charge\n   */\n  editChargeAmount(charge: any) {\n    const formfields: FormfieldBase[] = [\n      new InputBase({\n        controlName: 'amount',\n        label: 'Amount',\n        value: charge.amount,\n        type: 'number',\n        required: false\n      }),\n    ];\n    const data = {\n      title: 'Edit Charge Amount',\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editNoteDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editNoteDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const newCharge = { ...charge, amount: response.data.value.amount };\n        this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1, newCharge);\n        this.chargesDataSource = this.chargesDataSource.concat([]);\n      }\n    });\n    this.pristine = false;\n  }\n\n  /**\n   * Edits the Charge Date\n   * @param {any} charge Charge\n   */\n  editChargeDate(charge: any) {\n    const formfields: FormfieldBase[] = [\n      new DatepickerBase({\n        controlName: 'date',\n        label: 'Date',\n        value: charge.dueDate || charge.feeOnMonthDay || '',\n        type: 'datetime-local',\n        required: false\n      }),\n    ];\n    const data = {\n      title: 'Edit Charge Date',\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editNoteDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editNoteDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        let newCharge: any;\n        const dateFormat = this.settingsService.dateFormat;\n        const date = this.dateUtils.formatDate(response.data.value.date, dateFormat);\n        switch (charge.chargeTimeType.value) {\n          case 'Specified due date':\n          case 'Weekly Fee':\n            newCharge = { ...charge, dueDate: date };\n            break;\n          case 'Annual Fee':\n            newCharge = { ...charge, feeOnMonthDay: date };\n            break;\n        }\n        this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1, newCharge);\n        this.chargesDataSource = this.chargesDataSource.concat([]);\n      }\n    });\n    this.pristine = false;\n  }\n\n  /**\n   * Edits the Charge Fee Interval\n   * @param {any} charge Charge\n   */\n  editChargeFeeInterval(charge: any) {\n    const formfields: FormfieldBase[] = [\n      new InputBase({\n        controlName: 'feeInterval',\n        label: 'Fee Interval',\n        value: charge.feeInterval,\n        type: 'text',\n        required: false\n      }),\n    ];\n    const data = {\n      title: 'Edit Charge Fee Interval',\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editNoteDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editNoteDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const newCharge = { ...charge, feeInterval: response.data.value.feeInterval };\n        this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1, newCharge);\n        this.chargesDataSource = this.chargesDataSource.concat([]);\n      }\n    });\n    this.pristine = false;\n  }\n\n  /**\n   * Delete a particular charge\n   * @param charge Charge\n   */\n  deleteCharge(charge: any) {\n    const deleteChargeDialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `charge ${charge.name}` }\n    });\n    deleteChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1);\n        this.chargesDataSource = this.chargesDataSource.concat([]);\n        this.pristine = false;\n      }\n    });\n  }\n\n\n  /**\n   * Returns Loans Account Charges and Collateral Form\n   */\n  get loansAccountCharges() {\n    return {\n      charges: this.chargesDataSource,\n    };\n  }\n\n}\n","<div fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\n\n  <a mat-button (click)=\"showRepaymentInfo()\">\n    Repayment Info\n  </a>\n\n  <mifosx-repayment-schedule-tab fxFlex=\"100%\" [repaymentScheduleDetails]=\"repaymentScheduleDetails\"></mifosx-repayment-schedule-tab>\n\n</div>\n\n<div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n  <button mat-raised-button matStepperPrevious>\n    <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n    Previous\n  </button>\n  <button mat-raised-button matStepperNext>\n    Next&nbsp;&nbsp;\n    <fa-icon icon=\"arrow-right\"></fa-icon>\n  </button>\n  <button mat-raised-button *ngIf=\"loanId\" [routerLink]=\"['../', 'general']\">\n    Cancel\n  </button>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { LoansService } from 'app/loans/loans.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n@Component({\n  selector: 'mifosx-loans-account-schedule-step',\n  templateUrl: './loans-account-schedule-step.component.html',\n  styleUrls: ['./loans-account-schedule-step.component.scss']\n})\nexport class LoansAccountScheduleStepComponent implements OnInit {\n\n  /** Loans Account Template */\n  @Input() loansAccountTemplate: any;\n  /** Loans Account Product Template */\n  @Input() loansAccountProductTemplate: any;\n  /** Loans Account Data */\n  @Input() loansAccount: any;\n\n  showRepayment = false;\n  repaymentScheduleDetails: any = {periods: []};\n\n  loanId: any = null;\n\n  constructor(private loansService: LoansService,\n    private settingsService: SettingsService,\n    private route: ActivatedRoute) {\n      this.loanId = this.route.snapshot.params['loanId'];\n  }\n\n  ngOnInit(): void { }\n\n  showRepaymentInfo(): void {\n    this.repaymentScheduleDetails = {periods: []};\n    this.showRepayment = !this.showRepayment;\n    if (this.showRepayment) {\n      const locale = this.settingsService.language.code;\n      const dateFormat = this.settingsService.dateFormat;\n      const payload = this.loansService.buildLoanRequestPayload(this.loansAccount, this.loansAccountTemplate,\n        this.loansAccountProductTemplate.calendarOptions, locale, dateFormat);\n\n      this.loansService.calculateLoanSchedule(payload).subscribe((response: any) => {\n        this.repaymentScheduleDetails = response;\n      });\n    }\n  }\n}\n","<form [formGroup]=\"datatableForm\">\n\n  <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n    <div *ngFor=\"let datatableInput of datatableInputs\" fxFlex=\"48%\">\n      <mat-form-field fxFlex=\"100%\" *ngIf=\"!isBoolean(datatableInput.columnDisplayType)\">\n\n        <mat-label>{{getInputName(datatableInput)}}</mat-label>\n\n        <mat-select *ngIf=\"isDropdown(datatableInput.columnDisplayType)\" formControlName=\"{{datatableInput.controlName}}\">\n          <mat-option *ngFor=\"let code of datatableInput.columnValues\" [value]=\"code.id\">\n            {{ code.value }}\n          </mat-option>\n        </mat-select>\n\n        <input matInput type=\"number\" *ngIf=\"isNumeric(datatableInput.columnDisplayType)\"\n        formControlName=\"{{datatableInput.controlName}}\">\n\n        <input matInput *ngIf=\"isString(datatableInput.columnDisplayType)\"\n        formControlName=\"{{datatableInput.controlName}}\">\n\n        <textarea matInput *ngIf=\"isText(datatableInput.columnDisplayType)\"\n        formControlName=\"{{datatableInput.controlName}}\"></textarea>\n\n        <span *ngIf=\"isDate(datatableInput.columnDisplayType)\" (click)=\"datePicker.open()\">\n          <input matInput [matDatepicker]=\"datePicker\" formControlName=\"{{datatableInput.controlName}}\" class=\"date-picker\">\n          <mat-datepicker-toggle matSuffix [for]=\"datePicker\"></mat-datepicker-toggle>\n          <mat-datepicker #datePicker></mat-datepicker>\n        </span>\n      </mat-form-field>\n\n      <mat-checkbox *ngIf=\"isBoolean(datatableInput.columnDisplayType)\" formControlName=\"{{datatableInput.controlName}}\"\n        labelPosition=\"before\" class=\"margin-v\">\n        {{getInputName(datatableInput)}}\n      </mat-checkbox>\n    </div>\n\n  </div>\n\n  <div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n    <button mat-raised-button matStepperPrevious disabled>\n      <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n      Previous\n    </button>\n    <button mat-raised-button matStepperNext>\n      Next&nbsp;&nbsp;\n      <fa-icon icon=\"arrow-right\"></fa-icon>\n    </button>\n  </div>\n\n</form>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Dates } from 'app/core/utils/dates';\nimport { SettingsService } from 'app/settings/settings.service';\n\n@Component({\n  selector: 'mifosx-loans-account-datatable-step',\n  templateUrl: './loans-account-datatable-step.component.html',\n  styleUrls: ['./loans-account-datatable-step.component.scss']\n})\nexport class LoansAccountDatatableStepComponent implements OnInit {\n  /** Input Fields Data */\n  @Input() datatableData: any;\n  /** Create Input Form */\n  datatableForm: FormGroup;\n\n  datatableInputs: any = [];\n\n  constructor(private formBuilder: FormBuilder,\n    private settingsService: SettingsService,\n    private dateUtils: Dates) { }\n\n  ngOnInit(): void {\n    this.datatableInputs = this.datatableData.columnHeaderData.filter((column: any) => {\n      return ((column.columnName !== 'id') && (column.columnName !== 'loan_id') && (column.columnName !== 'created_at') && (column.columnName !== 'updated_at'));\n    });\n    const inputItems: any = {};\n    this.datatableInputs.forEach((input: any) => {\n      input.controlName = this.getInputName(input);\n      if (!input.isColumnNullable) {\n        if (this.isNumeric(input.columnDisplayType)) {\n          inputItems[input.controlName] = new FormControl(0, [Validators.required]);\n        } else {\n          inputItems[input.controlName] = new FormControl('', [Validators.required]);\n        }\n      } else {\n        inputItems[input.controlName] = new FormControl('');\n      }\n    });\n    this.datatableForm = this.formBuilder.group(inputItems);\n  }\n\n  getInputName(datatableInput: any): string {\n    if (datatableInput.columnName && datatableInput.columnName.includes('_cd_')) {\n      return datatableInput.columnName.split('_cd_')[0];\n    }\n    return datatableInput.columnName;\n  }\n\n  isNumeric(columnType: string) {\n    return this.isColumnType(columnType, 'INTEGER') || this.isColumnType(columnType, 'DECIMAL');\n  }\n\n  isDate(columnType: string) {\n    return this.isColumnType(columnType, 'DATE') || this.isColumnType(columnType, 'DATETIME');\n  }\n\n  isBoolean(columnType: string) {\n    return this.isColumnType(columnType, 'BOOLEAN');\n  }\n\n  isDropdown(columnType: string) {\n    return this.isColumnType(columnType, 'CODELOOKUP');\n  }\n\n  isString(columnType: string) {\n    return this.isColumnType(columnType, 'STRING');\n  }\n\n  isText(columnType: string) {\n    return this.isColumnType(columnType, 'TEXT');\n  }\n\n  isColumnType(columnType: string, expectedType: string) {\n    return (columnType === expectedType);\n  }\n\n  get payload(): any {\n    const dateFormat = this.settingsService.dateFormat;\n    const datatableDataValues = this.datatableForm.value;\n    const data = {\n      locale: this.settingsService.language.code\n    };\n    let existDate = false;\n    this.datatableInputs.forEach((input: any) => {\n      const controlName = this.getInputName(input);\n      if (this.isNumeric(input.columnDisplayType)) {\n        data[input.columnName] = datatableDataValues[controlName] * 1;\n      } else if (this.isDate(input.columnDisplayType)) {\n        data[input.columnName] = this.dateUtils.formatDate(datatableDataValues[controlName], dateFormat);\n        existDate = true;\n      } else {\n        data[input.columnName] = datatableDataValues[controlName];\n      }\n    });\n\n    if (existDate) {\n      data['dateFormat'] = dateFormat;\n    }\n\n    const payload = {\n      registeredTableName: this.datatableData.registeredTableName,\n      data: data\n    };\n    return payload;\n  }\n\n}\n","<div fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\n\n  <h3 class=\"mat-h3\" fxFlexFill>Details</h3>\n\n  <mat-divider fxFlexFill></mat-divider>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Product:</span>\n    <span fxFlex=\"60%\">{{ loansAccount.productId | find:loansAccountTemplate.productOptions:'id':'name' }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"loansAccount.loanOfficerId\">\n    <span fxFlex=\"40%\">Loan officer:</span>\n    <span\n      fxFlex=\"60%\">{{ loansAccount.loanOfficerId | find:loansAccountProductTemplate.loanOfficerOptions:'id':'displayName'}}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"loansAccount.loanPurposeId\">\n    <span fxFlex=\"40%\">Loan purpose:</span>\n    <span\n      fxFlex=\"60%\">{{ loansAccount.loanPurposeId | find:loansAccountProductTemplate.loanPurposeOptions:'id':'name'}}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"loansAccount.fundId\">\n    <span fxFlex=\"40%\">Fund:</span>\n    <span fxFlex=\"60%\">{{ loansAccount.fundId | find:loansAccountProductTemplate.fundOptions:'id':'name'}}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Submitted on:</span>\n    <span fxFlex=\"60%\">{{ loansAccount.submittedOnDate  | dateFormat }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Disbursement on:</span>\n    <span fxFlex=\"60%\">{{ loansAccount.expectedDisbursementDate  | dateFormat }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"loansAccount.externalId\">\n    <span fxFlex=\"40%\">External id:</span>\n    <span fxFlex=\"60%\">{{ loansAccount.externalId }}</span>\n  </div>\n\n  <h3 class=\"mat-h3\" fxFlexFill>Terms</h3>\n\n  <mat-divider fxFlexFill></mat-divider>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Principal:</span>\n    <span fxFlex=\"60%\">{{ loansAccount.principal }} {{loansAccountProductTemplate.currency.DisplaySymbol}}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Loan term:</span>\n    <span fxFlex=\"60%\">{{ loansAccount.loanTermFrequency }}\n      {{loansAccount.loanTermFrequencyType | find: loansAccountProductTemplate.termFrequencyTypeOptions:'id':'name'}}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Number of repayments:</span>\n    <span fxFlex=\"60%\">{{ loansAccount.numberOfRepayments }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Repaid every:</span>\n    <span fxFlex=\"60%\">{{loansAccount.repaymentEvery}}\n      {{loansAccount.repaymentFrequencyType | find: loansAccountProductTemplate.termFrequencyTypeOptions:'id':'name'}}\n      {{loansAccount.repaymentFrequencyNthDayType | find: loansAccountProductTemplate.repaymentFrequencyNthDayTypeOptions:'id': 'name'}}\n      {{loansAccount.repaymentFrequencyDayOfWeekType | find: loansAccountProductTemplate.repaymentFrequencyDaysOfWeekTypeOptions:'id': 'name'}}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"loansAccount.repaymentsStartingFromDate\">\n    <span fxFlex=\"40%\">First repayment on:</span>\n    <span fxFlex=\"60%\">{{ loansAccount.repaymentsStartingFromDate  | dateFormat }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"loansAccount.interestChargedFromDate\">\n    <span fxFlex=\"40%\">Interest charged from:</span>\n    <span fxFlex=\"60%\">{{ loansAccount.interestChargedFromDate  | dateFormat }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"loansAccount.interestRatePerPeriod\">\n    <span fxFlex=\"40%\">Nominal interest rate:</span>\n    <span\n      fxFlex=\"60%\">{{loansAccount.interestRatePerPeriod}}&nbsp;&nbsp;{{loansAccountProductTemplate.interestRateFrequencyType.value}}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"loansAccount.interestType\">\n    <span fxFlex=\"40%\">Interest method: </span>\n    <span fxFlex=\"60%\">{{loansAccount.interestType}}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"loansAccount.isEqualAmortization\">\n    <span fxFlex=\"40%\">Is Equal Amortization:</span>\n    <span fxFlex=\"60%\">{{loansAccount.isEqualAmortization}}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Amortization</span>\n    <span\n      fxFlex=\"60%\">{{ loansAccount.amortizationType | find:loansAccountProductTemplate.amortizationTypeOptions:'id':'value' }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Interest calculation period: </span>\n    <span\n      fxFlex=\"60%\">{{ loansAccount.interestCalculationPeriodType | find:loansAccountProductTemplate.interestCalculationPeriodTypeOptions:'id':'value'  }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"loansAccount.allowPartialPeriodInterestCalcualtion\">\n    <span fxFlex=\"40%\">Calculate interest for exact days in partial period:</span>\n    <span fxFlex=\"60%\">{{ loansAccount.allowPartialPeriodInterestCalcualtion }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"loansAccount.inArrearsTolerance\">\n    <span fxFlex=\"40%\">Arrears tolerance: </span>\n    <span\n      fxFlex=\"60%\">{{loansAccount.inArrearsTolerance}}&nbsp;{{loansAccountProductTemplate.currency.displaySymbol}}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"loansAccount.graceOnInterestCharged\">\n    <span fxFlex=\"40%\">Interest free period: </span>\n    <span fxFlex=\"60%\">{{ loansAccount.graceOnInterestCharged }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Repayment strategy: </span>\n    <span\n      fxFlex=\"60%\">{{ loansAccount.transactionProcessingStrategyCode | find:loansAccountTemplate.transactionProcessingStrategyOptions:'code':'name' }}</span>\n  </div>\n\n  <h3 class=\"mat-h3\" fxFlexFill>Moratorium</h3>\n\n  <mat-divider fxFlexFill></mat-divider>\n\n  <div fxFlexFill *ngIf=\"loansAccount.graceOnPrincipalPayment\">\n    <span fxFlex=\"40%\">On principal payment: </span>\n    <span fxFlex=\"60%\">{{ loansAccount.graceOnPrincipalPayment }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"loansAccount.graceOnInterestPayment\">\n    <span fxFlex=\"40%\">On interest payment: </span>\n    <span fxFlex=\"60%\">{{ loansAccount.graceOnInterestPayment }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"loansAccount.graceOnArrearsAgeing\">\n    <span fxFlex=\"40%\">On Arrears Aging: </span>\n    <span fxFlex=\"60%\">{{ loansAccount.graceOnArrearsAgeing }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"loansAccount.isTopup\">\n    <span fxFlex=\"40%\">Is Topup Loan? </span>\n    <span fxFlex=\"60%\">{{ loansAccount.isTopup }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Recalculate Interest: </span>\n    <span fxFlex=\"60%\">{{ loansAccountProductTemplate?.isInterestRecalculationEnabled? 'Yes' : 'No' }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"loansAccountProductTemplate?.daysInMonthType\">\n    <span fxFlex=\"40%\">Days in month: </span>\n    <span fxFlex=\"60%\">{{ loansAccountProductTemplate?.daysInMonthType.value }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"loansAccount.charges.length\" fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\n\n    <h3 class=\"mat-h3\" fxFlexFill>Charges</h3>\n\n    <mat-divider fxFlexFill></mat-divider>\n\n    <table fxFlexFill class=\"mat-elevation-z1\" mat-table [dataSource]=\"loansAccount.charges\">\n\n      <ng-container matColumnDef=\"name\">\n        <th mat-header-cell *matHeaderCellDef> Name </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.name + ', ' + charge.currency.displaySymbol }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"chargeCalculationType\">\n        <th mat-header-cell *matHeaderCellDef> Type </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.chargeCalculationType.value }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"amount\">\n        <th mat-header-cell *matHeaderCellDef> Amount </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.amount }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"chargeTimeType\">\n        <th mat-header-cell *matHeaderCellDef> Collected On </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.chargeTimeType.value }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"date\">\n        <th mat-header-cell *matHeaderCellDef> Date </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          <span\n            *ngIf=\"charge.chargeTimeType.value === 'Specified due date' || charge.chargeTimeType.value === 'Weekly Fee'\">\n            {{(charge.dueDate  | dateFormat) || 'Unassigned'}}\n          </span>\n          <span *ngIf=\"charge.chargeTimeType.value === 'Monthly Fee' || charge.chargeTimeType.value === 'Annual Fee'\">\n            {{(charge.feeOnMonthDay  | dateFormat) || 'Unassigned'}}\n          </span>\n          <span\n            *ngIf=\"!(charge.chargeTimeType.value === 'Monthly Fee' || charge.chargeTimeType.value === 'Annual Fee'\n                  || charge.chargeTimeType.value === 'Specified due date' || charge.chargeTimeType.value === 'Weekly Fee')\">\n            N/A\n          </span>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"chargesDisplayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: chargesDisplayedColumns;\"></tr>\n\n    </table>\n\n  </div>\n\n  <div fxFlexFill *ngIf=\"loansAccountProductTemplate.overdueCharges.length\" fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\n\n    <h3 fxFlex=\"98%\" class=\"mat-h3\">Overdue Charges</h3>\n\n    <mat-divider fxFlex=\"98%\"></mat-divider>\n\n    <table mat-table class=\"mat-elevation-z1\" [dataSource]=\"loansAccountProductTemplate.overdueCharges\">\n\n      <ng-container matColumnDef=\"name\">\n        <th mat-header-cell *matHeaderCellDef> Name </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{ charge.name }},{{ charge.currency.displaySymbol }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"type\">\n        <th mat-header-cell *matHeaderCellDef> Type </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{ charge.chargeCalculationType.value }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"amount\">\n        <th mat-header-cell *matHeaderCellDef> Amount </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{ charge.amount| formatNumber }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"collectedon\">\n        <th mat-header-cell *matHeaderCellDef> Collected On </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{ charge.chargeTimeType.value }} </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"overdueChargesDisplayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: overdueChargesDisplayedColumns;\"></tr>\n    </table>\n  </div>\n\n</div>\n\n<div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n  <button mat-raised-button matStepperPrevious>\n    <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n    Previous\n  </button>\n  <button mat-raised-button [routerLink]=\"['../']\">\n    Cancel\n  </button>\n  <button mat-raised-button color=\"primary\" (click)=\"submit.emit()\">\n    Submit\n  </button>\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n/**\n * Create Loans Account Preview Step\n */\n@Component({\n  selector: 'mifosx-loans-account-preview-step',\n  templateUrl: './loans-account-preview-step.component.html',\n  styleUrls: ['./loans-account-preview-step.component.scss']\n})\nexport class LoansAccountPreviewStepComponent implements OnInit {\n\n  /** Loans Account Template */\n  @Input() loansAccountTemplate: any;\n  /** Loans Account Product Template */\n  @Input() loansAccountProductTemplate: any;\n  /** Loans Account Data */\n  @Input() loansAccount: any;\n  /** Submit Loans Account */\n  @Output() submit = new EventEmitter();\n\n  /** Charges Displayed Columns */\n  chargesDisplayedColumns: string[] = ['name', 'chargeCalculationType', 'amount', 'chargeTimeType', 'date'];\n  /** Overdue Charges Displayed Columns */\n  overdueChargesDisplayedColumns: string[] = ['name', 'type', 'amount', 'collectedon'];\n\n  constructor() { }\n\n  ngOnInit() { }\n\n}\n","<div class=\"container\">\n\n  <mat-horizontal-stepper class=\"mat-elevation-z8\" labelPosition=\"bottom\" #loansAccountStepper>\n    <ng-template matStepperIcon=\"number\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"edit\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"done\">\n      <fa-icon icon=\"check\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"error\">\n      <fa-icon icon=\"exclamation-triangle\" size=\"lg\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"preview\">\n      <fa-icon icon=\"eye\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <mat-step [stepControl]=\"loansAccountDetailsForm\">\n\n      <ng-template matStepLabel>DETAILS</ng-template>\n\n      <mifosx-loans-account-details-step [loansAccountTemplate]=\"loansAccountTemplate\"\n        (loansAccountProductTemplate)=\"setTemplate($event)\" #loansAccountDetailsForm>\n      </mifosx-loans-account-details-step>\n\n    </mat-step>\n\n    <mat-step [stepControl]=\"loansAccountTermsForm\">\n\n      <ng-template matStepLabel>TERMS</ng-template>\n\n      <mifosx-loans-account-terms-step #loanAccountTerms [loansAccountProductTemplate]=\"loansAccountProductTemplate\"\n      [loansAccountTemplate] = \"loansAccountTemplate\" [collateralOptions]=\"collateralOptions\"\n      [loansAccountFormValid]=\"loansAccountFormValid\" [loanPrincipal]=\"loanPrincipal\">\n      </mifosx-loans-account-terms-step>\n\n    </mat-step>\n\n    <mat-step>\n\n      <ng-template matStepLabel>CHARGES</ng-template>\n\n      <mifosx-loans-account-charges-step #loanAccountCharges [loansAccountProductTemplate]=\"loansAccountProductTemplate\"\n        [loansAccountTemplate]=\"loansAccountTemplate\"\n        [loansAccountFormValid]=\"loansAccountFormValid\">\n      </mifosx-loans-account-charges-step>\n\n    </mat-step>\n\n    <mat-step state=\"repayment\" *ngIf=\"loansAccountFormValid\" completed>\n\n      <ng-template matStepLabel>REPAYMENT SCHEDULE</ng-template>\n\n      <mifosx-loans-account-schedule-step #loanAccountSchedule [loansAccountTemplate]=\"loansAccountTemplate\"\n        [loansAccountProductTemplate]=\"loansAccountProductTemplate\" [loansAccount]=\"loansAccount\">\n      </mifosx-loans-account-schedule-step>\n\n    </mat-step>\n\n    <mat-step *ngFor=\"let datatable of datatables\">\n\n      <ng-template matStepLabel>{{datatable.registeredTableName}}</ng-template>\n\n      <mifosx-loans-account-datatable-step [datatableData]=\"datatable\" #dtloan></mifosx-loans-account-datatable-step>\n\n    </mat-step>\n\n    <mat-step state=\"preview\" *ngIf=\"loansAccountFormValid\" completed>\n\n      <ng-template matStepLabel>PREVIEW</ng-template>\n\n      <mifosx-loans-account-preview-step [loansAccountTemplate]=\"loansAccountTemplate\"\n        [loansAccountProductTemplate]=\"loansAccountProductTemplate\" [loansAccount]=\"loansAccount\" (submit)=\"submit()\">\n      </mifosx-loans-account-preview-step>\n\n    </mat-step>\n\n  </mat-horizontal-stepper>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { LoansService } from '../loans.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { ClientsService } from 'app/clients/clients.service';\n\n/** Step Components */\nimport { LoansAccountDetailsStepComponent } from '../loans-account-stepper/loans-account-details-step/loans-account-details-step.component';\nimport { LoansAccountTermsStepComponent } from '../loans-account-stepper/loans-account-terms-step/loans-account-terms-step.component';\nimport { LoansAccountChargesStepComponent } from '../loans-account-stepper/loans-account-charges-step/loans-account-charges-step.component';\nimport { LoansAccountDatatableStepComponent } from '../loans-account-stepper/loans-account-datatable-step/loans-account-datatable-step.component';\n\n/**\n * Create loans account\n */\n@Component({\n  selector: 'mifosx-create-loans-account',\n  templateUrl: './create-loans-account.component.html',\n  styleUrls: ['./create-loans-account.component.scss']\n})\nexport class CreateLoansAccountComponent implements OnInit {\n\n  /** Imports all the step component */\n  @ViewChild(LoansAccountDetailsStepComponent, { static: true }) loansAccountDetailsStep: LoansAccountDetailsStepComponent;\n  @ViewChild(LoansAccountTermsStepComponent, { static: true }) loansAccountTermsStep: LoansAccountTermsStepComponent;\n  @ViewChild(LoansAccountChargesStepComponent, { static: true }) loansAccountChargesStep: LoansAccountChargesStepComponent;\n  /** Get handle on dtloan tags in the template */\n  @ViewChildren('dtloan') loanDatatables: QueryList<LoansAccountDatatableStepComponent>;\n\n  /** Loans Account Template */\n  loansAccountTemplate: any;\n  /** Loans Account Product Template */\n  loansAccountProductTemplate: any;\n  /** Collateral Options */\n  collateralOptions: any;\n  /** Multi Disburse Loan */\n  multiDisburseLoan: any;\n  /** Principal Amount */\n  principal: any;\n  datatables: any = [];\n\n  /**\n   * Sets loans account create form.\n   * @param {route} ActivatedRoute Activated Route.\n   * @param {router} Router Router.\n   * @param {loansService} LoansService Loans Service\n   * @param {SettingsService} settingsService Settings Service\n   * @param {ClientsService} clientService Client Service\n   */\n  constructor(private route: ActivatedRoute,\n    private router: Router,\n    private loansService: LoansService,\n    private settingsService: SettingsService,\n    private clientService: ClientsService\n  ) {\n    this.route.data.subscribe((data: { loansAccountTemplate: any }) => {\n      this.loansAccountTemplate = data.loansAccountTemplate;\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  /**\n   * Sets loans account product template and collateral template\n   * @param {any} $event API response\n   */\n  setTemplate($event: any) {\n    this.loansAccountProductTemplate = $event;\n    const clientId = this.loansAccountTemplate.clientId;\n    this.clientService.getCollateralTemplate(clientId).subscribe((response: any) => {\n      this.collateralOptions = response;\n    });\n    const entityId = (this.loansAccountTemplate.clientId) ? this.loansAccountTemplate.clientId : this.loansAccountTemplate.group.id;\n    const isGroup = (this.loansAccountTemplate.clientId) ? false : true;\n    const productId = this.loansAccountProductTemplate.loanProductId;\n    this.loansService.getLoansAccountTemplateResource(entityId, isGroup, productId).subscribe((response: any) => {\n      this.multiDisburseLoan = response.multiDisburseLoan;\n    });\n    this.setDatatables();\n  }\n\n  setDatatables(): void {\n    this.datatables = [];\n\n    if (this.loansAccountProductTemplate.datatables) {\n      this.loansAccountProductTemplate.datatables.forEach((datatable: any) => {\n        this.datatables.push(datatable);\n      });\n    }\n  }\n\n  /** Get Loans Account Details Form Data */\n  get loansAccountDetailsForm() {\n    return this.loansAccountDetailsStep.loansAccountDetailsForm;\n  }\n\n  /** Get Loans Account Terms Form Data */\n  get loansAccountTermsForm() {\n    return this.loansAccountTermsStep.loansAccountTermsForm;\n  }\n\n  /** Checks wheter all the forms in different steps are valid or not */\n  get loansAccountFormValid() {\n    return (\n      this.loansAccountDetailsForm.valid &&\n      this.loansAccountTermsForm.valid\n    );\n  }\n\n  /** Gets principal Amount */\n  get loanPrincipal() {\n    return this.loansAccountTermsStep.loansAccountTermsForm.value.principal;\n  }\n\n  /** Retrieves Data of all forms except Currency to submit the data */\n  get loansAccount() {\n    return {\n      ...this.loansAccountDetailsStep.loansAccountDetails,\n      ...this.loansAccountTermsStep.loansAccountTerms,\n      ...this.loansAccountChargesStep.loansAccountCharges,\n      ...this.loansAccountTermsStep.loanCollateral,\n      ...this.loansAccountTermsStep.disbursementData\n    };\n  }\n\n  /**\n   * Submits Data to create loan account\n   */\n  submit() {\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const payload = this.loansService.buildLoanRequestPayload(this.loansAccount, this.loansAccountTemplate,\n      this.loansAccountProductTemplate.calendarOptions, locale, dateFormat);\n\n    if (this.loansAccountProductTemplate.datatables && this.loansAccountProductTemplate.datatables.length > 0) {\n      const datatables: any[] = [];\n      this.loanDatatables.forEach((loanDatatable: LoansAccountDatatableStepComponent) => {\n        datatables.push(loanDatatable.payload);\n      });\n      payload['datatables'] = datatables;\n    }\n\n    this.loansService.createLoansAccount(payload).subscribe((response: any) => {\n      this.router.navigate(['../', response.resourceId, 'general'], { relativeTo: this.route });\n    });\n  }\n\n}\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n/** Custom Services */\nimport { environment } from 'environments/environment';\nimport { LoansService } from 'app/loans/loans.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Overdue charges tab component\n */\n@Component({\n  selector: 'mifosx-loan-documents-tab',\n  templateUrl: './loan-documents-tab.component.html',\n  styleUrls: ['./loan-documents-tab.component.scss']\n})\nexport class LoanDocumentsTabComponent implements OnInit {\n\n  /** Stores the resolved loan documents data */\n  entityDocuments: any;\n  /** Loan account Id */\n  entityId: string;\n  entityType = 'loans';\n\n  /**\n   * Retrieves the loans data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute,\n    private loansService: LoansService,\n    private settingsService: SettingsService) {\n      this.entityId = this.route.snapshot.params['loanId'];\n\n    this.route.data.subscribe((data: { loanDocuments: any }) => {\n      this.getLoanDocumentsData(data.loanDocuments);\n    });\n  }\n\n  ngOnInit() { }\n\n  getLoanDocumentsData(data: any) {\n    data.forEach((ele: any) => {\n      ele.docUrl = this.settingsService.serverUrl + '/loans/' + ele.parentEntityId + '/documents/' + ele.id + '/attachment?tenantIdentifier=' + environment.fineractPlatformTenantId;\n      if (ele.fileName) {\n        if (ele.fileName.toLowerCase().indexOf('.jpg') !== -1 || ele.fileName.toLowerCase().indexOf('.jpeg') !== -1 || ele.fileName.toLowerCase().indexOf('.png') !== -1) {\n          ele.fileIsImage = true;\n        }\n      }\n      if (ele.type) {\n        if (ele.type.toLowerCase().indexOf('image') !== -1) {\n          ele.fileIsImage = true;\n        }\n      }\n    });\n    this.entityDocuments = data;\n  }\n\n  downloadDocument(documentId: string) {\n    this.loansService.downloadLoanDocument(this.entityId, documentId).subscribe(res => {\n      const url = window.URL.createObjectURL(res);\n      window.open(url);\n    });\n  }\n\n  uploadDocument(formData: FormData): any {\n    return this.loansService.loadLoanDocument(this.entityId, formData);\n  }\n\n  deleteDocument(documentId: any) {\n    this.loansService.deleteLoanDocument(this.entityId, documentId).subscribe((res: any) => {});\n  }\n\n}\n","<mifosx-entity-documents-tab [entityType]=\"entityType\" [entityId]=\"entityId\"\n  [entityDocuments]=\"entityDocuments\"\n  [callbackUpload]=\"uploadDocument\"\n  [callbackDownload]=\"downloadDocument\"\n  [callbackDelete]=\"deleteDocument\"\n>\n</mifosx-entity-documents-tab>\n","<div class=\"tab-container mat-typography\">\n\n  <div class=\"m-b-10\">\n    <h3>All Standing Instructions</h3>\n  </div>\n\n  <div class=\"mat-elevation-z1 m-b-25\">\n\n    <table mat-table #instructionsTable [dataSource]=\"dataSource\">\n\n      <ng-container matColumnDef=\"client\">\n        <th mat-header-cell *matHeaderCellDef> Client </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.fromClient.displayName}}-{{instruction.fromClient.id}}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"fromAccount\">\n        <th mat-header-cell *matHeaderCellDef> From Account </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.fromAccount.accountNo}}\n          ({{instruction.fromAccountType.value}})</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"beneficiary\">\n        <th mat-header-cell *matHeaderCellDef> Beneficiary </th>\n        <td mat-cell *matCellDef=\"let instruction\">\n          <span *ngIf=\"instruction.fromClient.id != instruction.toClient.id\"> {{instruction.toClient.displayName}} </span>\n          <span *ngIf=\"instruction.fromClient.id == instruction.toClient.id\">Own Account</span>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"toAccount\">\n        <th mat-header-cell *matHeaderCellDef> To Account </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.toAccount.accountNo}}\n          ({{instruction.toAccountType.value}})</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"amount\">\n        <th mat-header-cell *matHeaderCellDef> Amount </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.instructionType.value}}/{{instruction.amount}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"validity\">\n        <th mat-header-cell *matHeaderCellDef> Validity </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.validFrom  | dateFormat}} to {{instruction.validTill  | dateFormat}}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef> Actions </th>\n        <td mat-cell *matCellDef=\"let instruction\">\n          <span *ngIf=\"instruction.status.value!=='Deleted'\">\n            <button class=\"account-action-button\" mat-raised-button color=\"primary\"\n              matTooltip=\"Edit Standing Instruction\" *mifosxHasPermission=\"'UPDATE_STANDINGINSTRUCTION'\">\n              <i class=\"fa fa-edit\"></i>\n            </button>\n          </span>\n          <span *ngIf=\"instruction.status.value!=='Deleted'\">\n            <button class=\"account-action-button\" mat-raised-button color=\"warn\"\n              matTooltip=\"Delete Standing Instruction\" *mifosxHasPermission=\"'DELETE_STANDINGINSTRUCTION'\" (click)=\"deleteStandingInstruction(instruction.id)\">\n              <i class=\"fa fa-times\"></i>\n            </button>\n          </span>\n          <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"View Standing Instruction\"\n            *mifosxHasPermission=\"'READ_STANDINGINSTRUCTION'\">\n            <i class=\"fa fa-eye\"></i>\n          </button>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n    </table>\n\n  </div>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatTableDataSource, MatTable } from '@angular/material/table';\nimport { ActivatedRoute } from '@angular/router';\n\n/** Custom Services */\nimport { LoansService } from 'app/loans/loans.service';\nimport { AccountTransfersService } from 'app/account-transfers/account-transfers.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Dialog Components */\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\n\n/**\n * Loans Standing Instructions Tab\n */\n@Component({\n  selector: 'mifosx-standing-instructions-tab',\n  templateUrl: './standing-instructions-tab.component.html',\n  styleUrls: ['./standing-instructions-tab.component.scss']\n})\nexport class StandingInstructionsTabComponent implements OnInit {\n\n  /** Loans Data */\n  loanDetailsData: any;\n  /** Instructions Data */\n  instructionsData: any[];\n  /** Data source for instructions table. */\n  dataSource = new MatTableDataSource();\n  /** Columns to be displayed in instructions table. */\n  displayedColumns: string[] = ['client', 'fromAccount', 'beneficiary', 'toAccount', 'amount', 'validity', 'actions'];\n\n  /** Instruction Table Reference */\n  @ViewChild('instructionsTable', { static: true }) instructionTableRef: MatTable<Element>;\n\n  /**\n   * Retrieves Loans Account Data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private route: ActivatedRoute,\n    private loansService: LoansService,\n    private dialog: MatDialog,\n    private accountTransfersService: AccountTransfersService,\n    private settingsService: SettingsService) {\n    this.route.parent.data.subscribe((data: { loanDetailsData: any }) => {\n      this.loanDetailsData = data.loanDetailsData;\n    });\n  }\n\n  ngOnInit() {\n    this.getStandingInstructions();\n  }\n\n  /**\n   * Retrieves standing instructions and initializes instructions table.\n   */\n  getStandingInstructions() {\n    const clientId = this.loanDetailsData.clientId;\n    const clientName = this.loanDetailsData.clientName;\n    const accountId = this.loanDetailsData.id;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    this.loansService.getStandingInstructions(clientId, clientName, accountId, locale, dateFormat).subscribe((response: any) => {\n      this.instructionsData = response.pageItems;\n      this.dataSource.data = this.instructionsData;\n      this.instructionTableRef.renderRows();\n    });\n  }\n\n  deleteStandingInstruction(instructionId: any) {\n    const deleteStandingInstructionDialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `standing instruction id: ${instructionId}` }\n    });\n    deleteStandingInstructionDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        this.accountTransfersService.deleteStandingInstrucions(instructionId)\n          .subscribe(() => { });\n      }\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-horizontal-stepper class=\"mat-elevation-z8\" labelPosition=\"bottom\" #loansAccountStepper>\n    <ng-template matStepperIcon=\"number\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"edit\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"done\">\n      <fa-icon icon=\"check\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"error\">\n      <fa-icon icon=\"exclamation-triangle\" size=\"lg\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"preview\">\n      <fa-icon icon=\"eye\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <mat-step [stepControl]=\"loansAccountDetailsForm\">\n\n      <ng-template matStepLabel>DETAILS</ng-template>\n\n      <mifosx-loans-account-details-step [loansAccountTemplate]=\"loansAccountAndTemplate\"\n        (loansAccountProductTemplate)=\"setTemplate($event)\">\n      </mifosx-loans-account-details-step>\n\n    </mat-step>\n\n    <mat-step [stepControl]=\"loansAccountTermsForm\">\n\n      <ng-template matStepLabel>TERMS</ng-template>\n\n      <mifosx-loans-account-terms-step [loansAccountProductTemplate]=\"loansAccountProductTemplate\"\n      [loansAccountTemplate]=\"loansAccountAndTemplate\" [collateralOptions]=\"collateralOptions\">\n      </mifosx-loans-account-terms-step>\n\n    </mat-step>\n\n    <mat-step>\n\n      <ng-template matStepLabel>CHARGES</ng-template>\n\n      <mifosx-loans-account-charges-step [loansAccountProductTemplate]=\"loansAccountProductTemplate\"\n        [loansAccountTemplate]=\"loansAccountAndTemplate\"\n        [loansAccountFormValid]=\"loansAccountFormValidAndNotPristine\">\n      </mifosx-loans-account-charges-step>\n\n    </mat-step>\n\n    <mat-step>\n\n      <ng-template matStepLabel>REPAYMENT SCHEDULE</ng-template>\n\n      <mifosx-loans-account-schedule-step [loansAccountTemplate]=\"loansAccountAndTemplate\"\n        [loansAccountProductTemplate]=\"loansAccountProductTemplate\" [loansAccount]=\"loansAccount\">\n      </mifosx-loans-account-schedule-step>\n\n    </mat-step>\n\n    <mat-step state=\"preview\" *ngIf=\"loansAccountFormValidAndNotPristine\" completed>\n\n      <ng-template matStepLabel>PREVIEW</ng-template>\n\n      <mifosx-loans-account-preview-step [loansAccountTemplate]=\"loansAccountAndTemplate\"\n        [loansAccountProductTemplate]=\"loansAccountProductTemplate\" [loansAccount]=\"loansAccount\" (submit)=\"submit()\">\n      </mifosx-loans-account-preview-step>\n\n    </mat-step>\n\n  </mat-horizontal-stepper>\n\n</div>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { LoansService } from '../loans.service';\nimport { LoansAccountDetailsStepComponent } from '../loans-account-stepper/loans-account-details-step/loans-account-details-step.component';\nimport { LoansAccountTermsStepComponent } from '../loans-account-stepper/loans-account-terms-step/loans-account-terms-step.component';\nimport { LoansAccountChargesStepComponent } from '../loans-account-stepper/loans-account-charges-step/loans-account-charges-step.component';\n\n/** Custom Services */\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Edit Loans\n */\n@Component({\n  selector: 'mifosx-edit-loans-account',\n  templateUrl: './edit-loans-account.component.html',\n  styleUrls: ['./edit-loans-account.component.scss']\n})\nexport class EditLoansAccountComponent implements OnInit {\n\n  @ViewChild(LoansAccountDetailsStepComponent, { static: true }) loansAccountDetailsStep: LoansAccountDetailsStepComponent;\n  @ViewChild(LoansAccountTermsStepComponent, { static: true }) loansAccountTermsStep: LoansAccountTermsStepComponent;\n  @ViewChild(LoansAccountChargesStepComponent, { static: true }) loansAccountChargesStep: LoansAccountChargesStepComponent;\n\n  loansAccountAndTemplate: any;\n  /** Loans Account Product Template */\n  loansAccountProductTemplate: any;\n  /** Collateral Options */\n  collateralOptions: any;\n  /** Loan Id */\n  loanId: any;\n\n  /**\n   * Sets loans account edit form.\n   * @param {route} ActivatedRoute Activated Route.\n   * @param {router} Router Router.\n   * @param {Dates} dateUtils Date Utils\n   * @param {loansService} LoansService Loans Service\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private route: ActivatedRoute,\n    private router: Router,\n    private dateUtils: Dates,\n    private loansService: LoansService,\n    private settingsService: SettingsService\n  ) {\n    this.route.data.subscribe((data: { loansAccountAndTemplate: any }) => {\n      this.loansAccountAndTemplate = data.loansAccountAndTemplate;\n    });\n    this.loanId = this.route.snapshot.params['loanId'];\n  }\n\n  ngOnInit() {\n  }\n\n  /**\n   * Sets loans account product template and collateral template\n   * @param {any} $event API response\n   */\n  setTemplate($event: any) {\n    this.loansAccountProductTemplate = $event;\n    if (this.loansAccountProductTemplate.loanProductId) {\n      this.loansService.getLoansCollateralTemplateResource(this.loansAccountProductTemplate.loanProductId).subscribe((response: any) => {\n        this.collateralOptions = response.loanCollateralOptions;\n      });\n    }\n  }\n\n  /** Get Loans Account Details Form Data */\n  get loansAccountDetailsForm() {\n    return this.loansAccountDetailsStep.loansAccountDetailsForm;\n  }\n\n  /** Get Loans Account Terms Form Data */\n  get loansAccountTermsForm() {\n    return this.loansAccountTermsStep.loansAccountTermsForm;\n  }\n\n  /** Checks wheter all the forms in different steps are valid and not pristine */\n  get loansAccountFormValidAndNotPristine() {\n    return (\n      (this.loansAccountDetailsForm.valid &&\n      this.loansAccountTermsForm.valid) &&\n      (\n        !this.loansAccountDetailsForm.pristine ||\n        !this.loansAccountTermsForm.pristine ||\n        !this.loansAccountTermsStep.pristine ||\n        !this.loansAccountChargesStep.pristine\n      )\n    );\n  }\n\n  /** Retrieves Data of all forms except Currency to submit the data */\n  get loansAccount() {\n    return {\n      ...this.loansAccountDetailsStep.loansAccountDetails,\n      ...this.loansAccountTermsStep.loansAccountTerms,\n      ...this.loansAccountChargesStep.loansAccountCharges,\n      ...this.loansAccountTermsStep.loanCollateral,\n      ...this.loansAccountTermsStep.disbursementData\n    };\n  }\n\n  /**\n   * Submits Data to create loan account\n   */\n  submit() {\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const loanType = 'individual';\n    const loansAccountData = {\n      ...this.loansAccount,\n      clientId: this.loansAccountAndTemplate.clientId,\n      charges: this.loansAccount.charges.map((charge: any) => ({\n        chargeId: charge.id,\n        amount: charge.amount,\n        dueDate: charge.dueDate && this.dateUtils.formatDate(charge.dueDate, dateFormat),\n      })),\n      collateral: this.loansAccount.collateral.map((collateralEle: any) => ({\n        type: collateralEle.type,\n        value: collateralEle.value,\n        description: collateralEle.description\n      })),\n      disbursementData: this.loansAccount.disbursementData.map((item: any) => ({\n        expectedDisbursementDate: this.dateUtils.formatDate(item.expectedDisbursementDate, dateFormat),\n        principal: item.principal\n      })),\n      interestChargedFromDate: this.dateUtils.formatDate(this.loansAccount.interestChargedFromDate, dateFormat),\n      repaymentsStartingFromDate: this.dateUtils.formatDate(this.loansAccount.repaymentsStartingFromDate, dateFormat),\n      submittedOnDate: this.dateUtils.formatDate(this.loansAccount.submittedOnDate, dateFormat),\n      expectedDisbursementDate: this.dateUtils.formatDate(this.loansAccount.expectedDisbursementDate, dateFormat),\n      dateFormat,\n      locale,\n      loanType\n    };\n    delete loansAccountData.isValid;\n    if (loansAccountData.syncRepaymentsWithMeeting) {\n      loansAccountData.calendarId = this.loansAccountProductTemplate.calendarOptions[0].id;\n      delete loansAccountData.syncRepaymentsWithMeeting;\n    }\n\n    if (loansAccountData.recalculationRestFrequencyDate) {\n      loansAccountData.recalculationRestFrequencyDate = this.dateUtils.formatDate(this.loansAccount.recalculationRestFrequencyDate, dateFormat);\n    }\n\n    if (loansAccountData.interestCalculationPeriodType === 0) {\n      loansAccountData.allowPartialPeriodInterestCalcualtion = false;\n    }\n    if (!(loansAccountData.isFloatingInterestRate === false)) {\n      delete loansAccountData.isFloatingInterestRate;\n    }\n    loansAccountData.principal = loansAccountData.principalAmount;\n    delete loansAccountData.principalAmount;\n    this.loansService.updateLoansAccount(this.loanId, loansAccountData).subscribe((response: any) => {\n      this.router.navigate(['../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div *ngIf=\"loansAccountData.status.value === 'Active' && chargeData.amountOutstanding !== 0\" fxLayout=\"row\"\n  fxLayoutAlign=\"end\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\" class=\"container m-b-20\">\n  <button mat-raised-button color=\"primary\" *mifosxHasPermission=\"'WAIVE_SAVINGSACCOUNTCHARGE'\" (click)=\"editCharge()\">\n    <fa-icon icon=\"flag\" class=\"m-r-10\"></fa-icon>\n    Edit\n  </button>\n  <span *ngIf=\"allowPayCharge\">\n    <button mat-raised-button color=\"accent\" *mifosxHasPermission=\"'PAY_SAVINGSACCOUNTCHARGE'\" (click)=\"payCharge()\">\n      <fa-icon icon=\"dollar-sign\" class=\"m-r-10\"></fa-icon>\n      Pay\n    </button>\n  </span>\n  <span *ngIf=\"allowWaive\">\n    <button mat-raised-button color=\"primary\" *mifosxHasPermission=\"'WAIVE_SAVINGSACCOUNTCHARGE'\"\n      (click)=\"waiveCharge()\">\n      <fa-icon icon=\"flag\" class=\"m-r-10\"></fa-icon>\n      Waive\n    </button>\n  </span>\n  <span>\n    <button mat-raised-button color=\"accent\" *mifosxHasPermission=\"'ADJUSTMENT_LOANCHARGE'\"\n      (click)=\"adjustmentCharge()\">\n      <fa-icon icon=\"pen\" class=\"m-r-10\"></fa-icon>\n      Adjustment\n    </button>\n  </span>\n</div>\n\n<div *ngIf=\"loansAccountData.status.value === 'Submitted and pending approval'\" fxLayout=\"row\" fxLayoutAlign=\"end\"\n  fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\" class=\"container m-b-20\">\n  <button mat-raised-button color=\"primary\" *mifosxHasPermission=\"'UPDATE_SAVINGSACCOUNTCHARGE'\" (click)=\"editCharge()\">\n    <fa-icon icon=\"edit\" class=\"m-r-10\"></fa-icon>\n    Edit\n  </button>\n  <button mat-raised-button color=\"warn\" *mifosxHasPermission=\"'DELETE_SAVINGSACCOUNTCHARGE'\" (click)=\"deleteCharge()\">\n    <fa-icon icon=\"trash\" class=\"m-r-10\"></fa-icon>\n    Delete\n  </button>\n</div>\n\n<div class=\"container\">\n\n  <mat-card>\n\n    <mat-card-content>\n\n      <div fxLayout=\"row wrap\" class=\"content\">\n        <div fxFlex=\"100%\" [ngClass]=\"loanChargeColor()\">\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Name\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ chargeData.name }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Charge Type\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ chargeData.penalty ? 'Penalty' : 'Fees' }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Currency\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ chargeData.currency.displayLabel }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Payment due at\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ chargeData.chargeTimeType.value }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Payment due as of\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ chargeData.dueDate | dateFormat }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Calculation Type\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ chargeData.chargeCalculationType.value }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Due\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ chargeData.amount | formatNumber }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Paid\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ chargeData.amountPaid | formatNumber }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Waived\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ chargeData.amountWaived | formatNumber }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Outstanding\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ chargeData.amountOutstanding | formatNumber }}\n        </div>\n\n      </div>\n\n      <div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n        <button type=\"button\" mat-raised-button color=\"primary\" [routerLink]=\"['../']\">{{ 'Back' | translate }}</button>\n      </div>\n    </mat-card-content>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\n\n/** Custom Services */\nimport { LoansService } from 'app/loans/loans.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Custom Dialogs */\nimport { FormDialogComponent } from 'app/shared/form-dialog/form-dialog.component';\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\nimport { ConfirmationDialogComponent } from 'app/shared/confirmation-dialog/confirmation-dialog.component';\n\n/** Custom Models */\nimport { FormfieldBase } from 'app/shared/form-dialog/formfield/model/formfield-base';\nimport { InputBase } from 'app/shared/form-dialog/formfield/model/input-base';\nimport { DatepickerBase } from 'app/shared/form-dialog/formfield/model/datepicker-base';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * View Charge Component.\n */\n@Component({\n  selector: 'mifosx-view-charge',\n  templateUrl: './view-charge.component.html',\n  styleUrls: ['./view-charge.component.scss']\n})\nexport class ViewChargeComponent {\n\n  /** Charge data. */\n  chargeData: any;\n  /** Loans Account Data */\n  loansAccountData: any;\n  allowPayCharge = true;\n  allowWaive = true;\n\n  /**\n   * Retrieves the Charge data from `resolve`.\n   * @param {LoansService} loansService Loans Service\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   * @param {MatDialog} dialog Dialog reference.\n   * @param {Dates} dateUtils Date Utils.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private loansService: LoansService,\n              private route: ActivatedRoute,\n              private dateUtils: Dates,\n              private router: Router,\n              public dialog: MatDialog,\n              private settingsService: SettingsService) {\n    this.route.data.subscribe((data: { loansAccountCharge: any, loanDetailsData: any }) => {\n      this.chargeData = data.loansAccountCharge;\n      this.allowPayCharge = (this.chargeData.chargePayable && !this.chargeData.paid);\n      this.allowWaive = !this.chargeData.chargeTimeType.waived;\n      this.loansAccountData = data.loanDetailsData;\n    });\n  }\n\n  /**\n   * Pays the charge.\n   */\n  payCharge() {\n    const formfields: FormfieldBase[] = [\n      new DatepickerBase({\n        controlName: 'transactionDate',\n        label: 'Payment Date',\n        value: '',\n        type: 'date',\n        required: true\n      })\n    ];\n    const data = {\n      title: `Pay Charge ${this.chargeData.id}`,\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const payChargeDialogRef = this.dialog.open(FormDialogComponent, { data });\n    payChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const locale = this.settingsService.language.code;\n        const dateFormat = this.settingsService.dateFormat;\n        const prevTransactionDate: Date = response.data.value.transactionDate;\n        const dataObject = {\n          transactionDate: this.dateUtils.formatDate(prevTransactionDate, dateFormat),\n          dateFormat,\n          locale\n        };\n        this.loansService.executeLoansAccountChargesCommand(this.chargeData.loanId, 'pay', dataObject, this.chargeData.id)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Waive's the charge\n   */\n  waiveCharge() {\n    const waiveChargeDialogRef = this.dialog.open(ConfirmationDialogComponent, { data: { heading: 'Waive Charge', dialogContext: `Are you sure you want to waive charge with id: ${this.chargeData.id}`, type: 'Basic' } });\n    waiveChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.loansService.executeLoansAccountChargesCommand(this.chargeData.loanId, 'waive', {}, this.chargeData.id)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Edits the charge\n   */\n  editCharge() {\n    const formfields: FormfieldBase[] = [\n      new InputBase({\n        controlName: 'amount',\n        label: 'Amount',\n        value: this.chargeData.amount || this.chargeData.amountOrPercentage,\n        type: 'number',\n        required: true\n      }),\n      new DatepickerBase({\n        controlName: 'dueDate',\n        label: 'Due Date',\n        value: new Date(this.chargeData.dueDate),\n        type: 'date',\n        maxDate: this.settingsService.maxAllowedDate,\n        required: true\n      })\n    ];\n    const data = {\n      title: 'Edit Charge',\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editChargeDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const locale = this.settingsService.language.code;\n        const dateFormat = this.settingsService.dateFormat;\n        const dueDate = this.dateUtils.formatDate(response.data.value.dueDate, dateFormat);\n        const amount = response.data.value.amount;\n        const dataObject = {\n          amount,\n          dueDate,\n          dateFormat,\n          locale\n        };\n        this.loansService.editLoansAccountCharge(this.loansAccountData.id, dataObject, this.chargeData.id)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Deletes the charge\n   */\n  deleteCharge() {\n    const deleteChargeDialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `charge id:${this.chargeData.id}` }\n    });\n    deleteChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        this.loansService.deleteLoansAccountCharge(this.loansAccountData.id, this.chargeData.id)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  loanChargeColor(): string {\n    return this.chargeData.paid ? 'paid' : 'not-paid';\n  }\n\n  adjustmentCharge(): void {\n    this.router.navigate(['adjustment'], { relativeTo: this.route});\n  }\n\n  /**\n   * Refetches data fot the component\n   * TODO: Replace by a custom reload component instead of hard-coded back-routing.\n   */\n  private reload() {\n    const clientId = this.loansAccountData.clientId;\n    const url: string = this.router.url;\n    this.router.navigateByUrl(`/clients/${clientId}/loans-accounts`, { skipLocationChange: true })\n      .then(() => this.router.navigate([url]));\n  }\n\n}\n","<div fxLayoutAlign=\"end\" class=\"container m-b-20 transaction-buttons\" fxLayoutGap=\"2%\"\n  *ngIf=\"!(transactionData.type.contra)\">\n  <span *mifosxHasPermission=\"'ADJUST_LOAN'\">\n    <button mat-raised-button color=\"primary\" [routerLink]=\"'edit'\" [disabled]=\"!allowEdition\">\n      <fa-icon icon=\"edit\" class=\"m-r-10\"></fa-icon>{{ 'Edit' | translate }}\n    </button>\n\n    <button mat-raised-button color=\"warn\" (click)=\"undoTransaction()\" [disabled]=\"!allowUndo\">\n      <fa-icon icon=\"undo\" class=\"m-r-10\"></fa-icon>{{ 'Undo' | translate }}\n    </button>\n  </span>\n  <span *mifosxHasPermission=\"'CHARGEBACK_LOAN'\">\n    <button mat-raised-button color=\"warn\" [disabled]=\"!allowChargeback\" (click)=\"chargebackTransaction()\">\n      <fa-icon icon=\"undo\" class=\"m-r-10\"></fa-icon>{{ 'Chargeback' | translate }}\n    </button>\n  </span>\n</div>\n\n<div class=\"container\">\n\n  <mat-card>\n\n    <mat-card-content>\n\n      <div fxLayout=\"row wrap\" class=\"content\">\n        <div fxFlex=\"100%\" [ngClass]=\"loanTransactionColor()\">\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          {{ 'Transaction Id' | translate }}\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ transactionData.id }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\" *ngIf=\"transactionData.toLoanTransactionRelation\">\n          {{ 'Repayment Transaction' | translate }}\n        </div>\n\n        <div fxFlex=\"50%\" *ngIf=\"transactionData.toLoanTransactionRelation\">\n          <a [href]=\"loanTransactionRelatedLink(transactionData.toLoanTransactionRelation.fromLoanTransaction)\">\n              {{ transactionData.toLoanTransactionRelation.fromLoanTransaction }}\n          </a>\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          {{ 'Type' | translate }}\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ transactionData.type.value }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          {{ 'Transaction Date' | translate }}\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ transactionData.date | dateFormat }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          {{ 'Currency' | translate }}\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ transactionData.currency.name }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          {{ 'Amount' | translate }}\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ transactionData.amount | currency }} {{ transactionData.currency.code }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\" *ngIf=\"transactionData.externalId\">\n          {{ 'External Id' | translate }}\n        </div>\n\n        <div fxFlex=\"50%\" *ngIf=\"transactionData.externalId\">\n          {{ transactionData.externalId }}\n        </div>\n\n        <mat-divider *ngIf=\"existTransactionRelations\" [inset]=\"true\"></mat-divider>\n\n        <div fxFlex=\"100%\" class=\"mat-body-strong\" *ngIf=\"existTransactionRelations\">\n          {{ 'Linked Transactions' | translate }}\n          <br>\n\n          <table mat-table [dataSource]=\"transactionRelations\">\n              <ng-container matColumnDef=\"relationType\">\n                <th mat-header-cell *matHeaderCellDef> Relation Type </th>\n                <td mat-cell *matCellDef=\"let transactionRel\" [matTooltip]=\"transactionRel.paymentType\">\n                  {{ transactionRel.relationType | translate }}\n                </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"toTransaction\">\n                <th mat-header-cell *matHeaderCellDef> Transaction </th>\n                <td mat-cell *matCellDef=\"let transactionRel\">\n                  <a [href]=\"loanTransactionRelatedLink(transactionRel.toLoanTransaction)\">\n                    {{ transactionRel.toLoanTransaction }}\n                  </a>\n                </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"amount\">\n                <th mat-header-cell *matHeaderCellDef> Amount </th>\n                <td mat-cell *matCellDef=\"let transactionRel\">\n                  {{ transactionRel.amount | currency }} {{ transactionData.currency.code }}\n                </td>\n              </ng-container>\n              <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n              <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n          </table>\n        </div>\n\n        <mat-divider *ngIf=\"transactionData.paymentDetailData\" [inset]=\"true\"></mat-divider>\n\n        <ng-container *ngIf=\"transactionData.paymentDetailData\">\n\n          <div *ngIf=\"transactionData.paymentDetailData.paymentType\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            {{ 'Payment Type' | translate }}\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.paymentType\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.paymentType.name }}\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.accountNumber\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            {{ 'Account No.' | translate }}\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.accountNumber\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.accountNumber }}\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.checkNumber\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            {{ 'Cheque Number' | translate }}\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.checkNumber\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.checkNumber }}\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.routingCode\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            {{ 'Routing Code' | translate }}\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.routingCode\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.routingCode }}\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.receiptNumber\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            {{ 'Receipt No.' | translate }}\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.receiptNumber\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.receiptNumber }}\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.bankNumber\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            {{ 'Bank No.' | translate }}\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.bankNumber\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.bankNumber }}\n          </div>\n\n        </ng-container>\n\n      </div>\n\n      <div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n        <button type=\"button\" mat-raised-button color=\"primary\" [routerLink]=\"['../']\">{{ 'Back' | translate }}</button>\n      </div>\n    </mat-card-content>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\n\n/** Custom Services */\nimport { LoansService } from 'app/loans/loans.service';\nimport { ConfirmationDialogComponent } from 'app/shared/confirmation-dialog/confirmation-dialog.component';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\nimport { OrganizationService } from 'app/organization/organization.service';\nimport { FormfieldBase } from 'app/shared/form-dialog/formfield/model/formfield-base';\nimport { InputBase } from 'app/shared/form-dialog/formfield/model/input-base';\nimport { SelectBase } from 'app/shared/form-dialog/formfield/model/select-base';\nimport { FormDialogComponent } from 'app/shared/form-dialog/form-dialog.component';\nimport { MatTableDataSource } from '@angular/material/table';\n\n/** Custom Dialogs */\n\n/**\n * View Transaction Component.\n * TODO: Add support for account transfers.\n */\n@Component({\n  selector: 'mifosx-view-transaction',\n  templateUrl: './view-transaction.component.html',\n  styleUrls: ['./view-transaction.component.scss']\n})\nexport class ViewTransactionComponent implements OnInit {\n\n  /** Transaction data. */\n  transactionData: any;\n  /** Is Editable */\n  allowEdition = true;\n  /** Is Undoable */\n  allowUndo = true;\n  /** Is able to be Chargeback */\n  allowChargeback = true;\n  existTransactionRelations = false;\n\n  paymentTypeOptions: {}[] = [];\n  transactionRelations = new MatTableDataSource();\n  /** Columns to be displayed in Transaction Relations table. */\n  displayedColumns: string[] = ['relationType', 'toTransaction', 'amount'];\n  isFullRelated = false;\n  amountRelationsAllowed = 0;\n\n  clientId: number;\n  loanId: number;\n\n  /**\n   * Retrieves the Transaction data from `resolve`.\n   * @param {LoansService} loansService Loans Service\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   * @param {MatDialog} dialog Dialog reference.\n   * @param {Dates} dateUtils Date Utils.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private loansService: LoansService,\n              private route: ActivatedRoute,\n              private dateUtils: Dates,\n              private router: Router,\n              public dialog: MatDialog,\n              private settingsService: SettingsService,\n              private organizationService: OrganizationService) {\n    this.route.data.subscribe((data: { loansAccountTransaction: any }) => {\n      this.transactionData = data.loansAccountTransaction;\n      this.allowEdition = !this.transactionData.manuallyReversed && !this.allowTransactionEdition(this.transactionData.type.id);\n      this.allowUndo = !this.transactionData.manuallyReversed;\n      this.allowChargeback = this.transactionData.type.repayment && !this.transactionData.manuallyReversed;\n      let transactionsChargebackRelated = false;\n      if (this.transactionData.type.repayment) {\n        if (this.transactionData.transactionRelations) {\n          this.transactionRelations.data = this.transactionData.transactionRelations;\n          this.existTransactionRelations = (this.transactionData.transactionRelations.length > 0);\n          let amountRelations = 0;\n          this.transactionData.transactionRelations.forEach((relation: any) => {\n            if (relation.relationType === 'CHARGEBACK') {\n              amountRelations += relation.amount;\n              transactionsChargebackRelated = true;\n            }\n          });\n          this.amountRelationsAllowed = this.transactionData.amount - amountRelations;\n          this.isFullRelated =  (this.amountRelationsAllowed === 0);\n          this.allowChargeback = this.transactionData.type.repayment && !this.isFullRelated;\n        }\n      }\n      if (!this.allowChargeback) {\n        this.allowEdition = false;\n      }\n      if (this.existTransactionRelations && transactionsChargebackRelated) {\n        this.allowUndo = false;\n      }\n    });\n    this.clientId = this.route.snapshot.params['clientId'];\n    this.loanId = this.route.snapshot.params['loanId'];\n  }\n\n  ngOnInit(): void {\n    if (this.allowChargeback) {\n      this.organizationService.getPaymentTypesWithCode().toPromise()\n      .then(data => {\n        this.paymentTypeOptions = data;\n      });\n    }\n  }\n\n  /**\n   * Allow edit, undo and chargeback actions\n   */\n  allowTransactionEdition(transactionType: number): boolean {\n    return (transactionType === 20\n      || transactionType === 21 || transactionType === 22\n      || transactionType === 23);\n  }\n\n  /**\n   * Undo the loans transaction\n   */\n  undoTransaction() {\n    const accountId = this.route.snapshot.params['loanId'];\n    const undoTransactionAccountDialogRef = this.dialog.open(ConfirmationDialogComponent, {\n      data: { heading: 'Undo Transaction', dialogContext: `Are you sure you want undo the transaction ${this.transactionData.id}` }\n    });\n    undoTransactionAccountDialogRef.afterClosed().subscribe((response: { confirm: any }) => {\n      if (response.confirm) {\n        const locale = this.settingsService.language.code;\n        const dateFormat = this.settingsService.dateFormat;\n        const data = {\n          transactionDate: this.dateUtils.formatDate(this.transactionData.date && new Date(this.transactionData.date), dateFormat),\n          transactionAmount: 0,\n          dateFormat,\n          locale\n        };\n        this.loansService.executeLoansAccountTransactionsCommand(accountId, 'undo', data, this.transactionData.id).subscribe(() => {\n          this.router.navigate(['../'], { relativeTo: this.route });\n        });\n      }\n    });\n  }\n\n  chargebackTransaction() {\n    const accountId = this.route.snapshot.params['loanId'];\n    const formfields: FormfieldBase[] = [\n      new SelectBase({\n        controlName: 'paymentTypeId',\n        label: 'Payment Type',\n        value: '',\n        options: { label: 'name', value: 'id', data: this.paymentTypeOptions },\n        required: true,\n        order: 1\n      }),\n      new InputBase({\n        controlName: 'amount',\n        label: 'Amount',\n        value: this.amountRelationsAllowed,\n        type: 'number',\n        required: true,\n        max: this.amountRelationsAllowed,\n        order: 2\n      })\n    ];\n    const data = {\n      title: 'Chargeback Repayment Transaction',\n      layout: { addButtonText: 'Chargeback' },\n      formfields: formfields\n    };\n    const chargebackDialogRef = this.dialog.open(FormDialogComponent, { data });\n    chargebackDialogRef.afterClosed().subscribe((response: { data: any }) => {\n      if (response.data) {\n        if (response.data.value.amount <= this.amountRelationsAllowed) {\n          const locale = this.settingsService.language.code;\n          const payload = {\n            transactionAmount: response.data.value.amount,\n            paymentTypeId: response.data.value.paymentTypeId,\n            locale\n          };\n          this.loansService.executeLoansAccountTransactionsCommand(accountId, 'chargeback', payload, this.transactionData.id).subscribe(() => {\n            this.router.navigate(['../'], { relativeTo: this.route });\n          });\n        }\n      }\n    });\n  }\n\n  loanTransactionRelatedLink(transactionId: number) {\n    return `/#/clients/${this.clientId}/loans-accounts/${this.loanId}/transactions/${transactionId}`;\n  }\n\n  loanTransactionColor(): string {\n    if (this.transactionData.manuallyReversed) {\n      return 'undo';\n    }\n    if (this.existTransactionRelations) {\n      return 'linked';\n    }\n    return 'active';\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"editTransactionForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content fxLayout=\"column\">\n\n        <mat-form-field (click)=\"dueDatePicker.open()\">\n          <mat-label>Transaction Date</mat-label>\n          <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"dueDatePicker\"\n            formControlName=\"transactionDate\" required>\n          <mat-datepicker-toggle matSuffix [for]=\"dueDatePicker\"></mat-datepicker-toggle>\n          <mat-datepicker #dueDatePicker></mat-datepicker>\n          <mat-error *ngIf=\"editTransactionForm.controls.transactionDate.hasError('required')\">\n            Transaction Date is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n          <mat-label>Transaction Amount</mat-label>\n          <input type=\"number\" formControlName=\"transactionAmount\" required matInput />\n          <mat-error *ngIf=\"editTransactionForm.controls.transactionAmount.hasError('required')\">\n            Transaction Amount is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n          <mat-label>External Id</mat-label>\n          <input matInput formControlName=\"externalId\">\n        </mat-form-field>\n\n        <mat-form-field>\n          <mat-label>Payment Type</mat-label>\n          <mat-select formControlName=\"paymentTypeId\">\n            <mat-option *ngFor=\"let paymentType of paymentTypeOptions\" [value]=\"paymentType.id\">\n              {{ paymentType.name }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <div fxFlexFill>\n          <span fxFlex=\"75%\" class=\"expandcollapsebutton m-l-10 m-t-40\" (click)=\"addPaymentDetails()\">\n            <mat-slide-toggle>\n              <div [className]=\"showPaymentDetails ? 'enabled' : 'disabled'\">\n                <span class=\"m-l-10\">Show Payment Details</span>\n              </div>\n            </mat-slide-toggle>\n          </span>\n        </div>\n\n        <mat-form-field *ngIf=\"editTransactionForm.controls['accountNumber']\">\n          <mat-label>Account Number</mat-label>\n          <input type=\"number\" formControlName=\"accountNumber\" matInput />\n        </mat-form-field>\n\n        <mat-form-field *ngIf=\"editTransactionForm.controls['checkNumber']\">\n          <mat-label>Cheque</mat-label>\n          <input type=\"number\" formControlName=\"checkNumber\" matInput />\n        </mat-form-field>\n\n        <mat-form-field *ngIf=\"editTransactionForm.controls['routingCode']\">\n          <mat-label>Routing Code</mat-label>\n          <input formControlName=\"routingCode\" matInput />\n        </mat-form-field>\n\n        <mat-form-field *ngIf=\"editTransactionForm.controls['receiptNumber']\">\n          <mat-label>Receipt Number</mat-label>\n          <input formControlName=\"receiptNumber\" matInput />\n        </mat-form-field>\n\n        <mat-form-field *ngIf=\"editTransactionForm.controls['bankNumber']\">\n          <mat-label>Bank</mat-label>\n          <input formControlName=\"bankNumber\" matInput />\n        </mat-form-field>\n\n        <mat-card-actions fxLayoutGap=\"5px\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!editTransactionForm.valid\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\n\n/** Custom Services */\nimport { LoansService } from 'app/loans/loans.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Edit Transaction component.\n */\n@Component({\n  selector: 'mifosx-edit-transaction',\n  templateUrl: './edit-transaction.component.html',\n  styleUrls: ['./edit-transaction.component.scss']\n})\nexport class EditTransactionComponent implements OnInit {\n\n  /** Minimum Due Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Due Date allowed. */\n  maxDate = new Date();\n  /** Loans account transaction form. */\n  editTransactionForm: FormGroup;\n  /** loans account transaction payment options. */\n  paymentTypeOptions: {\n    id: number,\n    name: string,\n    description: string,\n    isCashPayment: boolean,\n    position: number\n  }[];\n  /** Flag to enable payment details fields. */\n  showPaymentDetails: Boolean = false;\n  /** loan account's Id */\n  loanAccountId: string;\n  /** Transaction Template */\n  transactionTemplateData: any;\n\n  /**\n   * Retrieves the Loan Account transaction template data from `resolve`.\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {LoansService} loansService Loans Service.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Dates} dateUtils Date Utils.\n   * @param {Router} router Router for navigation.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private route: ActivatedRoute,\n              private router: Router,\n              private dateUtils: Dates,\n              private loansService: LoansService,\n              private settingsService: SettingsService) {\n    this.route.data.subscribe((data: { loansAccountTransactionTemplate: any }) => {\n      this.transactionTemplateData = data.loansAccountTransactionTemplate;\n      this.paymentTypeOptions = this.transactionTemplateData.paymentTypeOptions;\n    });\n    this.loanAccountId = this.route.snapshot.params['loanId'];\n  }\n\n  /**\n   * Creates the Loan account transaction form when component loads.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createEditTransactionForm();\n    this.editTransactionForm.patchValue({\n      'transactionDate': this.transactionTemplateData.date && new Date(this.transactionTemplateData.date),\n      'transactionAmount': this.transactionTemplateData.amount,\n      'externalId': this.transactionTemplateData.externalId,\n      'paymentTypeId': this.transactionTemplateData.paymentTypeId\n    });\n  }\n\n  /**\n   * Method to create the Loan Account Transaction Form.\n   */\n  createEditTransactionForm() {\n    this.editTransactionForm = this.formBuilder.group({\n      'transactionDate': ['', Validators.required],\n      'transactionAmount': ['', Validators.required],\n      'externalId': [''],\n      'paymentTypeId': [''],\n    });\n  }\n\n  /**\n   * Method to add payment detail fields to the UI.\n   */\n  addPaymentDetails() {\n    this.showPaymentDetails = !this.showPaymentDetails;\n    if (this.showPaymentDetails) {\n      this.editTransactionForm.addControl('accountNumber', new FormControl(''));\n      this.editTransactionForm.addControl('checkNumber', new FormControl(''));\n      this.editTransactionForm.addControl('routingCode', new FormControl(''));\n      this.editTransactionForm.addControl('receiptNumber', new FormControl(''));\n      this.editTransactionForm.addControl('bankNumber', new FormControl(''));\n    } else {\n      this.editTransactionForm.removeControl('accountNumber');\n      this.editTransactionForm.removeControl('checkNumber');\n      this.editTransactionForm.removeControl('routingCode');\n      this.editTransactionForm.removeControl('receiptNumber');\n      this.editTransactionForm.removeControl('bankNumber');\n    }\n  }\n\n  /**\n   * Method to submit the transaction details.\n   */\n  submit() {\n    const editTransactionFormData = this.editTransactionForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevTransactionDate: Date = this.editTransactionForm.value.transactionDate;\n    if (editTransactionFormData.transactionDate instanceof Date) {\n      editTransactionFormData.transactionDate = this.dateUtils.formatDate(prevTransactionDate, dateFormat);\n    }\n    const data = {\n      ...editTransactionFormData,\n      dateFormat,\n      locale\n    };\n    this.loansService.executeLoansAccountTransactionsCommand(this.loanAccountId, 'modify', data, this.transactionTemplateData.id)\n      .subscribe((res: any) => {\n        this.router.navigate(['../'], { relativeTo: this.route });\n      });\n  }\n\n}\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ActivatedRoute } from '@angular/router';\n\n/**\n * View Transaction Reciept Component\n */\n@Component({\n  selector: 'mifosx-view-reciept',\n  templateUrl: './view-reciept.component.html',\n  styleUrls: ['./view-reciept.component.scss']\n})\nexport class ViewRecieptComponent implements OnInit {\n\n  /** trusted resource url for pentaho output */\n  pentahoUrl: any;\n  /** Transaction Reciept Data */\n  transactionRecieptData: any;\n\n  /**\n   * Fetches transaction reciept `resolve`\n   * @param {DomSanitizer} sanitizer DOM Sanitizer\n   * @param {ActivatedRoute} route Activated Route\n   */\n  constructor(private sanitizer: DomSanitizer,\n              private route: ActivatedRoute) {\n    this.route.data.subscribe((data: { loansTransactionReciept: any }) => {\n      this.transactionRecieptData = data.loansTransactionReciept;\n    });\n  }\n\n  ngOnInit() {\n    const contentType = this.transactionRecieptData.headers.get('Content-Type');\n    const file = new Blob([this.transactionRecieptData.body], {type: contentType});\n    const filecontent = URL.createObjectURL(file);\n    this.pentahoUrl = this.sanitizer.bypassSecurityTrustResourceUrl(filecontent);\n  }\n\n}\n","<mat-card class=\"container\">\n\n  <div class=\"back-button\">\n    <button type=\"button\" color=\"primary\" mat-raised-button [routerLink]=\"['../../../general']\">\n      <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>Back</button>\n  </div>\n\n  <iframe [src]=\"pentahoUrl\" frameborder=\"0\" width=100% height=\"600px;\"></iframe>\n\n</mat-card>\n","<form class=\"m-t-20\" fxLayout=\"column\" [formGroup]=\"transactionsReportForm\" (ngSubmit)=\"generate()\">\n\n  <div fxLayout=\"row\" fxLayoutGap=\"3%\" fxLayoutAlign=\"center\">\n\n    <mat-form-field fxFlex=\"30%\" (click)=\"fromDatePicker.open()\">\n      <mat-label>From Date</mat-label>\n      <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"fromDatePicker\" required formControlName=\"fromDate\">\n      <mat-datepicker-toggle matSuffix [for]=\"fromDatePicker\"></mat-datepicker-toggle>\n      <mat-datepicker #fromDatePicker></mat-datepicker>\n      <mat-error>\n        From date is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"30%\" (click)=\"toDatePicker.open()\">\n      <mat-label>To Date</mat-label>\n      <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"toDatePicker\" required formControlName=\"toDate\">\n      <mat-datepicker-toggle matSuffix [for]=\"toDatePicker\"></mat-datepicker-toggle>\n      <mat-datepicker #toDatePicker></mat-datepicker>\n      <mat-error>\n        To date is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n  </div>\n\n  <div class=\"generate-button\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5%\">\n    <button type=\"button\" mat-raised-button [routerLink]=\"['../']\">Cancel</button>\n    <button mat-raised-button color=\"primary\" [disabled]=\"!transactionsReportForm.valid\">\n    <fa-icon icon=\"cogs\" class=\"m-r-10\"></fa-icon>Generate Report &nbsp;</button>\n  </div>\n\n</form>\n\n<iframe *ngIf=\"!hideOutput\" [src]=\"pentahoUrl\" frameborder=\"0\" width=\"100%\" height=\"750px;\"></iframe>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\n\n/** Custom Services */\nimport { ReportsService } from 'app/reports/reports.service';\nimport { Dates } from 'app/core/utils/dates';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Export Client Loans Transactions Component\n */\n@Component({\n  selector: 'mifosx-export-transactions',\n  templateUrl: './export-transactions.component.html',\n  styleUrls: ['./export-transactions.component.scss']\n})\nexport class ExportTransactionsComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Transactions Report Form */\n  transactionsReportForm: any;\n  /** substitute for resolver */\n  hideOutput = true;\n  /** trusted resource url for pentaho output */\n  pentahoUrl: any;\n  /** Loans Account Id */\n  loansAccountId: any;\n\n  /**\n   * Fetches loans account data from grandparent's `resolve`\n   * @param {DomSanitizer} sanitizer DOM Sanitizer\n   * @param {ReportsService} reportsService Reports Service\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private sanitizer: DomSanitizer,\n              private reportsService: ReportsService,\n              private formBuilder: FormBuilder,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private settingsService: SettingsService) {\n    this.route.parent.parent.data.subscribe((data: { loanDetailsData: any }) => {\n      this.loansAccountId = data.loanDetailsData.accountNo;\n    });\n  }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createTransactionsReportForm();\n  }\n\n  /**\n   * Creates the transactions report form.\n   */\n  createTransactionsReportForm() {\n    this.transactionsReportForm = this.formBuilder.group({\n      'fromDate': ['', Validators.required],\n      'toDate': [this.settingsService.businessDate, Validators.required],\n    });\n  }\n\n  /**\n   * Generates client loans transactions report.\n   */\n  generate() {\n    const dateFormat = this.settingsService.dateFormat;\n    const data = {\n      'output-type':\t'PDF',\n      R_startDate:\tthis.dateUtils.formatDate(this.transactionsReportForm.value.fromDate, dateFormat),\n      R_endDate:\tthis.dateUtils.formatDate(this.transactionsReportForm.value.toDate, dateFormat),\n      R_selectLoan:\tthis.loansAccountId\n    };\n    this.reportsService.getPentahoRunReportData('Client Loan Account Schedule', data, 'default', 'en', dateFormat)\n      .subscribe( (res: any) => {\n        const contentType = res.headers.get('Content-Type');\n        const file = new Blob([res.body], {type: contentType});\n        const filecontent = URL.createObjectURL(file);\n        this.pentahoUrl = this.sanitizer.bypassSecurityTrustResourceUrl(filecontent);\n        this.hideOutput = false;\n      });\n  }\n\n}\n","<div class=\"tab-container mat-typography\">\n\n  <div style=\"margin-top: 5px;\">\n\n    <h2> GLIM Account Overview</h2>\n\n    <table mat-table [dataSource]=\"dataSource\">\n\n      <ng-container matColumnDef=\"loanId\">\n        <th mat-header-cell *matHeaderCellDef> Loan Id </th>\n        <td mat-cell *matCellDef=\"let element\">\n          {{element.childLoanId}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"clientId\">\n        <th mat-header-cell *matHeaderCellDef> Client ID </th>\n        <td mat-cell *matCellDef=\"let element\">{{element.clientId}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"clientName\">\n        <th mat-header-cell *matHeaderCellDef> Client Name</th>\n        <td mat-cell *matCellDef=\"let element\">{{element.clientName}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"loanAccountNumber\">\n        <th mat-header-cell *matHeaderCellDef> Loan Account Number</th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.childLoanAccountNo}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"clientPrincipalLoan\">\n        <th mat-header-cell *matHeaderCellDef> Client Principal Loan </th>\n        <td mat-cell *matCellDef=\"let element\" > {{element.childPrincipalAmount}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"groupPrincipalLoan\">\n        <th mat-header-cell *matHeaderCellDef> Group Principal Loan </th>\n        <td mat-cell *matCellDef=\"let element\" > {{element.parentPrincipalAmount}} </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row  [routerLink]=\"['../../', row.childLoanId, 'general']\" *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n    </table>\n\n\n</div>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ActivatedRoute } from '@angular/router';\n\n/**\n * GSIM Accounts Overview component.\n */\n@Component({\n  selector: 'mifosx-glim-account',\n  templateUrl: './glim-account.component.html',\n  styleUrls: ['./glim-account.component.scss']\n})\nexport class GlimAccountComponent implements OnInit {\n\n  /** Columns to be displayed in GLIM overview table. */\n  displayedColumns: string[] = ['loanId', 'clientId', 'clientName', 'loanAccountNumber', 'clientPrincipalLoan', 'groupPrincipalLoan'];\n  /** Data source for charge overview table. */\n  dataSource: MatTableDataSource<any>;\n  /** Charge Overview data */\n  glimOverviewData: any;\n\n  /** Paginator for charge overview table. */\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n\n  /**\n   * Retrieves the charge overview data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {MatDialog} dialog Dialog reference.\n   */\n   constructor(private route: ActivatedRoute,\n               public dialog: MatDialog) {\n      this.route.data.subscribe((data: { glimData: any }) => {\n      this.glimOverviewData = data.glimData;\n    });\n  }\n\n  ngOnInit(): void {\n    this.setLoanClientChargeOverview();\n  }\n\n  /**\n   * Set GLIM Overview.\n   */\n   setLoanClientChargeOverview() {\n    this.dataSource = new MatTableDataSource(this.glimOverviewData);\n  }\n}\n","<div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Charge</mat-label>\n      <mat-select #charge>\n        <mat-option *ngFor=\"let charge of chargeData\" [value]=\"charge\">\n          {{ charge.name }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <div fxFlex=\"48%\" fxFlexAlign=\"center\">\n      <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"addCharge(charge)\" [disabled]=\"!charge.value\">\n        <fa-icon icon=\"plus\" class=\"m-r-10\"></fa-icon>\n        Add\n      </button>\n    </div>\n\n    <table fxFlex=\"98%\" class=\"mat-elevation-z1\" mat-table [dataSource]=\"chargesDataSource\" [hidden]=\"chargesDataSource.length === 0\">\n\n      <ng-container matColumnDef=\"name\">\n        <th mat-header-cell *matHeaderCellDef> Name </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.name + ', ' + charge.currency.displaySymbol }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"chargeCalculationType\">\n        <th mat-header-cell *matHeaderCellDef> Type </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.chargeCalculationType.value }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"amount\">\n        <th mat-header-cell *matHeaderCellDef> Amount </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.amount }}\n          <button mat-icon-button color=\"primary\" (click)=\"editChargeAmount(charge)\">\n            <fa-icon icon=\"pen\"></fa-icon>\n          </button>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"chargeTimeType\">\n        <th mat-header-cell *matHeaderCellDef> Collected On </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.chargeTimeType.value }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"date\">\n        <th mat-header-cell *matHeaderCellDef> Date </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          <span *ngIf=\"charge.chargeTimeType.value === 'Specified due date' || charge.chargeTimeType.value === 'Weekly Fee'\">\n            {{(charge.dueDate  | dateFormat) || 'Unassigned'}}\n          </span>\n          <span *ngIf=\"charge.chargeTimeType.value === 'Monthly Fee' || charge.chargeTimeType.value === 'Annual Fee'\">\n            {{(charge.feeOnMonthDay  | dateFormat) || 'Unassigned'}}\n          </span>\n          <span\n            *ngIf=\"!(charge.chargeTimeType.value === 'Monthly Fee' || charge.chargeTimeType.value === 'Annual Fee'\n              || charge.chargeTimeType.value === 'Specified due date' || charge.chargeTimeType.value === 'Weekly Fee')\">\n            N/A\n          </span>\n          <button mat-icon-button color=\"primary\"\n            *ngIf=\"charge.chargeTimeType.value === 'Weekly Fee' || charge.chargeTimeType.value === 'Annual Fee'\n                    || charge.chargeTimeType.value === 'Specified due date'\"\n            (click)=\"editChargeDate(charge)\">\n            <fa-icon icon=\"pen\"></fa-icon>\n          </button>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"repaymentsEvery\">\n        <th mat-header-cell *matHeaderCellDef> Repayments Every </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.feeInterval || 'Not Provided' }}\n          <button mat-icon-button color=\"primary\"\n            *ngIf=\"charge.chargeTimeType.value === 'Weekly Fee' || charge.chargeTimeType.value === 'Monthly Fee'\"\n            (click)=\"editChargeFeeInterval(charge)\">\n            <fa-icon icon=\"pen\"></fa-icon>\n          </button>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"action\">\n        <th mat-header-cell *matHeaderCellDef> Actions </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          <button mat-icon-button color=\"warn\" (click)=\"deleteCharge(charge)\">\n            <fa-icon icon=\"trash\"></fa-icon>\n          </button>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n    </table>\n\n    <div fxFlex=\"98%\" *ngIf=\"activeClientMembers\">\n      <table fxFlex=\"98%\" mat-table [dataSource]=\"dataSource\">\n\n        <!-- Check Column -->\n        <ng-container matColumnDef=\"check\">\n            <th mat-header-cell *matHeaderCellDef>\n                <mat-checkbox (change)=\"toggleSelects()\" [(ngModel)]=\"selectAllItems\"></mat-checkbox>\n            </th>\n            <td mat-cell *matCellDef=\"let element\">\n                <mat-checkbox (change)=\"toggleSelect()\" [(ngModel)]=\"element.selected\"></mat-checkbox>\n            </td>\n        </ng-container>\n\n        <!-- Position Column -->\n        <ng-container matColumnDef=\"id\">\n          <th mat-header-cell *matHeaderCellDef> Client ID </th>\n          <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n        </ng-container>\n\n        <!-- Name Column -->\n        <ng-container matColumnDef=\"name\">\n          <th mat-header-cell *matHeaderCellDef> Client Name </th>\n          <td mat-cell *matCellDef=\"let element\"> {{element.displayName}} </td>\n        </ng-container>\n\n         <!-- Weight Column -->\n         <ng-container matColumnDef=\"purpose\">\n          <th mat-header-cell *matHeaderCellDef> Loan Purpose </th>\n          <td mat-cell *matCellDef=\"let element\">\n            <mat-form-field>\n                <mat-label>Select Purpose</mat-label>\n                <mat-select [(ngModel)]=\"element.loanPurposeId\">\n                <mat-option *ngFor=\"let purpose of loanPurposeOptions\" [value]=\"purpose.id\">\n                    {{ purpose.name }}\n                </mat-option>\n                </mat-select>\n            </mat-form-field>\n          </td>\n        </ng-container>\n\n        <!-- Symbol Column -->\n        <ng-container matColumnDef=\"amount\">\n          <th mat-header-cell *matHeaderCellDef> Original Loan </th>\n          <td mat-cell *matCellDef=\"let element\">\n            <mat-form-field>\n                <input type=\"number\" matInput [(ngModel)]=\"element.principal\">\n            </mat-form-field>\n          </td>\n        </ng-container>\n\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumn\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumn;\"></tr>\n      </table>\n    </div>\n\n\n  </div>\n\n  <div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n    <button mat-raised-button matStepperPrevious>\n      <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n      Previous\n    </button>\n    <button mat-raised-button matStepperNext>\n      Next&nbsp;&nbsp;\n      <fa-icon icon=\"arrow-right\"></fa-icon>\n    </button>\n  </div>\n","import { Component, Input, OnInit, OnChanges } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Dates } from 'app/core/utils/dates';\nimport { FormDialogComponent } from 'app/shared/form-dialog/form-dialog.component';\nimport { DatepickerBase } from 'app/shared/form-dialog/formfield/model/datepicker-base';\nimport { FormfieldBase } from 'app/shared/form-dialog/formfield/model/formfield-base';\nimport { InputBase } from 'app/shared/form-dialog/formfield/model/input-base';\n\n@Component({\n  selector: 'mifosx-glim-charges-step',\n  templateUrl: './glim-charges-step.component.html',\n  styleUrls: ['./glim-charges-step.component.scss']\n})\nexport class GlimChargesStepComponent implements OnInit, OnChanges {\n\n  /** Savings Account Product Template */\n  @Input() loansAccountProductTemplate: any;\n  /** Savings Account Template */\n  @Input() loansAccountTemplate: any;\n  /** Currency Code */\n  // @Input() currencyCode: FormControl;\n  // /** active Client Members in case of GLIM Account */\n  @Input() activeClientMembers?: any;\n\n  /** Charge Data */\n  chargeData: any = [];\n  /** Charges Data Source */\n  chargesDataSource: {}[] = [];\n  /** Component is pristine if there has been no changes by user interaction */\n  pristine = true;\n  /** For Edit Savings Account Form */\n  isChargesPatched = false;\n  /** Display columns for charges table */\n  displayedColumns: string[] = ['name', 'chargeCalculationType', 'amount', 'chargeTimeType', 'date', 'repaymentsEvery', 'action'];\n  /** Table Data Source */\n  dataSource: any;\n  /** Check for select all the Clients List */\n  selectAllItems = false;\n  /** Loan Purpose Options */\n  loanPurposeOptions: string[] = [];\n  /** Table Displayed Columns */\n  displayedColumn: string[] = ['check', 'id', 'name', 'purpose', 'amount'];\n\n  /**\n   * @param {MatDialog} dialog Mat Dialog\n   */\n  constructor(public dialog: MatDialog,\n              private dateUtils: Dates) {}\n\n   ngOnInit() {\n    this.dataSource = new MatTableDataSource<any>(this.activeClientMembers);\n   }\n\n   ngOnChanges() {\n    if (this.loansAccountProductTemplate) {\n      this.chargeData = this.loansAccountProductTemplate.chargeOptions;\n    }\n   }\n\n  /**\n   * Adds the charge to charges table\n   * @param {any} charge Charge\n   */\n  addCharge(charge: any) {\n    this.chargesDataSource = this.chargesDataSource.concat([charge.value]);\n    charge.value = '';\n    this.pristine = false;\n  }\n\n  /**\n   * Edits the Charge Amount\n   * @param {any} charge Charge\n   */\n  editChargeAmount(charge: any) {\n    const formfields: FormfieldBase[] = [\n      new InputBase({\n        controlName: 'amount',\n        label: 'Amount',\n        value: charge.amount,\n        type: 'number',\n        required: false\n      }),\n    ];\n    const data = {\n      title: 'Edit Charge Amount',\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editNoteDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editNoteDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const newCharge = { ...charge, amount: response.data.value.amount };\n        this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1, newCharge);\n        this.chargesDataSource = this.chargesDataSource.concat([]);\n      }\n    });\n    this.pristine = false;\n  }\n\n  /**\n   * Edits the Charge Date\n   * @param {any} charge Charge\n   */\n  editChargeDate(charge: any) {\n    const formfields: FormfieldBase[] = [\n      new DatepickerBase({\n        controlName: 'date',\n        label: 'Date',\n        value: charge.dueDate || charge.feeOnMonthDay || '',\n        type: 'datetime-local',\n        required: false\n      }),\n    ];\n    const data = {\n      title: 'Edit Charge Date',\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editNoteDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editNoteDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        let newCharge: any;\n        const dateFormat = 'dd MMMM yyyy';\n        const date = this.dateUtils.formatDate(response.data.value.date, dateFormat);\n        switch (charge.chargeTimeType.value) {\n          case 'Specified due date':\n          case 'Weekly Fee':\n          newCharge = { ...charge, dueDate: date };\n          break;\n          case 'Annual Fee':\n          newCharge = { ...charge, feeOnMonthDay: date };\n          break;\n        }\n        this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1, newCharge);\n        this.chargesDataSource = this.chargesDataSource.concat([]);\n      }\n    });\n    this.pristine = false;\n  }\n\n  /**\n   * Edits the Charge Fee Interval\n   * @param {any} charge Charge\n   */\n  editChargeFeeInterval(charge: any) {\n    const formfields: FormfieldBase[] = [\n      new InputBase({\n        controlName: 'feeInterval',\n        label: 'Fee Interval',\n        value: charge.feeInterval,\n        type: 'text',\n        required: false\n      }),\n    ];\n    const data = {\n      title: 'Edit Charge Fee Interval',\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editNoteDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editNoteDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const newCharge = { ...charge, feeInterval: response.data.value.feeInterval };\n        this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1, newCharge);\n        this.chargesDataSource = this.chargesDataSource.concat([]);\n      }\n    });\n    this.pristine = false;\n  }\n\n  /**\n   * Removes the charge from charges table\n   * @param {any} charge Charge\n   */\n  deleteCharge(charge: any) {\n    this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1);\n    this.chargesDataSource = this.chargesDataSource.concat([]);\n    this.pristine = false;\n  }\n\n  /**\n   * Returns loan account charges\n   */\n  get loansAccountCharges() {\n    return { charges: this.chargesDataSource };\n  }\n\n  get selectedClientMembers() {\n    return { selectedMembers: this.activeClientMembers.filter( (item: any) => item.selected ) };\n  }\n\n  /** Toggle all checks */\n  toggleSelects() {\n    for (const member of this.activeClientMembers) {\n      member.selected = this.selectAllItems;\n    }\n  }\n\n  /** Check if all the checks are selected */\n  toggleSelect() {\n    const len = this.activeClientMembers.length;\n    this.selectAllItems = len === 0 ? false : this.activeClientMembers.filter( (item: any) => item.selected ).length === len;\n  }\n\n}\n","<form [formGroup]=\"loansAccountDetailsForm\">\n\n    <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n      <mat-form-field fxFlex=\"48%\">\n        <mat-label>Product Name</mat-label>\n        <mat-select formControlName=\"productId\" required>\n          <mat-option *ngFor=\"let product of productData\" [value]=\"product.id\">\n            {{ product.name }}\n          </mat-option>\n        </mat-select>\n        <mat-error>\n          Product Name is <strong>required</strong>\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field fxFlex=\"48%\">\n        <mat-label>Loan officer</mat-label>\n        <mat-select formControlName=\"loanOfficerId\">\n          <mat-option *ngFor=\"let loanOfficer of loanOfficerOptions\" [value]=\"loanOfficer.id\">\n            {{ loanOfficer.displayName }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n\n      <mat-form-field fxFlex=\"48%\">\n        <mat-label>Fund</mat-label>\n        <mat-select formControlName=\"fundId\">\n          <mat-option *ngFor=\"let fund of fundOptions\" [value]=\"fund.id\">\n            {{ fund.name }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <mat-form-field fxFlex=\"48%\" (click)=\"submitPicker.open()\">\n        <mat-label>Submitted on</mat-label>\n        <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"submitPicker\" required\n          formControlName=\"submittedOnDate\">\n        <mat-datepicker-toggle matSuffix [for]=\"submitPicker\"></mat-datepicker-toggle>\n        <mat-datepicker #submitPicker></mat-datepicker>\n        <mat-error *ngIf=\"loansAccountDetailsForm.controls.submittedOnDate?.hasError('required')\">\n          Submitted on is <strong>required</strong>\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field fxFlex=\"48%\" (click)=\"disbursementPicker.open()\">\n        <mat-label>Disbursement on</mat-label>\n        <input matInput [min]=\"loansAccountDetailsForm.value.submittedOnDate\" [max]=\"maxDate\" [matDatepicker]=\"disbursementPicker\" required\n          formControlName=\"expectedDisbursementDate\">\n        <mat-datepicker-toggle matSuffix [for]=\"disbursementPicker\"></mat-datepicker-toggle>\n        <mat-datepicker #disbursementPicker></mat-datepicker>\n        <mat-error *ngIf=\"loansAccountDetailsForm.controls.submittedOnDate?.hasError('required')\">\n          Disbursement on is <strong>required</strong>\n        </mat-error>\n      </mat-form-field>\n\n\n\n      <mat-divider fxFlex=\"98%\"></mat-divider>\n\n      <h3 class=\"mat-h3\" fxFlexFill>Savings Linkage</h3>\n\n      <mat-form-field fxFlex=\"48%\">\n        <mat-label>Link savings</mat-label>\n        <mat-select formControlName=\"linkAccountId\">\n          <mat-option *ngFor=\"let savingaccount of gsimData\" [value]=\"savingaccount.id\">\n            {{ savingaccount.accountNumber }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n\n\n    </div>\n\n    <div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n      <button mat-raised-button matStepperPrevious disabled>\n        <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n        Previous\n      </button>\n      <button mat-raised-button matStepperNext>\n        Next&nbsp;&nbsp;\n        <fa-icon icon=\"arrow-right\"></fa-icon>\n      </button>\n    </div>\n\n  </form>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { LoansService } from 'app/loans/loans.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n@Component({\n  selector: 'mifosx-glim-details-step',\n  templateUrl: './glim-details-step.component.html',\n  styleUrls: ['./glim-details-step.component.scss']\n})\nexport class GlimDetailsStepComponent implements OnInit {\n  /** Loans Account Template */\n  @Input() loansAccountTemplate: any;\n  @Input() gsimData: any;\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date(2100, 0, 1);\n  /** Product Data */\n  productData: any;\n  /** Loan Officer Data */\n  loanOfficerOptions: any;\n  /** Loan Purpose Options */\n  loanPurposeOptions: any;\n  /** Fund Options */\n  fundOptions: any;\n  /** Account Linking Options */\n  accountLinkingOptions: any;\n  /** For edit loan accounts form */\n  isFieldOfficerPatched = false;\n  /** Loans Account Details Form */\n  loansAccountDetailsForm: FormGroup;\n\n  /** Loans Account Template with product data  */\n  @Output() loansAccountProductTemplate = new EventEmitter();\n  /**\n   * Sets loans account details form.\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {LoansService} loansService Loans Service.\n   * @param {SettingsService} settingsService SettingsService\n   */\n   constructor(private formBuilder: FormBuilder,\n    private loansService: LoansService,\n    private settingsService: SettingsService) {\n    this.createLoansAccountDetailsForm();\n  }\n\n  ngOnInit(): void {\n    this.maxDate = this.settingsService.businessDate;\n    this.buildDependencies();\n    if (this.loansAccountTemplate) {\n      this.productData = this.loansAccountTemplate.productOptions;\n      if (this.loansAccountTemplate.loanProductId) {\n        this.loansAccountDetailsForm.patchValue({\n          'productId': this.loansAccountTemplate.loanProductId,\n          'submittedOnDate': this.loansAccountTemplate.timeline.submittedOnDate && new Date(this.loansAccountTemplate.timeline.submittedOnDate),\n          'loanOfficerId': this.loansAccountTemplate.loanOfficerId,\n          'loanPurposeId': this.loansAccountTemplate.loanPurposeId,\n          'fundId': this.loansAccountTemplate.fundId,\n          'expectedDisbursementDate': this.loansAccountTemplate.timeline.expectedDisbursementDate && new Date(this.loansAccountTemplate.timeline.expectedDisbursementDate),\n          'externalId': this.loansAccountTemplate.externalId\n        });\n      }\n    }\n  }\n\n  /**\n   * Creates glim account details form.\n   */\n   createLoansAccountDetailsForm() {\n    this.loansAccountDetailsForm = this.formBuilder.group({\n      'productId': ['', Validators.required],\n      'loanOfficerId': [''],\n      'fundId': [''],\n      'submittedOnDate': [new Date(), Validators.required],\n      'expectedDisbursementDate': ['', Validators.required],\n      'linkAccountId': [''],\n    });\n  }\n\n  /**\n   * Fetches loans account product template on productId value changes\n   */\n   buildDependencies() {\n    const groupId = this.loansAccountTemplate.group.id;\n    this.loansAccountDetailsForm.get('productId').valueChanges.subscribe((productId: string) => {\n      this.loansService.getLoansAccountTemplateResource(groupId, true, productId).subscribe((response: any) => {\n        this.loansAccountProductTemplate.emit(response);\n        this.loanOfficerOptions = response.loanOfficerOptions;\n        this.loanPurposeOptions = response.loanPurposeOptions;\n        this.fundOptions = response.fundOptions;\n        this.accountLinkingOptions = response.accountLinkingOptions;\n      });\n    });\n  }\n\n  /**\n   * Returns loans account details form value.\n   */\n  get loansAccountDetails() {\n    return this.loansAccountDetailsForm.value;\n  }\n\n}\n","<form [formGroup]=\"loansAccountTermsForm\">\n\n    <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n      <h4 fxFlex=\"98%\" class=\"mat-h4\">Term Options</h4>\n\n      <mat-form-field fxFlex=\"48%\">\n        <mat-label>Loan Term</mat-label>\n        <input matInput required formControlName=\"loanTermFrequency\">\n        <mat-error *ngIf=\"loansAccountTermsForm.controls.loanTermFrequency.hasError('required')\">\n          Loan Term is <strong>required</strong>\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field fxFlex=\"48%\">\n        <mat-label>Frequency</mat-label>\n        <mat-select required formControlName=\"loanTermFrequencyType\">\n          <mat-option *ngFor=\"let type of termFrequencyTypeData\" [value]=\"type.id\">\n            {{ type.value }}\n          </mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"loansAccountTermsForm.controls.loanTermFrequencyType.hasError('required')\">\n          Frequency is <strong>required</strong>\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field fxFlex=\"48%\">\n        <mat-label>Number of repayments</mat-label>\n        <input type=\"number\" matInput formControlName=\"numberOfRepayments\">\n        <mat-error *ngIf=\"loansAccountTermsForm.controls.numberOfRepayments.hasError('required')\">\n          Number of repayments is <strong>required</strong>\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field fxFlex=\"48%\" (click)=\"repaymentsPicker.open()\">\n        <mat-label>First repayment on</mat-label>\n        <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"repaymentsPicker\"\n          formControlName=\"repaymentsStartingFromDate\">\n        <mat-datepicker-toggle matSuffix [for]=\"repaymentsPicker\"></mat-datepicker-toggle>\n        <mat-datepicker #repaymentsPicker></mat-datepicker>\n      </mat-form-field>\n\n      <h4 fxFlex=\"98%\" class=\"mat-h4\">Repaid Every</h4>\n\n      <mat-form-field fxFlex=\"48%\">\n        <mat-label>Repaid every</mat-label>\n        <input matInput required formControlName=\"repaymentEvery\"\n          [disabled]=\"!loansAccountProductTemplate?.product.allowAttributeOverrides.repaymentEvery\">\n        <mat-error *ngIf=\"loansAccountTermsForm.controls.repaymentEvery.hasError('required')\">\n          Repaid every is <strong>required</strong>\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field fxFlex=\"48%\">\n        <mat-label>Frequency</mat-label>\n        <mat-select formControlName=\"repaymentFrequencyType\" required\n          [disabled]=\"!loansAccountProductTemplate?.product.allowAttributeOverrides.repaymentEvery\">\n          <mat-option *ngFor=\"let repaymentFrequencyType of termFrequencyTypeData\"\n            [value]=\"repaymentFrequencyType.id\">\n            {{ repaymentFrequencyType.value }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <mat-form-field fxFlex=\"48%\" *ngIf=\"loansAccountTermsForm.controls.repaymentFrequencyType.value == 2\">\n        <mat-label>Select On</mat-label>\n        <mat-select formControlName=\"repaymentFrequencyNthDayType\">\n          <mat-option\n            *ngFor=\"let repaymentFrequencyNthDayType of repaymentFrequencyNthDayTypeData\"\n            [value]=\"repaymentFrequencyNthDayType.id\">\n            {{ repaymentFrequencyNthDayType.value }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <mat-form-field fxFlex=\"48%\" *ngIf=\"loansAccountTermsForm.controls.repaymentFrequencyType.value == 2\">\n        <mat-label>Select Day</mat-label>\n        <mat-select formControlName=\"repaymentFrequencyDayOfWeekType\">\n          <mat-option\n            *ngFor=\"let repaymentFrequencyDayOfWeekType of repaymentFrequencyDaysOfWeekTypeData\"\n            [value]=\"repaymentFrequencyDayOfWeekType.id\">\n            {{ repaymentFrequencyDayOfWeekType.value }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <mat-form-field fxFlex=\"48%\" (click)=\"interestPicker.open()\">\n        <mat-label>Interest charged from</mat-label>\n        <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"interestPicker\"\n          formControlName=\"interestChargedFromDate\">\n        <mat-datepicker-toggle matSuffix [for]=\"interestPicker\"></mat-datepicker-toggle>\n        <mat-datepicker #interestPicker></mat-datepicker>\n      </mat-form-field>\n\n    <ng-container *ngIf=\"!loansAccountProductTemplate?.isLoanProductLinkedToFloatingRate\">\n\n      <mat-form-field fxFlex=\"48%\">\n        <mat-label>Nominal interest rate</mat-label>\n        <input type=\"number\" matInput formControlName=\"interestRatePerPeriod\">\n      </mat-form-field>\n\n        <mat-form-field fxFlex=\"48%\">\n          <mat-label>Interest method</mat-label>\n          <mat-select [disabled]=\"!loansAccountProductTemplate?.product.allowAttributeOverrides.interestType\"\n            formControlName=\"interestType\">\n            <mat-option *ngFor=\"let interestType of interestTypeData\"\n              [value]=\"interestType.id\">\n              {{ interestType.value }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n    </ng-container>\n\n\n\n    </div>\n    <div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n      <button mat-raised-button matStepperPrevious>\n        <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n        Previous\n      </button>\n      <button mat-raised-button matStepperNext>\n        Next&nbsp;&nbsp;\n        <fa-icon icon=\"arrow-right\"></fa-icon>\n      </button>\n    </div>\n\n</form>\n","import { Component, Input, OnInit, OnChanges } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms';\nimport { SettingsService } from 'app/settings/settings.service';\n\n@Component({\n  selector: 'mifosx-glim-terms-step',\n  templateUrl: './glim-terms-step.component.html',\n  styleUrls: ['./glim-terms-step.component.scss']\n})\nexport class GlimTermsStepComponent implements OnInit, OnChanges {\n\n  /** Loans Account Product Template */\n  @Input() loansAccountProductTemplate: any;\n  /** Loans Account Template */\n  @Input() loansAccountTemplate: any;\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date(2100, 0, 1);\n  /** Loans Account Terms Form */\n  loansAccountTermsForm: FormGroup;\n  /** Term Frequency Type Data */\n  termFrequencyTypeData: any;\n  /** Repayment Frequency Nth Day Type Data */\n  repaymentFrequencyNthDayTypeData: any;\n  /** Repayment Frequency Days of Week Type Data */\n  repaymentFrequencyDaysOfWeekTypeData: any;\n  /** Interest Type Data */\n  interestTypeData: any;\n  /** Amortization Type Data */\n  amortizationTypeData: any;\n  /** Interest Calculation Period Type Data */\n  interestCalculationPeriodTypeData: any;\n  /** Transaction Processing Strategy Data */\n  transactionProcessingStrategyData: any;\n  /** Client Active Loan Data */\n  clientActiveLoanData: any;\n\n  /**\n   * Create Loans Account Terms Form\n   * @param formBuilder FormBuilder\n   * @param {SettingsService} settingsService SettingsService\n   */\n  constructor(private formBuilder: FormBuilder,\n      private settingsService: SettingsService) {\n    this.createloansAccountTermsForm();\n  }\n  /**\n   * Executes on change of input values\n   */\n  ngOnChanges() {\n    if (this.loansAccountProductTemplate) {\n      this.loansAccountTermsForm.patchValue({\n        'principal': this.loansAccountProductTemplate.principal,\n        'loanTermFrequency': this.loansAccountProductTemplate.termFrequency,\n        'loanTermFrequencyType': this.loansAccountProductTemplate.termPeriodFrequencyType.id,\n        'numberOfRepayments': this.loansAccountProductTemplate.numberOfRepayments,\n        'repaymentEvery': this.loansAccountProductTemplate.repaymentEvery,\n        'repaymentFrequencyType': this.loansAccountProductTemplate.repaymentFrequencyType.id,\n        'interestRatePerPeriod': this.loansAccountProductTemplate.interestRatePerPeriod,\n        'interestType': this.loansAccountProductTemplate.interestType.id,\n        'interestCalculationPeriodType': this.loansAccountProductTemplate.interestCalculationPeriodType.id,\n        'transactionProcessingStrategyCode': this.loansAccountProductTemplate.transactionProcessingStrategyCode,\n      });\n      this.setOptions();\n    }\n  }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    if (this.loansAccountTemplate) {\n      if (this.loansAccountTemplate.loanProductId) {\n        this.loansAccountTermsForm.patchValue({\n          'repaymentsStartingFromDate': this.loansAccountTemplate.expectedFirstRepaymentOnDate && new Date(this.loansAccountTemplate.expectedFirstRepaymentOnDate)\n        });\n      }\n    }\n    this.createloansAccountTermsForm();\n    this.setCustomValidators();\n  }\n\n  /** Custom Validators for the form */\n  setCustomValidators() {\n    const repaymentFrequencyNthDayType = this.loansAccountTermsForm.get('repaymentFrequencyNthDayType');\n    const repaymentFrequencyDayOfWeekType = this.loansAccountTermsForm.get('repaymentFrequencyDayOfWeekType');\n\n    this.loansAccountTermsForm.get('repaymentFrequencyType').valueChanges\n      .subscribe(repaymentFrequencyType => {\n\n        if (repaymentFrequencyType === 2) {\n          repaymentFrequencyNthDayType.setValidators([Validators.required]);\n          repaymentFrequencyDayOfWeekType.setValidators([Validators.required]);\n        } else {\n          repaymentFrequencyNthDayType.setValidators(null);\n          repaymentFrequencyDayOfWeekType.setValidators(null);\n        }\n\n        repaymentFrequencyNthDayType.updateValueAndValidity();\n        repaymentFrequencyDayOfWeekType.updateValueAndValidity();\n      });\n  }\n\n  /** Create Loans Account Terms Form */\n  createloansAccountTermsForm() {\n    this.loansAccountTermsForm = this.formBuilder.group({\n      'principal': ['', Validators.required],\n      'loanTermFrequency': ['', Validators.required],\n      'loanTermFrequencyType': ['', Validators.required],\n      'numberOfRepayments': ['', Validators.required],\n      'repaymentEvery': ['', Validators.required],\n      'repaymentFrequencyType': ['', Validators.required],\n      'repaymentFrequencyNthDayType': [''],\n      'repaymentFrequencyDayOfWeekType': [''],\n      'repaymentsStartingFromDate': [''],\n      'interestChargedFromDate': [''],\n      'interestRatePerPeriod': [''],\n      'interestType': [''],\n      'interestCalculationPeriodType': [''],\n      'transactionProcessingStrategyCode': ['']\n    });\n  }\n\n  /**\n   * Sets all select dropdown options.\n   */\n  setOptions() {\n    this.termFrequencyTypeData = this.loansAccountProductTemplate.termFrequencyTypeOptions;\n    this.repaymentFrequencyNthDayTypeData = this.loansAccountProductTemplate.repaymentFrequencyNthDayTypeOptions;\n    this.repaymentFrequencyDaysOfWeekTypeData = this.loansAccountProductTemplate.repaymentFrequencyDaysOfWeekTypeOptions;\n    this.interestTypeData = this.loansAccountProductTemplate.interestTypeOptions;\n    this.amortizationTypeData = this.loansAccountProductTemplate.amortizationTypeOptions;\n    this.interestCalculationPeriodTypeData = this.loansAccountProductTemplate.interestCalculationPeriodTypeOptions;\n    this.transactionProcessingStrategyData = this.loansAccountProductTemplate.transactionProcessingStrategyOptions;\n    this.clientActiveLoanData = this.loansAccountProductTemplate.clientActiveLoanOptions;\n  }\n\n  /**\n   * Returns loans account terms form value.\n   */\n  get loansAccountTerms() {\n    return this.loansAccountTermsForm.value;\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-horizontal-stepper class=\"mat-elevation-z8\" labelPosition=\"bottom\" #loansAccountStepper>\n    <ng-template matStepperIcon=\"number\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"edit\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"done\">\n      <fa-icon icon=\"check\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"error\">\n      <fa-icon icon=\"exclamation-triangle\" size=\"lg\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"preview\">\n      <fa-icon icon=\"eye\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <mat-step [stepControl]=\"loansAccountDetailsForm\">\n\n      <ng-template matStepLabel>DETAILS</ng-template>\n\n      <mifosx-glim-details-step [loansAccountTemplate]=\"loansAccountTemplate\"\n        (loansAccountProductTemplate)=\"setTemplate($event)\" [gsimData]=\"gsimData\">\n      </mifosx-glim-details-step>\n\n    </mat-step>\n\n    <mat-step [stepControl]=\"loansAccountTermsForm\">\n\n      <ng-template matStepLabel>TERMS</ng-template>\n\n      <mifosx-glim-terms-step [loansAccountProductTemplate]=\"loansAccountProductTemplate\"\n      [loansAccountTemplate] = \"loansAccountTemplate\">\n      </mifosx-glim-terms-step>\n\n    </mat-step>\n\n    <mat-step>\n\n      <ng-template matStepLabel>CHARGES</ng-template>\n\n      <mifosx-glim-charges-step [loansAccountProductTemplate]=\"loansAccountProductTemplate\"\n        [loansAccountTemplate]=\"loansAccountTemplate\"\n          [activeClientMembers]=\"activeClientMembers\"\n        >\n      </mifosx-glim-charges-step>\n\n    </mat-step>\n\n    <mat-step state=\"preview\" *ngIf=\"loansAccountFormValid\" completed>\n\n      <ng-template matStepLabel>PREVIEW</ng-template>\n\n      <mifosx-loans-account-preview-step [loansAccountTemplate]=\"loansAccountTemplate\"\n        [loansAccountProductTemplate]=\"loansAccountProductTemplate\" [loansAccount]=\"loansAccount\" (submit)=\"submit()\">\n      </mifosx-loans-account-preview-step>\n\n    </mat-step>\n\n  </mat-horizontal-stepper>\n\n</div>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\nimport { LoansService } from 'app/loans/loans.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { FormDialogComponent } from 'app/shared/form-dialog/form-dialog.component';\nimport { DatepickerBase } from 'app/shared/form-dialog/formfield/model/datepicker-base';\nimport { FormfieldBase } from 'app/shared/form-dialog/formfield/model/formfield-base';\nimport { InputBase } from 'app/shared/form-dialog/formfield/model/input-base';\nimport { GlimChargesStepComponent } from './glim-account-stepper/glim-charges-step/glim-charges-step.component';\nimport { GlimDetailsStepComponent } from './glim-account-stepper/glim-details-step/glim-details-step.component';\nimport { GlimTermsStepComponent } from './glim-account-stepper/glim-terms-step/glim-terms-step.component';\n\n@Component({\n  selector: 'mifosx-create-glim-account',\n  templateUrl: './create-glim-account.component.html',\n  styleUrls: ['./create-glim-account.component.scss']\n})\nexport class CreateGlimAccountComponent implements OnInit {\n\n  /** Imports all the step component */\n  @ViewChild(GlimDetailsStepComponent, { static: true }) loansAccountDetailsStep: GlimDetailsStepComponent;\n  @ViewChild(GlimTermsStepComponent, { static: true }) loansAccountTermsStep: GlimTermsStepComponent;\n  @ViewChild(GlimChargesStepComponent, { static: true }) loansAccountChargesStep: GlimChargesStepComponent;\n\n  /** Loans Account Template */\n  loansAccountTemplate: any;\n  /** Loans Account Product Template */\n  loansAccountProductTemplate: any;\n  /** Collateral Options */\n  collateralOptions: any;\n  /** Multi Disburse Loan */\n  multiDisburseLoan: any;\n  /** Principal Amount */\n  principal: any;\n\n  accountLinkingOptions: any;\n\n  totalLoan: any;\n\n  /** Table Data Source */\n  dataSource: any;\n  /** Selected Members */\n  selectedMembers: any;\n  /** Selected Members */\n  activeClientMembers: any;\n  gsimData: any;\n  /**\n   * Sets loans account details form.\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {LoansService} loansService Loans Service.\n   * @param {SettingsService} settingsService SettingsService\n   */\n  constructor(private route: ActivatedRoute,\n    private router: Router,\n    private loansService: LoansService,\n    private settingsService: SettingsService,\n    public dialog: MatDialog,\n    private dateUtils: Dates) {\n    this.route.data.subscribe((data: {loansAccountTemplate: any, gsimData: any, groupsData: any}) => {\n      this.loansAccountTemplate = data.loansAccountTemplate;\n      this.activeClientMembers = data.groupsData.activeClientMembers;\n      this.gsimData = data.gsimData;\n    });\n   }\n\n  ngOnInit(): void {\n  }\n\n  /**\n   * Sets loans account product template and collateral template\n   * @param {any} $event API response\n   */\n   setTemplate($event: any) {\n    this.loansAccountProductTemplate = $event;\n  }\n\n  /** Get Loans Account Details Form Data */\n  get loansAccountDetailsForm() {\n    return this.loansAccountDetailsStep.loansAccountDetailsForm;\n  }\n\n  /** Get Loans Account Terms Form Data */\n  get loansAccountTermsForm() {\n    return this.loansAccountTermsStep.loansAccountTermsForm;\n  }\n\n  /** Checks wheter all the forms in different steps are valid or not */\n  get loansAccountFormValid() {\n    return (\n      this.loansAccountDetailsForm.valid &&\n      this.loansAccountTermsForm.valid\n    );\n  }\n\n  /** Gets principal Amount */\n  get loanPrincipal() {\n    return this.loansAccountTermsStep.loansAccountTermsForm.value.principal;\n  }\n\n  /** Retrieves Data of all forms except Currency to submit the data */\n  get loansAccount() {\n    this.selectedMembers = this.loansAccountChargesStep.selectedClientMembers;\n    return {\n      ...this.loansAccountDetailsStep.loansAccountDetails,\n      ...this.loansAccountTermsStep.loansAccountTerms,\n      ...this.loansAccountChargesStep.loansAccountCharges,\n    };\n  }\n\n\n\n  setData(client: any): any {\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    // const monthDayFormat = 'dd MMMM';\n    const data = {\n      ...this.loansAccount,\n      charges: this.loansAccount.charges.map((charge: any) => ({\n        chargeId: charge.id,\n        amount: charge.amount,\n      })),\n      clientId: client.id,\n      totalLoan: this.totalLoan,\n      loanType: 'glim',\n      amortizationType:\t1,\n      isParentAccount: true,\n      principal: client.principal,\n      syncDisbursementWithMeeting: false,\n      expectedDisbursementDate: this.dateUtils.formatDate(this.loansAccount.expectedDisbursementDate, dateFormat),\n      submittedOnDate: this.dateUtils.formatDate(this.loansAccount.submittedOnDate, dateFormat),\n      dateFormat,\n      // monthDayFormat,\n      locale\n    };\n    data.groupId = this.loansAccountTemplate.group.id;\n\n    return JSON.stringify(data);\n\n  }\n\n  /** Request Body Data */\n  buildRequestData(): any[] {\n    const requestData = [];\n    const memberSelected = this.selectedMembers.selectedMembers;\n    this.totalLoanAmount();\n    for (let index = 0; index < memberSelected.length; index++) {\n      requestData.push({\n        requestId: index.toString(),\n        method : 'POST',\n        relativeUrl: 'loans',\n        body : this.setData( memberSelected[ index ] )\n      }\n      );\n    }\n    return requestData;\n  }\n\n  totalLoanAmount(): any {\n    let total = 0;\n    const memberSelected = this.selectedMembers.selectedMembers;\n    for (let index = 0; index < memberSelected.length; index++) {\n      total += memberSelected[index].principal;\n    }\n    this.totalLoan = total;\n  }\n\n  /**\n   * Creates a new GSIM account.\n   */\n  submit() {\n    const data = this.buildRequestData();\n    this.loansService.createGlimAccount(data).subscribe((response: any) => {\n      this.router.navigate(['../../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { LoansService } from '../loans.service';\n\n/**\n * Clients data resolver.\n */\n@Injectable()\nexport class LoanDetailsResolver implements Resolve<Object> {\n\n    /**\n     * @param {LoansService} LoansService Loans service.\n     */\n    constructor(private loansService: LoansService) { }\n\n    /**\n     * Returns the Loans with Association data.\n     * @returns {Observable<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\n      const loanId = route.paramMap.get('loanId') || route.parent.paramMap.get('loanId');\n      return this.loansService.getLoanAccountAssociationDetails(loanId);\n    }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { LoansService } from '../loans.service';\n\n/**\n * Loans notes resolver.\n */\n@Injectable()\nexport class LoanNotesResolver implements Resolve<Object> {\n\n    /**\n     * @param {LoansService} LoansService Loans service.\n     */\n    constructor(private loansService: LoansService) { }\n\n    /**\n     * Returns the Loans data.\n     * @returns {Observable<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\n      const loanId = route.paramMap.get('loanId') || route.parent.paramMap.get('loanId');\n      return this.loansService.getLoanNotes(loanId);\n    }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { LoansService } from '../loans.service';\n\n/**\n * loan datatables resolver.\n */\n@Injectable()\nexport class LoanDatatablesResolver implements Resolve<Object> {\n\n    /**\n     * @param {loansService} loansService loans service.\n     */\n    constructor(private loansService: LoansService) { }\n\n    /**\n     * Returns the loan datatables.\n     * @returns {Observable<any>}\n     */\n    resolve(): Observable<any> {\n        return this.loansService.getLoanDataTables();\n    }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { LoansService } from '../loans.service';\n\n/**\n * Loans notes data resolver.\n */\n@Injectable()\nexport class LoanDatatableResolver implements Resolve<Object> {\n\n    /**\n     * @param {LoansService} LoansService Loans service.\n     */\n    constructor(private loansService: LoansService) { }\n\n    /**\n     * Returns the Loans Notes Data.\n     * @returns {Observable<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\n      const loanId = route.paramMap.get('loanId') || route.parent.paramMap.get('loanId');\n      const datatableName = route.paramMap.get('datatableName');\n      return this.loansService.getLoanDatatable(loanId, datatableName);\n    }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { LoansService } from '../loans.service';\n\n/**\n * Loans notes data resolver.\n */\n@Injectable()\nexport class LoanActionButtonResolver implements Resolve<Object> {\n\n  /**\n   * @param {LoansService} LoansService Loans service.\n   */\n  constructor(private loansService: LoansService) { }\n\n  /**\n   * Returns the Loans Notes Data.\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const loanId = route.paramMap.get('loanId') || route.parent.paramMap.get('loanId');\n    const loanActionButton = route.paramMap.get('action');\n    if (loanActionButton === 'Assign Loan Officer' || loanActionButton === 'Change Loan Officer') {\n      return this.loansService.getLoanTemplate(loanId);\n    } else if (loanActionButton === 'Make Repayment') {\n      return this.loansService.getLoanActionTemplate(loanId, 'repayment');\n    } else if (loanActionButton === 'Goodwill Credit') {\n      return this.loansService.getLoanActionTemplate(loanId, 'goodwillCredit');\n    } else if (loanActionButton === 'Payout Refund') {\n      return this.loansService.getLoanActionTemplate(loanId, 'payoutRefund');\n    } else if (loanActionButton === 'Merchant Issued Refund') {\n      return this.loansService.getLoanActionTemplate(loanId, 'merchantIssuedRefund');\n    } else if (loanActionButton === 'Credit Balance Refund') {\n      return this.loansService.getLoanActionTemplate(loanId, 'creditBalanceRefund');\n    } else if (loanActionButton === 'Waive Interest') {\n      return this.loansService.getLoanActionTemplate(loanId, 'waiveinterest');\n    } else if (loanActionButton === 'Write Off') {\n      return this.loansService.getLoanActionTemplate(loanId, 'writeoff');\n    } else if (loanActionButton === 'Close') {\n      return this.loansService.getLoanActionTemplate(loanId, 'close');\n    } else if (loanActionButton === 'Close (as Rescheduled)') {\n      return this.loansService.getLoanActionTemplate(loanId, 'close-rescheduled');\n    } else if (loanActionButton === 'Reschedule') {\n      return this.loansService.rescheduleLoanTemplate();\n    } else if (loanActionButton === 'Prepay Loan') {\n      return this.loansService.getLoanPrepayLoanActionTemplate(loanId, null);\n    } else if (loanActionButton === 'Add Collateral') {\n      return this.loansService.getLoanCollateralTemplate(loanId);\n    } else if (loanActionButton === 'Disburse to Savings') {\n      return this.loansService.getLoanActionTemplate(loanId, 'disburseToSavings');\n    } else if (loanActionButton === 'Recovery Payment') {\n      return this.loansService.getLoanActionTemplate(loanId, 'recoverypayment');\n    } else if (loanActionButton === 'View Guarantors') {\n      return this.loansService.getLoanAccountResource(loanId, 'guarantors');\n    } else if (loanActionButton === 'Create Guarantor') {\n      return this.loansService.getGuarantorTemplate(loanId);\n    } else if (loanActionButton === 'Disburse') {\n      return this.loansService.getLoanActionTemplate(loanId, 'disburse');\n    } else if (loanActionButton === 'Loan Screen Reports') {\n      return this.loansService.getLoanScreenReportsData();\n    } else if (loanActionButton === 'Approve') {\n      return this.loansService.getLoanApprovalTemplate(loanId);\n    } else if (loanActionButton === 'Add Loan Charge') {\n      return this.loansService.getLoanChargeTemplateResource(loanId);\n    } else if (loanActionButton === 'Foreclosure') {\n      return this.loansService.getLoanForeclosureActionTemplate(loanId);\n    } else {\n      return undefined;\n    }\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { LoansService } from '../loans.service';\n\n/**\n * Loan accounts template data resolver.\n */\n@Injectable()\nexport class LoansAccountTemplateResolver implements Resolve<Object> {\n    /**\n     * @param {ProductsService} productsService Products service.\n     */\n    constructor(private loansService: LoansService) { }\n\n    /**\n     * Returns the loan account template data.\n     * @returns {Observable<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\n        const entityId = route.parent.parent.paramMap.get('clientId') || route.parent.parent.paramMap.get('groupId');\n        const isGroup = (route.parent.parent.paramMap.get('groupId')) ? true : false;\n        return this.loansService.getLoansAccountTemplateResource(entityId, isGroup);\n    }\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { LoansService } from '../loans.service';\n\n/**\n * Loans notes resolver.\n */\n@Injectable()\nexport class LoanDocumentsResolver implements Resolve<Object> {\n\n    /**\n     * @param {LoansService} LoansService Loans service.\n     */\n    constructor(private loansService: LoansService) { }\n\n    /**\n     * Returns the Loans data.\n     * @returns {Observable<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\n      const loanId = route.paramMap.get('loanId') || route.parent.paramMap.get('loanId');\n      return this.loansService.getLoanDocuments(loanId);\n    }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { LoansService } from '../loans.service';\n\n/**\n * Loan accounts template data resolver.\n */\n@Injectable()\nexport class LoansAccountAndTemplateResolver implements Resolve<Object> {\n    /**\n     * @param {ProductsService} productsService Products service.\n     */\n    constructor(private loansService: LoansService) { }\n\n    /**\n     * Returns the loan account template data.\n     * @returns {Observable<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\n      const loanId = route.paramMap.get('loanId') || route.parent.paramMap.get('loanId');\n      return this.loansService.getLoansAccountAndTemplateResource(loanId);\n    }\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { LoansService } from '../loans.service';\n\n/**\n * Loans Account Charge data resolver.\n */\n@Injectable()\nexport class LoansAccountChargeResolver implements Resolve<Object> {\n\n    /**\n     * @param {LoansService} LoansService Loans service.\n     */\n    constructor(private loansService: LoansService) { }\n\n    /**\n     * Returns the Loans Account Charge data.\n     * @param {ActivatedRouteSnapshot} route Route Snapshot\n     * @returns {Observable<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\n      const loanId = route.paramMap.get('loanId');\n      const chargeId = route.paramMap.get('id');\n      return this.loansService.getLoansAccountCharge(loanId, chargeId);\n    }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { LoansService } from '../loans.service';\n\n/**\n * Loans Account Transaction data resolver.\n */\n@Injectable()\nexport class LoansAccountTransactionResolver implements Resolve<Object> {\n\n  /**\n   * @param {LoansService} LoansService Loans service.\n   */\n  constructor(private loansService: LoansService) { }\n\n  /**\n   * Returns the Loans Account Transaction data.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const loanId = route.paramMap.get('loanId');\n    const transactionId = route.paramMap.get('id');\n    return this.loansService.getLoansAccountTransaction(loanId, transactionId);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { ReportsService } from 'app/reports/reports.service';\n\n/**\n * Loans Transaction Reciept resolver.\n */\n@Injectable()\nexport class LoansTransactionRecieptResolver implements Resolve<Object> {\n\n  /**\n   * @param {ReportsService} reportsService Reports service.\n   */\n  constructor(private reportsService: ReportsService) { }\n\n  /**\n   * Returns the Loans Transaction Reciept\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const transactionId = route.paramMap.get('id');\n    const data = {\n      'output-type':\t'PDF',\n      R_transactionId:\ttransactionId\n    };\n    return this.reportsService.getPentahoRunReportData('Loan Transaction Receipt', data, 'default', 'en', 'dd MMMM yyyy');\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { LoansService } from '../loans.service';\n\n/**\n * Loans Account Transaction Template data resolver.\n */\n@Injectable()\nexport class LoansAccountTransactionTemplateResolver implements Resolve<Object> {\n\n  /**\n   * @param {LoansService} LoansService Loans service.\n   */\n  constructor(private loansService: LoansService) { }\n\n  /**\n   * Returns the Loans Account Transaction Template data.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const loanId = route.paramMap.get('loanId');\n    const transactionId = route.paramMap.get('id');\n    return this.loansService.getLoansAccountTransactionTemplate(loanId, transactionId);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { LoansService } from '../loans.service';\n\n/**\n * GLIM Account data resolver.\n */\n@Injectable()\nexport class GLIMViewResolver implements Resolve<Object> {\n\n  /**\n   * @param {LoansService} loansService Loans service.\n   */\n  constructor(private loansService: LoansService) { }\n\n  /**\n   * Returns the Savings Account data.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const groupId = route.paramMap.get('groupId');\n    const glimId = route.paramMap.get('glimId');\n    return this.loansService.getGLIMAccountData(glimId, groupId);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { LoansService } from '../loans.service';\n\n/**\n * GLIM Loan template data resolver.\n */\n@Injectable()\nexport class GLIMLoanTemplateResolver implements Resolve<Object> {\n    /**\n     * @param {ProductsService} loansService Loan service.\n     */\n    constructor(private loansService: LoansService) { }\n\n    /**\n     * Returns the loan account template data.\n     * @returns {Observable<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\n        const groupId = route.paramMap.get('groupId');\n        return this.loansService.getGLIMLoanAccountTemplate(groupId);\n    }\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { LoansService } from '../loans.service';\n\n/**\n * Clients data resolver.\n */\n@Injectable()\nexport class LoanDelinquencyTagsResolver implements Resolve<Object> {\n\n    /**\n     * @param {LoansService} LoansService Loans service.\n     */\n    constructor(private loansService: LoansService) { }\n\n    /**\n     * Returns the Loans with Association data.\n     * @returns {Observable<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\n      const loanId = route.paramMap.get('loanId') || route.parent.paramMap.get('loanId');\n      return this.loansService.getDelinquencyTags(loanId);\n    }\n\n}\n","<div class=\"container\">\n\n  <h3>Loan Delinquency Tags</h3>\n\n  <table mat-table [dataSource]=\"loanDelinquencyTags\" *ngIf=\"loanDelinquencyTags.length>0\">\n\n    <ng-container matColumnDef=\"classification\">\n      <th mat-header-cell *matHeaderCellDef> Delinquency Classification </th>\n      <td mat-cell *matCellDef=\"let item\"> {{ item.delinquencyRange.classification }}\n        <span *ngIf=\"item.delinquencyRange.maximumAgeDays\">( {{ item.delinquencyRange.minimumAgeDays }} - {{ item.delinquencyRange.maximumAgeDays }} )</span>\n        <span *ngIf=\"!item.delinquencyRange.maximumAgeDays\">( {{ item.delinquencyRange.minimumAgeDays }} )</span>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"addedOn\">\n      <th mat-header-cell *matHeaderCellDef> Added On </th>\n      <td mat-cell *matCellDef=\"let item\">\n        <span *ngIf=\"item.addedOnDate\">\n          {{ item.addedOnDate  | dateFormat }}\n        </span>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"liftedOn\">\n      <th mat-header-cell *matHeaderCellDef> Lifted On </th>\n      <td mat-cell *matCellDef=\"let item\">\n        <span *ngIf=\"item.liftedOnDate\">\n          {{ item.liftedOnDate  | dateFormat }}\n        </span>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"loanDelinquencyTagsColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: loanDelinquencyTagsColumns;\"></tr>\n  </table>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'mifosx-loan-delinquency-tags-tab',\n  templateUrl: './loan-delinquency-tags-tab.component.html',\n  styleUrls: ['./loan-delinquency-tags-tab.component.scss']\n})\nexport class LoanDelinquencyTagsTabComponent implements OnInit {\n\n  loanDelinquencyTags: any;\n  loanDelinquencyTagsColumns: string[] = ['classification', 'addedOn', 'liftedOn'];\n\n  constructor(private route: ActivatedRoute) {\n    this.route.parent.data.subscribe((data: { loanDelinquencyTagsData: any }) => {\n      this.loanDelinquencyTags = data.loanDelinquencyTagsData;\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Router, Resolve,\n  RouterStateSnapshot,\n  ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { LoansService } from '../loans.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoanReschedulesResolver implements Resolve<boolean> {\n\n    /**\n     * @param {LoansService} LoansService Loans service.\n     */\n    constructor(private loansService: LoansService) { }\n\n    /**\n     * Returns the Loans data.\n     * @returns {Observable<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\n      const loanId = route.paramMap.get('loanId') || route.parent.paramMap.get('loanId');\n      return this.loansService.loanRescheduleRequests(loanId);\n    }\n\n}\n","<div class=\"container\">\n\n  <div fxLayout=\"row\" fxLayoutAlign=\"end\" fxLayoutGap=\"20px\" class=\"action-buttons\">\n    <button mat-raised-button color=\"primary\" [routerLink]=\"['../actions/Reschedule']\">\n      Reschedule\n    </button>\n  </div>\n\n  <table mat-table [dataSource]=\"loanRescheduleData\">\n\n    <ng-container matColumnDef=\"id\">\n      <th mat-header-cell *matHeaderCellDef> # </th>\n      <td mat-cell *matCellDef=\"let item\"> {{ item.id }} </td>\n    </ng-container>\n\n    <!-- Status Column -->\n    <ng-container matColumnDef=\"status\">\n      <th mat-header-cell *matHeaderCellDef> Status </th>\n      <td mat-cell *matCellDef=\"let item\">\n        <div [ngClass]=\"item.statusEnum.code | statusLookup\">\n          <fa-icon icon=\"stop\"></fa-icon>\n          <span class=\"m-l-10 status\">\n            {{ item.statusEnum.value | translate }}\n          </span>\n        </div>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"rescheduleFromDate\">\n      <th mat-header-cell *matHeaderCellDef> From Date </th>\n      <td mat-cell *matCellDef=\"let item\">\n        {{ item.rescheduleFromDate | dateFormat }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"reason\">\n      <th mat-header-cell *matHeaderCellDef> Reason </th>\n      <td mat-cell *matCellDef=\"let item\">\n        {{ item.rescheduleReasonCodeValue.name }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"actions\">\n      <th mat-header-cell *matHeaderCellDef> Actions </th>\n      <td mat-cell *matCellDef=\"let item\">\n        <span *ngIf=\"item.statusEnum.pendingApproval\">\n          <button class=\"action-button\" mat-raised-button color=\"warn\" matTooltip=\"Reject Reschedule\" matTooltipPosition=\"left\"\n          (click)=\"manageRequest(item, 'Reject')\">\n          <fa-icon icon=\"trash\"></fa-icon>\n        </button>\n          <button class=\"action-button\" mat-raised-button color=\"primary\" matTooltip=\"Approve Reschedule\" matTooltipPosition=\"right\"\n            (click)=\"manageRequest(item, 'Approve')\">\n            <fa-icon icon=\"check\"></fa-icon>\n          </button>\n\n        </span>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"loanRescheduleDataColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: loanRescheduleDataColumns;\"></tr>\n  </table>\n\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\nimport { LoansService } from 'app/loans/loans.service';\nimport { LoanStatus } from 'app/loans/models/loan-status.nodel';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { ConfirmationDialogComponent } from 'app/shared/confirmation-dialog/confirmation-dialog.component';\n\n@Component({\n  selector: 'mifosx-reschedule-loan-tab',\n  templateUrl: './reschedule-loan-tab.component.html',\n  styleUrls: ['./reschedule-loan-tab.component.scss']\n})\nexport class RescheduleLoanTabComponent implements OnInit {\n  @Input() loanStatus: LoanStatus;\n\n  loanRescheduleData: any;\n  loanRescheduleDataColumns: string[] = ['id', 'rescheduleFromDate', 'reason', 'status', 'actions'];\n  clientId: any;\n\n  constructor(private route: ActivatedRoute,\n    private router: Router,\n    private loansServices: LoansService,\n    private settingsService: SettingsService,\n    private dateUtils: Dates,\n    private dialog: MatDialog) {\n    this.clientId = this.route.parent.parent.snapshot.paramMap.get('clientId');\n    this.route.parent.data.subscribe((data: { loanRescheduleData: any }) => {\n      this.loanRescheduleData = data.loanRescheduleData;\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  manageRequest(request: any, command: string): void {\n    const approveLoanRescheduleDialogRef = this.dialog.open(ConfirmationDialogComponent, {\n      data: { heading: `${command} Loan Reschedule`, dialogContext: `Are you sure you want ${command} the Loan Reschedule ${request.id}` }\n    });\n    approveLoanRescheduleDialogRef.afterClosed().subscribe((response: { confirm: any }) => {\n      if (response.confirm) {\n        const locale = this.settingsService.language.code;\n        const dateFormat = this.settingsService.dateFormat;\n        const payload = {\n          dateFormat,\n          locale\n        };\n        if (command === 'Approve') {\n          payload['approvedOnDate'] = this.dateUtils.formatDate(this.settingsService.businessDate, dateFormat);\n        } else {\n          payload['rejectedOnDate'] = this.dateUtils.formatDate(this.settingsService.businessDate, dateFormat);\n        }\n        this.loansServices.applyCommandLoanRescheduleRequests(request.id, command.toLowerCase(), payload).subscribe((result: any) => {\n          this.reload();\n        });\n      }\n    });\n  }\n\n  /**\n   * Refetches data fot the component\n   */\n  private reload() {\n    const url: string = this.router.url;\n    this.router.navigateByUrl(`/clients/${this.clientId}/loans-accounts`, { skipLocationChange: true })\n      .then(() => this.router.navigate([url]));\n  }\n}\n","<div class=\"container mat-elevation-z8\">\n\n  <mat-card>\n\n    <form [formGroup]=\"adjustLoanChargeForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Amount</mat-label>\n            <span matTextSuffix class=\"m-l-10\">{{ loanDetailsData.currency.code }}</span>\n            <span fxFlex=\"auto\"></span>\n            <input type=\"number\" matInput required class=\"right-input\" formControlName=\"amount\">\n            <mat-error *ngIf=\"adjustLoanChargeForm.controls.amount.hasError('required')\">\n              Amount <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>External Id</mat-label>\n            <input matInput formControlName=\"externalId\">\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Payment Type</mat-label>\n            <mat-select formControlName=\"paymentTypeId\">\n              <mat-option *ngFor=\"let paymentType of paymentTypes\" [value]=\"paymentType.id\">\n                {{ paymentType.name }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <div fxFlexFill>\n            <span fxFlex=\"75%\" class=\"expandcollapsebutton m-l-10 m-t-40\" (click)=\"addPaymentDetails()\">\n              <mat-slide-toggle>\n                <div [className]=\"showPaymentDetails ? 'enabled' : 'disabled'\">\n                  <span class=\"m-l-10\">Show Payment Details</span>\n                </div>\n              </mat-slide-toggle>\n            </span>\n          </div>\n\n          <ng-container *ngIf=\"showPaymentDetails\">\n            <mat-form-field>\n              <mat-label> Account #</mat-label>\n              <input matInput formControlName=\"accountNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Cheque #</mat-label>\n              <input matInput formControlName=\"checkNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Routing Code</mat-label>\n              <input matInput formControlName=\"routingCode\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Reciept #</mat-label>\n              <input matInput formControlName=\"receiptNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Bank #</mat-label>\n              <input matInput formControlName=\"bankNumber\">\n            </mat-form-field>\n          </ng-container>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n        <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../..']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!adjustLoanChargeForm.valid\"\n            *mifosxHasPermission=\"'ADJUSTMENT_LOANCHARGE'\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { LoansService } from 'app/loans/loans.service';\nimport { OrganizationService } from 'app/organization/organization.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n@Component({\n  selector: 'mifosx-adjust-loan-charge',\n  templateUrl: './adjust-loan-charge.component.html',\n  styleUrls: ['./adjust-loan-charge.component.scss']\n})\nexport class AdjustLoanChargeComponent implements OnInit {\n  /** Loan Id */\n  loanId: string;\n  chargeId: string;\n\n  /** Payment Type Options */\n  paymentTypes: any = [];\n  chargeData: any = [];\n  loanDetailsData: any = [];\n\n  /** Show payment details */\n  showPaymentDetails = false;\n  /** Minimum Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Date allowed. */\n  maxDate = new Date();\n  /** Repayment Loan Form */\n  adjustLoanChargeForm: FormGroup;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {LoansService} loanService Loan Service.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private loanService: LoansService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private settingsService: SettingsService,\n    private organizationService: OrganizationService) {\n      this.loanId = this.route.snapshot.params['loanId'];\n      this.chargeId = this.route.snapshot.params['id'];\n      this.route.data.subscribe((data: { loansAccountCharge: any, loanDetailsData: any }) => {\n        this.chargeData = data.loansAccountCharge;\n        this.loanDetailsData = data.loanDetailsData;\n      });\n    }\n\n  /**\n   * Creates the repayment loan form\n   * and initialize with the required values\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.maxAllowedDate;\n    this.createAdjustLoanChargeForm();\n    this.setRepaymentLoanDetails();\n  }\n\n  /**\n   * Creates the create close form.\n   */\n  createAdjustLoanChargeForm() {\n    this.adjustLoanChargeForm = this.formBuilder.group({\n      'amount': [this.chargeData.amount, Validators.required],\n      'externalId': '',\n      'paymentTypeId': '',\n      'note': ''\n    });\n  }\n\n  setRepaymentLoanDetails() {\n    this.organizationService.getPaymentTypes().subscribe((paymentTypes: any) => {\n      this.paymentTypes = paymentTypes;\n    });\n  }\n\n  /**\n   * Add payment detail fields to the UI.\n   */\n  addPaymentDetails() {\n    this.showPaymentDetails = !this.showPaymentDetails;\n    if (this.showPaymentDetails) {\n      this.adjustLoanChargeForm.addControl('accountNumber', new FormControl(''));\n      this.adjustLoanChargeForm.addControl('checkNumber', new FormControl(''));\n      this.adjustLoanChargeForm.addControl('routingCode', new FormControl(''));\n      this.adjustLoanChargeForm.addControl('receiptNumber', new FormControl(''));\n      this.adjustLoanChargeForm.addControl('bankNumber', new FormControl(''));\n    } else {\n      this.adjustLoanChargeForm.removeControl('accountNumber');\n      this.adjustLoanChargeForm.removeControl('checkNumber');\n      this.adjustLoanChargeForm.removeControl('routingCode');\n      this.adjustLoanChargeForm.removeControl('receiptNumber');\n      this.adjustLoanChargeForm.removeControl('bankNumber');\n    }\n  }\n\n  /** Submits the repayment form */\n  submit() {\n    const adjustLoanChargeFormData = this.adjustLoanChargeForm.value;\n    const locale = this.settingsService.language.code;\n    const data = {\n      ...adjustLoanChargeFormData,\n      locale\n    };\n    const command = 'adjustment';\n    this.loanService.executeLoansAccountChargesCommand(this.loanId, command, data, this.chargeId)\n      .subscribe((response: any) => {\n        this.router.navigate(['../..'], { relativeTo: this.route });\n    });\n  }\n\n}\n","/** Angular Imports */\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n/** Translation Imports */\nimport { extract } from '../core/i18n/i18n.service';\n\n/** Custom Components */\nimport { LoansViewComponent } from './loans-view/loans-view.component';\nimport { GeneralTabComponent } from './loans-view/general-tab/general-tab.component';\nimport { AccountDetailsComponent } from './loans-view/account-details/account-details.component';\nimport { NotesTabComponent } from './loans-view/notes-tab/notes-tab.component';\nimport { RepaymentScheduleTabComponent } from './loans-view/repayment-schedule-tab/repayment-schedule-tab.component';\nimport { TransactionsTabComponent } from './loans-view/transactions-tab/transactions-tab.component';\nimport { OriginalScheduleTabComponent } from './loans-view/original-schedule-tab/original-schedule-tab.component';\nimport { OverdueChargesTabComponent } from './loans-view/overdue-charges-tab/overdue-charges-tab.component';\nimport { ChargesTabComponent } from './loans-view/charges-tab/charges-tab.component';\nimport { DatatableTabComponent } from './loans-view/datatable-tab/datatable-tab.component';\nimport { LoanAccountActionsComponent } from './loans-view/loan-account-actions/loan-account-actions.component';\nimport { FloatingInterestRatesComponent } from './loans-view/floating-interest-rates/floating-interest-rates.component';\nimport { LoanTrancheDetailsComponent } from './loans-view/loan-tranche-details/loan-tranche-details.component';\nimport { LoanCollateralTabComponent } from './loans-view/loan-collateral-tab/loan-collateral-tab.component';\nimport { CreateLoansAccountComponent } from './create-loans-account/create-loans-account.component';\nimport { LoanDocumentsTabComponent } from './loans-view/loan-documents-tab/loan-documents-tab.component';\nimport { StandingInstructionsTabComponent } from 'app/loans/loans-view/standing-instructions-tab/standing-instructions-tab.component';\nimport { EditLoansAccountComponent } from './edit-loans-account/edit-loans-account.component';\nimport { ViewChargeComponent } from './loans-view/view-charge/view-charge.component';\nimport { ViewTransactionComponent } from './loans-view/transactions/view-transaction/view-transaction.component';\nimport { EditTransactionComponent } from './loans-view/transactions/edit-transaction/edit-transaction.component';\nimport { ViewRecieptComponent } from './loans-view/transactions/view-reciept/view-reciept.component';\nimport { ExportTransactionsComponent } from './loans-view/transactions/export-transactions/export-transactions.component';\nimport { GlimAccountComponent } from './glim-account/glim-account.component';\nimport { CreateGlimAccountComponent } from './glim-account/create-glim-account/create-glim-account.component';\n\n/** Custom Resolvers */\nimport { LoanDetailsResolver } from './common-resolvers/loan-details.resolver';\nimport { LoanNotesResolver } from './common-resolvers/loan-notes.resolver';\nimport { LoanDatatablesResolver } from './common-resolvers/loan-datatables.resolver';\nimport { LoanDatatableResolver } from './common-resolvers/loan-datatable.resolver';\nimport { LoanActionButtonResolver } from './common-resolvers/loan-action-button.resolver';\nimport { LoansAccountTemplateResolver } from './common-resolvers/loans-account-template.resolver';\nimport { LoanDocumentsResolver } from './common-resolvers/loan-documents.resolver';\nimport { LoansAccountAndTemplateResolver } from './common-resolvers/loans-account-and-template.resolver';\nimport { LoansAccountChargeResolver } from './common-resolvers/loans-account-charge.resolver';\nimport { LoansAccountTransactionResolver } from './common-resolvers/loans-account-transaction.resolver';\nimport { LoansTransactionRecieptResolver } from './common-resolvers/loans-transaction-reciept.resolver';\nimport { LoansAccountTransactionTemplateResolver } from './common-resolvers/loans-account-transaction-template.resolver';\nimport { SavingsAccountViewResolver } from 'app/savings/common-resolvers/savings-account-view.resolver';\nimport { GroupAccountsResolver } from 'app/groups/common-resolvers/group-account.resolver';\nimport { GLIMViewResolver } from './glim-account/glim-account-view.resolver';\nimport { GSIMAccountsResolver } from 'app/groups/common-resolvers/gsim-account-resolver';\nimport { GLIMLoanTemplateResolver } from './common-resolvers/glim-loan-template.resolver';\nimport { GroupViewResolver } from 'app/groups/common-resolvers/group-view.resolver';\nimport { LoanDelinquencyTagsResolver } from './common-resolvers/loan-delinquency-tags.resolver';\nimport { LoanDelinquencyTagsTabComponent } from './loans-view/loan-delinquency-tags-tab/loan-delinquency-tags-tab.component';\nimport { LoanReschedulesResolver } from './common-resolvers/loan-reschedules.resolver';\nimport { RescheduleLoanTabComponent } from './loans-view/reschedule-loan-tab/reschedule-loan-tab.component';\nimport { AdjustLoanChargeComponent } from './loans-view/loan-account-actions/adjust-loan-charge/adjust-loan-charge.component';\n\n/** Loans Route. */\nconst routes: Routes = [\n  {\n    path: '',\n    data: { title: extract('Loans'), breadcrumb: 'Loans', routeParamBreadcrumb: false },\n    children: [\n      {\n        path: 'create',\n        data: { title: extract('Create Loans Account'), breadcrumb: 'Create Loans Account' },\n        component: CreateLoansAccountComponent,\n        resolve: {\n          loansAccountTemplate: LoansAccountTemplateResolver\n        }\n      },\n      {\n        path: ':loanId',\n        data: { title: extract('Loan View'), routeParamBreadcrumb: 'loanId' },\n        component: LoansViewComponent,\n        resolve: {\n          loanDetailsData: LoanDetailsResolver,\n          loanDatatables: LoanDatatablesResolver\n        },\n        children: [\n          {\n            path: '',\n            redirectTo: 'general',\n            pathMatch: 'full'\n          },\n          {\n            path: 'general',\n            component: GeneralTabComponent,\n            data: { title: extract('General'), breadcrumb: 'General', routeParamBreadcrumb: false },\n            resolve: {\n              loanDetailsData: LoanDetailsResolver,\n              loanDatatables: LoanDatatablesResolver\n            },\n          },\n          {\n            path: 'accountdetail',\n            component: AccountDetailsComponent,\n            data: { title: extract('Account Detail'), breadcrumb: 'Account Detail', routeParamBreadcrumb: false }\n          },\n          {\n            path: 'original-schedule',\n            component: OriginalScheduleTabComponent,\n            data: { title: extract('Original Schedule'), breadcrumb: 'Original Schedule', routeParamBreadcrumb: false },\n          },\n          {\n            path: 'repayment-schedule',\n            component: RepaymentScheduleTabComponent,\n            data: { title: extract('Repayment Schedule'), breadcrumb: 'Repayment Schedule', routeParamBreadcrumb: false },\n          },\n          {\n            path: 'transactions',\n            data: { title: extract('Loans Account Transactions'), breadcrumb: 'Transactions', routeParamBreadcrumb: false },\n            children: [\n              {\n                path: '',\n                component: TransactionsTabComponent\n\n              },\n              {\n                path: 'export',\n                component: ExportTransactionsComponent\n              }\n            ]\n          },\n          {\n            path: 'delinquencytags',\n            data: { title: extract('Loans Delinquency Tags'), breadcrumb: 'Delinquency Tags', routeParamBreadcrumb: false },\n            resolve: {\n              loanDelinquencyTagsData: LoanDelinquencyTagsResolver\n            },\n            children: [\n              {\n                path: '',\n                component: LoanDelinquencyTagsTabComponent\n              },\n            ]\n          },\n          {\n            path: 'loan-reschedules',\n            data: {},\n            resolve: {\n              loanRescheduleData: LoanReschedulesResolver\n            },\n            children: [\n              {\n                path: '',\n                component: RescheduleLoanTabComponent\n              }\n            ]\n          },\n          {\n            path: 'loan-collateral',\n            component: LoanCollateralTabComponent,\n            data: { title: extract('Loan Collateral Details'), breadcrumb: 'Loan Collateral Details', routeParamBreadcrumb: false },\n          },\n          {\n            path: 'loan-tranche-details',\n            component: LoanTrancheDetailsComponent,\n            data: { title: extract('Loan Tranche Details'), breadcrumb: 'Loan Tranche Details', routeParamBreadcrumb: false },\n          },\n          {\n            path: 'overdue-charges',\n            component: OverdueChargesTabComponent,\n            data: { title: extract('Overdue Charges'), breadcrumb: 'Overdue Charges', routeParamBreadcrumb: false }\n          },\n          {\n            path: 'floating-interest-rates',\n            component: FloatingInterestRatesComponent,\n            data: { title: extract('Floating Interest Rates'), breadcrumb: 'Floating Interest Rates', routeParamBreadcrumb: false },\n          },\n          {\n            path: 'charges',\n            data: { title: extract('Loans Account Charges'), breadcrumb: 'Charges', routeParamBreadcrumb: false },\n            component: ChargesTabComponent,\n          },\n          {\n            path: 'loan-documents',\n            component: LoanDocumentsTabComponent,\n            data: { title: extract('Loan Documents'), breadcrumb: 'Loan Documents', routeParamBreadcrumb: false },\n            resolve: {\n              loanDocuments: LoanDocumentsResolver\n            },\n          },\n          {\n            path: 'notes',\n            component: NotesTabComponent,\n            data: { title: extract('Notes'), breadcrumb: 'Notes', routeParamBreadcrumb: false },\n            resolve: {\n              loanNotes: LoanNotesResolver\n            },\n          },\n          {\n            path: 'standing-instruction',\n            component: StandingInstructionsTabComponent,\n            data: { title: extract('Standing Instructions'), breadcrumb: 'Standing Instructions', routeParamBreadcrumb: false }\n          },\n          {\n            path: 'datatables',\n            children: [{\n              path: ':datatableName',\n              component: DatatableTabComponent,\n              data: { title: extract('Data Table View'), routeParamBreadcrumb: 'datatableName' },\n              resolve: {\n                loanDatatable: LoanDatatableResolver\n              }\n            }]\n          },\n        ],\n      },\n      {\n        path: ':loanId/transactions/:id',\n        data: { title: extract('Loans Account Transactions'), breadcrumb: 'Transactions', routeParamBreadcrumb: false },\n        resolve: {\n          loanDetailsAssociationData: LoanDetailsResolver\n        },\n        children: [\n          {\n            path: '',\n            data: { routeParamBreadcrumb: 'id' },\n            component: ViewTransactionComponent,\n            resolve: {\n              loansAccountTransaction: LoansAccountTransactionResolver\n            }\n          },\n          {\n            path: 'edit',\n            component: EditTransactionComponent,\n            data: { breadcrumb: 'Edit', routeParamBreadcrumb: false },\n            resolve: {\n              loansAccountTransactionTemplate: LoansAccountTransactionTemplateResolver\n            }\n          },\n          {\n            path: 'reciept',\n            component: ViewRecieptComponent,\n            data: { breadcrumb: 'Reciept', routeParamBreadcrumb: false },\n            resolve: {\n              loansTransactionReciept: LoansTransactionRecieptResolver\n            }\n          }\n        ]\n      },\n      {\n        path: ':loanId/edit-loans-account',\n        data: { title: extract('Modify Loans Account'), breadcrumb: 'Modify Loans Account', routeParamBreadcrumb: 'Edit' },\n        component: EditLoansAccountComponent,\n        resolve: {\n          loansAccountAndTemplate: LoansAccountAndTemplateResolver\n        }\n      },\n      {\n        path: ':loanId/charges',\n        data: { title: extract('Loans Account Charges'), breadcrumb: 'Charges', routeParamBreadcrumb: false },\n        children: [\n          {\n            path: '',\n            redirectTo: '../charges', pathMatch: 'prefix'\n          },\n          {\n            path: ':id',\n            data: { routeParamBreadcrumb: 'id' },\n            component: ViewChargeComponent,\n            resolve: {\n              loansAccountCharge: LoansAccountChargeResolver,\n              loanDetailsData: LoanDetailsResolver\n            }\n          },\n          {\n            path: ':id/adjustment',\n            data: { routeParamBreadcrumb: 'id', breadcrumb: 'Adjustment' },\n            component: AdjustLoanChargeComponent,\n            resolve: {\n              loansAccountCharge: LoansAccountChargeResolver,\n              loanDetailsData: LoanDetailsResolver\n            }\n          }\n        ]\n      },\n      {\n        path: ':loanId/actions/:action',\n        component: LoanAccountActionsComponent,\n        data: { title: extract('Loan Account Actions'), breadcrumb: 'action', routeParamBreadcrumb: 'action' },\n        resolve: {\n          actionButtonData: LoanActionButtonResolver\n        }\n      },\n      {\n        path: ':loanId/transfer-funds',\n        loadChildren: () => import('../account-transfers/account-transfers.module').then(m => m.AccountTransfersModule)\n      },\n      {\n        path: 'edit-loans-account',\n        data: { title: extract('Modify Loans Account'), breadcrumb: 'Modify Loans Account', routeParamBreadcrumb: 'Edit' },\n        component: EditLoansAccountComponent,\n        resolve: {\n          loansAccountAndTemplate: LoansAccountAndTemplateResolver\n        }\n      },\n    ]\n  },\n  {\n    path: 'glim-account',\n    children: [\n      {\n        path: 'create',\n        data: { title: extract('Create GLIM Application'), breadcrumb: 'Create GLIM Application' },\n        component: CreateGlimAccountComponent,\n        resolve: {\n          loansAccountTemplate: GLIMLoanTemplateResolver,\n          gsimData: GSIMAccountsResolver,\n          groupsData: GroupViewResolver,\n        },\n      },\n      {\n        path: ':glimId',\n        data: { title: extract('GSIM Account View'), routeParamBreadcrumb: 'savingAccountId' },\n        component: GlimAccountComponent,\n        resolve: {\n          glimData: GLIMViewResolver,\n          groupsData: GroupAccountsResolver\n        },\n      }\n    ]\n  }\n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  declarations: [],\n  providers: [\n    LoanDetailsResolver,\n    LoanNotesResolver,\n    LoanDatatablesResolver,\n    LoanDatatableResolver,\n    LoanDelinquencyTagsResolver,\n    LoanActionButtonResolver,\n    LoansAccountTemplateResolver,\n    LoanDocumentsResolver,\n    LoansAccountAndTemplateResolver,\n    LoansAccountChargeResolver,\n    LoansAccountTransactionResolver,\n    LoansAccountTransactionTemplateResolver,\n    LoansTransactionRecieptResolver,\n    SavingsAccountViewResolver,\n    GroupAccountsResolver,\n    GLIMViewResolver,\n    GSIMAccountsResolver,\n    GLIMLoanTemplateResolver\n  ]\n})\n\nexport class LoansRoutingModule { }\n","/** Angular Imports */\nimport { NgModule } from '@angular/core';\nimport { DirectivesModule } from '../directives/directives.module';\n\n/** Custom Modules */\nimport { LoansRoutingModule } from './loans-routing.module';\nimport { SharedModule } from 'app/shared/shared.module';\nimport { PipesModule } from '../pipes/pipes.module';\n\n/** Custom Components */\nimport { AddLoanChargeComponent } from './loans-view/loan-account-actions/add-loan-charge/add-loan-charge.component';\nimport { LoansViewComponent } from './loans-view/loans-view.component';\nimport { GeneralTabComponent } from './loans-view/general-tab/general-tab.component';\nimport { AccountDetailsComponent } from './loans-view/account-details/account-details.component';\nimport { NotesTabComponent } from './loans-view/notes-tab/notes-tab.component';\nimport { ChargesTabComponent } from './loans-view/charges-tab/charges-tab.component';\nimport { OverdueChargesTabComponent } from './loans-view/overdue-charges-tab/overdue-charges-tab.component';\nimport { OriginalScheduleTabComponent } from './loans-view/original-schedule-tab/original-schedule-tab.component';\nimport { RepaymentScheduleTabComponent } from './loans-view/repayment-schedule-tab/repayment-schedule-tab.component';\nimport { LoanAccountActionsComponent } from './loans-view/loan-account-actions/loan-account-actions.component';\nimport { LoansAccountCloseComponent } from './loans-view/loan-account-actions/loans-account-close/loans-account-close.component';\nimport { TransactionsTabComponent } from './loans-view/transactions-tab/transactions-tab.component';\nimport { DatatableTabComponent } from './loans-view/datatable-tab/datatable-tab.component';\nimport { UndoApprovalComponent } from './loans-view/loan-account-actions/undo-approval/undo-approval.component';\nimport { AssignLoanOfficerComponent } from './loans-view/loan-account-actions/assign-loan-officer/assign-loan-officer.component';\nimport { ForeclosureComponent } from './loans-view/loan-account-actions/foreclosure/foreclosure.component';\nimport { PrepayLoanComponent } from './loans-view/loan-account-actions/prepay-loan/prepay-loan.component';\nimport { MakeRepaymentComponent } from './loans-view/loan-account-actions/make-repayment/make-repayment.component';\nimport { WaiveInterestComponent } from './loans-view/loan-account-actions/waive-interest/waive-interest.component';\nimport { FloatingInterestRatesComponent } from './loans-view/floating-interest-rates/floating-interest-rates.component';\nimport { WriteOffPageComponent } from './loans-view/loan-account-actions/write-off-page/write-off-page.component';\nimport { LoanTrancheDetailsComponent } from './loans-view/loan-tranche-details/loan-tranche-details.component';\nimport { CloseAsRescheduledComponent } from './loans-view/loan-account-actions/close-as-rescheduled/close-as-rescheduled.component';\nimport { LoanRescheduleComponent } from './loans-view/loan-account-actions/loan-reschedule/loan-reschedule.component';\nimport { LoanCollateralTabComponent } from './loans-view/loan-collateral-tab/loan-collateral-tab.component';\nimport { CreateLoansAccountComponent } from './create-loans-account/create-loans-account.component';\nimport { LoansAccountDetailsStepComponent } from './loans-account-stepper/loans-account-details-step/loans-account-details-step.component';\nimport { LoansAccountTermsStepComponent } from './loans-account-stepper/loans-account-terms-step/loans-account-terms-step.component';\nimport { LoansAccountChargesStepComponent } from './loans-account-stepper/loans-account-charges-step/loans-account-charges-step.component';\nimport { LoansAccountPreviewStepComponent } from './loans-account-stepper/loans-account-preview-step/loans-account-preview-step.component';\nimport { RecoveryRepaymentComponent } from './loans-view/loan-account-actions/recovery-repayment/recovery-repayment.component';\nimport { ViewGuarantorsComponent } from './loans-view/loan-account-actions/view-guarantors/view-guarantors.component';\nimport { CreateGuarantorComponent } from './loans-view/loan-account-actions/create-guarantor/create-guarantor.component';\nimport { DisburseComponent } from './loans-view/loan-account-actions/disburse/disburse.component';\nimport { RejectLoanComponent } from './loans-view/loan-account-actions/reject-loan/reject-loan.component';\nimport { WithdrawnByClientComponent } from './loans-view/loan-account-actions/withdrawn-by-client/withdrawn-by-client.component';\nimport { UndoDisbursalComponent } from './loans-view/loan-account-actions/undo-disbursal/undo-disbursal.component';\nimport { AddCollateralComponent } from './loans-view/loan-account-actions/add-collateral/add-collateral.component';\nimport { LoanDocumentsTabComponent } from './loans-view/loan-documents-tab/loan-documents-tab.component';\nimport { ViewChargeComponent } from './loans-view/view-charge/view-charge.component';\nimport { StandingInstructionsTabComponent } from './loans-view/standing-instructions-tab/standing-instructions-tab.component';\nimport { EditLoansAccountComponent } from './edit-loans-account/edit-loans-account.component';\nimport { LoanScreenReportsComponent } from './loans-view/loan-account-actions/loan-screen-reports/loan-screen-reports.component';\nimport { ApproveLoanComponent } from './loans-view/loan-account-actions/approve-loan/approve-loan.component';\nimport { ViewRecieptComponent } from './loans-view/transactions/view-reciept/view-reciept.component';\nimport { ExportTransactionsComponent } from './loans-view/transactions/export-transactions/export-transactions.component';\nimport { ViewTransactionComponent } from './loans-view/transactions/view-transaction/view-transaction.component';\nimport { EditTransactionComponent } from './loans-view/transactions/edit-transaction/edit-transaction.component';\nimport { GlimAccountComponent } from './glim-account/glim-account.component';\nimport { CreateGlimAccountComponent } from './glim-account/create-glim-account/create-glim-account.component';\nimport { GlimDetailsStepComponent } from './glim-account/create-glim-account/glim-account-stepper/glim-details-step/glim-details-step.component';\nimport { GlimChargesStepComponent } from './glim-account/create-glim-account/glim-account-stepper/glim-charges-step/glim-charges-step.component';\nimport { GlimTermsStepComponent } from './glim-account/create-glim-account/glim-account-stepper/glim-terms-step/glim-terms-step.component';\nimport { GlimPreviewStepComponent } from './glim-account/create-glim-account/glim-account-stepper/glim-preview-step/glim-preview-step.component';\n\n/** Dialog Components */\nimport { LoansAccountViewGuarantorDetailsDialogComponent } from './custom-dialog/loans-account-view-guarantor-details-dialog/loans-account-view-guarantor-details-dialog.component';\nimport { LoansAccountAddCollateralDialogComponent } from './custom-dialog/loans-account-add-collateral-dialog/loans-account-add-collateral-dialog.component';\nimport { LoanCreditBalanceRefundComponent } from './loans-view/loan-account-actions/loan-credit-balance-refund/loan-credit-balance-refund.component';\nimport { LoanDelinquencyTagsTabComponent } from './loans-view/loan-delinquency-tags-tab/loan-delinquency-tags-tab.component';\nimport { LoansAccountScheduleStepComponent } from './loans-account-stepper/loans-account-schedule-step/loans-account-schedule-step.component';\nimport { EditRepaymentScheduleComponent } from './loans-view/loan-account-actions/edit-repayment-schedule/edit-repayment-schedule.component';\nimport { DisburseToSavingsAccountComponent } from './loans-view/loan-account-actions/disburse-to-savings-account/disburse-to-savings-account.component';\nimport { LoansAccountDatatableStepComponent } from './loans-account-stepper/loans-account-datatable-step/loans-account-datatable-step.component';\nimport { RescheduleLoanTabComponent } from './loans-view/reschedule-loan-tab/reschedule-loan-tab.component';\nimport { AdjustLoanChargeComponent } from './loans-view/loan-account-actions/adjust-loan-charge/adjust-loan-charge.component';\n\n/**\n * Loans Module\n *\n * All components related to loan functions should be declared here.\n */\n@NgModule({\n  imports: [SharedModule, LoansRoutingModule, DirectivesModule, PipesModule],\n  declarations: [\n    AddLoanChargeComponent,\n    LoansViewComponent,\n    GeneralTabComponent,\n    AccountDetailsComponent,\n    NotesTabComponent,\n    ChargesTabComponent,\n    OverdueChargesTabComponent,\n    OriginalScheduleTabComponent,\n    RepaymentScheduleTabComponent,\n    LoanAccountActionsComponent,\n    LoansAccountCloseComponent,\n    TransactionsTabComponent,\n    DatatableTabComponent,\n    UndoApprovalComponent,\n    AssignLoanOfficerComponent,\n    ForeclosureComponent,\n    PrepayLoanComponent,\n    MakeRepaymentComponent,\n    WaiveInterestComponent,\n    FloatingInterestRatesComponent,\n    WriteOffPageComponent,\n    LoanTrancheDetailsComponent,\n    CloseAsRescheduledComponent,\n    LoanRescheduleComponent,\n    LoanCollateralTabComponent,\n    CreateLoansAccountComponent,\n    LoansAccountDetailsStepComponent,\n    LoansAccountTermsStepComponent,\n    LoansAccountChargesStepComponent,\n    LoansAccountPreviewStepComponent,\n    LoansAccountAddCollateralDialogComponent,\n    RecoveryRepaymentComponent,\n    ViewGuarantorsComponent,\n    CreateGuarantorComponent,\n    LoansAccountViewGuarantorDetailsDialogComponent,\n    RejectLoanComponent,\n    DisburseComponent,\n    WithdrawnByClientComponent,\n    AddCollateralComponent,\n    UndoDisbursalComponent,\n    LoanDocumentsTabComponent,\n    StandingInstructionsTabComponent,\n    EditLoansAccountComponent,\n    LoanScreenReportsComponent,\n    ApproveLoanComponent,\n    ViewChargeComponent,\n    ViewTransactionComponent,\n    EditTransactionComponent,\n    ViewRecieptComponent,\n    ExportTransactionsComponent,\n    LoanCreditBalanceRefundComponent,\n    GlimAccountComponent,\n    CreateGlimAccountComponent,\n    GlimDetailsStepComponent,\n    GlimChargesStepComponent,\n    GlimTermsStepComponent,\n    GlimPreviewStepComponent,\n    LoanDelinquencyTagsTabComponent,\n    LoansAccountScheduleStepComponent,\n    EditRepaymentScheduleComponent,\n    DisburseToSavingsAccountComponent,\n    LoansAccountDatatableStepComponent,\n    RescheduleLoanTabComponent,\n    AdjustLoanChargeComponent\n  ],\n  providers: [ ],\n})\nexport class LoansModule {}\n"]}