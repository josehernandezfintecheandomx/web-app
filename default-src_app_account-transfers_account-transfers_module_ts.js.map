{"version":3,"file":"default-src_app_account-transfers_account-transfers_module_ts.js","mappings":"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","names":["i0","ViewStandingInstructionsComponent","T","route","this","data","subscribe","e","standingInstructionsData","fromClient","id","toClient","allowclientedit","selectors","ctx_r19","EditStandingInstructionsComponent","formBuilder","router","accountTransfersService","settingsService","dateUtils","Date","l","standingInstructionsDataAndTemplate","standingInstructionsId","setOptions","maxDate","businessDate","createEditStandingInstructionsForm","n","getFullYear","recurrenceOnMonthDay","push","editStandingInstructionsForm","patchValue","name","applicant","displayName","type","transferType","value","priority","status","fromAccountType","fromAccount","productName","destination","toOffice","toClientId","toAccountType","toAccount","instructionType","amount","validFrom","validTill","recurrenceType","recurrenceInterval","recurrenceFrequency","group","disabled","Validators","priorityTypeData","priorityOptions","statusTypeData","statusOptions","instructionTypeData","instructionTypeOptions","recurrenceTypeData","recurrenceTypeOptions","recurrenceFrequencyTypeData","recurrenceFrequencyOptions","dateFormat","standingInstructionData","locale","language","code","monthDayFormat","formatDate","updateStandingInstructionsData","response","navigate","relativeTo","i","_r5","_r7","_r12","ctx_r49","CreateStandingInstructionsComponent","standingIntructionsTemplate","setParams","officeId","snapshot","queryParams","accountType","clientId","parent","params","accountTypeId","createCreateStandingInstructionsForm","buildDependencies","createStandingInstructionsForm","fromAccountId","toOfficeId","toAccountId","transferTypeData","transferTypeOptions","fromAccountTypeData","fromAccountTypeOptions","fromAccountData","fromAccountOptions","destinationTypeData","toOfficeTypeData","toOfficeOptions","toClientTypeData","toClientOptions","toAccountTypeData","toAccountTypeOptions","toAccountData","toAccountOptions","get","valueChanges","controls","disable","changeEvent","enable","formValue","refineObject","getStandingInstructionsTemplate","dataObj","propNames","Object","getOwnPropertyNames","length","propName","fromClientId","fromOfficeId","createStandingInstructions","ctx","_r24","_r26","_r33","ctx_r18","MakeAccountTransfersComponent","clientsService","p","accountTransferTemplateData","accountTransferTemplate","loanId","savingsId","createMakeAccountTransferForm","makeAccountTransferForm","transferAmount","transferDate","transferDescription","newAccountTranferResource","getFilteredClients","clientsData","pageItems","client","undefined","makeAccountTransferData","createAccountTransfer","_r0","ctx_r22","ctx_r37","ListStandingInstructionsComponent","dialog","FormControl","MatTableDataSource","s","standingIntructionsTemplateData","clientName","getStandingInstructions","transferTypeDatas","isFromClient","clientNameControl","limit","offset","fromTransferType","instructionsData","dataSource","instructionTableRef","renderRows","instructionId","open","DeleteDialogComponent","deleteContext","afterClosed","delete","r","deleteStandingInstrucions","MatPaginator","ListTransactionsComponent","listTransactionData","transactions","paginator","ViewAccountTransferComponent","location","viewAccountTransferData","back","ViewStandingInstructionsResolver","paramMap","getStandingInstructionsData","factory","StandingInstructionsDataAndTemplateResolver","getStandingInstructionsDataAndTemplate","StandingInstructionsTemplateResolver","queryParamMap","MakeAccountTransferTemplateResolver","ListTransactionsResolver","getStandingInstructionsTransactions","ViewAccountTransferResolver","transferId","getViewAccountTransferDetails","routes","path","children","title","extract","breadcrumb","routeParamBreadcrumb","component","resolve","AccountTransfersRoutingModule","imports","RouterModule","AccountTransfersModule","SharedModule","PipesModule","DirectivesModule"],"sourceRoot":"webpack:///","sources":["./src/app/account-transfers/view-standing-instructions/view-standing-instructions.component.html","./src/app/account-transfers/view-standing-instructions/view-standing-instructions.component.ts","./src/app/account-transfers/edit-standing-instructions/edit-standing-instructions.component.html","./src/app/account-transfers/edit-standing-instructions/edit-standing-instructions.component.ts","./src/app/account-transfers/create-standing-instructions/create-standing-instructions.component.html","./src/app/account-transfers/create-standing-instructions/create-standing-instructions.component.ts","./src/app/account-transfers/make-account-transfers/make-account-transfers.component.html","./src/app/account-transfers/make-account-transfers/make-account-transfers.component.ts","./src/app/account-transfers/list-standing-instructions/list-standing-instructions.component.html","./src/app/account-transfers/list-standing-instructions/list-standing-instructions.component.ts","./src/app/account-transfers/list-transactions/list-transactions.component.html","./src/app/account-transfers/list-transactions/list-transactions.component.ts","./src/app/account-transfers/view-account-transfer/view-account-transfer.component.ts","./src/app/account-transfers/view-account-transfer/view-account-transfer.component.html","./src/app/account-transfers/common-resolvers/view-standing-instructions.resolver.ts","./src/app/account-transfers/common-resolvers/standing-instructions-data-and-template.resolver.ts","./src/app/account-transfers/common-resolvers/standing-instructions-template.resolver.ts","./src/app/account-transfers/common-resolvers/make-account-transfer-template.resolver.ts","./src/app/account-transfers/common-resolvers/list-transactions.resolver.ts","./src/app/account-transfers/common-resolvers/view-account-transfer.resolver.ts","./src/app/account-transfers/account-transfers-routing.module.ts","./src/app/account-transfers/account-transfers.module.ts"],"sourcesContent":["<div fxLayout=\"row\" fxLayoutAlign=\"end\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\" class=\"container m-b-20\">\n  <button mat-raised-button color=\"primary\" [routerLink]=\"['../', 'edit']\">\n    <fa-icon icon=\"edit\" class=\"m-r-10\"></fa-icon>\n    Edit\n  </button>\n  <button mat-raised-button color=\"primary\" [routerLink]=\"['../', 'list-account-transactions']\" *mifosxHasPermission=\"'READ_ACCOUNTTRANSFER'\">\n    View Transactions History\n  </button>\n</div>\n\n<div class=\"container\">\n\n  <mat-card>\n\n    <mat-card-content>\n\n      <div fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\n\n        <h2 class=\"mat-h2\" fxFlexFill>{{ standingInstructionsData.name }}</h2>\n\n        <mat-divider [inset]=\"true\"></mat-divider>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Applicant:</span>\n          <span fxFlex=\"60%\">{{ standingInstructionsData.fromClient.displayName }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Type:</span>\n          <span fxFlex=\"60%\">{{ standingInstructionsData.transferType.value }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Priority:</span>\n          <span fxFlex=\"60%\">{{ standingInstructionsData.priority.value }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Status:</span>\n          <span fxFlex=\"60%\">{{ standingInstructionsData.status.value }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">From Account Type:</span>\n          <span fxFlex=\"60%\">{{ standingInstructionsData.fromAccountType.value }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">From Account:</span>\n          <span fxFlex=\"60%\">{{ standingInstructionsData.fromAccount.productName }} - {{ standingInstructionsData.fromAccount.accountNo }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Destination:</span>\n          <span fxFlex=\"60%\">\n            <span *ngIf=\"allowclientedit\"> Within Bank </span>\n            <span *ngIf=\"!allowclientedit\"> Own Account </span>\n          </span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">To Office:</span>\n          <span fxFlex=\"60%\">{{ standingInstructionsData.toOffice.name }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Beneficiary:</span>\n          <span fxFlex=\"60%\">{{ standingInstructionsData.toClient.displayName }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">To Account Type:</span>\n          <span fxFlex=\"60%\">{{ standingInstructionsData.toAccountType.value }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">To Account:</span>\n          <span fxFlex=\"60%\">{{ standingInstructionsData.toAccount.productName }} - {{standingInstructionsData.toAccount.accountNo}}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Standing Instruction Type:</span>\n          <span fxFlex=\"60%\">{{ standingInstructionsData.instructionType.value }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Amount:</span>\n          <span fxFlex=\"60%\">{{ standingInstructionsData.amount }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Validity:</span>\n          <span fxFlex=\"60%\">{{ standingInstructionsData.validFrom  | dateFormat }} - {{ standingInstructionsData.validTill  | dateFormat }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Recurrence type:</span>\n          <span fxFlex=\"60%\">{{ standingInstructionsData.recurrenceType.value }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Interval:</span>\n          <span fxFlex=\"60%\">{{ standingInstructionsData.recurrenceInterval }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Recurrence Frequency:</span>\n          <span fxFlex=\"60%\">{{ standingInstructionsData.recurrenceFrequency.value }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">On Month Day:</span>\n          <span fxFlex=\"60%\">{{ standingInstructionsData.recurrenceOnMonthDay  | dateFormat }}</span>\n        </div>\n\n      </div>\n\n    </mat-card-content>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'mifosx-view-standing-instructions',\n  templateUrl: './view-standing-instructions.component.html',\n  styleUrls: ['./view-standing-instructions.component.scss']\n})\nexport class ViewStandingInstructionsComponent {\n\n  /** Standing Instructions Data */\n  standingInstructionsData: any;\n  /** Allow Client Edit */\n  allowclientedit = false;\n\n  /**\n   * Retrieves the standing instructions data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute) {\n    this.route.data.subscribe((data: { standingInstructionsData: any}) => {\n      this.standingInstructionsData = data.standingInstructionsData;\n      if (this.standingInstructionsData.fromClient.id === this.standingInstructionsData.toClient.id) {\n        this.allowclientedit = false;\n      }\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"editStandingInstructionsForm\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Name</mat-label>\n            <input matInput formControlName=\"name\">\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Applicant</mat-label>\n            <input matInput formControlName=\"applicant\">\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Type</mat-label>\n            <input matInput formControlName=\"type\">\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>From Account Type</mat-label>\n            <input matInput formControlName=\"fromAccountType\">\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Priority</mat-label>\n            <mat-select required formControlName=\"priority\">\n              <mat-option *ngFor=\"let priorityType of priorityTypeData\" [value]=\"priorityType.id\">\n                {{ priorityType.value }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"editStandingInstructionsForm.controls.priority.hasError('required')\">\n              Priority is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Status</mat-label>\n            <mat-select required formControlName=\"status\">\n              <mat-option *ngFor=\"let statusType of statusTypeData\" [value]=\"statusType.id\">\n                {{ statusType.value }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"editStandingInstructionsForm.controls.status.hasError('required')\">\n              Status is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>From Account</mat-label>\n            <input matInput formControlName=\"fromAccount\">\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Destination</mat-label>\n            <input matInput formControlName=\"destination\">\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>To Office</mat-label>\n            <input matInput formControlName=\"toOffice\">\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Beneficiary</mat-label>\n            <input matInput formControlName=\"toClientId\">\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>To Account Type</mat-label>\n            <input matInput formControlName=\"toAccountType\">\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>To Account</mat-label>\n            <input matInput formControlName=\"toAccount\">\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Standing Instruction Type</mat-label>\n            <mat-select formControlName=\"instructionType\">\n              <mat-option *ngFor=\"let instructionsType of instructionTypeData\"\n                [value]=\"instructionsType.id\">\n                {{ instructionsType.value }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Amount</mat-label>\n            <input matInput formControlName=\"amount\">\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\" (click)=\"validFromDatePicker.open()\">\n            <mat-label>Validity From</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"validFromDatePicker\" required\n              formControlName=\"validFrom\">\n            <mat-datepicker-toggle matSuffix [for]=\"validFromDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #validFromDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"editStandingInstructionsForm.controls.validFrom.hasError('required')\">\n              Valid From Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\" (click)=\"validTillDatePicker.open()\">\n            <mat-label>Validity To</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"validTillDatePicker\" required\n              formControlName=\"validTill\">\n            <mat-datepicker-toggle matSuffix [for]=\"validTillDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #validTillDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"editStandingInstructionsForm.controls.validTill.hasError('required')\">\n              Valid Till Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Recurrence Type</mat-label>\n            <mat-select required formControlName=\"recurrenceType\">\n              <mat-option *ngFor=\"let recurrenceType of recurrenceTypeData\" [value]=\"recurrenceType.id\">\n                {{ recurrenceType.value }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"editStandingInstructionsForm.controls.recurrenceType.hasError('required')\">\n              Recurrence Type is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Interval</mat-label>\n            <input matInput formControlName=\"recurrenceInterval\">\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Recurrence Frequency</mat-label>\n            <mat-select formControlName=\"recurrenceFrequency\">\n              <mat-option *ngFor=\"let recurrenceFrequencyType of recurrenceFrequencyTypeData\"\n                [value]=\"recurrenceFrequencyType.id\">\n                {{ recurrenceFrequencyType.value }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\" (click)=\"recurrenceOnMonthDayDatePicker.open()\">\n            <mat-label>On Month Day</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"recurrenceOnMonthDayDatePicker\"\n              formControlName=\"recurrenceOnMonthDay\">\n            <mat-datepicker-toggle matSuffix [for]=\"recurrenceOnMonthDayDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #recurrenceOnMonthDayDatePicker></mat-datepicker>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../view']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" [disabled]=\"!editStandingInstructionsForm.valid\"\n        (click)=\"submit()\" *mifosxHasPermission=\"'UPDATE_STANDINGINSTRUCTION'\">Submit</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\n\n/** Custom Services */\nimport { AccountTransfersService } from '../account-transfers.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Edit Standing Instructions\n */\n@Component({\n  selector: 'mifosx-edit-standing-instructions',\n  templateUrl: './edit-standing-instructions.component.html',\n  styleUrls: ['./edit-standing-instructions.component.scss']\n})\nexport class EditStandingInstructionsComponent implements OnInit {\n\n  /** Standing Instructions Data */\n  standingInstructionsData: any;\n  /** Standing Instructions Id */\n  standingInstructionsId: any;\n  /** Allow Client Edit */\n  allowclientedit = false;\n  /** Edit Standing Instructions form. */\n  editStandingInstructionsForm: FormGroup;\n  /** Priority Type Data */\n  priorityTypeData: any;\n  /** Status Type Data */\n  statusTypeData: any;\n  /** Instruction Type Data  */\n  instructionTypeData: any;\n  /** Recurrence Type Data */\n  recurrenceTypeData: any;\n  /** Recurrence Frequency Type Data */\n  recurrenceFrequencyTypeData: any;\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n\n  /**\n   * Retrieves the standing instructions template from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {Router} router Router\n   * @param {AccountTransfersService} accountTransfersService Account Transfers Service\n   * @param {SettingsService} settingsService Settings Service\n   * @param {Dates} dateUtils Date Utils\n   */\n  constructor(private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private accountTransfersService: AccountTransfersService,\n    private settingsService: SettingsService,\n    private dateUtils: Dates) {\n    this.route.data.subscribe((data: { standingInstructionsDataAndTemplate: any }) => {\n      this.standingInstructionsData = data.standingInstructionsDataAndTemplate;\n      this.standingInstructionsId = data.standingInstructionsDataAndTemplate.id;\n      if (this.standingInstructionsData.fromClient.id === this.standingInstructionsData.toClient.id) {\n        this.allowclientedit = false;\n      }\n      this.setOptions();\n    });\n  }\n\n  /**\n   * Creates and sets the edit standing instructions form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createEditStandingInstructionsForm();\n    const presentDate = new Date();\n    const n = presentDate.getFullYear();\n    if (this.standingInstructionsData.recurrenceOnMonthDay) {\n      this.standingInstructionsData.recurrenceOnMonthDay.push(n);\n    }\n    this.editStandingInstructionsForm.patchValue({\n      'name': this.standingInstructionsData.name,\n      'applicant': this.standingInstructionsData.fromClient.displayName,\n      'type': this.standingInstructionsData.transferType.value,\n      'priority': this.standingInstructionsData.priority.id,\n      'status': this.standingInstructionsData.status.id,\n      'fromAccountType': this.standingInstructionsData.fromAccountType.value,\n      'fromAccount': this.standingInstructionsData.fromAccount.productName,\n      'destination': this.allowclientedit ? 'Within Bank' : 'Own Account',\n      'toOffice': this.standingInstructionsData.toOffice.name,\n      'toClientId': this.standingInstructionsData.toClient.displayName,\n      'toAccountType': this.standingInstructionsData.toAccountType.value,\n      'toAccount': this.standingInstructionsData.toAccount.productName,\n      'instructionType': this.standingInstructionsData.instructionType.id,\n      'amount': this.standingInstructionsData.amount,\n      'validFrom': this.standingInstructionsData.validFrom && new Date(this.standingInstructionsData.validFrom),\n      'validTill': this.standingInstructionsData.validTill && new Date(this.standingInstructionsData.validTill),\n      'recurrenceType': this.standingInstructionsData.recurrenceType.id,\n      'recurrenceInterval': this.standingInstructionsData.recurrenceInterval,\n      'recurrenceFrequency': this.standingInstructionsData.recurrenceFrequency.id,\n      'recurrenceOnMonthDay': this.standingInstructionsData.recurrenceOnMonthDay && new Date(this.standingInstructionsData.recurrenceOnMonthDay)\n    });\n  }\n\n  /**\n   * Creates the standing instructions form.\n   */\n  createEditStandingInstructionsForm() {\n    this.editStandingInstructionsForm = this.formBuilder.group({\n      'name': [{value: '', disabled: true}],\n      'applicant': [{ value: '', disabled: true }],\n      'type': [{ value: '', disabled: true }],\n      'priority': ['', Validators.required],\n      'status': ['', Validators.required],\n      'fromAccountType': [{ value: '', disabled: true }],\n      'fromAccount': [{ value: '', disabled: true }],\n      'destination': [{ value: '', disabled: true }],\n      'toOffice': [{ value: '', disabled: true }],\n      'toClientId': [{ value: '', disabled: true }],\n      'toAccountType': [{ value: '', disabled: true }],\n      'toAccount': [{ value: '', disabled: true }],\n      'instructionType': '',\n      'amount': '',\n      'validFrom': ['', Validators.required],\n      'validTill': ['', Validators.required],\n      'recurrenceType': ['', Validators.required],\n      'recurrenceInterval': '',\n      'recurrenceFrequency': '',\n      'recurrenceOnMonthDay': ''\n    });\n  }\n\n  setOptions() {\n    this.priorityTypeData = this.standingInstructionsData.priorityOptions;\n    this.statusTypeData = this.standingInstructionsData.statusOptions;\n    this.instructionTypeData = this.standingInstructionsData.instructionTypeOptions;\n    this.recurrenceTypeData = this.standingInstructionsData.recurrenceTypeOptions;\n    this.recurrenceFrequencyTypeData = this.standingInstructionsData.recurrenceFrequencyOptions;\n  }\n\n  /**\n   * Submits the standing instructions form\n   */\n  submit() {\n    const dateFormat = this.settingsService.dateFormat;\n    const locale = this.settingsService.language.code;\n    const standingInstructionData = {\n      amount: this.editStandingInstructionsForm.value.amount,\n      dateFormat,\n      instructionType: this.editStandingInstructionsForm.value.instructionType,\n      locale,\n      monthDayFormat:\t'dd MMMM',\n      priority: this.editStandingInstructionsForm.value.priority,\n      recurrenceFrequency:\tthis.editStandingInstructionsForm.value.recurrenceFrequency,\n      recurrenceInterval:\tthis.editStandingInstructionsForm.value.recurrenceInterval,\n      recurrenceOnMonthDay: this.dateUtils.formatDate(this.editStandingInstructionsForm.value.recurrenceOnMonthDay, 'dd MMMM'),\n      recurrenceType:\tthis.editStandingInstructionsForm.value.recurrenceType,\n      status:\tthis.editStandingInstructionsForm.value.status,\n      validFrom: this.dateUtils.formatDate(this.editStandingInstructionsForm.value.validFrom, dateFormat),\n      validTill: this.dateUtils.formatDate(this.editStandingInstructionsForm.value.validTill, dateFormat)\n    };\n    this.accountTransfersService.updateStandingInstructionsData(this.standingInstructionsId, standingInstructionData).subscribe((response: any) => {\n      this.router.navigate(['../view'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"createStandingInstructionsForm\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Name</mat-label>\n            <input matInput required formControlName=\"name\">\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.name.hasError('required')\">\n              Name is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Applicant</mat-label>\n            <input matInput formControlName=\"applicant\">\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Type</mat-label>\n            <mat-select required formControlName=\"transferType\" (selectionChange)=\"changeEvent()\">\n              <mat-option *ngFor=\"let transferType of transferTypeData\" [value]=\"transferType.id\">\n                {{ transferType.value }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.transferType.hasError('required')\">\n              Transfer Type is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Priority</mat-label>\n            <mat-select required formControlName=\"priority\">\n              <mat-option *ngFor=\"let priorityType of priorityTypeData\" [value]=\"priorityType.id\">\n                {{ priorityType.value }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.priority.hasError('required')\">\n              Priority is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Status</mat-label>\n            <mat-select required formControlName=\"status\">\n              <mat-option *ngFor=\"let statusType of statusTypeData\" [value]=\"statusType.id\">\n                {{ statusType.value }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.status.hasError('required')\">\n              Status is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>From Account Type</mat-label>\n            <mat-select required formControlName=\"fromAccountType\" (selectionChange)=\"changeEvent()\">\n              <mat-option *ngFor=\"let fromAccountType of fromAccountTypeData\" [value]=\"fromAccountType.id\">\n                {{ fromAccountType.value }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.fromAccountType.hasError('required')\">\n              From Account Type is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>From Account</mat-label>\n            <mat-select required formControlName=\"fromAccountId\" (selectionChange)=\"changeEvent()\">\n              <mat-option *ngFor=\"let fromAccount of fromAccountData\" [value]=\"fromAccount.id\">\n                {{ fromAccount.productName }} - {{ fromAccount.accountNo }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.fromAccountId.hasError('required')\">\n              From Account is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Destination</mat-label>\n            <mat-select required formControlName=\"destination\">\n              <mat-option *ngFor=\"let destinationType of destinationTypeData\" [value]=\"destinationType.id\">\n                {{ destinationType.value }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.destination.hasError('required')\">\n              Destination is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>To Office</mat-label>\n            <mat-select required formControlName=\"toOfficeId\" (selectionChange)=\"changeEvent()\">\n              <mat-option *ngFor=\"let toOfficeType of toOfficeTypeData\" [value]=\"toOfficeType.id\">\n                {{ toOfficeType.name }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.toOfficeId.hasError('required')\">\n              To Office is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Beneficiary</mat-label>\n            <mat-select required formControlName=\"toClientId\" (selectionChange)=\"changeEvent()\">\n              <mat-option *ngFor=\"let toClientType of toClientTypeData\" [value]=\"toClientType.id\">\n                {{ toClientType.displayName }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.toClientId.hasError('required')\">\n              Beneficiary is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>To Account Type</mat-label>\n            <mat-select required formControlName=\"toAccountType\" (selectionChange)=\"changeEvent()\">\n              <mat-option *ngFor=\"let toAccountType of toAccountTypeData\" [value]=\"toAccountType.id\">\n                {{ toAccountType.value }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.toAccountType.hasError('required')\">\n              To Account Type is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>To Account</mat-label>\n            <mat-select required formControlName=\"toAccountId\" (selectionChange)=\"changeEvent()\">\n              <mat-option *ngFor=\"let toAccount of toAccountData\" [value]=\"toAccount.id\">\n                {{ toAccount.productName }} - {{ toAccount.accountNo }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.toAccountId.hasError('required')\">\n              To Account is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Standing Instruction Type</mat-label>\n            <mat-select formControlName=\"instructionType\">\n              <mat-option *ngFor=\"let instructionsType of instructionTypeData\" [value]=\"instructionsType.id\">\n                {{ instructionsType.value }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.instructionType.hasError('required')\">\n              Standing Instruction Type is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Amount</mat-label>\n            <input type=\"number\" matInput required formControlName=\"amount\">\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.amount.hasError('required')\">\n              Amount is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\" (click)=\"validFromDatePicker.open()\">\n            <mat-label>Validity From</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"validFromDatePicker\" required\n              formControlName=\"validFrom\">\n            <mat-datepicker-toggle matSuffix [for]=\"validFromDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #validFromDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.validFrom.hasError('required')\">\n              Valid From Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\"  (click)=\"validTillDatePicker.open()\">\n            <mat-label>Validity To</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"validTillDatePicker\" required\n              formControlName=\"validTill\">\n            <mat-datepicker-toggle matSuffix [for]=\"validTillDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #validTillDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.validTill.hasError('required')\">\n              Valid Till Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Recurrence Type</mat-label>\n            <mat-select required formControlName=\"recurrenceType\">\n              <mat-option *ngFor=\"let recurrenceType of recurrenceTypeData\" [value]=\"recurrenceType.id\">\n                {{ recurrenceType.value }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.recurrenceType.hasError('required')\">\n              Recurrence Type is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Interval</mat-label>\n            <input type=\"number\" matInput required formControlName=\"recurrenceInterval\">\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.recurrenceInterval.hasError('required')\">\n              Recurrence Interval is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\">\n            <mat-label>Recurrence Frequency</mat-label>\n            <mat-select required formControlName=\"recurrenceFrequency\">\n              <mat-option *ngFor=\"let recurrenceFrequencyType of recurrenceFrequencyTypeData\"\n                [value]=\"recurrenceFrequencyType.id\">\n                {{ recurrenceFrequencyType.value }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.recurrenceFrequency.hasError('required')\">\n              Recurrence Frequency is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"48%\"  (click)=\"recurrenceOnMonthDayDatePicker.open()\">\n            <mat-label>On Month Day</mat-label>\n            <input required matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"recurrenceOnMonthDayDatePicker\"\n              formControlName=\"recurrenceOnMonthDay\">\n            <mat-datepicker-toggle matSuffix [for]=\"recurrenceOnMonthDayDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #recurrenceOnMonthDayDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.recurrenceOnMonthDay.hasError('required')\">\n              On Month Day is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" [disabled]=\"!createStandingInstructionsForm.valid\" *mifosxHasPermission=\"'CREATE_STANDINGINSTRUCTION'\"\n          (click)=\"submit()\">Submit</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\n\n/** Custom Services */\nimport { AccountTransfersService } from '../account-transfers.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Create Standing Instructions\n */\n@Component({\n  selector: 'mifosx-create-standing-instructions',\n  templateUrl: './create-standing-instructions.component.html',\n  styleUrls: ['./create-standing-instructions.component.scss']\n})\nexport class CreateStandingInstructionsComponent implements OnInit {\n\n  /** Standing Instructions Data */\n  standingIntructionsTemplate: any;\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date(2100, 0, 1);\n  /** Allow Client Edit */\n  allowclientedit = true;\n  /** Edit Standing Instructions form. */\n  createStandingInstructionsForm: FormGroup;\n  /** Priority Type Data */\n  priorityTypeData: any;\n  /** Status Type Data */\n  statusTypeData: any;\n  /** Instruction Type Data  */\n  instructionTypeData: any;\n  /** Recurrence Type Data */\n  recurrenceTypeData: any;\n  /** Recurrence Frequency Type Data */\n  recurrenceFrequencyTypeData: any;\n  /** Transfer Type Data */\n  transferTypeData: any;\n  /** From Account Type Data */\n  fromAccountTypeData: any;\n  /** From Account Data */\n  fromAccountData: any;\n  /** Destination Type Data */\n  destinationTypeData: { id: number; value: string; }[];\n  /** To Office Type Data */\n  toOfficeTypeData: any;\n  /** To Client Type Data */\n  toClientTypeData: any;\n  /** To Account Type Data */\n  toAccountTypeData: any;\n  /** To Account Data */\n  toAccountData: any;\n  /** Account Type Id */\n  accountTypeId: any;\n  /** Office Id */\n  officeId: any;\n  /** Account Type */\n  accountType: any;\n  /** Client Id */\n  clientId: any;\n\n  /**\n   * Retrieves the standing instructions template from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {Router} router Router\n   * @param {AccountTransfersService} accountTransfersService Account Transfers Service\n   * @param {SettingsService} settingsService Settings Service\n   * @param {Dates} dateUtils Date Utils\n   */\n  constructor(private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private accountTransfersService: AccountTransfersService,\n    private settingsService: SettingsService,\n    private dateUtils: Dates) {\n    this.route.data.subscribe((data: { standingIntructionsTemplate: any }) => {\n      this.standingIntructionsTemplate = data.standingIntructionsTemplate;\n      this.setParams();\n      this.setOptions();\n    });\n  }\n\n  /** Sets the value from the URL */\n  setParams() {\n    this.officeId = this.route.snapshot.queryParams['officeId'];\n    this.accountType = this.route.snapshot.queryParams['accountType'];\n    this.clientId = this.route.parent.snapshot.params['clientId'];\n    switch (this.accountType) {\n      case 'fromloans':\n        this.accountTypeId = '1';\n        break;\n      case 'fromsavings':\n        this.accountTypeId = '2';\n        break;\n      default:\n        this.accountTypeId = '0';\n    }\n  }\n\n  /**\n   * Creates and sets the create standing instructions form.\n   */\n  ngOnInit() {\n    this.createCreateStandingInstructionsForm();\n    this.buildDependencies();\n    this.createStandingInstructionsForm.patchValue({\n      'applicant': this.standingIntructionsTemplate.fromClient.displayName\n    });\n  }\n\n  /**\n   * Creates the standing instruction form.\n   */\n  createCreateStandingInstructionsForm() {\n    this.createStandingInstructionsForm = this.formBuilder.group({\n      'name': ['', Validators.required],\n      'applicant': [{value: '', disabled: true}],\n      'transferType': ['', Validators.required],\n      'priority': ['', Validators.required],\n      'status': ['', Validators.required],\n      'fromAccountType': ['', Validators.required],\n      'fromAccountId': ['', Validators.required],\n      'destination': ['', Validators.required],\n      'toOfficeId': ['', Validators.required],\n      'toClientId': ['', Validators.required],\n      'toAccountType': ['', Validators.required],\n      'toAccountId': ['', Validators.required],\n      'instructionType': ['', Validators.required],\n      'amount': ['', Validators.required],\n      'validFrom': ['', Validators.required],\n      'validTill': ['', Validators.required],\n      'recurrenceType': ['', Validators.required],\n      'recurrenceInterval': ['', Validators.required],\n      'recurrenceFrequency': ['', Validators.required],\n      'recurrenceOnMonthDay': ['', Validators.required]\n    });\n  }\n\n  /** Sets options value */\n  setOptions() {\n    this.transferTypeData = this.standingIntructionsTemplate.transferTypeOptions;\n    this.priorityTypeData = this.standingIntructionsTemplate.priorityOptions;\n    this.statusTypeData = this.standingIntructionsTemplate.statusOptions;\n    this.fromAccountTypeData = this.standingIntructionsTemplate.fromAccountTypeOptions;\n    this.fromAccountData = this.standingIntructionsTemplate.fromAccountOptions;\n    this.destinationTypeData = [{ id: 1, value: 'own account' }, { id: 2, value: 'with in bank' }];\n    this.toOfficeTypeData = this.standingIntructionsTemplate.toOfficeOptions;\n    this.toClientTypeData = this.standingIntructionsTemplate.toClientOptions;\n    this.toAccountTypeData = this.standingIntructionsTemplate.toAccountTypeOptions;\n    this.toAccountData = this.standingIntructionsTemplate.toAccountOptions;\n    this.instructionTypeData = this.standingIntructionsTemplate.instructionTypeOptions;\n    this.recurrenceTypeData = this.standingIntructionsTemplate.recurrenceTypeOptions;\n    this.recurrenceFrequencyTypeData = this.standingIntructionsTemplate.recurrenceFrequencyOptions;\n  }\n\n  /**\n   * Changes the value on change of destination value\n   */\n  buildDependencies() {\n    this.createStandingInstructionsForm.get('destination').valueChanges.subscribe((destination: any) => {\n      if (destination === 1) {\n        this.allowclientedit = false;\n        this.createStandingInstructionsForm.patchValue({\n          'toOfficeId': this.officeId,\n          'toClientId': this.clientId\n        });\n        this.createStandingInstructionsForm.controls['toOfficeId'].disable();\n        this.createStandingInstructionsForm.controls['toClientId'].disable();\n        this.changeEvent();\n      } else {\n        this.allowclientedit = true;\n        this.createStandingInstructionsForm.patchValue({\n          'toOfficeId': '',\n          'toClientId': ''\n        });\n        this.createStandingInstructionsForm.controls['toOfficeId'].enable();\n        this.createStandingInstructionsForm.controls['toClientId'].enable();\n      }\n    });\n\n  }\n\n  /** Executes on change of various select options */\n  changeEvent() {\n    const formValue = this.refineObject(this.createStandingInstructionsForm.value);\n    this.accountTransfersService.getStandingInstructionsTemplate(this.clientId, this.officeId, this.accountTypeId, formValue).subscribe((response: any) => {\n      this.standingIntructionsTemplate = response;\n      this.setOptions();\n    });\n  }\n\n  /** Refine Object\n   * Removes the object param with null or '' values\n   */\n  refineObject(dataObj: Object) {\n    const propNames = Object.getOwnPropertyNames(dataObj);\n    for (let i = 0; i < propNames.length; i++) {\n      const propName = propNames[i];\n      if (dataObj[propName] === null || dataObj[propName] === undefined || dataObj[propName] === '') {\n        delete dataObj[propName];\n      }\n    }\n    return dataObj;\n  }\n\n  /**\n   * Submits the standing instructions form\n   */\n  submit() {\n    const dateFormat = this.settingsService.dateFormat;\n    const locale = this.settingsService.language.code;\n    const standingInstructionData = {\n      ... this.createStandingInstructionsForm.value,\n      dateFormat,\n      locale,\n      monthDayFormat: 'dd MMMM',\n      fromClientId: this.clientId,\n      fromOfficeId: this.officeId,\n      validFrom: this.dateUtils.formatDate(this.createStandingInstructionsForm.value.validFrom, dateFormat),\n      validTill: this.dateUtils.formatDate(this.createStandingInstructionsForm.value.validTill, dateFormat),\n      recurrenceOnMonthDay: this.dateUtils.formatDate(this.createStandingInstructionsForm.value.recurrenceOnMonthDay, 'dd MMMM'),\n    };\n    delete standingInstructionData['destination'];\n    delete standingInstructionData['applicant'];\n    this.accountTransfersService.createStandingInstructions(standingInstructionData).subscribe((response: any) => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <mat-card-content>\n\n      <div fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\n\n        <h3 class=\"mat-h3\" fxFlexFill>Transferring From Details</h3>\n\n        <mat-divider [inset]=\"true\"></mat-divider>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Applicant</span>\n          <span fxFlex=\"60%\">{{ accountTransferTemplateData.fromClient.displayName }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Office</span>\n          <span fxFlex=\"60%\">{{ accountTransferTemplateData.fromOffice.name }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">From Account</span>\n          <span fxFlex=\"60%\">{{ accountTransferTemplateData.fromAccount.productName}}&nbsp;-&nbsp;#{{\n            accountTransferTemplateData.fromAccount.accountNo }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">From Account Type</span>\n          <span fxFlex=\"60%\">{{ accountTransferTemplateData.fromAccountType.value }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Currency</span>\n          <span fxFlex=\"60%\">{{ accountTransferTemplateData.currency.name }}</span>\n        </div>\n\n      </div>\n\n      <h3 class=\"mat-h3\" fxFlexFill>Transferring To</h3>\n\n      <mat-divider [inset]=\"true\"></mat-divider>\n\n      <form [formGroup]=\"makeAccountTransferForm\">\n\n        <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n          <mat-form-field fxFlex=\"98%\" (click)=\"transferDatePicker.open()\">\n            <mat-label>Transaction Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"transferDatePicker\" required\n              formControlName=\"transferDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"transferDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #transferDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"makeAccountTransferForm.controls.transferDate.hasError('required')\">\n              Transactions Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"98%\">\n            <mat-label>Office</mat-label>\n            <mat-select required formControlName=\"toOfficeId\" (selectionChange)=\"changeEvent()\">\n              <mat-option *ngFor=\"let toOfficeType of toOfficeTypeData\" [value]=\"toOfficeType.id\">\n                {{ toOfficeType.name }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"makeAccountTransferForm.controls.toOfficeId.hasError('required')\">\n              Office is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"98%\">\n            <mat-label>Client</mat-label>\n            <input matInput formControlName=\"toClientId\" [matAutocomplete]=\"clientsAutocomplete\">\n            <mat-error *ngIf=\"makeAccountTransferForm.controls.toClientId.hasError('required')\">\n              Client is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-autocomplete autoActiveFirstOption #clientsAutocomplete=\"matAutocomplete\" [displayWith]=\"displayClient\">\n            <mat-option *ngFor=\"let client of clientsData\" [value]=\"client\">\n              {{ client.id }} - {{ client.displayName }}\n            </mat-option>\n          </mat-autocomplete>\n\n          <mat-form-field fxFlex=\"98%\">\n            <mat-label>Account Type</mat-label>\n            <mat-select required formControlName=\"toAccountType\" (selectionChange)=\"changeEvent()\">\n              <mat-option *ngFor=\"let toAccountType of toAccountTypeData\" [value]=\"toAccountType.id\">\n                {{ toAccountType.value }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"makeAccountTransferForm.controls.toAccountType.hasError('required')\">\n              Account Type is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"98%\">\n            <mat-label>Account</mat-label>\n            <mat-select required formControlName=\"toAccountId\" (selectionChange)=\"changeEvent()\">\n              <mat-option *ngFor=\"let toAccount of toAccountData\" [value]=\"toAccount.id\">\n                {{ toAccount.productName }} - {{ toAccount.accountNo }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"makeAccountTransferForm.controls.toAccountId.hasError('required')\">\n              Account is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"98%\">\n            <mat-label>Amount</mat-label>\n            <input type=\"number\" matInput required formControlName=\"transferAmount\">\n            <mat-error *ngIf=\"makeAccountTransferForm.controls.transferAmount.hasError('required')\">\n              Amount is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field fxFlex=\"98%\">\n            <mat-label>Description</mat-label>\n            <textarea matInput formControlName=\"transferDescription\" cdkTextareaAutosize\n              cdkAutosizeMinRows=\"2\"></textarea>\n            <mat-error *ngIf=\"makeAccountTransferForm.controls.transferDescription.hasError('required')\">\n              Transfer Description is <strong>required</strong>\n            </mat-error>\n\n          </mat-form-field>\n\n        </div>\n\n      </form>\n\n    </mat-card-content>\n\n    <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n      <button type=\"button\" mat-raised-button [routerLink]=\"['../..']\">Cancel</button>\n      <button mat-raised-button color=\"primary\" [disabled]=\"!makeAccountTransferForm.valid\"\n        *mifosxHasPermission=\"'CREATE_ACCOUNTTRANSFER'\" (click)=\"submit()\">Submit</button>\n    </mat-card-actions>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n/** Custom Services */\nimport { AccountTransfersService } from '../account-transfers.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { ClientsService } from 'app/clients/clients.service';\nimport { Dates } from 'app/core/utils/dates';\n\n\n/**\n * Create account transfers\n */\n@Component({\n  selector: 'mifosx-make-account-transfers',\n  templateUrl: './make-account-transfers.component.html',\n  styleUrls: ['./make-account-transfers.component.scss']\n})\nexport class MakeAccountTransfersComponent implements OnInit, AfterViewInit {\n\n  /** Standing Instructions Data */\n  accountTransferTemplateData: any;\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date(2100, 0, 1);\n  /** Edit Standing Instructions form. */\n  makeAccountTransferForm: FormGroup;\n  /** To Office Type Data */\n  toOfficeTypeData: any;\n  /** To Client Type Data */\n  toClientTypeData: any;\n  /** To Account Type Data */\n  toAccountTypeData: any;\n  /** To Account Data */\n  toAccountData: any;\n  /** Account Type Id */\n  accountTypeId: any;\n  /** Account Type */\n  accountType: any;\n  /** Savings Id or Loans Id */\n  id: any;\n  /** Clients Data */\n  clientsData: any;\n\n  /**\n   * Retrieves the standing instructions template from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {Router} router Router\n   * @param {AccountTransfersService} accountTransfersService Account Transfers Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {SettingsService} settingsService Settings Service\n   * @param {ClientsService} clientsService Clients Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private accountTransfersService: AccountTransfersService,\n    private dateUtils: Dates,\n    private settingsService: SettingsService,\n    private clientsService: ClientsService) {\n    this.route.data.subscribe((data: { accountTransferTemplate: any }) => {\n      this.accountTransferTemplateData = data.accountTransferTemplate;\n      this.setParams();\n      this.setOptions();\n    });\n  }\n  /** Sets the value from the URL */\n  setParams() {\n    this.accountType = this.route.snapshot.queryParams['accountType'];\n    switch (this.accountType) {\n      case 'fromloans':\n        this.accountTypeId = '1';\n        this.id = this.route.snapshot.queryParams['loanId'];\n        break;\n      case 'fromsavings':\n        this.accountTypeId = '2';\n        this.id = this.route.snapshot.queryParams['savingsId'];\n        break;\n      default:\n        this.accountTypeId = '0';\n    }\n  }\n\n  /**\n   * Creates and sets the create standing instructions form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createMakeAccountTransferForm();\n  }\n\n  /**\n   * Creates the standing instruction form.\n   */\n  createMakeAccountTransferForm() {\n    this.makeAccountTransferForm = this.formBuilder.group({\n      'toOfficeId': ['', Validators.required],\n      'toClientId': ['', Validators.required],\n      'toAccountType': ['', Validators.required],\n      'toAccountId': ['', Validators.required],\n      'transferAmount': [this.accountTransferTemplateData.transferAmount, Validators.required],\n      'transferDate': [this.settingsService.businessDate, Validators.required],\n      'transferDescription': ['', Validators.required],\n    });\n  }\n\n  /** Sets options value */\n  setOptions() {\n    this.toOfficeTypeData = this.accountTransferTemplateData.toOfficeOptions;\n    this.toAccountTypeData = this.accountTransferTemplateData.toAccountTypeOptions;\n    this.toAccountData = this.accountTransferTemplateData.toAccountOptions;\n  }\n\n  /** Executes on change of various select options */\n  changeEvent() {\n    const formValue = this.refineObject(this.makeAccountTransferForm.value);\n    this.accountTransfersService.newAccountTranferResource(this.id, this.accountTypeId, formValue).subscribe((response: any) => {\n      this.accountTransferTemplateData = response;\n      this.toClientTypeData = response.toClientOptions;\n      this.setOptions();\n    });\n  }\n\n  /** Refine Object\n   * Removes the object param with null or '' values\n   */\n  refineObject(dataObj: { [x: string]: any; transferAmount: any; transferDate: any; transferDescription: any; }) {\n    delete dataObj.transferAmount;\n    delete dataObj.transferDate;\n    delete dataObj.transferDescription;\n    if (dataObj.toClientId) {\n      dataObj.toClientId = dataObj.toClientId.id;\n    }\n    const propNames = Object.getOwnPropertyNames(dataObj);\n    for (let i = 0; i < propNames.length; i++) {\n      const propName = propNames[i];\n      if (dataObj[propName] === null || dataObj[propName] === undefined || dataObj[propName] === '') {\n        delete dataObj[propName];\n      }\n    }\n    return dataObj;\n  }\n\n  /**\n   * Subscribes to Clients search filter:\n   */\n  ngAfterViewInit() {\n    this.makeAccountTransferForm.controls.toClientId.valueChanges.subscribe((value: string) => {\n      if (value.length >= 2) {\n        this.clientsService.getFilteredClients('displayName', 'ASC', true, value)\n          .subscribe((data: any) => {\n            this.clientsData = data.pageItems;\n          });\n        this.changeEvent();\n      }\n    });\n  }\n\n  /**\n   * Displays Client name in form control input.\n   * @param {any} client Client data.\n   * @returns {string} Client name if valid otherwise undefined.\n   */\n  displayClient(client: any): string | undefined {\n    return client ? client.displayName : undefined;\n  }\n\n  /**\n   * Submits the standing instructions form\n   */\n  submit() {\n    const dateFormat = this.settingsService.dateFormat;\n    const locale = this.settingsService.language.code;\n    const makeAccountTransferData = {\n      ... this.makeAccountTransferForm.value,\n      transferDate: this.dateUtils.formatDate(this.makeAccountTransferForm.value.transferDate, dateFormat),\n      dateFormat,\n      locale,\n      toClientId: this.makeAccountTransferForm.controls.toClientId.value.id,\n      fromAccountId: this.id,\n      fromAccountType: this.accountTypeId,\n      fromClientId: this.accountTransferTemplateData.fromClient.id,\n      fromOfficeId: this.accountTransferTemplateData.fromClient.officeId\n    };\n    this.accountTransfersService.createAccountTransfer(makeAccountTransferData).subscribe(() => {\n      this.router.navigate(['../../transactions'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<mat-card class=\"container\">\n\n  <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n    <div fxFlexFill *ngIf=\"isFromClient\">\n      <span fxFlex=\"40%\">\n        <h3 class=\"mat-h3\">Client Name</h3>\n      </span>\n      <span fxFlex=\"60%\">\n        <h3 class=\"mat-h3\">{{ clientName }}</h3>\n      </span>\n    </div>\n\n    <div fxFlexFill *ngIf=\"!isFromClient\">\n      <mat-form-field fxFlex=\"30%\">\n        <input matInput placeholder=\"ClientName\" [formControl]=\"clientNameControl\">\n      </mat-form-field>\n      <mat-form-field fxFlex=\"30%\">\n        <input matInput placeholder=\"From Client Id\" [formControl]=\"fromClientId\">\n      </mat-form-field>\n    </div>\n\n    <mat-divider [inset]=\"true\"></mat-divider>\n\n    <mat-form-field fxFlex=\"30%\">\n      <mat-label>Type</mat-label>\n      <mat-select [formControl]=\"transferType\">\n        <mat-option *ngFor=\"let transferTypeData of transferTypeDatas\" [value]=\"transferTypeData.id\">\n          {{ transferTypeData.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"30%\">\n      <input matInput placeholder=\"From Account Id\" [formControl]=\"fromAccountId\">\n    </mat-form-field>\n\n    <button mat-raised-button color=\"primary\" *mifosxHasPermission=\"'READ_STANDINGINSTRUCTION'\" (click)=\"filterStandingInstructions()\" class=\"filter-button\">\n      &nbsp;&nbsp;Filter\n    </button>\n  </div>\n\n\n  <table mat-table #instructionsTable [dataSource]=\"dataSource\">\n\n    <ng-container matColumnDef=\"client\">\n      <th mat-header-cell *matHeaderCellDef> Client </th>\n      <td mat-cell *matCellDef=\"let instruction\">{{instruction.fromClient.displayName}}-{{instruction.fromClient.id}}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"fromAccount\">\n      <th mat-header-cell *matHeaderCellDef> From Account </th>\n      <td mat-cell *matCellDef=\"let instruction\">{{instruction.fromAccount.accountNo}}\n        ({{instruction.fromAccountType.value}})</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"beneficiary\">\n      <th mat-header-cell *matHeaderCellDef> Beneficiary </th>\n      <td mat-cell *matCellDef=\"let instruction\">{{instruction.toClient.displayName}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"toAccount\">\n      <th mat-header-cell *matHeaderCellDef> To Account </th>\n      <td mat-cell *matCellDef=\"let instruction\">{{instruction.toAccount.accountNo}}\n        ({{instruction.toAccountType.value}})</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"amount\">\n      <th mat-header-cell *matHeaderCellDef> Amount </th>\n      <td mat-cell *matCellDef=\"let instruction\">{{instruction.instructionType.value}}/{{instruction.amount}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"validity\">\n      <th mat-header-cell *matHeaderCellDef> Validity </th>\n      <td mat-cell *matCellDef=\"let instruction\">{{instruction.validFrom  | dateFormat}} to {{instruction.validTill  | dateFormat}}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"actions\">\n      <th mat-header-cell *matHeaderCellDef> Actions </th>\n      <td mat-cell *matCellDef=\"let instruction\">\n        <span *ngIf=\"instruction.status.value!=='Deleted'\">\n          <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"Edit Standing Instruction\"\n            *mifosxHasPermission=\"'UPDATE_STANDINGINSTRUCTION'\"\n            [routerLink]=\"['../', instruction.id, 'edit']\">\n            <i class=\"fa fa-edit\"></i>\n          </button>\n        </span>\n        <span *ngIf=\"instruction.status.value!=='Deleted'\">\n          <button class=\"account-action-button\" mat-raised-button color=\"warn\" matTooltip=\"Delete Standing Instruction\"\n            *mifosxHasPermission=\"'DELETE_STANDINGINSTRUCTION'\" (click)=\"deleteStandingInstruction(instruction.id)\">\n            <i class=\"fa fa-times\"></i>\n          </button>\n        </span>\n        <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"View Standing Instruction\"\n          *mifosxHasPermission=\"'READ_STANDINGINSTRUCTION'\"\n          [routerLink]=\"['../', instruction.id, 'view']\">\n          <i class=\"fa fa-eye\"></i>\n        </button>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n  </table>\n\n  <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[10, 25, 50, 100]\" showFirstLastButtons></mat-paginator>\n\n</mat-card>\n","/** Angular Imports */\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource, MatTable } from '@angular/material/table';\nimport { ActivatedRoute } from '@angular/router';\nimport { FormControl } from '@angular/forms';\n\n/** Custom Services */\nimport { AccountTransfersService } from '../account-transfers.service';\n\n/** Dialog Components */\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Lists all the standing intructions of particular ID\n */\n@Component({\n  selector: 'mifosx-list-standing-instructions',\n  templateUrl: './list-standing-instructions.component.html',\n  styleUrls: ['./list-standing-instructions.component.scss']\n})\nexport class ListStandingInstructionsComponent implements OnInit {\n\n  /** Recurring Deposits Data */\n  standingIntructionsTemplateData: any;\n  /** Instructions Data */\n  instructionsData: any[];\n  /** Name form control. */\n  transferType = new FormControl();\n  /** ExternalId form control. */\n  fromAccountId = new FormControl();\n  /** Name form control. */\n  clientNameControl = new FormControl();\n  /** ExternalId form control. */\n  fromClientId = new FormControl();\n  /** Client Name */\n  clientName: any;\n  /** Transfer Type Options Data */\n  transferTypeDatas: any;\n  /** Account Type */\n  accountType: any;\n  /** Account Type ID */\n  accountTypeId: string;\n  /** Id */\n  id: any;\n  /** Is from Client? */\n  isFromClient: Boolean;\n  /** Data source for instructions table. */\n  dataSource = new MatTableDataSource();\n  /** Columns to be displayed in instructions table. */\n  displayedColumns: string[] = ['client', 'fromAccount', 'beneficiary', 'toAccount', 'amount', 'validity', 'actions'];\n\n  /** Instruction Table Reference */\n  @ViewChild('instructionsTable', { static: true }) instructionTableRef: MatTable<Element>;\n  /** Paginator for centers table. */\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n\n\n  /**\n   * Retrieves Standing Instructions Data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {MatDialog} route Mat Dialog\n   * @param {SettingsService} settingsService Settings Service\n   * @param {AccountTransfersService} accountTransfersService Account Transfers Service\n   */\n  constructor(private route: ActivatedRoute,\n    private accountTransfersService: AccountTransfersService,\n    private settingsService: SettingsService,\n    private dialog: MatDialog) {\n    this.route.data.subscribe((data: { standingIntructionsTemplate: any }) => {\n      this.standingIntructionsTemplateData = data.standingIntructionsTemplate;\n      if (data.standingIntructionsTemplate.fromClient) {\n        this.clientName = this.standingIntructionsTemplateData.fromClient.displayName;\n        this.getStandingInstructions();\n      }\n      this.setParams();\n      this.transferTypeDatas = this.standingIntructionsTemplateData.transferTypeOptions;\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  setParams() {\n    this.accountType = this.route.snapshot.queryParams['accountType'];\n    switch (this.accountType) {\n      case 'fromloans':\n        this.accountTypeId = '1';\n        break;\n      case 'fromsavings':\n        this.accountTypeId = '2';\n        break;\n      default:\n        this.accountTypeId = '0';\n    }\n    this.isFromClient = this.route.parent.parent.snapshot.params['clientId'] ? true : false;\n  }\n\n  filterStandingInstructions() {\n    this.getStandingInstructions();\n  }\n\n  /**\n   * Retrieves standing instructions and initializes instructions table.\n   */\n  getStandingInstructions() {\n    const dateFormat = this.settingsService.dateFormat;\n    const locale = this.settingsService.language.code;\n    const searchData = {\n      clientId : this.standingIntructionsTemplateData.fromClient.id || this.fromClientId.value,\n      clientName: this.standingIntructionsTemplateData.fromClient.displayName || this.clientNameControl.value,\n      locale,\n      dateFormat,\n      limit: 14,\n      offset: 0,\n      fromAccountType: this.accountTypeId,\n      fromAccountId: this.fromAccountId.value,\n      fromTransferType: this.transferType.value\n    };\n    this.accountTransfersService.getStandingInstructions(searchData).subscribe((response: any) => {\n      this.instructionsData = response.pageItems;\n      this.dataSource.data = this.instructionsData;\n      this.instructionTableRef.renderRows();\n    });\n  }\n\n  /** Deletes selected Standing Instruction */\n  deleteStandingInstruction(instructionId: any) {\n    const deleteStandingInstructionDialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `standing instruction id: ${instructionId}` }\n    });\n    deleteStandingInstructionDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        this.accountTransfersService.deleteStandingInstrucions(instructionId)\n          .subscribe(() => {});\n      }\n    });\n  }\n\n}\n\n","<div class=\"container m-b-20\">\n\n  <mat-card class=\"mat-elevation-z8\">\n\n    <mat-card-content>\n\n      <div fxLayout=\"row wrap\" class=\"content\">\n\n        <div fxFlex=\"25%\" fxFlex.lt-md=\"50%\" class=\"header\">\n          From Account\n        </div>\n\n        <div fxFlex=\"25%\" fxFlex.lt-md=\"50%\">\n          {{ listTransactionData.fromAccount.accountNo }}({{ listTransactionData.fromAccountType.value }})\n        </div>\n\n        <div fxFlex=\"25%\" fxFlex.lt-md=\"50%\" class=\"header\">\n          To Account\n        </div>\n\n        <div fxFlex=\"25%\" fxFlex.lt-md=\"50%\">\n          {{ listTransactionData.toAccount.accountNo }}({{ listTransactionData.toAccountType.value }})\n        </div>\n\n        <div fxFlex=\"25%\" fxFlex.lt-md=\"50%\" class=\"header\">\n          Destination\n        </div>\n\n        <div fxFlex=\"25%\" fxFlex.lt-md=\"50%\">\n          {{ listTransactionData.toClient.displayName }}\n        </div>\n\n      </div>\n\n    </mat-card-content>\n\n  </mat-card>\n\n</div>\n\n<div class=\"mat-elevation-z8 container\">\n\n  <table mat-table [dataSource]=\"dataSource\">\n\n    <ng-container matColumnDef=\"transactionDate\">\n      <th mat-header-cell *matHeaderCellDef> Transaction Date </th>\n      <td mat-cell *matCellDef=\"let transaction\"> {{ transaction.transferDate  | dateFormat }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"amount\">\n      <th mat-header-cell *matHeaderCellDef> Amount </th>\n      <td mat-cell *matCellDef=\"let transaction\"> {{ transaction.transferAmount }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"notes\">\n      <th mat-header-cell *matHeaderCellDef> Notes </th>\n      <td mat-cell *matCellDef=\"let transaction\"> {{ transaction.transferDescription }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"reversed\">\n      <th mat-header-cell *matHeaderCellDef> Reversed </th>\n      <td mat-cell *matCellDef=\"let transaction\"> {{ transaction.reversed ? 'Yes' : 'No' }} </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\">\n    </tr>\n\n  </table>\n\n  <mat-paginator [pageSizeOptions]=\"[5, 10, 25, 50, 100]\" showFirstLastButtons></mat-paginator>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource, MatTable } from '@angular/material/table';\nimport { ActivatedRoute } from '@angular/router';\nimport { FormControl } from '@angular/forms';\n\n/** Custom Services */\nimport { AccountTransfersService } from '../account-transfers.service';\n\n/** Dialog Components */\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\n\n/**\n * Recurring Deposits Standing Instructions Tab\n */\n@Component({\n  selector: 'mifosx-list-transactions',\n  templateUrl: './list-transactions.component.html',\n  styleUrls: ['./list-transactions.component.scss']\n})\nexport class ListTransactionsComponent {\n\n\n  /** List Transactions Data */\n  listTransactionData: any;\n  /** Data source for instructions table. */\n  dataSource = new MatTableDataSource();\n  /** Columns to be displayed in instructions table. */\n  displayedColumns: string[] = ['transactionDate', 'amount', 'notes', 'reversed'];\n\n  /** Paginator for centers table. */\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n\n  /**\n   * Retrieves Recurring Deposits Account Data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute) {\n    this.route.data.subscribe((data: { listTransactionData: any }) => {\n      this.listTransactionData = data.listTransactionData;\n      this.dataSource = new MatTableDataSource(this.listTransactionData.transactions.pageItems);\n      this.dataSource.paginator = this.paginator;\n    });\n  }\n\n}\n","/** Angular Imports */\nimport { Location } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'mifosx-view-account-transfer',\n  templateUrl: './view-account-transfer.component.html',\n  styleUrls: ['./view-account-transfer.component.scss']\n})\nexport class ViewAccountTransferComponent {\n\n  viewAccountTransferData: any;\n  /**\n   * Retrieves the view account transfer data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Location} location Location.\n   */\n  constructor(private route: ActivatedRoute,\n    private location: Location) {\n    this.route.data.subscribe((data: { viewAccountTransferData: any }) => {\n      this.viewAccountTransferData = data.viewAccountTransferData;\n    });\n  }\n\n  transferToClient(toClient: any): string {\n    return `/#/clients/${toClient.id}`;\n  }\n\n  transferToAccount(toClient: any, toAccount: any): string {\n    return `/#/clients/${toClient.id}/savings-accounts/${toAccount.id}`;\n  }\n\n  goBack(): void {\n    this.location.back();\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <mat-card-content>\n\n      <div fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\n\n        <h3 class=\"mat-h3\" fxFlexFill>Transaction Details</h3>\n\n        <mat-divider [inset]=\"true\"></mat-divider>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Transaction Amount:</span>\n          <span fxFlex=\"60%\">{{ viewAccountTransferData.currency.displaySymbol }} {{ viewAccountTransferData.transferAmount | formatNumber }} ({{ viewAccountTransferData.currency.code }})</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Transaction Date:</span>\n          <span fxFlex=\"60%\">{{ viewAccountTransferData.transferDate  | dateFormat }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Description:</span>\n          <span fxFlex=\"60%\">{{ viewAccountTransferData.transferDescription }}</span>\n        </div>\n\n        <h3 class=\"mat-h3\" fxFlexFill>Transferred From</h3>\n\n        <mat-divider [inset]=\"true\"></mat-divider>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Office:</span>\n          <span fxFlex=\"60%\">{{ viewAccountTransferData.fromOffice.name }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Client:</span>\n          <span fxFlex=\"60%\">{{ viewAccountTransferData.fromClient.displayName }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Account Type:</span>\n          <span fxFlex=\"60%\">{{ viewAccountTransferData.fromAccountType.value }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Account No:</span>\n          <span fxFlex=\"60%\">{{ viewAccountTransferData.fromAccount.accountNo }}</span>\n        </div>\n\n        <h3 class=\"mat-h3\" fxFlexFill>Transferred To</h3>\n\n        <mat-divider [inset]=\"true\"></mat-divider>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Office:</span>\n          <span fxFlex=\"60%\">{{ viewAccountTransferData.toOffice.name }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Client:</span>\n          <span fxFlex=\"60%\"><a [href]=\"transferToClient(viewAccountTransferData.toClient)\">\n            {{ viewAccountTransferData.toClient.displayName }}</a>\n          </span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Account Type:</span>\n          <span fxFlex=\"60%\">{{ viewAccountTransferData.toAccountType.value }}</span>\n        </div>\n\n        <div fxFlexFill>\n          <span fxFlex=\"40%\">Account No:</span>\n          <span fxFlex=\"60%\"><a [href]=\"transferToAccount(viewAccountTransferData.toClient, viewAccountTransferData.toAccount)\">\n            {{ viewAccountTransferData.toAccount.accountNo }}</a>\n          </span>\n        </div>\n\n      </div>\n\n    </mat-card-content>\n\n    <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n      <button type=\"button\" color=\"primary\" mat-raised-button (click)=\"goBack()\">Back</button>\n    </mat-card-actions>\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { AccountTransfersService } from '../account-transfers.service';\n\n/**\n * View Standing Instructions resolver.\n */\n@Injectable()\nexport class ViewStandingInstructionsResolver implements Resolve<Object> {\n\n    /**\n     * @param {accountTransfersService} AccountTransfersService Account Transfers service.\n     */\n    constructor(private accountTransfersService: AccountTransfersService) { }\n\n    /**\n     * Returns the Standing Instructions Data.\n     * @param {ActivatedRouteSnapshot} route Route Snapshot\n     * @returns {Observable<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\n        const standingInstructionsId = route.parent.paramMap.get('standingInstructionsId');\n        return this.accountTransfersService.getStandingInstructionsData(standingInstructionsId);\n    }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { AccountTransfersService } from '../account-transfers.service';\n\n/**\n * View Standing Instructions resolver.\n */\n@Injectable()\nexport class StandingInstructionsDataAndTemplateResolver implements Resolve<Object> {\n\n    /**\n     * @param {accountTransfersService} AccountTransfersService Account Transfers service.\n     */\n    constructor(private accountTransfersService: AccountTransfersService) { }\n\n    /**\n     * Returns the Standing Instructions Data.\n     * @param {ActivatedRouteSnapshot} route Route Snapshot\n     * @returns {Observable<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\n        const standingInstructionsId = route.parent.paramMap.get('standingInstructionsId');\n        return this.accountTransfersService.getStandingInstructionsDataAndTemplate(standingInstructionsId);\n    }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { AccountTransfersService } from '../account-transfers.service';\n\n/**\n * View Standing Instructions resolver.\n */\n@Injectable()\nexport class StandingInstructionsTemplateResolver implements Resolve<Object> {\n\n    accountTypeId: string;\n\n    /**\n     * @param {accountTransfersService} AccountTransfersService Account Transfers service.\n     */\n    constructor(private accountTransfersService: AccountTransfersService) { }\n\n    /**\n     * Returns the Standing Instructions Data.\n     * @param {ActivatedRouteSnapshot} route Route Snapshot\n     * @returns {Observable<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\n        const officeId = route.queryParamMap.get('officeId');\n        const accountType = route.queryParamMap.get('accountType');\n        const clientId = route.parent.paramMap.get('clientId');\n        switch (accountType) {\n            case 'fromloans':\n                this.accountTypeId = '1';\n                break;\n            case 'fromsavings':\n                this.accountTypeId = '2';\n                break;\n            default:\n                this.accountTypeId = '0';\n        }\n        return this.accountTransfersService.getStandingInstructionsTemplate(clientId, officeId, this.accountTypeId);\n    }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { AccountTransfersService } from '../account-transfers.service';\n\n/**\n * View Standing Instructions resolver.\n */\n@Injectable()\nexport class MakeAccountTransferTemplateResolver implements Resolve<Object> {\n\n    accountTypeId: string;\n    id: any;\n    /**\n     * @param {accountTransfersService} AccountTransfersService Account Transfers service.\n     */\n    constructor(private accountTransfersService: AccountTransfersService) { }\n\n    /**\n     * Returns the Standing Instructions Data.\n     * @param {ActivatedRouteSnapshot} route Route Snapshot\n     * @returns {Observable<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\n        const accountType = route.queryParamMap.get('accountType');\n        switch (accountType) {\n            case 'fromloans':\n                this.accountTypeId = '1';\n                this.id = route.queryParamMap.get('loanId');\n                break;\n            case 'fromsavings':\n                this.accountTypeId = '2';\n                this.id = route.queryParamMap.get('savingsId');\n                break;\n            default:\n                this.accountTypeId = '0';\n        }\n        return this.accountTransfersService.newAccountTranferResource(this.id, this.accountTypeId);\n    }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { AccountTransfersService } from '../account-transfers.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * View Standing Instructions resolver.\n */\n@Injectable()\nexport class ListTransactionsResolver implements Resolve<Object> {\n\n    /**\n     * @param {AccountTransfersService} accountTransfersService Account Transfers service.\n     * @param {SettingsService} settingsService Settings Service.\n     */\n    constructor(private accountTransfersService: AccountTransfersService,\n        private settingsService: SettingsService) { }\n\n    /**\n     * Returns the Standing Instructions Data.\n     * @param {ActivatedRouteSnapshot} route Route Snapshot\n     * @returns {Observable<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\n        const id = route.parent.paramMap.get('standingInstructionsId');\n        const dateFormat = this.settingsService.dateFormat;\n        const locale = this.settingsService.language.code;\n        return this.accountTransfersService.getStandingInstructionsTransactions(id, dateFormat, locale);\n    }\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { AccountTransfersService } from '../account-transfers.service';\n\n/**\n * View Account Transfer data resolver.\n */\n@Injectable()\nexport class ViewAccountTransferResolver implements Resolve<Object> {\n\n    /**\n     * @param {AccountTransfersService} AccountTransfersService Savings service.\n     */\n    constructor(private accountTransfersService: AccountTransfersService) { }\n\n    /**\n     * Returns the View Account Transfer data.\n     * @returns {Observable<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\n        const transferId = route.paramMap.get('transferid');\n        return this.accountTransfersService.getViewAccountTransferDetails(transferId);\n    }\n\n}\n","/** Angular Imports */\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n/** Translation Imports */\nimport { extract } from '../core/i18n/i18n.service';\n\n/** Custom Components */\nimport { ViewStandingInstructionsComponent } from './view-standing-instructions/view-standing-instructions.component';\nimport { EditStandingInstructionsComponent } from './edit-standing-instructions/edit-standing-instructions.component';\nimport { CreateStandingInstructionsComponent } from './create-standing-instructions/create-standing-instructions.component';\nimport { MakeAccountTransfersComponent } from './make-account-transfers/make-account-transfers.component';\nimport { ListStandingInstructionsComponent } from './list-standing-instructions/list-standing-instructions.component';\nimport { ListTransactionsComponent } from './list-transactions/list-transactions.component';\nimport { ViewAccountTransferComponent } from './view-account-transfer/view-account-transfer.component';\n\n/** Custom Resolvers */\nimport { ViewStandingInstructionsResolver } from './common-resolvers/view-standing-instructions.resolver';\nimport { StandingInstructionsDataAndTemplateResolver } from './common-resolvers/standing-instructions-data-and-template.resolver';\nimport { StandingInstructionsTemplateResolver } from './common-resolvers/standing-instructions-template.resolver';\nimport { MakeAccountTransferTemplateResolver } from './common-resolvers/make-account-transfer-template.resolver';\nimport { ListTransactionsResolver } from './common-resolvers/list-transactions.resolver';\nimport { ViewAccountTransferResolver } from './common-resolvers/view-account-transfer.resolver';\n\n/** Loans Route. */\nconst routes: Routes = [\n  {\n    path: '',\n    children: [\n      {\n        path: 'create-standing-instructions',\n        data: { title: extract('Create Standing Instructions'), breadcrumb: 'Create Standing Instructions', routeParamBreadcrumb: 'Create Standing Instructions' },\n        component: CreateStandingInstructionsComponent,\n        resolve: {\n          standingIntructionsTemplate: StandingInstructionsTemplateResolver\n        }\n      },\n      {\n        path: 'make-account-transfer',\n        data: { title: extract('Account Transfer'), breadcrumb: 'Account Transfer', routeParamBreadcrumb: 'Account Transfer' },\n        component: MakeAccountTransfersComponent,\n        resolve: {\n          accountTransferTemplate: MakeAccountTransferTemplateResolver\n        }\n      },\n      {\n        path: 'list-standing-instructions',\n        data: { title: extract('List Standing Instructions'), breadcrumb: 'List Standing Instructions', routeParamBreadcrumb: 'List Standing Instructions' },\n        component: ListStandingInstructionsComponent,\n        resolve: {\n          standingIntructionsTemplate: StandingInstructionsTemplateResolver\n        }\n      },\n      {\n        path: 'account-transfers',\n        data: { title: extract('View Account Transfer'), breadcrumb: 'Account Transfers', routeParamBreadcrumb: false },\n        children: [\n          {\n            path: ':transferid',\n            data: { routeParamBreadcrumb: 'transferid' },\n            component: ViewAccountTransferComponent,\n            resolve: {\n              viewAccountTransferData: ViewAccountTransferResolver\n            }\n          }\n        ]\n      },\n      {\n        path: ':standingInstructionsId',\n        data: { title: extract('Standing Instructions'), routeParamBreadcrumb: 'standingInstructionsId' },\n        children: [\n          {\n            path: 'view',\n            data: { title: extract('View Standing Instructions'), breadcrumb: 'view', routeParamBreadcrumb: false },\n            component: ViewStandingInstructionsComponent,\n            resolve: {\n              standingInstructionsData: ViewStandingInstructionsResolver,\n            },\n          },\n          {\n            path: 'edit',\n            data: { title: extract('Edit Standing Instructions'), breadcrumb: 'edit', routeParamBreadcrumb: false },\n            component: EditStandingInstructionsComponent,\n            resolve: {\n              standingInstructionsDataAndTemplate: StandingInstructionsDataAndTemplateResolver,\n            },\n          },\n          {\n            path: 'list-account-transactions',\n            data: { title: extract('List Account Transactions'), breadcrumb: 'List Account Transactions', routeParamBreadcrumb: 'List Account Transactions' },\n            component: ListTransactionsComponent,\n            resolve: {\n              listTransactionData: ListTransactionsResolver\n            }\n          },\n        ]\n      },\n    ]\n  },\n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  declarations: [],\n  providers: [\n    ViewStandingInstructionsResolver,\n    StandingInstructionsDataAndTemplateResolver,\n    StandingInstructionsTemplateResolver,\n    MakeAccountTransferTemplateResolver,\n    ListTransactionsResolver,\n    ViewAccountTransferResolver\n  ]\n})\n\nexport class AccountTransfersRoutingModule { }\n","/** Angular Imports */\nimport { NgModule } from '@angular/core';\n\n/** Custom Modules */\nimport { AccountTransfersRoutingModule } from './account-transfers-routing.module';\nimport { SharedModule } from 'app/shared/shared.module';\nimport { PipesModule } from '../pipes/pipes.module';\nimport { DirectivesModule } from '../directives/directives.module';\n\n/** Custom Components */\nimport { ViewStandingInstructionsComponent } from './view-standing-instructions/view-standing-instructions.component';\nimport { EditStandingInstructionsComponent } from './edit-standing-instructions/edit-standing-instructions.component';\nimport { CreateStandingInstructionsComponent } from './create-standing-instructions/create-standing-instructions.component';\nimport { MakeAccountTransfersComponent } from './make-account-transfers/make-account-transfers.component';\nimport { ListStandingInstructionsComponent } from './list-standing-instructions/list-standing-instructions.component';\nimport { ListTransactionsComponent } from './list-transactions/list-transactions.component';\nimport { ViewAccountTransferComponent } from './view-account-transfer/view-account-transfer.component';\n/**\n * Account Transfers Module\n *\n * All components related to Account Transfers functions should be declared here.\n */\n@NgModule({\n  imports: [SharedModule, PipesModule, DirectivesModule, AccountTransfersRoutingModule],\n  declarations: [\n    ViewStandingInstructionsComponent,\n    EditStandingInstructionsComponent,\n    CreateStandingInstructionsComponent,\n    MakeAccountTransfersComponent,\n    ListStandingInstructionsComponent,\n    ListTransactionsComponent,\n    ViewAccountTransferComponent\n  ],\n  providers: [ ]\n})\nexport class AccountTransfersModule { }\n"]}