{"version":3,"file":"src_app_deposits_recurring-deposits_recurring-deposits_module_ts.js","mappings":"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","names":["RecurringDepositsButtonsConfiguration","status","this","setOptions","setButtons","buttonsArray","optionArray","name","icon","option","push","e","RecurringDepositConfirmationDialogComponent","dialogRef","data","i","i0","MAT_DIALOG_DATA","selectors","RecurringDepositsService","http","recurringDepositAccountId","httpParams","HttpParams","set","get","params","clientId","clientName","fromAccountId","locale","dateFormat","productId","recurringAccountData","post","accountId","command","delete","recurringDepositAccountData","put","transactionId","factory","ctx_r15","ctx_r20","RecurringDepositsAccountViewComponent","route","router","recurringDepositsService","savingsService","dialog","subscribe","s","recurringDepositsAccountData","charges","savingsDatatables","isprematureAllowed","maturityDate","setConditionalButtons","buttonConfig","value","addOption","forEach","element","r","allowWithdrawal","addButton","taxGroup","withHoldTax","taskPermissionName","url","navigateByUrl","skipLocationChange","then","navigate","relativeTo","deleteRecurringDepositsAccount","calculateInterest","postInterest","enableWithHoldTax","disableWithHoldTax","open","DeleteDialogComponent","deleteContext","id","afterClosed","response","heading","dialogContext","confirm","executeRecurringDepositsAccountCommand","reload","executeSavingsAccountUpdateCommand","chartSlabIndex_r20","InterestRateChartTabComponent","A","parent","interestRateChartData","accountChart","chartSlabs","trigger","state","style","height","minHeight","transition","animate","ctx_r21","TransactionsTabComponent","o","transactionsData","transactions","dataSource","MatTableDataSource","transactionType","withdrawal","feeDeduction","overdraftInterest","withholdTax","transfer","ctx_r30","StandingInstructionsTabComponent","accountTransfersService","settingsService","recurringDepositsData","getStandingInstructions","language","code","instructionsData","pageItems","instructionTableRef","renderRows","instructionId","deleteStandingInstrucions","ctx_r40","ctx_r43","ctx_r49","ctx_r52","ChargesTabComponent","dateUtils","p","chargesData","activeCharges","filter","charge","isActive","chargeId","formfields","InputBase","controlName","label","type","required","DatepickerBase","title","layout","addButtonText","FormDialogComponent","dataObject","Object","dueDate","formatDate","executeSavingsAccountChargesCommand","amount","amountOrPercentage","editSavingsAccountCharge","deleteSavingsAccountCharge","$event","stopPropagation","DatatableTabsComponent","entityId","snapshot","paramMap","entityDatatable","savingsDatatable","multiRowDatatableFlag","columnHeaders","columnName","RecurringDepositsAccountDetailsStepComponent","formBuilder","Date","EventEmitter","createRecurringDepositsAccountDetailsForm","maxDate","businessDate","buildDependencies","recurringDepositsAccountTemplate","productData","productOptions","depositProductId","recurringDepositAccountDetailsForm","patchValue","submittedOnDate","timeline","group","Validators","fieldOfficerId","valueChanges","getRecurringDepositsAccountTemplate","recurringDepositsAccountProductTemplate","emit","fieldOfficerData","fieldOfficerOptions","isFieldOfficerPatched","_r1","RecurringDepositsAccountTermsStepComponent","createRecurringDepositsAccountTermsForm","interestCompoundingPeriodType","recurringDepositAccountTermsForm","interestPostingPeriodType","interestCalculationType","interestCalculationDaysInYearType","interestCompoundingPeriodTypeData","interestCompoundingPeriodTypeOptions","interestPostingPeriodTypeData","interestPostingPeriodTypeOptions","interestCalculationTypeData","interestCalculationTypeOptions","interestCalculationDaysInYearTypeData","interestCalculationDaysInYearTypeOptions","RecurringDepositsAccountCurrencyStepComponent","createRecurringDepositAccountCurrencyForm","recurringDepositAccountCurrencyForm","currencyCode","currency","decimalPlaces","disabled","_r10","RecurringDepositsAccountSettingsStepComponent","createRecurringDepositAccountSettingsForm","recurringDepositAccountSettingsForm","isMandatoryDeposit","adjustAdvanceTowardsFuturePayments","lockinPeriodFrequency","lockinPeriodFrequencyType","minDepositTerm","minDepositTermTypeId","minDepositTermType","inMultiplesOfDepositTerm","inMultiplesOfDepositTermTypeId","inMultiplesOfDepositTermType","maxDepositTerm","maxDepositTermTypeId","maxDepositTermType","preClosurePenalApplicable","preClosurePenalInterest","preClosurePenalInterestOnTypeId","preClosurePenalInterestOnType","minBalanceForInterestCalculation","addControl","FormControl","removeControl","mandatoryRecommendedDepositAmount","depositPeriod","depositPeriodFrequencyId","isCalendarInherited","expectedFirstDepositOnDate","recurringFrequency","recurringFrequencyType","lockinPeriodFrequencyTypeData","lockinPeriodFrequencyTypeOptions","periodFrequencyTypeData","periodFrequencyTypeOptions","preClosurePenalInterestOnTypeData","preClosurePenalInterestOnTypeOptions","ctx_r22","ctx_r32","ctx_r37","ctx_r41","RecurringDepositsAccountChargesStepComponent","isChargesPatched","chargesDataSource","map","chargeData","chargeOptions","concat","pristine","newCharge","splice","indexOf","feeOnMonthDay","date","chargeTimeType","feeInterval","ctx","chartSlabIndex_r23","RecurringDepositsAccountInterestRateChartStepComponent","chartSlabIndex_r26","RecurringDepositsAccountPreviewStepComponent","ctx_r14","CreateRecurringDepositsAccountComponent","recurringDepositsAccountDetailsStep","recurringDepositAccountCurrencyStep","recurringDepositAccountTermsStep","recurringDepositAccountSettingsStep","valid","recurringDepositAccountDetails","recurringDepositAccountCurrency","recurringDepositAccountTerms","recurringDepositAccountSettings","recurringDepositAccountChargesStep","recurringDepositAccountCharges","recurringDepositAccount","monthDayFormat","createRecurringDepositAccount","resourceId","ActivateRecurringDepositsAccountComponent","createActivateRecurringDepositsAccountForm","activateRecurringDepositsAccountForm","activatedOnDate","activateRecurringDepositsAccountFormData","_r0","UndoApprovalRecurringDepositsAccountComponent","createUndoApprovalRecurringDepositsAccountForm","undoApprovalRecurringDepositsAccountForm","note","ApproveRecurringDepositsAccountComponent","createApproveRecurringDepositsAccountForm","approveRecurringDepositsAccountForm","approvedOnDate","approveRecurringDepositsAccountFormData","RejectRecurringDepositsAccountComponent","createRejectRecurringDepositsAccountForm","rejectRecurringDepositsAccountForm","rejectedOnDate","rejectRecurringDepositsAccountFormData","WithdrawByClientRecurringDepositsAccountComponent","createWithdrawRecurringDepositsAccountForm","withdrawRecurringDepositsAccountForm","withdrawnOnDate","withdrawRecurringDepositsAccountFormData","_r12","_r16","AddChargeRecurringDepositsAccountComponent","savingsChargeOptions","recurringDepositsAccountActionData","createRecurringDepositsChargeForm","recurringDepositsChargeForm","controls","getChargeTemplate","chargeDetails","dueDateNotRequired","chargeTimeTypeAnnualOrMonth","c","chargeCalculationType","savingsCharge","createSavingsCharge","PrematureCloseRecurringDepositAccountComponent","createprematureCloseRecurringDepositsAccountForm","prematureCloseRecurringDepositsAccountForm","closedOnDate","prematureCloseRecurringDepositsAccountFormData","CloseRecurringDepositsAccountComponent","maturityAmount","onAccountClosureOptions","paymentTypes","paymentTypeOptions","T","createcloseRecurringDepositForm","closeRecurringDepositForm","onAccountClosureId","paymentTypeId","accountNumber","chequeNumber","routingCode","receiptNumber","bankNumber","showPaymentDetails","closeRecurringDepositFormData","DepositRecurringDepositsAccountComponent","transactionAmount","outstandingChargeAmount","createdepositRecurringDepositForm","depositRecurringDepositForm","transactionDate","depositRecurringDepositFormData","RecurringDepositsAccountActionsComponent","Activate","Approve","Reject","Close","Deposit","actions","ctx_r7","ViewTransactionComponent","transactionData","recurringDepositsAccountTransaction","executeRecurringDepositsAccountTransactionsCommand","EditTransactionComponent","transactionTemplateData","recurringDepositsAccountTransactionTemplate","createEditTransactionForm","editTransactionForm","addPaymentDetailsFlag","editTransactionFormData","RecurringDepositsAccountViewResolver","getRecurringDepositsAccountData","RecurringDepositsAccountDataResolver","RecurringDepositsAccountTemplateResolver","RecurringDepositsAccountActionsResolver","actionName","getSavingsChargeTemplateResource","getRecurringDepositAccountActionResource","getRecurringDepositAccountTransactionTemplateResource","EditRecurringDepositAccountComponent","recurringDepositsAccountAndTemplate","updateRecurringDepositAccount","RecurringDepositsAccountAndTemplateResolver","getRecurringDepositsAccountAndTemplate","RecurringDepositsAccountTransactionResolver","getRecurringDepositsAccountTransaction","RecurringDepositsAccountTransactionTemplateResolver","getRecurringDepositsAccountTransactionTemplate","routes","path","extract","breadcrumb","routeParamBreadcrumb","children","component","resolve","SavingsDatatablesResolver","SavingsDatatableResolver","redirectTo","pathMatch","loadChildren","l","m","AccountTransfersModule","RecurringDepositsRoutingModule","imports","RouterModule","RecurringDepositsModule","SharedModule","PipesModule","DirectivesModule"],"sourceRoot":"webpack:///","sources":["./src/app/deposits/recurring-deposits/recurring-deposits-account-view/recurring-deposits-buttons.config.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-view/custom-dialogs/recurring-deposit-confirmation-dialog/recurring-deposit-confirmation-dialog.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-view/custom-dialogs/recurring-deposit-confirmation-dialog/recurring-deposit-confirmation-dialog.component.html","./src/app/deposits/recurring-deposits/recurring-deposits.service.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-view/recurring-deposits-account-view.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-view/recurring-deposits-account-view.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-view/interest-rate-chart-tab/interest-rate-chart-tab.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-view/interest-rate-chart-tab/interest-rate-chart-tab.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-view/transactions-tab/transactions-tab.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-view/transactions-tab/transactions-tab.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-view/standing-instructions-tab/standing-instructions-tab.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-view/standing-instructions-tab/standing-instructions-tab.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-view/charges-tab/charges-tab.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-view/charges-tab/charges-tab.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-view/datatable-tabs/datatable-tabs.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-view/datatable-tabs/datatable-tabs.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-stepper/recurring-deposits-account-details-step/recurring-deposits-account-details-step.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-stepper/recurring-deposits-account-details-step/recurring-deposits-account-details-step.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-stepper/recurring-deposits-account-terms-step/recurring-deposits-account-terms-step.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-stepper/recurring-deposits-account-terms-step/recurring-deposits-account-terms-step.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-stepper/recurring-deposits-account-currency-step/recurring-deposits-account-currency-step.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-stepper/recurring-deposits-account-currency-step/recurring-deposits-account-currency-step.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-stepper/recurring-deposits-account-settings-step/recurring-deposits-account-settings-step.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-stepper/recurring-deposits-account-settings-step/recurring-deposits-account-settings-step.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-stepper/recurring-deposits-account-charges-step/recurring-deposits-account-charges-step.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-stepper/recurring-deposits-account-charges-step/recurring-deposits-account-charges-step.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-stepper/recurring-deposits-account-interest-rate-chart-step/recurring-deposits-account-interest-rate-chart-step.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-stepper/recurring-deposits-account-interest-rate-chart-step/recurring-deposits-account-interest-rate-chart-step.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-stepper/recurring-deposits-account-preview-step/recurring-deposits-account-preview-step.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-stepper/recurring-deposits-account-preview-step/recurring-deposits-account-preview-step.component.ts","./src/app/deposits/recurring-deposits/create-recurring-deposits-account/create-recurring-deposits-account.component.html","./src/app/deposits/recurring-deposits/create-recurring-deposits-account/create-recurring-deposits-account.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-actions/activate-recurring-deposits-account/activate-recurring-deposits-account.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-actions/activate-recurring-deposits-account/activate-recurring-deposits-account.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-actions/undo-approval-recurring-deposits-account/undo-approval-recurring-deposits-account.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-actions/undo-approval-recurring-deposits-account/undo-approval-recurring-deposits-account.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-actions/approve-recurring-deposits-account/approve-recurring-deposits-account.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-actions/approve-recurring-deposits-account/approve-recurring-deposits-account.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-actions/reject-recurring-deposits-account/reject-recurring-deposits-account.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-actions/reject-recurring-deposits-account/reject-recurring-deposits-account.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-actions/withdraw-by-client-recurring-deposits-account/withdraw-by-client-recurring-deposits-account.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-actions/withdraw-by-client-recurring-deposits-account/withdraw-by-client-recurring-deposits-account.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-actions/add-charge-recurring-deposits-account/add-charge-recurring-deposits-account.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-actions/add-charge-recurring-deposits-account/add-charge-recurring-deposits-account.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-actions/premature-close-recurring-deposit-account/premature-close-recurring-deposit-account.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-actions/premature-close-recurring-deposit-account/premature-close-recurring-deposit-account.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-actions/close-recurring-deposits-account/close-recurring-deposits-account.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-actions/close-recurring-deposits-account/close-recurring-deposits-account.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-actions/deposit-recurring-deposits-account/deposit-recurring-deposits-account.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-actions/deposit-recurring-deposits-account/deposit-recurring-deposits-account.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-actions/recurring-deposits-account-actions.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-actions/recurring-deposits-account-actions.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-view/transactions-tab/view-transaction/view-transaction.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-view/transactions-tab/view-transaction/view-transaction.component.ts","./src/app/deposits/recurring-deposits/recurring-deposits-account-view/transactions-tab/edit-transaction/edit-transaction.component.html","./src/app/deposits/recurring-deposits/recurring-deposits-account-view/transactions-tab/edit-transaction/edit-transaction.component.ts","./src/app/deposits/recurring-deposits/common-resolvers/recurring-deposits-account-view.resolver.ts","./src/app/deposits/recurring-deposits/common-resolvers/recurring-deposits-account-data.resolver.ts","./src/app/deposits/recurring-deposits/common-resolvers/recurring-deposits-account-template.resolver.ts","./src/app/deposits/recurring-deposits/common-resolvers/recurring-deposit-account-actions.resolver.ts","./src/app/deposits/recurring-deposits/edit-recurring-deposit-account/edit-recurring-deposit-account.component.html","./src/app/deposits/recurring-deposits/edit-recurring-deposit-account/edit-recurring-deposit-account.component.ts","./src/app/deposits/recurring-deposits/common-resolvers/recurring-deposit-account-and-template.resolver.ts","./src/app/deposits/recurring-deposits/common-resolvers/recurring-deposit-account-transaction.resolver.ts","./src/app/deposits/recurring-deposits/common-resolvers/recurring-deposit-account-transaction-template.resolver.ts","./src/app/deposits/recurring-deposits/recurring-deposits-routing.module.ts","./src/app/deposits/recurring-deposits/recurring-deposits.module.ts"],"sourcesContent":["/** Recurring Deposits Account Buttons Configuration */\nexport class RecurringDepositsButtonsConfiguration {\n\n  optionArray: {\n    name: string,\n    taskPermissionName?: string,\n  }[];\n\n  buttonsArray: {\n    name: string,\n    icon: string,\n    taskPermissionName?: string,\n  }[];\n\n  constructor(status: string) {\n    this.setOptions(status);\n    this.setButtons(status);\n  }\n\n  get singleButtons() {\n    return this.buttonsArray;\n  }\n\n  get options() {\n    return this.optionArray;\n  }\n\n  setButtons(status: string) {\n    switch (status) {\n      case 'Active':\n        this.buttonsArray = [\n          {\n            name: 'Deposit',\n            icon: 'fa fa-arrow-up'\n          },\n          {\n            name: 'Premature Close',\n            icon: 'fa fa-arrow-left'\n          },\n          {\n            name: 'Calculate Interest',\n            icon: 'fa fa-table',\n          }\n        ];\n        break;\n      case 'Submitted and pending approval':\n        this.buttonsArray = [\n          {\n            name: 'Modify Application',\n            icon: 'fa fa-pencil ',\n          },\n          {\n            name: 'Approve',\n            icon: 'fa fa-check'\n          }\n        ];\n        break;\n      case 'Approved':\n        this.buttonsArray = [\n          {\n            name: 'Undo Approval',\n            icon: 'fa fa-undo'\n          },\n          {\n            name: 'Activate',\n            icon: 'fa fa-check'\n          }\n        ];\n      break;\n      case 'Matured':\n        this.buttonsArray = [\n          {\n            name: 'Close',\n            icon: 'fa fa-arrow-right'\n          },\n          {\n            name: 'Calculate Interest',\n            icon: 'fa fa-table'\n          },\n          {\n            name: 'Post Interest',\n            icon: 'fa fa-table'\n          }\n        ];\n      break;\n      default:\n        this.buttonsArray = [];\n    }\n  }\n\n  setOptions(status: string) {\n    switch (status) {\n      case 'Active':\n        this.optionArray = [\n          {\n            name: 'Post Interest',\n          },\n          {\n            name: 'Add Charge',\n          }\n        ];\n        break;\n      case 'Submitted and pending approval':\n        this.optionArray = [\n          {\n            name: 'Reject'\n          },\n          {\n            name: 'Withdraw By Client'\n          },\n          {\n            name: 'Add Charge'\n          },\n          {\n            name: 'Delete'\n          }\n        ];\n        break;\n      case 'Matured':\n        this.optionArray = [\n          {\n            name: 'Add Charge'\n          }\n        ];\n        break;\n      case 'Approved':\n      default:\n        this.optionArray = [];\n    }\n  }\n\n  addOption(option: {name: string, icon?: string, taskPermissionName?: string}) {\n    this.optionArray.push(option);\n  }\n\n  addButton(option: { name: string, icon: string, taskPermissionName?: string }) {\n    this.buttonsArray.push(option);\n  }\n\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'mifosx-recurring-deposit-confirmation-action',\n  templateUrl: './recurring-deposit-confirmation-dialog.component.html',\n  styleUrls: ['./recurring-deposit-confirmation-dialog.component.scss']\n})\nexport class RecurringDepositConfirmationDialogComponent implements OnInit {\n\n  /**\n   * @param {MatDialogRef} dialogRef Component reference to dialog.\n   * @param {any} data Provides a confirmation for all the recurring deposit actions.\n   */\n  constructor(public dialogRef: MatDialogRef<RecurringDepositConfirmationDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any) { }\n\n  ngOnInit() {\n  }\n\n}\n","<h1 mat-dialog-title>{{data.heading}}</h1>\n<div mat-dialog-content>\n  <p>{{ data.dialogContext }}</p>\n</div>\n<mat-dialog-actions align=\"end\">\n  <button mat-raised-button mat-dialog-close>Cancel</button>\n  <button mat-raised-button color=\"warn\" [mat-dialog-close]=\"{ confirm: true }\">Confirm</button>\n</mat-dialog-actions>\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/**\n * Recurring Deposits Service.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class RecurringDepositsService {\n\n  constructor(private http: HttpClient) { }\n\n  /**\n   * @params recurringDepositAccountId\n   * Returns the details of a particular Recurring Deposit Account\n   */\n  getRecurringDepositsAccountData(recurringDepositAccountId: any): Observable<any> {\n    const httpParams = new HttpParams()\n      .set('associations', 'all');\n    return this.http.get(`/recurringdepositaccounts/${recurringDepositAccountId}`, { params: httpParams });\n  }\n\n  /**\n   * @param clientId Client Id\n   * @param clientName Client Name\n   * @param fromAccountId Account Id\n   * @param locale Locale\n   * @param dateFormat Date Format\n   * @returns {Observable<any>} Standing Instructions\n   */\n  getStandingInstructions(\n    clientId: string, clientName: string, fromAccountId: string,\n    locale: string, dateFormat: string): Observable<any> {\n    const httpParams = new HttpParams()\n      .set('clientId', clientId)\n      .set('clientName', clientName)\n      .set('fromAccountId', fromAccountId)\n      .set('fromAccountType', '2')\n      .set('locale', locale)\n      .set('dateFormat', dateFormat);\n    return this.http.get(`/standinginstructions`, { params: httpParams });\n  }\n\n  /**\n   * Returns Recurring Deposit Account Template Data\n   * @param clientId Client ID\n   * @param productId Product ID\n   */\n  getRecurringDepositsAccountTemplate(clientId: any, productId?: any): Observable<any> {\n    let httpParams = new HttpParams().set('clientId', clientId);\n    httpParams = productId ? httpParams.set('productId', productId) : httpParams;\n    return this.http.get(`/recurringdepositaccounts/template`, { params: httpParams });\n  }\n\n  /**\n   * Post Request to create a recurring deposit account\n   * @param recurringAccountData Recurring Deposit Account Data\n   */\n  createRecurringDepositAccount(recurringAccountData: any): Observable<any> {\n    return this.http.post(`/recurringdepositaccounts`, recurringAccountData);\n  }\n\n  /**\n   * @param {string} accountId Savings Account Id\n   * @param {string} command Command\n   * @param {any} data Data\n   * @returns {Observable<any>}\n   */\n  executeRecurringDepositsAccountCommand(accountId: string, command: string, data: any): Observable<any> {\n    const httpParams = new HttpParams().set('command', command);\n    return this.http.post(`/recurringdepositaccounts/${accountId}`, data, { params: httpParams });\n  }\n\n  /**\n   * @param {string} accountId recurring deposits account Id\n   * @returns {Observable<any>}\n   */\n  deleteRecurringDepositsAccount(accountId: string): Observable<any> {\n    return this.http.delete(`/recurringdepositaccounts/${accountId}`);\n  }\n\n  /**\n   * Get Recurring Deposits Account and Template Data\n   * @param accountId Account ID\n   */\n  getRecurringDepositsAccountAndTemplate(accountId: any) {\n    const httpParams = new HttpParams().set('associations', 'charges')\n      .set('template', 'true');\n    return this.http.get(`/recurringdepositaccounts/${accountId}`, { params: httpParams });\n  }\n\n  /**\n   * @param {any} accountId Account Id\n   * @param {any} recurringDepositAccountData Recurring Deposit Account Data\n   * @returns {Observable<any>}\n   */\n  updateRecurringDepositAccount(accountId: any, recurringDepositAccountData: any): Observable<any> {\n    return this.http.put(`/recurringdepositaccounts/${accountId}`, recurringDepositAccountData);\n  }\n\n  /**\n   * Returns the template for the recurring deposits action\n   * @param accountId Account Id\n   * @param command Command\n   */\n  getRecurringDepositAccountActionResource(accountId: any, command: string): Observable<any> {\n    const httpParams = new HttpParams().set('command', command);\n    return this.http.get(`/recurringdepositaccounts/${accountId}/template`, { params: httpParams });\n  }\n\n  /**\n   * Returns the transaction template for the recurring deposits action\n   * @param accountId Account Id\n   * @param command Command\n   */\n  getRecurringDepositAccountTransactionTemplateResource(accountId: any, command: string): Observable<any> {\n    const httpParams = new HttpParams().set('command', command);\n    return this.http.get(`/recurringdepositaccounts/${accountId}/transactions/template`, { params: httpParams });\n  }\n  /*\n   * @param {string} accountId Recurring Deposits Account Id\n   * @param {string} transactionId Transaction Id\n   * @returns {Observable<any>}\n   */\n  getRecurringDepositsAccountTransaction(accountId: string, transactionId: string): Observable<any> {\n    return this.http.get(`/recurringdepositaccounts/${accountId}/transactions/${transactionId}`);\n  }\n\n  /**\n   * @param {string} accountId Recuring Deposits Account Id\n   * @param {string} transactionId Transaction Id\n   * @returns {Observable<any>}\n   */\n  getRecurringDepositsAccountTransactionTemplate(accountId: string, transactionId: string): Observable<any> {\n    const httpParams = new HttpParams().set('template', 'true');\n    return this.http.get(`/recurringdepositaccounts/${accountId}/transactions/${transactionId}`, { params: httpParams });\n  }\n\n  /**\n   * @param {string} accountId Recurring Deposits Account Id\n   * @param {string} command Command\n   * @param {any} data Data\n   * @param {string} transactionId Transaction Id\n   * @returns {Observable<any>}\n   */\n  executeRecurringDepositsAccountTransactionsCommand(accountId: string, command: string, data: any, transactionId?: any): Observable<any> {\n    const httpParams = new HttpParams().set('command', command);\n    return this.http.post(`/recurringdepositaccounts/${accountId}/transactions/${transactionId}`, data, { params: httpParams });\n  }\n\n}\n","<mat-card class=\"recurringDeposits-account-card\">\n\n  <mat-card-header fxLayout=\"column\" class=\"header\">\n\n    <mat-card-title-group class=\"header-title-group\">\n\n      <div class=\"profile-image-container\">\n        <div>\n          <img mat-card-md-image class=\"profile-image\" matTooltip=\"Recurring Deposits Account\"\n            [src]=\"'assets/images/recurring-deposits_account_placeholder.png'\">\n        </div>\n      </div>\n\n      <div class=\"mat-typography account-card-title\">\n        <mat-card-title>\n          <h3>\n            <i class=\"fa fa-stop\" [ngClass]=\"recurringDepositsAccountData.status.code | statusLookup\"\n              [matTooltip]=\"recurringDepositsAccountData.status.value\"></i>\n            Account Name : {{recurringDepositsAccountData.depositProductName}}\n          </h3>\n        </mat-card-title>\n        <mat-card-subtitle>\n          <p>\n            Account #: {{recurringDepositsAccountData.accountNo}} | Client Name:\n            {{recurringDepositsAccountData.clientName}}<br />\n            <span\n              *ngIf=\"!recurringDepositsAccountData.status.rejected && !recurringDepositsAccountData.status.submittedAndPendingApproval\">\n              Current Balance:\n              {{recurringDepositsAccountData.currency.displaySymbol}}&nbsp;{{recurringDepositsAccountData.summary.accountBalance}}<br />\n              Available Balance:\n              {{recurringDepositsAccountData.currency.displaySymbol}}&nbsp;{{recurringDepositsAccountData.summary.availableBalance}}<br />\n            </span>\n          </p>\n        </mat-card-subtitle>\n      </div>\n\n    </mat-card-title-group>\n\n    <mat-card-actions class=\"account-actions\">\n\n      <ng-container *ngFor=\"let button of buttonConfig.singleButtons\">\n        <button mat-raised-button (click)=\"doAction(button.name)\">\n          <i class=\"{{button.icon}}\"></i> {{button.name}}</button>\n      </ng-container>\n\n      <ng-container *ngIf=\"buttonConfig.options.length\">\n        <button mat-raised-button [matMenuTriggerFor]=\"More\">More</button>\n        <mat-menu #More=\"matMenu\">\n        <span *ngFor=\"let option of buttonConfig.options\">\n          <button mat-menu-item (click)=\"doAction(option.name)\">{{option.name}}</button>\n        </span>\n        </mat-menu>\n      </ng-container>\n\n    </mat-card-actions>\n\n  </mat-card-header>\n\n  <mat-card-content class=\"content\">\n\n    <div class=\"recurringDeposits-account-tables\" fxLayout=\"row\" fxLayoutGap=\"2%\">\n\n      <div fxFlex=\"49%\"\n        *ngIf=\"!recurringDepositsAccountData.status.rejected && !recurringDepositsAccountData.status.submittedAndPendingApproval\">\n        <h4 class=\"table-headers\">Savings Details</h4>\n        <table>\n          <tbody>\n            <tr>\n              <td>Field Officer</td>\n              <td>{{recurringDepositsAccountData.fieldOfficerName}}<span\n                  *ngIf=\"!recurringDepositsAccountData.fieldOfficerName\">Unassigned</span></td>\n            </tr>\n            <tr>\n              <td>Activation date</td>\n              <td>{{recurringDepositsAccountData.timeline.activatedOnDate  | dateFormat}}</td>\n            </tr>\n            <tr>\n              <td>Maturity Date</td>\n              <td><span>{{recurringDepositsAccountData.maturityDate  | dateFormat}}</span></td>\n            </tr>\n            <tr\n              *ngIf=\"recurringDepositsAccountData.timeline.closedOnDate || recurringDepositsAccountData.summary.totalWitddrawals\">\n              <td *ngIf=\"recurringDepositsAccountData.timeline.closedOnDate\">\n                Closed on Date</td>\n              <td><span>{{recurringDepositsAccountData.timeline.closedOnDate  | dateFormat}}</span></td>\n            </tr>\n            <tr>\n              <td>Period</td>\n              <td>\n                <span>{{recurringDepositsAccountData.depositPeriod}}&nbsp;{{recurringDepositsAccountData.depositPeriodFrequency.value}}</span>\n              </td>\n            </tr>\n            <tr>\n              <td>Deposit Frequency</td>\n              <td><span>{{recurringDepositsAccountData.recurringFrequency}}\n                  &nbsp;{{recurringDepositsAccountData.recurringFrequencyType.value}}\n                </span></td>\n            </tr>\n            <tr *ngIf=\"recurringDepositsAccountData.minBalanceForInterestCalculation\">\n              <td> Balance Required For Interest Calculation</td>\n              <td><span>{{recurringDepositsAccountData.minBalanceForInterestCalculation}}</span></td>\n            </tr>\n            <tr *ngIf=\"recurringDepositsAccountData.witdHoldTax\">\n              <td> Witdhold Tax Group </td>\n              <td><span>{{recurringDepositsAccountData.taxGroup.name}}</span></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <div fxFlex=\"49%\"\n        *ngIf=\"!recurringDepositsAccountData.status.rejected && !recurringDepositsAccountData.status.submittedAndPendingApproval\">\n        <h4 class=\"table-headers\">Performance History</h4>\n        <table>\n          <tbody>\n            <tr>\n              <td>Principal Amount</td>\n              <td>\n                <span>{{recurringDepositsAccountData.currency.displaySymbol}}&nbsp;{{recurringDepositsAccountData.depositAmount}}</span>\n              </td>\n            </tr>\n            <tr>\n              <td>Maturity Amount</td>\n              <td>\n                <span>{{recurringDepositsAccountData.currency.displaySymbol}}&nbsp;{{recurringDepositsAccountData.maturityAmount | formatNumber}}</span>\n              </td>\n            </tr>\n            <tr>\n              <td>Recurring Deposit Amount</td>\n              <td>\n                <span>{{recurringDepositsAccountData.currency.displaySymbol}}&nbsp;{{recurringDepositsAccountData?.mandatoryRecommendedDepositAmount | formatNumber}}</span>\n              </td>\n            </tr>\n            <tr>\n              <td>Deposits till Date</td>\n              <td><span\n                  *ngIf=\"recurringDepositsAccountData.summary.totalDeposits\">{{recurringDepositsAccountData.currency.displaySymbol}}&nbsp;{{recurringDepositsAccountData.summary.totalDeposits | formatNumber}}</span>\n                <span\n                  *ngIf=\"!recurringDepositsAccountData.summary.totalDeposits\">{{recurringDepositsAccountData.currency.displaySymbol}}&nbsp;0</span>\n              </td>\n            </tr>\n            <tr>\n              <td>Withdrwals till Date</td>\n              <td><span\n                  *ngIf=\"recurringDepositsAccountData.summary.totalWithdrawals\">{{recurringDepositsAccountData.currency.displaySymbol}}&nbsp;{{recurringDepositsAccountData.summary.totalWithdrawals | formatNumber}}</span>\n                <span\n                  *ngIf=\"!recurringDepositsAccountData.summary.totalWithdrawals\">{{recurringDepositsAccountData.currency.displaySymbol}}&nbsp;0</span>\n              </td>\n            </tr>\n\n            <tr *ngIf=\"recurringDepositsAccountData.summary.totalInterestEarned >= 0\">\n              <td >Interest Earned</td>\n              <td><span>{{recurringDepositsAccountData.currency.displaySymbol}}&nbsp;{{recurringDepositsAccountData.summary.totalInterestEarned| formatNumber}}</span>\n              </td>\n            </tr>\n\n          </tbody>\n        </table>\n      </div>\n\n      <div fxFlex=\"49%\"\n        *ngIf=\"recurringDepositsAccountData.status.rejected || recurringDepositsAccountData.status.submittedAndPendingApproval\">\n        <table>\n          <tbody>\n            <tr>\n              <td>Date of Deposit</td>\n              <td>\n                <span *ngIf=\"!recurringDepositsAccountData.expectedFirstDepositOnDate\">{{recurringDepositsAccountData.timeline.activatedOnDate  | dateFormat}}\n                  <span *ngIf=\"!recurringDepositsAccountData.timeline.activatedOnDate\">Not Activated</span>\n                </span>\n                <span *ngIf=\"recurringDepositsAccountData.expectedFirstDepositOnDate\" >{{recurringDepositsAccountData.expectedFirstDepositOnDate  | dateFormat}}\n                  <span *ngIf=\"!recurringDepositsAccountData.expectedFirstDepositOnDate\">Not Activated</span>\n                </span>\n              </td>\n            </tr>\n            <tr>\n              <td>Period</td>\n              <td>\n                <span>{{recurringDepositsAccountData.depositPeriod}}&nbsp;{{recurringDepositsAccountData.depositPeriodFrequency.value}}</span>\n              </td>\n            </tr>\n            <tr *ngIf=\"recurringDepositsAccountData.maturityDate\">\n              <td>Maturity Date</td>\n              <td><span>{{recurringDepositsAccountData.maturityDate  | dateFormat}}</span></td>\n            </tr>\n            <tr>\n              <td>Total Deposits </td>\n              <td>\n                <span *ngIf=\"recurringDepositsAccountData.summary.totalDeposits\">{{ recurringDepositsAccountData.currency.displaySymbol }}&nbsp;{{ recurringDepositsAccountData.summary.totalDeposits }}</span>\n                <span *ngIf=\"!recurringDepositsAccountData.summary.totalDeposits\">{{recurringDepositsAccountData.currency.displaySymbol}}&nbsp;0</span>\n              </td>\n            </tr>\n            <tr >\n              <td> Actual Available Balance</td>\n              <td>{{ recurringDepositsAccountData.currency.displaySymbol }}&nbsp;{{ recurringDepositsAccountData.summary.accountBalance }}\n            </tr>\n            <tr>\n              <td> Recurring Deposits Amount</td>\n              <td>\n                {{ recurringDepositsAccountData.currency.displaySymbol }}&nbsp;{{ recurringDepositsAccountData.mandatoryRecommendedDepositAmount }}\n            </tr>\n            <tr *ngIf=\"recurringDepositsAccountData.summary.totalInterestEarned\">\n              <td> Interests Earned </td>\n              <td><span>{{ recurringDepositsAccountData.currency.displaySymbol }}&nbsp;{{ recurringDepositsAccountData.summary.totalInterestEarned }}</span></td>\n            </tr>\n            <tr *ngIf=\"recurringDepositsAccountData.summary.totalWithdrawals\">\n              <td> Total Withdrawls </td>\n              <td>\n                <span>{{ recurringDepositsAccountData.currency.displaySymbol }}&nbsp;{{ recurringDepositsAccountData.summary.totalWithdrawals }}</span>\n              </td>\n            </tr>\n            <tr *ngIf=\"recurringDepositsAccountData.minBalanceForInterestCalculation\">\n              <td> Balance Required For Interest Calculation </td>\n              <td>\n                <span>{{ recurringDepositsAccountData.minBalanceForInterestCalculation }}</span>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <div fxFlex=\"49%\"\n        *ngIf=\"recurringDepositsAccountData.status.rejected || recurringDepositsAccountData.status.submittedAndPendingApproval\">\n        <table>\n          <tbody>\n            <tr>\n              <td>Principal Amount</td>\n              <td><span\n                  *ngIf=\"recurringDepositsAccountData.depositAmount\">{{ recurringDepositsAccountData.currency.displaySymbol }}&nbsp;{{ recurringDepositsAccountData.depositAmount }}</span>\n                <span\n                  *ngIf=\"!recurringDepositsAccountData.depositAmount\">{{ recurringDepositsAccountData.currency.displaySymbol }}&nbsp;0</span>\n              </td>\n            </tr>\n            <tr>\n              <td>Rate of Interest</td>\n              <td>\n                <span>{{recurringDepositsAccountData.nominalAnnualInterestRate}}</span>\n              </td>\n            </tr>\n            <tr *ngIf=\"recurringDepositsAccountData.maturityDate\">\n              <td>Maturity Amount</td>\n              <td>\n                <span>{{ recurringDepositsAccountData.currency.displaySymbol }}&nbsp;{{ recurringDepositsAccountData.maturityAmount }}</span>\n              </td>\n            </tr>\n            <tr>\n              <td>Total Withdrawls </td>\n              <td>\n                <span\n                  *ngIf=\"recurringDepositsAccountData.summary.totalWithdrawals\">{{ recurringDepositsAccountData.currency.displaySymbol }}&nbsp;{{ recurringDepositsAccountData.summary.totalWithdrawals }}</span>\n                <span\n                  *ngIf=\"!recurringDepositsAccountData.summary.totalWithdrawals\">{{recurringDepositsAccountData.currency.displaySymbol}}&nbsp;0</span>\n              </td>\n            </tr>\n            <tr *ngIf=\"recurringDepositsAccountData.timeline.closedOnDate\">\n              <td> Closed on Date </td>\n              <td>\n                {{ recurringDepositsAccountData.timeline.closedOnDate  | dateFormat }}\n            </tr>\n            <tr>\n              <td> Deposits Frequency </td>\n              <td>\n                {{ recurringDepositsAccountData.recurringFrequency }}&nbsp;{{ recurringDepositsAccountData.recurringFrequencyType.value }}\n            </tr>\n            <tr *ngIf=\"recurringDepositsAccountData.summary.totalInterestEarned\">\n              <td> Interests Posted </td>\n              <td>\n                <span\n                  *ngIf=\"recurringDepositsAccountData.summary.totalInterestPosted\">{{recurringDepositsAccountData.currency.displaySymbol}}&nbsp;{{recurringDepositsAccountData.summary.totalInterestPosted}}</span>\n                <span\n                  *ngIf=\"!recurringDepositsAccountData.summary.totalInterestPosted\">{{recurringDepositsAccountData.currency.displaySymbol}}&nbsp;0</span>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n\n    <div class=\"recurringDeposits-account-tables\" fxLayout=\"row\" fxLayoutGap=\"2%\">\n      <div fxFlex=\"49%\"\n        *ngIf=\"!recurringDepositsAccountData.status.rejected && !recurringDepositsAccountData.status.submittedAndPendingApproval\">\n        <h4 class=\"table-headers\">Interest Details</h4>\n        <table>\n          <tbody>\n            <tr>\n              <td >Interest Rate</td>\n              <td><span>{{recurringDepositsAccountData.nominalAnnualInterestRate}}%</span></td>\n            </tr>\n            <tr>\n              <td>Interest Compounding period</td>\n              <td><span>{{recurringDepositsAccountData.interestCompoundingPeriodType.value}}</span></td>\n            </tr>\n            <tr>\n              <td>Interest Posting period</td>\n              <td><span>{{recurringDepositsAccountData.interestPostingPeriodType.value}}</span></td>\n            </tr>\n            <tr>\n              <td>Interest calculated using</td>\n              <td><span>{{recurringDepositsAccountData.interestCalculationType.value}}</span></td>\n            </tr>\n            <tr>\n              <td># Days in Year</td>\n              <td><span>{{recurringDepositsAccountData.interestCalculationDaysInYearType.value}}</span></td>\n            </tr>\n            <tr *ngIf=\"recurringDepositsAccountData.preClosurePenalApplicable\">\n              <td>Pre-closure penal Interest (less)</td>\n              <td><span>{{recurringDepositsAccountData.preClosurePenalInterest}} % on\n                  {{recurringDepositsAccountData.preClosurePenalInterestOnType.value}}</span></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <div fxFlex=\"49%\"\n        *ngIf=\"recurringDepositsAccountData.status.rejected || recurringDepositsAccountData.status.submittedAndPendingApproval\">\n        <table>\n          <tbody>\n            <tr>\n              <td>Interest Compounding Period</td>\n              <td><span>{{recurringDepositsAccountData.interestCompoundingPeriodType.value}}</span></td>\n            </tr>\n            <tr>\n              <td>Interest Posting period</td>\n              <td><span>{{recurringDepositsAccountData.interestPostingPeriodType.value}}</span></td>\n            </tr>\n            <tr>\n              <td>Interest calculated using</td>\n              <td><span>{{recurringDepositsAccountData.interestCalculationType.value}}</span></td>\n            </tr>\n            <tr>\n              <td># Days in Year</td>\n              <td><span>{{recurringDepositsAccountData.interestCalculationDaysInYearType.value}}</span></td>\n            </tr>\n            <tr *ngIf=\"recurringDepositsAccountData.preClosurePenalApplicable\">\n              <td>Pre-closure penal Interest (less)</td>\n              <td><span>{{recurringDepositsAccountData.preClosurePenalInterest}} % on\n                  {{recurringDepositsAccountData.preClosurePenalInterestOnType.value}}</span></td>\n            </tr>\n            <tr *ngIf=\"recurringDepositsAccountData.witdHoldTax\">\n              <td> Witdhold Tax Group </td>\n              <td><span>{{recurringDepositsAccountData.taxGroup.name}}</span></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n    </div>\n\n    <nav mat-tab-nav-bar class=\"navigation-tabs\">\n        <a mat-tab-link [routerLink]=\"['./interest-rate-chart']\" routerLinkActive #IRC=\"routerLinkActive\"\n          [active]=\"IRC.isActive\">\n          Interest Rate Chart\n        </a>\n        <ng-container *ngIf=\"recurringDepositsAccountData.transactions\">\n          <a mat-tab-link [routerLink]=\"['./transactions']\" routerLinkActive #transactions=\"routerLinkActive\"\n            [active]=\"transactions.isActive\">\n            Transactions\n          </a>\n        </ng-container>\n        <a mat-tab-link [routerLink]=\"['./charges']\" routerLinkActive #charges=\"routerLinkActive\" [active]=\"charges.isActive\">\n          Charges\n        </a>\n        <ng-container *ngIf=\"recurringDepositsAccountData.clientId\">\n          <a mat-tab-link [routerLink]=\"['./standing-instructions-tab']\" routerLinkActive #standingInstructions=\"routerLinkActive\"\n            [active]=\"standingInstructions.isActive\">\n            Standing Instructions\n          </a>\n        </ng-container>\n        <ng-container *ngFor=\"let savingsDatatable of savingsDatatables\">\n          <a mat-tab-link *mifosxHasPermission=\"'READ_' + savingsDatatable.registeredTableName\"\n            [routerLink]=\"['./datatables',savingsDatatable.registeredTableName]\" routerLinkActive #datatable=\"routerLinkActive\"\n            [active]=\"datatable.isActive\">\n            {{savingsDatatable.registeredTableName}}\n          </a>\n        </ng-container>\n    </nav>\n\n    <router-outlet></router-outlet>\n\n  </mat-card-content>\n\n</mat-card>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\n\n/** Custom Services */\nimport { RecurringDepositsService } from '../recurring-deposits.service';\nimport { SavingsService } from 'app/savings/savings.service';\n\n/** Custom Buttons Configuration */\nimport { RecurringDepositsButtonsConfiguration } from './recurring-deposits-buttons.config';\n\n/** Custom Dialogs */\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\nimport { RecurringDepositConfirmationDialogComponent } from './custom-dialogs/recurring-deposit-confirmation-dialog/recurring-deposit-confirmation-dialog.component';\n\n\n/**\n * RecurringDeposits Account View Component\n */\n@Component({\n  selector: 'mifosx-recurring-deposits-account-view',\n  templateUrl: './recurring-deposits-account-view.component.html',\n  styleUrls: ['./recurring-deposits-account-view.component.scss']\n})\nexport class RecurringDepositsAccountViewComponent implements OnInit {\n\n  /** RecurringDeposits Account Data */\n  recurringDepositsAccountData: any;\n  /** Button Configuration */\n  buttonConfig: RecurringDepositsButtonsConfiguration;\n  /** Charges Data */\n  charges: any;\n  /** Savings Data Tables */\n  savingsDatatables: any;\n  /** Is Prematured Allowed */\n  isprematureAllowed: any;\n  /**\n   * Fetches recurringDeposits account data from `resolve`\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {RecurringDepositsService} recurringDepositsService RecurringDeposits Service\n   */\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private recurringDepositsService: RecurringDepositsService,\n              private savingsService: SavingsService,\n              public dialog: MatDialog) {\n    this.route.data.subscribe((data: { recurringDepositsAccountData: any, savingsDatatables: any }) => {\n      this.recurringDepositsAccountData = data.recurringDepositsAccountData;\n      this.charges = this.recurringDepositsAccountData.charges;\n      this.savingsDatatables = data.savingsDatatables;\n      this.isprematureAllowed = data.recurringDepositsAccountData.maturityDate != null;\n    });\n  }\n\n  ngOnInit() {\n    this.setConditionalButtons();\n  }\n\n  /**\n   * Adds options to button config. conditionaly.\n   */\n  setConditionalButtons() {\n    const status = this.recurringDepositsAccountData.status.value;\n    this.buttonConfig = new RecurringDepositsButtonsConfiguration(status);\n    if (this.recurringDepositsAccountData.clientId && this.recurringDepositsAccountData.status.value === 'Matured') {\n      this.buttonConfig.addOption({\n        name: 'Transfer Funds',\n      });\n    }\n\n    if (this.recurringDepositsAccountData.charges && this.recurringDepositsAccountData.status.value === 'Matured') {\n      this.charges.forEach((element: any) => {\n        if (element.name === 'Annual fee - INR') {\n          this.buttonConfig.addOption({\n            name: 'Apply Annual Fees',\n          });\n        }\n      });\n    }\n\n    if (this.recurringDepositsAccountData.clientId && this.recurringDepositsAccountData.status.value === 'Active') {\n      if (this.recurringDepositsAccountData.allowWithdrawal === true) {\n        this.buttonConfig.addOption({\n          name: 'Withdraw'\n        });\n      }\n      if (this.recurringDepositsAccountData.charges) {\n        this.charges.forEach((element: any) => {\n          if (element.name === 'Annual fee - INR') {\n            this.buttonConfig.addOption({\n              name: 'Apply Annual Fees',\n            });\n          }\n        });\n      }\n\n      if (!this.isprematureAllowed) {\n        this.buttonConfig.addButton({\n          name: 'Close',\n          icon: 'fa fa-arrow-right'\n        });\n      }\n\n      if (this.recurringDepositsAccountData.taxGroup) {\n        if (this.recurringDepositsAccountData.withHoldTax) {\n          this.buttonConfig.addOption({\n            name: 'Disable Withhold Tax',\n            taskPermissionName: 'UPDATEWITHHOLDTAX_SAVINGSACCOUNT'\n          });\n        } else {\n          this.buttonConfig.addOption({\n            name: 'Enable Withhold Tax',\n            taskPermissionName: 'UPDATEWITHHOLDTAX_SAVINGSACCOUNT'\n          });\n        }\n      }\n    }\n\n  }\n\n  /**\n   * Refetches data for the component\n   * TODO: Replace by a custom reload component instead of hard-coded back-routing.\n   */\n  reload() {\n    const clientId = this.recurringDepositsAccountData.clientId;\n    const url: string = this.router.url;\n    this.router.navigateByUrl(`/clients/${clientId}/recurringdeposits`, { skipLocationChange: true })\n      .then(() => this.router.navigate([url]));\n  }\n\n  /**\n   * Performs action button/option action.\n   * @param {string} name action name.\n   */\n  doAction(name: string) {\n    switch (name) {\n      case 'Activate':\n      case 'Approve':\n      case 'Reject':\n      case 'Undo Approval':\n      case 'Add Charge':\n      case 'Withdraw By Client':\n      case 'Premature Close':\n      case 'Close':\n      case 'Deposit':\n        this.router.navigate([`actions/${name}`], { relativeTo: this.route });\n        break;\n      case 'Modify Application':\n        this.router.navigate(['edit-recurring-deposit-account'], { relativeTo: this.route });\n        break;\n      case 'Delete':\n        this.deleteRecurringDepositsAccount();\n        break;\n      case 'Calculate Interest':\n        this.calculateInterest();\n        break;\n      case 'Post Interest':\n        this.postInterest();\n        break;\n      case 'Enable Withhold Tax':\n        this.enableWithHoldTax();\n        break;\n      case 'Disable Withhold Tax':\n        this.disableWithHoldTax();\n        break;\n    }\n  }\n\n  /**\n   * Deletes Recurring Deposits Account.\n   */\n  private deleteRecurringDepositsAccount() {\n    const deleteRecurringDepositsAccountDialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `Recurring deposit account with id: ${this.recurringDepositsAccountData.id}` }\n    });\n    deleteRecurringDepositsAccountDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        this.recurringDepositsService.deleteRecurringDepositsAccount(this.recurringDepositsAccountData.id).subscribe(() => {\n          this.router.navigate(['../../'], { relativeTo: this.route });\n        });\n      }\n    });\n  }\n\n  /**\n   * Calculates savings account's interest\n   */\n  private calculateInterest() {\n    const calculateInterestAccountDialogRef = this.dialog.open(RecurringDepositConfirmationDialogComponent, {\n      data: { heading: 'Calculate Interest', dialogContext: `Are you sure you want to calculate interest ?` }\n    });\n    calculateInterestAccountDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.recurringDepositsService.executeRecurringDepositsAccountCommand(this.recurringDepositsAccountData.id, 'calculateInterest', {}).subscribe(() => {\n          this.reload();\n        });\n      }\n    });\n  }\n\n  /**\n   * Posts savings account's interest\n   */\n  private postInterest() {\n    const postInterestAccountDialogRef = this.dialog.open(RecurringDepositConfirmationDialogComponent, {\n      data: { heading: 'Post Interest', dialogContext: 'Are you sure you want to post interest ?' }\n    });\n    postInterestAccountDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.recurringDepositsService.executeRecurringDepositsAccountCommand(this.recurringDepositsAccountData.id, 'postInterest', {}).subscribe(() => {\n          this.reload();\n        });\n      }\n    });\n  }\n\n\n  /**\n   * Enables withhold tax for recurring deposits account.\n   * Recurring deposits endpoint is not supported so using Savings endpoint.\n   */\n  private enableWithHoldTax() {\n    const deleteSavingsAccountDialogRef = this.dialog.open(RecurringDepositConfirmationDialogComponent, {\n      data: { heading: 'Enable Withhold Tax', dialogContext: `Enable withhold tax for this account ?` }\n    });\n    deleteSavingsAccountDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.savingsService.executeSavingsAccountUpdateCommand(this.recurringDepositsAccountData.id, 'updateWithHoldTax', { withHoldTax: true })\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Disables withhold tax for recurring deposits account\n   * Recurring deposits endpoint is not supported so using Savings endpoint.\n   */\n  private disableWithHoldTax() {\n    const disableWithHoldTaxDialogRef = this.dialog.open(RecurringDepositConfirmationDialogComponent, {\n      data: { heading: 'Disable Withhold Tax', dialogContext: 'Disable withhold tax for this account ?' }\n    });\n    disableWithHoldTaxDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.savingsService.executeSavingsAccountUpdateCommand(this.recurringDepositsAccountData.id, 'updateWithHoldTax', { withHoldTax: false })\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n}\n","<div class=\"tab-container mat-typography\">\n\n  <div fxLayoutAlign=\"start\">\n    <div class=\"m-b-20\">\n      <h3>All Interest Rates</h3>\n    </div>\n  </div>\n\n  <div class=\"mat-elevation-z1 m-b-25\">\n\n    <table mat-table [dataSource]=\"interestRateChartData\" #chartsTable multiTemplateDataRows>\n\n      <ng-container matColumnDef=\"period\">\n        <th mat-header-cell *matHeaderCellDef> Period </th>\n        <td mat-cell *matCellDef=\"let chartSlab\">\n          {{chartSlab.fromPeriod}}-{{chartSlab.toPeriod}}&nbsp;{{chartSlab.periodType.value}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"amountRange\">\n        <th mat-header-cell *matHeaderCellDef> Amount Range </th>\n        <td mat-cell *matCellDef=\"let chartSlab\">{{chartSlab.amountRangeFrom}}-{{chartSlab.amountRangeTo}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"interest\">\n        <th mat-header-cell *matHeaderCellDef> Interest </th>\n        <td mat-cell *matCellDef=\"let chartSlab\"> {{ chartSlab.annualInterestRate }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"description\">\n        <th mat-header-cell *matHeaderCellDef> Description </th>\n        <td mat-cell *matCellDef=\"let chartSlab\"> {{ chartSlab.description }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef> Actions </th>\n        <td mat-cell *matCellDef=\"let chartSlab; let chartSlabIndex = dataIndex\">\n          <button mat-button color=\"primary\"\n            (click)=\"expandChartSlabIndex = expandChartSlabIndex === chartSlabIndex ? null : chartSlabIndex\">\n            <span *ngIf=\"expandChartSlabIndex !== chartSlabIndex\">\n              <fa-icon icon=\"eye\" class=\"m-r-10\"></fa-icon>\n              View Incentives\n            </span>\n            <span *ngIf=\"expandChartSlabIndex === chartSlabIndex\">\n              <fa-icon icon=\"eye-slash\" class=\"m-r-10\"></fa-icon>\n              Hide Incentives\n            </span>\n          </button>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"incentives\">\n        <td mat-cell *matCellDef=\"let chartSlab; let chartSlabIndex = dataIndex\"\n          [attr.colspan]=\"chartSlabsDisplayedColumns.length\">\n\n          <div fxLayout=\"row wrap\" fxFlexFill class=\"incentives\"\n            [@expandChartSlab]=\"chartSlabIndex === expandChartSlabIndex ? 'expanded' : 'collapsed'\">\n\n            <mat-card fxLayout=\"row wrap\" fxFlexFill>\n\n              <h4 class=\"m-b-10\" fxFlex=\"13%\">\n                Incentives\n              </h4>\n\n              <table fxFlexFill class=\"mat-elevation-z1\" mat-table [dataSource]=\"chartSlab.incentives\"\n                *ngIf=\"chartSlab.incentives?.length\">\n\n                <ng-container matColumnDef=\"entityType\">\n                  <th mat-header-cell *matHeaderCellDef> Entity Type </th>\n                  <td mat-cell *matCellDef=\"let incentive\">\n                    {{ incentive.entityType.value }}\n                  </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"attributeName\">\n                  <th mat-header-cell *matHeaderCellDef> Attribute Name </th>\n                  <td mat-cell *matCellDef=\"let incentive\">\n                    {{ incentive.attributeName.value }}\n                  </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"conditionType\">\n                  <th mat-header-cell *matHeaderCellDef> Condition Type </th>\n                  <td mat-cell *matCellDef=\"let incentive\">\n                    {{ incentive.conditionType.value | titlecase }}\n                  </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"attributeValue\">\n                  <th mat-header-cell *matHeaderCellDef> Attribute Value </th>\n                  <td mat-cell *matCellDef=\"let incentive\" [ngSwitch]=\"incentive.attributeName\">\n                    {{ incentive.attributeValueDesc }}\n                  </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"incentiveType\">\n                  <th mat-header-cell *matHeaderCellDef> Incentive Type </th>\n                  <td mat-cell *matCellDef=\"let incentive\">\n                    {{ incentive.incentiveType.value }}\n                  </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"amount\">\n                  <th mat-header-cell *matHeaderCellDef> Interest </th>\n                  <td mat-cell *matCellDef=\"let incentive\">\n                    {{ incentive.amount }}\n                  </td>\n                </ng-container>\n\n                <tr mat-header-row *matHeaderRowDef=\"incentivesDisplayedColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: incentivesDisplayedColumns;\"></tr>\n\n              </table>\n\n            </mat-card>\n          </div>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"chartSlabsDisplayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: chartSlabsDisplayedColumns;\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: chartSlabsIncentivesDisplayedColumns;\" class=\"incentives-row\"></tr>\n\n    </table>\n\n  </div>\n\n</div>\n","/** Angular Imports */\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n/**\n * Interest Rate Chart Tab Component.\n */\n@Component({\n  selector: 'mifosx-interest-rate-chart-tab',\n  templateUrl: './interest-rate-chart-tab.component.html',\n  styleUrls: ['./interest-rate-chart-tab.component.scss'],\n  animations: [\n    trigger('expandChartSlab', [\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\n      state('expanded', style({ height: '*' })),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n  ]\n})\nexport class InterestRateChartTabComponent {\n\n  /** Interest Rate Chart Data */\n  interestRateChartData: any = [];\n  /** Columns to be displayed in interest rate chart table. */\n  chartSlabsDisplayedColumns: any[] = ['period', 'amountRange', 'interest', 'description', 'actions'];\n  /** Columns to be displayed in incentives sub-table. */\n  incentivesDisplayedColumns: string[] = ['entityType', 'attributeName', 'conditionType', 'attributeValue', 'incentiveType', 'amount'];\n  /** Additional Column to display in incentives table  */\n  chartSlabsIncentivesDisplayedColumns: string[] = ['incentives'];\n  /** Expand Chart Slab Index used in the view */\n  expandChartSlabIndex: number;\n\n\n  /**\n   * Retrieves recurring deposits account data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute) {\n    this.route.parent.data.subscribe((data: { recurringDepositsAccountData: any }) => {\n      this.interestRateChartData = data.recurringDepositsAccountData.accountChart.chartSlabs;\n    });\n  }\n\n}\n","<div class=\"tab-container mat-typography\">\n\n  <div class=\"mat-elevation-z1 m-b-25\">\n\n    <table mat-table [dataSource]=\"dataSource\">\n\n      <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef> ID </th>\n        <td mat-cell *matCellDef=\"let transaction\" [ngClass]=\"{'strike': transaction.reversed}\"> {{ transaction.id }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"transactionDate\">\n        <th mat-header-cell *matHeaderCellDef> Transaction Date </th>\n        <td mat-cell *matCellDef=\"let transaction\" [ngClass]=\"{'strike': transaction.reversed}\"> {{ transaction.date  | dateFormat }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"transactionType\">\n        <th mat-header-cell *matHeaderCellDef> Transaction Type </th>\n        <td mat-cell *matCellDef=\"let transaction\" [ngClass]=\"{'strike': transaction.reversed}\"> {{ transaction.transactionType.value  }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"debit\">\n        <th mat-header-cell *matHeaderCellDef> Debit </th>\n        <td mat-cell *matCellDef=\"let transaction\" [ngClass]=\"{'strike': transaction.reversed}\">\n          {{ isDebit(transaction.transactionType) ? transaction.amount : 'N/A'}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"credit\">\n        <th mat-header-cell *matHeaderCellDef> Credit </th>\n        <td mat-cell *matCellDef=\"let transaction\" [ngClass]=\"{'strike': transaction.reversed}\">\n          {{ !isDebit(transaction.transactionType) ? transaction.amount : 'N/A' }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"balance\">\n        <th mat-header-cell *matHeaderCellDef> Balance </th>\n        <td mat-cell *matCellDef=\"let transaction\" [ngClass]=\"{'strike': transaction.reversed}\"> {{ transaction.runningBalance }} </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" class=\"select-row\" (click)=\"showTransactions(row)\"></tr>\n\n    </table>\n\n  </div>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/**\n * Transactions Tab Component.\n */\n@Component({\n  selector: 'mifosx-transactions-tab',\n  templateUrl: './transactions-tab.component.html',\n  styleUrls: ['./transactions-tab.component.scss']\n})\nexport class TransactionsTabComponent implements OnInit {\n\n  /** Recurring Deposits Account Status */\n  status: any;\n  /** Transactions Data */\n  transactionsData: any;\n  /** Columns to be displayed in transactions table. */\n  displayedColumns: string[] = ['id', 'transactionDate', 'transactionType', 'debit', 'credit', 'balance'];\n  /** Data source for transactions table. */\n  dataSource: MatTableDataSource<any>;\n\n  /**\n   * Retrieves recurring deposits account data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute,\n              private router: Router) {\n    this.route.parent.data.subscribe((data: { recurringDepositsAccountData: any }) => {\n      this.transactionsData = data.recurringDepositsAccountData.transactions;\n      this.status = data.recurringDepositsAccountData.status.value;\n    });\n  }\n\n  ngOnInit() {\n    this.dataSource = new MatTableDataSource(this.transactionsData);\n  }\n\n  /**\n   * Checks if transaction is debit.\n   * @param {any} transactionType Transaction Type\n   */\n  isDebit(transactionType: any) {\n    return transactionType.withdrawal === true || transactionType.feeDeduction === true\n      || transactionType.overdraftInterest === true || transactionType.withholdTax === true;\n  }\n\n  /**\n   * Show Transactions Details\n   * @param transactionsData Transactions Data\n   */\n  showTransactions(transactionsData: any) {\n    if (transactionsData.transfer) {\n      this.router.navigate([`account-transfers/account-transfers/${transactionsData.transfer.id}`], { relativeTo: this.route });\n    } else {\n      this.router.navigate([transactionsData.id], { relativeTo: this.route });\n    }\n  }\n\n}\n","<div class=\"tab-container mat-typography\">\n\n  <div class=\"m-b-10\">\n    <h3>All Standing Instructions</h3>\n  </div>\n\n  <div class=\"mat-elevation-z1 m-b-25\">\n\n    <table mat-table #instructionsTable [dataSource]=\"dataSource\">\n\n      <ng-container matColumnDef=\"client\">\n        <th mat-header-cell *matHeaderCellDef> Client </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.fromClient.displayName}}-{{instruction.fromClient.id}}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"fromAccount\">\n        <th mat-header-cell *matHeaderCellDef> From Account </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.fromAccount.accountNo}}\n          ({{instruction.fromAccountType.value}})</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"beneficiary\">\n        <th mat-header-cell *matHeaderCellDef> Beneficiary </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.toClient.displayName}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"toAccount\">\n        <th mat-header-cell *matHeaderCellDef> To Account </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.toAccount.accountNo}}\n          ({{instruction.toAccountType.value}})</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"amount\">\n        <th mat-header-cell *matHeaderCellDef> Amount </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.instructionType.value}}/{{instruction.amount}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"validity\">\n        <th mat-header-cell *matHeaderCellDef> Validity </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.validFrom  | dateFormat}} to {{instruction.validTill  | dateFormat}}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef> Actions </th>\n        <td mat-cell *matCellDef=\"let instruction\">\n          <span *ngIf=\"instruction.status.value!=='Deleted'\">\n            <button class=\"account-action-button\" mat-raised-button color=\"primary\"\n              matTooltip=\"Edit Standing Instruction\" *mifosxHasPermission=\"'UPDATE_STANDINGINSTRUCTION'\"\n              [routerLink]=\"['../', 'standing-instructions', instruction.id, 'edit']\">\n              <i class=\"fa fa-edit\"></i>\n            </button>\n          </span>\n          <span *ngIf=\"instruction.status.value!=='Deleted'\">\n            <button class=\"account-action-button\" mat-raised-button color=\"warn\"\n              matTooltip=\"Delete Standing Instruction\" *mifosxHasPermission=\"'DELETE_STANDINGINSTRUCTION'\" (click)=\"deleteStandingInstruction(instruction.id)\">\n              <i class=\"fa fa-times\"></i>\n            </button>\n          </span>\n          <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"View Standing Instruction\"\n            *mifosxHasPermission=\"'READ_STANDINGINSTRUCTION'\" [routerLink]=\"['../', 'standing-instructions', instruction.id, 'view']\">\n            <i class=\"fa fa-eye\"></i>\n          </button>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n    </table>\n\n  </div>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatTableDataSource, MatTable } from '@angular/material/table';\nimport { ActivatedRoute } from '@angular/router';\n\n/** Custom Services */\nimport { RecurringDepositsService } from 'app/deposits/recurring-deposits/recurring-deposits.service';\nimport { AccountTransfersService } from 'app/account-transfers/account-transfers.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Dialog Components */\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\n\n/**\n * Recurring Deposits Standing Instructions Tab\n */\n@Component({\n  selector: 'mifosx-standing-instructions-tab',\n  templateUrl: './standing-instructions-tab.component.html',\n  styleUrls: ['./standing-instructions-tab.component.scss']\n})\nexport class StandingInstructionsTabComponent implements OnInit {\n\n  /** Recurring Deposits Data */\n  recurringDepositsData: any;\n  /** Instructions Data */\n  instructionsData: any[];\n  /** Data source for instructions table. */\n  dataSource = new MatTableDataSource();\n  /** Columns to be displayed in instructions table. */\n  displayedColumns: string[] = ['client', 'fromAccount', 'beneficiary', 'toAccount', 'amount', 'validity', 'actions'];\n\n  /** Instruction Table Reference */\n  @ViewChild('instructionsTable', { static: true }) instructionTableRef: MatTable<Element>;\n\n  /**\n   * Retrieves Recurring Deposits Account Data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute,\n    private recurringDepositsService: RecurringDepositsService,\n    private dialog: MatDialog,\n    private accountTransfersService: AccountTransfersService,\n    private settingsService: SettingsService, ) {\n    this.route.parent.data.subscribe((data: { recurringDepositsAccountData: any }) => {\n      this.recurringDepositsData = data.recurringDepositsAccountData;\n    });\n  }\n\n  ngOnInit() {\n    this.getStandingInstructions();\n  }\n\n  /**\n   * Retrieves standing instructions and initializes instructions table.\n   */\n  getStandingInstructions() {\n    const clientId = this.recurringDepositsData.clientId;\n    const clientName = this.recurringDepositsData.clientName;\n    const accountId = this.recurringDepositsData.id;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    this.recurringDepositsService.getStandingInstructions(clientId, clientName, accountId, locale, dateFormat).subscribe((response: any) => {\n      this.instructionsData = response.pageItems;\n      this.dataSource.data = this.instructionsData;\n      this.instructionTableRef.renderRows();\n    });\n  }\n\n  deleteStandingInstruction(instructionId: any) {\n    const deleteStandingInstructionDialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `standing instruction id: ${instructionId}` }\n    });\n    deleteStandingInstructionDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        this.accountTransfersService.deleteStandingInstrucions(instructionId)\n          .subscribe(() => { });\n      }\n    });\n  }\n\n}\n","<div class=\"tab-container mat-typography\">\n\n  <div fxLayout=\"row\" fxLayoutAlign=\"start\">\n    <div class=\"m-b-10\">\n      <h3>All Charges</h3>\n    </div>\n  </div>\n\n  <div class=\"mat-elevation-z1 m-b-25\">\n\n    <table mat-table #chargesTable [dataSource]=\"dataSource\">\n\n      <ng-container matColumnDef=\"name\">\n        <th mat-header-cell *matHeaderCellDef> Name </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{ charge.name }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"feeOrPenalty\">\n        <th mat-header-cell *matHeaderCellDef> Fee/Penalty </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{ charge.penalty === true ? 'Penalty' : 'Fee' }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"paymentDueAt\">\n        <th mat-header-cell *matHeaderCellDef> Payment Due At </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{ charge.chargeTimeType.value }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"dueAsOf\">\n        <th mat-header-cell *matHeaderCellDef> Due As Of </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{ charge.dueDate  | dateFormat }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"repeatsOn\">\n        <th mat-header-cell *matHeaderCellDef> Repeats On </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{charge.feeOnMonthDay ? ([2000].concat(charge.feeOnMonthDay)  | dateFormat: 'dd MMMM') : 'Unassigned'}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"calculationType\">\n        <th mat-header-cell *matHeaderCellDef> Calculation Type </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{charge.chargeCalculationType.value}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"due\">\n        <th mat-header-cell *matHeaderCellDef> Due </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{charge.currency.displaySymbol}}&nbsp;{{charge.amount}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"paid\">\n        <th mat-header-cell *matHeaderCellDef> Paid </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{charge.currency.displaySymbol}}&nbsp;{{charge.amountPaid}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"waived\">\n        <th mat-header-cell *matHeaderCellDef> Waived </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{charge.currency.displaySymbol}}&nbsp;{{charge.amountWaived}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"outstanding\">\n        <th mat-header-cell *matHeaderCellDef> Outstanding </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{charge.currency.displaySymbol}}&nbsp;{{charge.amountOutstanding}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef> Actions </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          <span *ngIf=\"recurringDepositsAccountData.status.value === 'Submitted and pending approval'\">\n            <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"Edit Charge\"\n            *mifosxHasPermission=\"'UPDATE_SAVINGSACCOUNTCHARGE'\" (click)=\"routeEdit($event); editCharge(charge)\">\n              <i class=\"fa fa-pencil\"></i>\n            </button>\n            <button class=\"account-action-button\" mat-raised-button color=\"warn\" matTooltip=\"Delete Charge\"\n            *mifosxHasPermission=\"'DELETE_SAVINGSACCOUNTCHARGE'\" (click)=\"routeEdit($event); deleteCharge(charge.id)\">\n              <i class=\"fa fa-trash\"></i>\n            </button>\n          </span>\n          <span *ngIf=\"recurringDepositsAccountData.status.value !== 'Submitted and pending approval' && charge.amountOutstanding !== 0\">\n            <span *ngIf=\"charge.chargeTimeType.value == 'Monthly Fee' || charge.chargeTimeType.value == 'Annual Fee'|| charge.chargeTimeType.value == 'Specified due date'\"> \n              <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"Pay Charge\"\n              *mifosxHasPermission=\"'PAY_SAVINGSACCOUNTCHARGE'\" (click)=\"routeEdit($event); payCharge(charge.id)\">\n                <i class=\"fa fa-dollar\"></i>\n              </button>\n              <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"Waive Charge\"\n              *mifosxHasPermission=\"'WAIVE_SAVINGSACCOUNTCHARGE'\" (click)=\"routeEdit($event); waiveCharge(charge.id)\">\n                <i class=\"fa fa-flag\"></i>\n              </button>\n            </span>\n          </span>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n    </table>\n\n  </div>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatTableDataSource, MatTable } from '@angular/material/table';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Custom Dialogs */\nimport { FormDialogComponent } from 'app/shared/form-dialog/form-dialog.component';\nimport { RecurringDepositConfirmationDialogComponent } from '../custom-dialogs/recurring-deposit-confirmation-dialog/recurring-deposit-confirmation-dialog.component';\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\n\n/** Custom Models */\nimport { FormfieldBase } from 'app/shared/form-dialog/formfield/model/formfield-base';\nimport { InputBase } from 'app/shared/form-dialog/formfield/model/input-base';\nimport { DatepickerBase } from 'app/shared/form-dialog/formfield/model/datepicker-base';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Charges Tab Component\n */\n@Component({\n  selector: 'mifosx-charges-tab',\n  templateUrl: './charges-tab.component.html',\n  styleUrls: ['./charges-tab.component.scss']\n})\nexport class ChargesTabComponent implements OnInit {\n\n  /** Recurring Deposits Account Data */\n  recurringDepositsAccountData: any;\n  /** Charges Data */\n  chargesData: any[];\n  /** Data source for charges table. */\n  dataSource: MatTableDataSource<any>;\n  /** Toggles Charges Table */\n  showInactiveCharges = false;\n  /** Columns to be displayed in charges table. */\n  displayedColumns: string[] = [\n    'name',\n    'feeOrPenalty',\n    'paymentDueAt',\n    'dueAsOf',\n    'repeatsOn',\n    'calculationType',\n    'due',\n    'paid',\n    'waived',\n    'outstanding',\n    'actions'\n  ];\n\n  /** Charges Table Reference */\n  @ViewChild('chargesTable', { static: true }) chargesTableRef: MatTable<Element>;\n\n  /**\n   * Retrieves Recurring Deposits Account Data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute,\n              private savingsService: SavingsService,\n              private dateUtils: Dates,\n              private router: Router,\n              public dialog: MatDialog,\n              private settingsService: SettingsService, ) {\n      this.route.parent.data.subscribe((data: { recurringDepositsAccountData: any }) => {\n      this.recurringDepositsAccountData = data.recurringDepositsAccountData;\n      this.chargesData = this.recurringDepositsAccountData.charges;\n    });\n  }\n\n  ngOnInit() {\n    const activeCharges = this.chargesData ? this.chargesData.filter(charge => charge.isActive) : [];\n    this.dataSource = new MatTableDataSource(activeCharges);\n  }\n\n  /**\n   * Pays the charge.\n   * @param {any} chargeId Charge Id\n   */\n  payCharge(chargeId: any) {\n    const formfields: FormfieldBase[] = [\n      new InputBase({\n        controlName: 'amount',\n        label: 'Amount',\n        value: '',\n        type: 'number',\n        required: true\n      }),\n      new DatepickerBase({\n        controlName: 'dueDate',\n        label: 'Payment Date',\n        value: '',\n        type: 'date',\n        required: true\n      })\n    ];\n    const data = {\n      title: `Pay Charge ${chargeId}`,\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const payChargeDialogRef = this.dialog.open(FormDialogComponent, { data });\n    payChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const locale = this.settingsService.language.code;\n        const dateFormat = this.settingsService.dateFormat;\n        const dataObject = {\n          ...response.data.value,\n          dueDate: this.dateUtils.formatDate(response.data.value.dueDate, dateFormat),\n          dateFormat,\n          locale\n        };\n        this.savingsService.executeSavingsAccountChargesCommand(this.recurringDepositsAccountData.id, 'paycharge', dataObject, chargeId)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Waive's the charge\n   * @param {any} chargeId Charge Id\n   */\n  waiveCharge(chargeId: any) {\n    const waiveChargeDialogRef = this.dialog.open(RecurringDepositConfirmationDialogComponent, { data: { heading: 'Waive Charge', dialogContext: `Are you sure you want to waive charge with id: ${chargeId}?` } });\n    waiveChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.savingsService.executeSavingsAccountChargesCommand(this.recurringDepositsAccountData.id, 'waive', {}, chargeId)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Edits the charge\n   * @param {any} charge Charge\n   */\n  editCharge(charge: any) {\n    const formfields: FormfieldBase[] = [\n      new InputBase({\n        controlName: 'amount',\n        label: 'Amount',\n        value: charge.amount || charge.amountOrPercentage,\n        type: 'number',\n        required: true\n      })\n    ];\n    const data = {\n      title: `Edit Charge ${charge.id}`,\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editChargeDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const locale = 'en';\n        const dateFormat = 'dd MMMM yyyy';\n        const dataObject = {\n          ...response.data.value,\n          dateFormat,\n          locale\n        };\n        this.savingsService.editSavingsAccountCharge(this.recurringDepositsAccountData.id, dataObject, charge.id)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Deletes the charge\n   * @param {any} chargeId Charge Id\n   */\n  deleteCharge(chargeId: any) {\n    const deleteChargeDialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `charge id:${chargeId}` }\n    });\n    deleteChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        this.savingsService.deleteSavingsAccountCharge(this.recurringDepositsAccountData.id, chargeId)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Stops the propagation to view charge page.\n   * @param $event Mouse Event\n   */\n  routeEdit($event: MouseEvent) {\n    $event.stopPropagation();\n  }\n\n  /**\n   * Refetches data for the component\n   * TODO: Replace by a custom reload component instead of hard-coded back-routing.\n   */\n  private reload() {\n    const clientId = this.recurringDepositsAccountData.clientId;\n    const url: string = this.router.url;\n    this.router.navigateByUrl(`/clients/${clientId}/recurringdeposits`, { skipLocationChange: true })\n      .then(() => this.router.navigate([url]));\n  }\n\n}\n","/** Angular Imports */\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n/**\n * Savings Datatable Tabs Component\n */\n@Component({\n  selector: 'mifosx-datatable-tabs',\n  templateUrl: './datatable-tabs.component.html',\n  styleUrls: ['./datatable-tabs.component.scss']\n})\nexport class DatatableTabsComponent {\n  entityId: string;\n  /** Savings Datatable */\n  entityDatatable: any;\n  /** Multi Row Datatable Flag */\n  multiRowDatatableFlag: boolean;\n\n  /**\n   * Fetches Savings and datatables data from `resolve`\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute) {\n    this.entityId = this.route.parent.parent.snapshot.paramMap.get('recurringDepositAccountId');\n\n    this.route.data.subscribe((data: { savingsDatatable: any }) => {\n      this.entityDatatable = data.savingsDatatable;\n      this.multiRowDatatableFlag = this.entityDatatable.columnHeaders[0].columnName === 'id' ? true : false;\n    });\n  }\n\n}\n","<div class=\"tab-container mat-typography\">\n  <mifosx-entity-datatable-tab\n    entityType=\"Recurring Deposit\"\n    [entityId]=\"entityId\"\n    [multiRowDatatableFlag]=\"multiRowDatatableFlag\"\n    [entityDatatable]=\"entityDatatable\"\n  >\n  </mifosx-entity-datatable-tab>\n</div>\n","<form [formGroup]=\"recurringDepositAccountDetailsForm\">\n\n  <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Product Name</mat-label>\n      <mat-select formControlName=\"productId\" required>\n        <mat-option *ngFor=\"let product of productData\" [value]=\"product.id\">\n          {{ product.name }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Product Name is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\" (click)=\"submittedOnDatePicker.open()\">\n      <mat-label>Submitted On</mat-label>\n      <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"submittedOnDatePicker\"\n        formControlName=\"submittedOnDate\" required>\n      <mat-datepicker-toggle matSuffix [for]=\"submittedOnDatePicker\"></mat-datepicker-toggle>\n      <mat-datepicker #submittedOnDatePicker></mat-datepicker>\n      <mat-error>\n        Submission Date is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Field Officer</mat-label>\n      <mat-select formControlName=\"fieldOfficerId\">\n        <mat-option *ngFor=\"let officer of fieldOfficerData\" [value]=\"officer.id\">\n          {{ officer.displayName }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n  </div>\n\n  <div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n    <button mat-raised-button matStepperPrevious disabled>\n      <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n      Previous\n    </button>\n    <button mat-raised-button matStepperNext>\n      Next&nbsp;&nbsp;\n      <fa-icon icon=\"arrow-right\"></fa-icon>\n    </button>\n  </div>\n\n</form>\n","/** Angular Imports */\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Custom Services */\nimport { RecurringDepositsService } from '../../recurring-deposits.service';\n\n/**\n * Recurring Deposits Account Details Step\n */\n@Component({\n  selector: 'mifosx-recurring-deposits-account-details-step',\n  templateUrl: './recurring-deposits-account-details-step.component.html',\n  styleUrls: ['./recurring-deposits-account-details-step.component.scss']\n})\nexport class RecurringDepositsAccountDetailsStepComponent implements OnInit {\n\n  /** Recurring Deposits Account Template */\n  @Input() recurringDepositsAccountTemplate: any;\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Product Data */\n  productData: any;\n  /** Field Officer Data */\n  fieldOfficerData: any;\n  /** For edit recurring deposits form */\n  isFieldOfficerPatched = false;\n  /** Recurring Deposits Account Details Form */\n  recurringDepositAccountDetailsForm: FormGroup;\n\n  /** Recurring Deposits Account Template with product data  */\n  @Output() recurringDepositsAccountProductTemplate = new EventEmitter();\n\n  /**\n   * Sets recurring deposits account details form.\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {RecurringDepositsService} recurringDepositsService Recurring Deposits Service.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private recurringDepositsService: RecurringDepositsService,\n    private settingsService: SettingsService) {\n    this.createRecurringDepositsAccountDetailsForm();\n  }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.buildDependencies();\n    if (this.recurringDepositsAccountTemplate) {\n      this.productData = this.recurringDepositsAccountTemplate.productOptions;\n      if (this.recurringDepositsAccountTemplate.depositProductId) {\n        this.recurringDepositAccountDetailsForm.patchValue({\n          'productId': this.recurringDepositsAccountTemplate.depositProductId,\n          'submittedOnDate': this.recurringDepositsAccountTemplate.timeline.submittedOnDate && new Date(this.recurringDepositsAccountTemplate.timeline.submittedOnDate),\n        });\n      }\n    }\n  }\n\n  /**\n   * Creates recurring deposits account details form.\n   */\n  createRecurringDepositsAccountDetailsForm() {\n    this.recurringDepositAccountDetailsForm = this.formBuilder.group({\n      'productId': ['', Validators.required],\n      'submittedOnDate': ['', Validators.required],\n      'fieldOfficerId': ['']\n    });\n  }\n\n  /**\n   * Fetches recurring deposits account product template on productId value changes\n   */\n  buildDependencies() {\n    const clientId = this.recurringDepositsAccountTemplate.clientId;\n    this.recurringDepositAccountDetailsForm.get('productId').valueChanges.subscribe((productId: string) => {\n      this.recurringDepositsService.getRecurringDepositsAccountTemplate(clientId, productId).subscribe((response: any) => {\n        this.recurringDepositsAccountProductTemplate.emit(response);\n        this.fieldOfficerData = response.fieldOfficerOptions;\n        if (!this.isFieldOfficerPatched && this.recurringDepositsAccountTemplate.fieldOfficerId) {\n          this.recurringDepositAccountDetailsForm.get('fieldOfficerId').patchValue(this.recurringDepositsAccountTemplate.fieldOfficerId);\n          this.isFieldOfficerPatched = true;\n        } else {\n          this.recurringDepositAccountDetailsForm.get('fieldOfficerId').patchValue('');\n        }\n      });\n    });\n  }\n\n  /**\n   * Returns recurring deposits account details form value.\n   */\n  get recurringDepositAccountDetails() {\n    return this.recurringDepositAccountDetailsForm.value;\n  }\n}\n","<form [formGroup]=\"recurringDepositAccountTermsForm\">\n\n  <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Interest Compounding Period</mat-label>\n      <mat-select formControlName=\"interestCompoundingPeriodType\" required>\n        <mat-option *ngFor=\"let interestCompoundingPeriodType of interestCompoundingPeriodTypeData\"\n          [value]=\"interestCompoundingPeriodType.id\">\n          {{ interestCompoundingPeriodType.value }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Interest Compounding Period is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Interest Posting Period</mat-label>\n      <mat-select formControlName=\"interestPostingPeriodType\" required>\n        <mat-option *ngFor=\"let interestPostingPeriodType of interestPostingPeriodTypeData\"\n          [value]=\"interestPostingPeriodType.id\">\n          {{ interestPostingPeriodType.value }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Interest Posting Period is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Interest Calculated using</mat-label>\n      <mat-select formControlName=\"interestCalculationType\" required>\n        <mat-option *ngFor=\"let interestCalculationType of interestCalculationTypeData\"\n          [value]=\"interestCalculationType.id\">\n          {{ interestCalculationType.value }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Interest Calculated using is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Days in Year</mat-label>\n      <mat-select formControlName=\"interestCalculationDaysInYearType\" required>\n        <mat-option *ngFor=\"let interestCalculationDaysInYearType of interestCalculationDaysInYearTypeData\"\n          [value]=\"interestCalculationDaysInYearType.id\">\n          {{ interestCalculationDaysInYearType.value }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Days in Year is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n  </div>\n\n  <div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n    <button mat-raised-button matStepperPrevious>\n      <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n      Previous\n    </button>\n    <button mat-raised-button matStepperNext>\n      Next&nbsp;&nbsp;\n      <fa-icon icon=\"arrow-right\"></fa-icon>\n    </button>\n  </div>\n\n</form>\n","/** Angular Imports */\nimport { Component, OnInit, Input, OnChanges } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Recurring Deposits Terms Step\n */\n@Component({\n  selector: 'mifosx-recurring-deposits-account-terms-step',\n  templateUrl: './recurring-deposits-account-terms-step.component.html',\n  styleUrls: ['./recurring-deposits-account-terms-step.component.scss']\n})\nexport class RecurringDepositsAccountTermsStepComponent implements OnInit, OnChanges {\n\n  @Input() recurringDepositsAccountTemplate: any;\n  @Input() recurringDepositsAccountProductTemplate: any;\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Recurring Deposits Account Terms Form */\n  recurringDepositAccountTermsForm: FormGroup;\n  /** Interest Compounding Period Type Data */\n  interestCompoundingPeriodTypeData: any;\n  /** Interest Posting Period Type Data */\n  interestPostingPeriodTypeData: any;\n  /** Interest Calculation Type Data */\n  interestCalculationTypeData: any;\n  /** Interest Calculation Days in Year Data */\n  interestCalculationDaysInYearTypeData: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private settingsService: SettingsService) {\n    this.createRecurringDepositsAccountTermsForm();\n  }\n\n  ngOnChanges() {\n    if (this.recurringDepositsAccountProductTemplate) {\n      this.setOptions();\n    }\n  }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    if (this.recurringDepositsAccountTemplate.interestCompoundingPeriodType) {\n      this.recurringDepositAccountTermsForm.patchValue({\n        'interestCompoundingPeriodType': this.recurringDepositsAccountTemplate.interestCompoundingPeriodType.id,\n        'interestPostingPeriodType': this.recurringDepositsAccountTemplate.interestPostingPeriodType.id,\n        'interestCalculationType': this.recurringDepositsAccountTemplate.interestCalculationType.id,\n        'interestCalculationDaysInYearType': this.recurringDepositsAccountTemplate.interestCalculationDaysInYearType.id,\n      });\n    }\n  }\n\n  /**\n   * Creates recurring deposits account terms form.\n   */\n  createRecurringDepositsAccountTermsForm() {\n    this.recurringDepositAccountTermsForm = this.formBuilder.group({\n      'interestCompoundingPeriodType': ['', Validators.required],\n      'interestPostingPeriodType': ['', Validators.required],\n      'interestCalculationType': ['', Validators.required],\n      'interestCalculationDaysInYearType': ['', Validators.required],\n    });\n  }\n\n  /**\n   * Sets all select dropdown options.\n   */\n  setOptions() {\n    this.interestCompoundingPeriodTypeData = this.recurringDepositsAccountProductTemplate.interestCompoundingPeriodTypeOptions;\n    this.interestPostingPeriodTypeData = this.recurringDepositsAccountProductTemplate.interestPostingPeriodTypeOptions;\n    this.interestCalculationTypeData = this.recurringDepositsAccountProductTemplate.interestCalculationTypeOptions;\n    this.interestCalculationDaysInYearTypeData = this.recurringDepositsAccountProductTemplate.interestCalculationDaysInYearTypeOptions;\n  }\n\n  /**\n   * Returns recurring deposits account terms form value.\n   */\n  get recurringDepositAccountTerms() {\n    return this.recurringDepositAccountTermsForm.value;\n  }\n\n}\n","/** Angular Imports */\nimport { Component, OnInit, Input, OnChanges } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\n/**\n * Recurring Deposit Account Currency Step\n */\n@Component({\n  selector: 'mifosx-recurring-deposits-account-currency-step',\n  templateUrl: './recurring-deposits-account-currency-step.component.html',\n  styleUrls: ['./recurring-deposits-account-currency-step.component.scss']\n})\nexport class RecurringDepositsAccountCurrencyStepComponent implements OnInit, OnChanges {\n\n\n  @Input() recurringDepositsAccountTemplate: any;\n  @Input() recurringDepositsAccountProductTemplate: any;\n\n  /** Recurring Deposit Account Currency Form */\n  recurringDepositAccountCurrencyForm: FormGroup;\n  /** Currency Data */\n  currencyData: any;\n\n  constructor(private formBuilder: FormBuilder) {\n    this.createRecurringDepositAccountCurrencyForm();\n  }\n\n  ngOnInit() {\n  }\n\n  ngOnChanges() {\n    if (this.recurringDepositsAccountProductTemplate) {\n      this.recurringDepositAccountCurrencyForm.patchValue({\n        'currencyCode': this.recurringDepositsAccountProductTemplate.currency.code,\n        'decimalPlaces': this.recurringDepositsAccountProductTemplate.currency.decimalPlaces\n      });\n    }\n  }\n\n  createRecurringDepositAccountCurrencyForm() {\n    this.recurringDepositAccountCurrencyForm = this.formBuilder.group({\n      'currencyCode': [{ value: '', disabled: true }],\n      'decimalPlaces': [{ value: '', disabled: true }]\n    });\n  }\n\n  /**\n   * Returns Recurring Deposits Account Currency Form\n   */\n  get recurringDepositAccountCurrency() {\n    return this.recurringDepositAccountCurrencyForm.value;\n  }\n\n}\n","<form [formGroup]=\"recurringDepositAccountCurrencyForm\">\n\n  <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Currency</mat-label>\n      <input type=\"text\" matInput formControlName=\"currencyCode\" required>\n\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Decimal Places</mat-label>\n      <input type=\"number\" matInput formControlName=\"decimalPlaces\" required>\n    </mat-form-field>\n\n  </div>\n\n  <div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n    <button mat-raised-button matStepperPrevious>\n      <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n      Previous\n    </button>\n    <button mat-raised-button matStepperNext>\n      Next&nbsp;&nbsp;\n      <fa-icon icon=\"arrow-right\"></fa-icon>\n    </button>\n  </div>\n\n</form>\n","<form [formGroup]=\"recurringDepositAccountSettingsForm\">\n\n  <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n    <mat-checkbox fxFlex=\"48%\" labelPosition=\"before\" formControlName=\"isMandatoryDeposit\" class=\"margin-v\">\n      Is Mandatory Deposit?\n    </mat-checkbox>\n\n    <mat-checkbox fxFlex=\"48%\" labelPosition=\"before\" formControlName=\"adjustAdvanceTowardsFuturePayments\"\n      class=\"margin-v\">\n      Adjust advance payments toward future installments?\n    </mat-checkbox>\n\n    <mat-checkbox fxFlex=\"48%\" labelPosition=\"before\" formControlName=\"allowWithdrawal\" class=\"margin-v\">\n      Allow Withdrawals?\n    </mat-checkbox>\n\n    <h4 fxFlex=\"98%\" class=\"mat-h4\">Lock-in Period</h4>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Frequency</mat-label>\n      <input type=\"number\" matInput formControlName=\"lockinPeriodFrequency\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Type</mat-label>\n      <mat-select formControlName=\"lockinPeriodFrequencyType\">\n        <mat-option *ngFor=\"let lockinPeriodFrequencyType of lockinPeriodFrequencyTypeData\"\n          [value]=\"lockinPeriodFrequencyType.id\">\n          {{ lockinPeriodFrequencyType.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <h4 fxFlex=\"98%\" class=\"mat-h4\">Recurring Deposit Details</h4>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Recurring Deposit Amount</mat-label>\n      <input type=\"number\" matInput formControlName=\"mandatoryRecommendedDepositAmount\" required>\n      <mat-error>\n        Recurring Deposit Amount is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <h4 fxFlex=\"98%\" class=\"mat-h4\">Deposit Period</h4>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Deposit Period</mat-label>\n      <input type=\"number\" matInput formControlName=\"depositPeriod\" required>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Type</mat-label>\n      <mat-select formControlName=\"depositPeriodFrequencyId\" required>\n        <mat-option *ngFor=\"let periodFrequencyType of periodFrequencyTypeData\" [value]=\"periodFrequencyType.id\">\n          {{ periodFrequencyType.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-checkbox fxFlex=\"48%\" labelPosition=\"before\" formControlName=\"isCalendarInherited\" class=\"margin-v\">\n      Deposit Frequency Same as Group/Center meeting\n    </mat-checkbox>\n\n    <ng-container *ngIf=\"!recurringDepositAccountSettingsForm.value.isCalendarInherited\">\n      <mat-form-field fxFlex=\"48%\" (click)=\"expectedFirstDepositOnDatePicker.open()\">\n        <mat-label>Deposit Start Date</mat-label>\n        <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"expectedFirstDepositOnDatePicker\"\n          formControlName=\"expectedFirstDepositOnDate\" required>\n        <mat-datepicker-toggle matSuffix [for]=\"expectedFirstDepositOnDatePicker\"></mat-datepicker-toggle>\n        <mat-datepicker #expectedFirstDepositOnDatePicker></mat-datepicker>\n      </mat-form-field>\n\n      <h4 fxFlex=\"98%\" class=\"mat-h4\">Deposit Frequency</h4>\n\n      <mat-form-field fxFlex=\"48%\">\n        <mat-label>Deposit Frequency</mat-label>\n        <input type=\"number\" matInput formControlName=\"recurringFrequency\" required>\n        <mat-error>\n          Deposit Frequency is <strong>required</strong>\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field fxFlex=\"48%\">\n        <mat-label>Type</mat-label>\n        <mat-select formControlName=\"recurringFrequencyType\" required>\n          <mat-option *ngFor=\"let periodFrequencyType of periodFrequencyTypeData\" [value]=\"periodFrequencyType.id\">\n            {{ periodFrequencyType.value }}\n          </mat-option>\n        </mat-select>\n        <mat-error>\n          Deposit Frequency Type is <strong>required</strong>\n        </mat-error>\n      </mat-form-field>\n    </ng-container>\n\n\n    <mat-divider fxFlex=\"98%\"></mat-divider>\n\n    <h4 fxFlex=\"98%\" class=\"mat-h4\">Minimum Deposit Term</h4>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Frequency</mat-label>\n      <input type=\"number\" matInput formControlName=\"minDepositTerm\" required>\n      <mat-error>\n        Minimum Deposit Term Frequency is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Frequency Type</mat-label>\n      <mat-select formControlName=\"minDepositTermTypeId\" required>\n        <mat-option *ngFor=\"let periodFrequencyType of periodFrequencyTypeData\" [value]=\"periodFrequencyType.id\">\n          {{ periodFrequencyType.value }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Minimum Deposit Term Frequency Type is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <h4 fxFlex=\"98%\" class=\"mat-h4\">And thereafter, in Multiples of</h4>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Frequency</mat-label>\n      <input type=\"number\" matInput formControlName=\"inMultiplesOfDepositTerm\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Type</mat-label>\n      <mat-select formControlName=\"inMultiplesOfDepositTermTypeId\">\n        <mat-option *ngFor=\"let periodFrequencyType of periodFrequencyTypeData\" [value]=\"periodFrequencyType.id\">\n          {{ periodFrequencyType.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <h4 fxFlex=\"98%\" class=\"mat-h4\">Maximum Deposit Term</h4>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Frequency</mat-label>\n      <input type=\"number\" matInput formControlName=\"maxDepositTerm\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Type</mat-label>\n      <mat-select formControlName=\"maxDepositTermTypeId\">\n        <mat-option *ngFor=\"let periodFrequencyType of periodFrequencyTypeData\" [value]=\"periodFrequencyType.id\">\n          {{ periodFrequencyType.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-divider fxFlex=\"98%\"></mat-divider>\n\n    <h4 fxFlex=\"98%\" class=\"mat-h4\">For Pre-mature closure</h4>\n\n    <mat-checkbox fxFlex=\"73%\" labelPosition=\"before\" formControlName=\"preClosurePenalApplicable\" class=\"margin-v\">\n      Apply Penal Interest (less)\n    </mat-checkbox>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Penal Interest (%)</mat-label>\n      <input type=\"number\" matInput formControlName=\"preClosurePenalInterest\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Period</mat-label>\n      <mat-select formControlName=\"preClosurePenalInterestOnTypeId\">\n        <mat-option *ngFor=\"let preClosurePenalInterestOnType of preClosurePenalInterestOnTypeData\"\n          [value]=\"preClosurePenalInterestOnType.id\">\n          {{ preClosurePenalInterestOnType.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <!-- <mat-divider fxFlex=\"98%\"></mat-divider> -->\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Minimum Balance For Interest Calculation</mat-label>\n      <input type=\"number\" matInput formControlName=\"minBalanceForInterestCalculation\">\n    </mat-form-field>\n\n    <ng-container *ngIf=\"taxGroup\">\n      <h4 fxFlex=\"98%\" class=\"mat-h4\">Tax Group</h4>\n\n      <mat-checkbox fxFlex=\"48%\" labelPosition=\"before\" formControlName=\"withHoldTax\" class=\"margin-v\">\n        Is Withhold Tax Applicable?\n      </mat-checkbox>\n\n      <mat-form-field fxFlex=\"48%\" *ngIf=\"recurringDepositAccountSettingsForm.controls.taxGroupId\">\n        <mat-label>Tax Group</mat-label>\n        <input type=\"text\" matInput formControlName=\"taxGroupId\">\n      </mat-form-field>\n    </ng-container>\n\n  </div>\n\n  <div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n    <button mat-raised-button matStepperPrevious>\n      <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n      Previous\n    </button>\n    <button mat-raised-button matStepperNext>\n      Next&nbsp;&nbsp;\n      <fa-icon icon=\"arrow-right\"></fa-icon>\n    </button>\n  </div>\n\n</form>\n","/** Angular Imports */\nimport { Component, OnInit, Input, OnChanges } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Custom Services */\n\n/**\n * Recurring Deposits Account Settings Step\n */\n@Component({\n  selector: 'mifosx-recurring-deposits-account-settings-step',\n  templateUrl: './recurring-deposits-account-settings-step.component.html',\n  styleUrls: ['./recurring-deposits-account-settings-step.component.scss']\n})\nexport class RecurringDepositsAccountSettingsStepComponent implements OnInit, OnChanges {\n\n  @Input() recurringDepositsAccountTemplate: any;\n  @Input() recurringDepositsAccountProductTemplate: any;\n\n  /** Recurring Deposits Account Settings Form */\n  recurringDepositAccountSettingsForm: FormGroup;\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Lockin Period Frequency Type Data */\n  lockinPeriodFrequencyTypeData: any;\n  /** Period Frequency Type Data */\n  periodFrequencyTypeData: any;\n  /** Preclosure Penal Interest Type on Data */\n  preClosurePenalInterestOnTypeData: any;\n  /** Tax Group */\n  taxGroup: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private settingsService: SettingsService) {\n    this.createRecurringDepositAccountSettingsForm();\n    this.buildDependencies();\n  }\n\n  ngOnChanges() {\n    if (this.recurringDepositsAccountProductTemplate) {\n      this.recurringDepositAccountSettingsForm.patchValue({\n        'isMandatoryDeposit': this.recurringDepositsAccountProductTemplate.isMandatoryDeposit,\n        'adjustAdvanceTowardsFuturePayments': this.recurringDepositsAccountProductTemplate.adjustAdvanceTowardsFuturePayments,\n        'allowWithdrawal': this.recurringDepositsAccountProductTemplate.allowWithdrawal,\n        'lockinPeriodFrequency': this.recurringDepositsAccountProductTemplate.lockinPeriodFrequency,\n        'lockinPeriodFrequencyType': this.recurringDepositsAccountProductTemplate.lockinPeriodFrequencyType ? this.recurringDepositsAccountProductTemplate.lockinPeriodFrequencyType.id : '',\n        'minDepositTerm': this.recurringDepositsAccountProductTemplate.minDepositTerm,\n        'minDepositTermTypeId': this.recurringDepositsAccountProductTemplate.minDepositTermType ? this.recurringDepositsAccountProductTemplate.minDepositTermType.id : '',\n        'inMultiplesOfDepositTerm': this.recurringDepositsAccountProductTemplate.inMultiplesOfDepositTerm,\n        'inMultiplesOfDepositTermTypeId': this.recurringDepositsAccountProductTemplate.inMultiplesOfDepositTermType ? this.recurringDepositsAccountProductTemplate.inMultiplesOfDepositTermType.id : '',\n        'maxDepositTerm': this.recurringDepositsAccountProductTemplate.maxDepositTerm,\n        'maxDepositTermTypeId': this.recurringDepositsAccountProductTemplate.maxDepositTermType ? this.recurringDepositsAccountProductTemplate.maxDepositTermType.id : '',\n        'preClosurePenalApplicable': this.recurringDepositsAccountProductTemplate.preClosurePenalApplicable,\n        'preClosurePenalInterest': this.recurringDepositsAccountProductTemplate.preClosurePenalInterest,\n        'preClosurePenalInterestOnTypeId': this.recurringDepositsAccountProductTemplate.preClosurePenalInterestOnType ? this.recurringDepositsAccountProductTemplate.preClosurePenalInterestOnType.id : '',\n        'minBalanceForInterestCalculation': this.recurringDepositsAccountProductTemplate.minBalanceForInterestCalculation,\n      });\n      if (this.recurringDepositsAccountProductTemplate.withHoldTax) {\n        this.recurringDepositAccountSettingsForm.addControl('withHoldTax', new FormControl(false));\n        this.recurringDepositAccountSettingsForm.get('withHoldTax').valueChanges.subscribe((value: boolean) => {\n          if (value) {\n            this.recurringDepositAccountSettingsForm.addControl('taxGroupId', new FormControl({ value: '', disabled: true }));\n            this.recurringDepositAccountSettingsForm.get('taxGroupId').patchValue(this.recurringDepositsAccountProductTemplate.taxGroup && this.recurringDepositsAccountProductTemplate.taxGroup.name);\n          } else {\n            this.recurringDepositAccountSettingsForm.removeControl('taxGroupId');\n          }\n        });\n        this.recurringDepositAccountSettingsForm.get('withHoldTax').patchValue(this.recurringDepositsAccountTemplate.withHoldTax);\n      } else {\n        this.recurringDepositAccountSettingsForm.removeControl('withHoldTax');\n      }\n      this.taxGroup = this.recurringDepositsAccountProductTemplate.taxGroup;\n      this.setOptions();\n    }\n  }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    if (this.recurringDepositsAccountTemplate) {\n      this.recurringDepositAccountSettingsForm.patchValue({\n        'lockinPeriodFrequency': this.recurringDepositsAccountTemplate.lockinPeriodFrequency,\n        'lockinPeriodFrequencyType': this.recurringDepositsAccountTemplate.lockinPeriodFrequencyType && this.recurringDepositsAccountTemplate.lockinPeriodFrequencyType.id,\n        'mandatoryRecommendedDepositAmount': this.recurringDepositsAccountTemplate.mandatoryRecommendedDepositAmount,\n      });\n    }\n  }\n\n  /**\n   * Creates recurring deposits account terms form.\n   */\n  createRecurringDepositAccountSettingsForm() {\n    this.recurringDepositAccountSettingsForm = this.formBuilder.group({\n      'isMandatoryDeposit': [''],\n      'adjustAdvanceTowardsFuturePayments': [''],\n      'allowWithdrawal': [''],\n      'lockinPeriodFrequency': [''],\n      'lockinPeriodFrequencyType': [''],\n      'mandatoryRecommendedDepositAmount': ['', Validators.required],\n      'depositPeriod': ['', Validators.required],\n      'depositPeriodFrequencyId': ['', Validators.required],\n      'isCalendarInherited': [''],\n      'expectedFirstDepositOnDate': [''],\n      'recurringFrequency': ['', Validators.required],\n      'recurringFrequencyType': ['', Validators.required],\n      'minDepositTerm': [{value: '', disabled: true}],\n      'minDepositTermTypeId': [{ value: '', disabled: true }],\n      'inMultiplesOfDepositTerm': [{ value: '', disabled: true }],\n      'inMultiplesOfDepositTermTypeId': [{ value: '', disabled: true }],\n      'maxDepositTerm': [{ value: '', disabled: true }],\n      'maxDepositTermTypeId': [{ value: '', disabled: true }],\n      'preClosurePenalApplicable': [{ value: '', disabled: true }],\n      'preClosurePenalInterest': [{ value: '', disabled: true }],\n      'preClosurePenalInterestOnTypeId': [{ value: '', disabled: true }],\n      'minBalanceForInterestCalculation': [{ value: '', disabled: true }]\n    });\n  }\n\n  /**\n   * Sets all select dropdown options.\n   */\n  setOptions() {\n    this.lockinPeriodFrequencyTypeData = this.recurringDepositsAccountProductTemplate.lockinPeriodFrequencyTypeOptions;\n    this.periodFrequencyTypeData = this.recurringDepositsAccountProductTemplate.periodFrequencyTypeOptions;\n    this.preClosurePenalInterestOnTypeData = this.recurringDepositsAccountProductTemplate.preClosurePenalInterestOnTypeOptions;\n  }\n\n  /**\n   * Subscribes to value changes and sets new form controls accordingly.\n   */\n  buildDependencies() {\n    this.recurringDepositAccountSettingsForm.get('isCalendarInherited').valueChanges.subscribe((isCalendarInherited: any) => {\n      if (isCalendarInherited) {\n        this.recurringDepositAccountSettingsForm.removeControl('expectedFirstDepositOnDate');\n        this.recurringDepositAccountSettingsForm.removeControl('recurringFrequency');\n        this.recurringDepositAccountSettingsForm.removeControl('recurringFrequencyType');\n      } else {\n        this.recurringDepositAccountSettingsForm.addControl('expectedFirstDepositOnDate', new FormControl());\n        this.recurringDepositAccountSettingsForm.addControl('recurringFrequency', new FormControl(''));\n        this.recurringDepositAccountSettingsForm.addControl('recurringFrequencyType', new FormControl(''));\n      }\n    });\n  }\n\n  /**\n   * Returns recurring deposits account settings form value.\n   */\n  get recurringDepositAccountSettings() {\n    return this.recurringDepositAccountSettingsForm.value;\n  }\n\n}\n","<div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n  <mat-form-field fxFlex=\"48%\">\n    <mat-label>Charge</mat-label>\n    <mat-select #charge>\n      <mat-option *ngFor=\"let charge of chargeData | chargesFilter:chargesDataSource:currencyCode.value\"\n        [value]=\"charge\">\n        {{ charge.name }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n\n  <div fxFlex=\"48%\" fxFlexAlign=\"center\">\n    <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"addCharge(charge)\" [disabled]=\"!charge.value\">\n      <fa-icon icon=\"plus\" class=\"m-r-10\"></fa-icon>\n      Add\n    </button>\n  </div>\n\n  <table fxFlex=\"98%\" class=\"mat-elevation-z1\" mat-table [dataSource]=\"chargesDataSource\"\n    [hidden]=\"chargesDataSource.length === 0\">\n\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef> Name </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.name + ', ' + charge.currency.displaySymbol }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"chargeCalculationType\">\n      <th mat-header-cell *matHeaderCellDef> Type </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.chargeCalculationType.value }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"amount\">\n      <th mat-header-cell *matHeaderCellDef> Amount </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.amount }}\n        <button mat-icon-button color=\"primary\" (click)=\"editChargeAmount(charge)\">\n          <fa-icon icon=\"pen\"></fa-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"chargeTimeType\">\n      <th mat-header-cell *matHeaderCellDef> Collected On </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.chargeTimeType.value }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"date\">\n      <th mat-header-cell *matHeaderCellDef> Date </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        <span *ngIf=\"charge.chargeTimeType.value === 'Specified due date' || charge.chargeTimeType.value === 'Weekly Fee'\">\n          {{(charge.dueDate  | dateFormat) || 'Unassigned'}}\n        </span>\n        <span *ngIf=\"charge.chargeTimeType.value === 'Monthly Fee' || charge.chargeTimeType.value === 'Annual Fee'\">\n          {{(charge.feeOnMonthDay  | dateFormat) || 'Unassigned'}}\n        </span>\n        <span *ngIf=\"!(charge.chargeTimeType.value === 'Monthly Fee' || charge.chargeTimeType.value === 'Annual Fee'\n                || charge.chargeTimeType.value === 'Specified due date' || charge.chargeTimeType.value === 'Weekly Fee')\">\n          N/A\n        </span>\n        <button mat-icon-button color=\"primary\" *ngIf=\"charge.chargeTimeType.value === 'Weekly Fee' || charge.chargeTimeType.value === 'Annual Fee'\n                      || charge.chargeTimeType.value === 'Specified due date'\" (click)=\"editChargeDate(charge)\">\n          <fa-icon icon=\"pen\"></fa-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"repaymentsEvery\">\n      <th mat-header-cell *matHeaderCellDef> Repayments Every </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.feeInterval || 'Not Provided' }}\n        <button mat-icon-button color=\"primary\"\n          *ngIf=\"charge.chargeTimeType.value === 'Weekly Fee' || charge.chargeTimeType.value === 'Monthly Fee'\"\n          (click)=\"editChargeFeeInterval(charge)\">\n          <fa-icon icon=\"pen\"></fa-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"action\">\n      <th mat-header-cell *matHeaderCellDef> Actions </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        <button mat-icon-button color=\"warn\" (click)=\"deleteCharge(charge)\">\n          <fa-icon icon=\"trash\"></fa-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n  </table>\n\n</div>\n\n<div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n  <button mat-raised-button matStepperPrevious>\n    <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n    Previous\n  </button>\n  <button mat-raised-button matStepperNext [disabled]=\"!recurringDepositAccountFormValid\">\n    Next&nbsp;&nbsp;\n    <fa-icon icon=\"arrow-right\"></fa-icon>\n  </button>\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, Input, OnChanges } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\n\n/** Dialog Components */\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\nimport { FormDialogComponent } from 'app/shared/form-dialog/form-dialog.component';\n\n/** Custom Services */\nimport { DatepickerBase } from 'app/shared/form-dialog/formfield/model/datepicker-base';\nimport { FormfieldBase } from 'app/shared/form-dialog/formfield/model/formfield-base';\nimport { InputBase } from 'app/shared/form-dialog/formfield/model/input-base';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Recurring Deposit Account Charges Step\n */\n@Component({\n  selector: 'mifosx-recurring-deposits-account-charges-step',\n  templateUrl: './recurring-deposits-account-charges-step.component.html',\n  styleUrls: ['./recurring-deposits-account-charges-step.component.scss']\n})\nexport class RecurringDepositsAccountChargesStepComponent implements OnInit, OnChanges {\n\n  @Input() recurringDepositsAccountTemplate: any;\n  @Input() recurringDepositsAccountProductTemplate: any;\n  @Input() currencyCode: FormControl;\n  @Input() recurringDepositAccountFormValid: boolean;\n\n  /** Charges Data */\n  chargeData: any;\n  /** Charges Data Source */\n  chargesDataSource: {}[] = [];\n  /** Charges table columns */\n  displayedColumns: string[] = ['name', 'chargeCalculationType', 'amount', 'chargeTimeType', 'date', 'repaymentsEvery', 'action'];\n  /** Component is pristine if there has been no changes by user interaction */\n  pristine = true;\n  /** For Edit Recurring Deposits Account Form */\n  isChargesPatched = false;\n\n  constructor(public dialog: MatDialog,\n    private dateUtils: Dates,\n    private settingsService: SettingsService, ) {\n  }\n\n  ngOnInit() {\n    this.currencyCode.valueChanges.subscribe(() => {\n      if (!this.isChargesPatched && this.recurringDepositsAccountTemplate.charges) {\n        this.chargesDataSource = this.recurringDepositsAccountTemplate.charges.map((charge: any) => ({ ...charge, id: charge.chargeId })) || [];\n        this.isChargesPatched = true;\n      } else {\n        this.chargesDataSource = [];\n      }\n    });\n  }\n\n  ngOnChanges() {\n    if (this.recurringDepositsAccountProductTemplate) {\n      this.chargeData = this.recurringDepositsAccountProductTemplate.chargeOptions;\n    }\n  }\n\n\n  /**\n   * Add a charge\n   */\n  addCharge(charge: any) {\n    this.chargesDataSource = this.chargesDataSource.concat([charge.value]);\n    charge.value = '';\n    this.pristine = false;\n  }\n\n  /**\n   * Edits the Charge Amount\n   * @param {any} charge Charge\n   */\n  editChargeAmount(charge: any) {\n    const formfields: FormfieldBase[] = [\n      new InputBase({\n        controlName: 'amount',\n        label: 'Amount',\n        value: charge.amount,\n        type: 'number',\n        required: false\n      }),\n    ];\n    const data = {\n      title: 'Edit Charge Amount',\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editNoteDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editNoteDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const newCharge = { ...charge, amount: response.data.value.amount };\n        this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1, newCharge);\n        this.chargesDataSource = this.chargesDataSource.concat([]);\n      }\n    });\n    this.pristine = false;\n  }\n\n  /**\n   * Edits the Charge Date\n   * @param {any} charge Charge\n   */\n  editChargeDate(charge: any) {\n    const formfields: FormfieldBase[] = [\n      new DatepickerBase({\n        controlName: 'date',\n        label: 'Date',\n        value: charge.dueDate || charge.feeOnMonthDay || '',\n        type: 'datetime-local',\n        required: false\n      }),\n    ];\n    const data = {\n      title: 'Edit Charge Date',\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editNoteDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editNoteDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        let newCharge: any;\n        const dateFormat = this.settingsService.dateFormat;\n        const date = this.dateUtils.formatDate(response.data.value.date, dateFormat);\n        switch (charge.chargeTimeType.value) {\n          case 'Specified due date':\n          case 'Weekly Fee':\n            newCharge = { ...charge, dueDate: date };\n            break;\n          case 'Annual Fee':\n            newCharge = { ...charge, feeOnMonthDay: date };\n            break;\n        }\n        this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1, newCharge);\n        this.chargesDataSource = this.chargesDataSource.concat([]);\n      }\n    });\n    this.pristine = false;\n  }\n\n  /**\n   * Edits the Charge Fee Interval\n   * @param {any} charge Charge\n   */\n  editChargeFeeInterval(charge: any) {\n    const formfields: FormfieldBase[] = [\n      new InputBase({\n        controlName: 'feeInterval',\n        label: 'Fee Interval',\n        value: charge.feeInterval,\n        type: 'text',\n        required: false\n      }),\n    ];\n    const data = {\n      title: 'Edit Charge Fee Interval',\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editNoteDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editNoteDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const newCharge = { ...charge, feeInterval: response.data.value.feeInterval };\n        this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1, newCharge);\n        this.chargesDataSource = this.chargesDataSource.concat([]);\n      }\n    });\n    this.pristine = false;\n  }\n\n  /**\n   * Delete a particular charge\n   * @param charge Charge\n   */\n  deleteCharge(charge: any) {\n    const deleteChargeDialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `charge ${charge.name}` }\n    });\n    deleteChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1);\n        this.chargesDataSource = this.chargesDataSource.concat([]);\n        this.pristine = false;\n      }\n    });\n  }\n\n  /**\n   * Returns Recurring Deposits Account Charges Form\n   */\n  get recurringDepositAccountCharges() {\n    return {\n      charges: this.chargesDataSource\n    };\n  }\n\n}\n","<div fxLayout=\"column\" fxLayoutGap=\"2%\">\n\n  <div fxFlexFill *ngIf=\"recurringDepositsAccountProductTemplate?.accountChart.name\">\n    <span fxFlex=\"40%\">Name:</span>\n    <span fxFlex=\"60%\">{{ recurringDepositsAccountProductTemplate.accountChart.name }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Valid from Date:</span>\n    <span fxFlex=\"60%\">{{ recurringDepositsAccountProductTemplate?.accountChart.fromDate  | dateFormat }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"recurringDepositsAccountProductTemplate?.accountChart.endDate\">\n    <span fxFlex=\"40%\">End Date:</span>\n    <span fxFlex=\"60%\">{{ recurringDepositsAccountProductTemplate?.accountChart.endDate  | dateFormat }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"recurringDepositsAccountProductTemplate?.accountChart.description\">\n    <span fxFlex=\"40%\">Description:</span>\n    <span fxFlex=\"60%\">{{ recurringDepositsAccountProductTemplate?.accountChart.description }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Primary Grouping by Amount:</span>\n    <span\n      fxFlex=\"60%\">{{ recurringDepositsAccountProductTemplate?.accountChart.isPrimaryGroupingByAmount ? 'Yes' : 'No' }}</span>\n  </div>\n\n  <table class=\"mat-elevation-z1\" mat-table [dataSource]=\"interestRateChartData\" #chartsTable multiTemplateDataRows>\n\n    <ng-container matColumnDef=\"period\">\n      <th mat-header-cell *matHeaderCellDef> Period </th>\n      <td mat-cell *matCellDef=\"let chartSlab\">\n        {{chartSlab.fromPeriod}}-{{chartSlab.toPeriod}}&nbsp;{{chartSlab.periodType.value}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"amountRange\">\n      <th mat-header-cell *matHeaderCellDef> Amount Range </th>\n      <td mat-cell *matCellDef=\"let chartSlab\">{{chartSlab.amountRangeFrom}}-{{chartSlab.amountRangeTo}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"interest\">\n      <th mat-header-cell *matHeaderCellDef> Interest </th>\n      <td mat-cell *matCellDef=\"let chartSlab\"> {{ chartSlab.annualInterestRate }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"description\">\n      <th mat-header-cell *matHeaderCellDef> Description </th>\n      <td mat-cell *matCellDef=\"let chartSlab\"> {{ chartSlab.description }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"actions\">\n      <th mat-header-cell *matHeaderCellDef> Actions </th>\n      <td mat-cell *matCellDef=\"let chartSlab; let chartSlabIndex = dataIndex\">\n        <button mat-button color=\"primary\"\n          (click)=\"expandChartSlabIndex = expandChartSlabIndex === chartSlabIndex ? null : chartSlabIndex\">\n          <span *ngIf=\"expandChartSlabIndex !== chartSlabIndex\">\n            <fa-icon icon=\"eye\" class=\"m-r-10\"></fa-icon>\n            View Incentives\n          </span>\n          <span *ngIf=\"expandChartSlabIndex === chartSlabIndex\">\n            <fa-icon icon=\"eye-slash\" class=\"m-r-10\"></fa-icon>\n            Hide Incentives\n          </span>\n        </button>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"incentives\">\n      <td mat-cell *matCellDef=\"let chartSlab; let chartSlabIndex = dataIndex\"\n        [attr.colspan]=\"chartSlabsDisplayedColumns.length\">\n\n        <div fxLayout=\"row wrap\" fxFlexFill class=\"incentives\"\n          [@expandChartSlab]=\"chartSlabIndex === expandChartSlabIndex ? 'expanded' : 'collapsed'\">\n\n          <mat-card fxLayout=\"row wrap\" fxFlexFill>\n\n            <h4 class=\"m-b-10\" fxFlex=\"13%\">\n              Incentives\n            </h4>\n\n            <table fxFlexFill class=\"mat-elevation-z1\" mat-table [dataSource]=\"chartSlab.incentives\"\n              *ngIf=\"chartSlab.incentives.length\">\n\n              <ng-container matColumnDef=\"entityType\">\n                <th mat-header-cell *matHeaderCellDef> Entity Type </th>\n                <td mat-cell *matCellDef=\"let incentive\">\n                  {{ incentive.entityType.value }}\n                </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"attributeName\">\n                <th mat-header-cell *matHeaderCellDef> Attribute Name </th>\n                <td mat-cell *matCellDef=\"let incentive\">\n                  {{ incentive.attributeName.value }}\n                </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"conditionType\">\n                <th mat-header-cell *matHeaderCellDef> Condition Type </th>\n                <td mat-cell *matCellDef=\"let incentive\">\n                  {{ incentive.conditionType.value | titlecase }}\n                </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"attributeValue\">\n                <th mat-header-cell *matHeaderCellDef> Attribute Value </th>\n                <td mat-cell *matCellDef=\"let incentive\" [ngSwitch]=\"incentive.attributeName\">\n                  {{ incentive.attributeValueDesc }}\n                </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"incentiveType\">\n                <th mat-header-cell *matHeaderCellDef> Incentive Type </th>\n                <td mat-cell *matCellDef=\"let incentive\">\n                  {{ incentive.incentiveType.value }}\n                </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"amount\">\n                <th mat-header-cell *matHeaderCellDef> Interest </th>\n                <td mat-cell *matCellDef=\"let incentive\">\n                  {{ incentive.amount }}\n                </td>\n              </ng-container>\n\n              <tr mat-header-row *matHeaderRowDef=\"incentivesDisplayedColumns\"></tr>\n              <tr mat-row *matRowDef=\"let row; columns: incentivesDisplayedColumns;\"></tr>\n\n            </table>\n\n          </mat-card>\n        </div>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"chartSlabsDisplayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: chartSlabsDisplayedColumns;\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: chartSlabsIncentivesDisplayedColumns;\" class=\"incentives-row\"></tr>\n\n  </table>\n\n</div>\n\n<div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n  <button mat-raised-button matStepperPrevious>\n    <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n    Previous\n  </button>\n  <button mat-raised-button matStepperNext>\n    Next&nbsp;&nbsp;\n    <fa-icon icon=\"arrow-right\"></fa-icon>\n  </button>\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, Input, OnChanges, ViewChild } from '@angular/core';\nimport { MatTable } from '@angular/material/table';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\n\n/**\n * Recurring Deposits Account Interest Rate Chart Step\n */\n@Component({\n  selector: 'mifosx-recurring-deposits-account-interest-rate-chart-step',\n  templateUrl: './recurring-deposits-account-interest-rate-chart-step.component.html',\n  styleUrls: ['./recurring-deposits-account-interest-rate-chart-step.component.scss'],\n  animations: [\n    trigger('expandChartSlab', [\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\n      state('expanded', style({ height: '*' })),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n  ]\n})\nexport class RecurringDepositsAccountInterestRateChartStepComponent implements OnInit, OnChanges {\n\n  @Input() recurringDepositsAccountTemplate: any;\n  @Input() recurringDepositsAccountProductTemplate: any;\n\n  /** Interest Rate Chart Data */\n  interestRateChartData: any = [];\n  /** Columns to be displayed in interest rate chart table. */\n  chartSlabsDisplayedColumns: any[] = ['period', 'amountRange', 'interest', 'description', 'actions'];\n  /** Columns to be displayed in incentives sub-table. */\n  incentivesDisplayedColumns: string[] = ['entityType', 'attributeName', 'conditionType', 'attributeValue', 'incentiveType', 'amount'];\n  /** Additional Column to disblac incentives table  */\n  chartSlabsIncentivesDisplayedColumns: string[] = ['incentives'];\n  /** Expand Chart Slab Index used in the view */\n  expandChartSlabIndex: number;\n\n  @ViewChild('chartsTable', { static: true }) chartsTableRef: MatTable<Element>;\n\n  constructor() {\n  }\n\n  ngOnChanges() {\n    if (this.recurringDepositsAccountProductTemplate) {\n      this.interestRateChartData = this.recurringDepositsAccountProductTemplate.accountChart.chartSlabs;\n    }\n  }\n\n  ngOnInit() {\n    this.interestRateChartData = [];\n  }\n\n}\n","<div fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\n\n  <h3 class=\"mat-h3\" fxFlexFill>Details</h3>\n\n  <mat-divider fxFlexFill></mat-divider>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Product</span>\n    <span\n      fxFlex=\"60%\">{{ recurringDepositAccountData.productId | find:recurringDepositsAccountTemplate.productOptions:'id':'name' }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Submitted On</span>\n    <span fxFlex=\"60%\">{{ recurringDepositAccountData.submittedOnDate  | dateFormat }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Field Officer</span>\n    <span\n      fxFlex=\"60%\">{{ recurringDepositAccountData.fieldOfficerId | find:recurringDepositsAccountProductTemplate.fieldOfficerOptions:'id':'displayName' }}</span>\n  </div>\n\n  <h3 class=\"mat-h3\" fxFlexFill>Currency</h3>\n\n  <mat-divider fxFlexFill></mat-divider>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Currency</span>\n    <span fxFlex=\"60%\">{{ recurringDepositsAccountProductTemplate.currency.code  }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Decimal Places</span>\n    <span fxFlex=\"60%\">{{ recurringDepositsAccountProductTemplate.currency.decimalPlaces }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Currency In Multiples Of</span>\n    <span fxFlex=\"60%\">{{ recurringDepositsAccountProductTemplate.currency.inMultiplesOf }}</span>\n  </div>\n\n  <h3 class=\"mat-h3\" fxFlexFill>Terms</h3>\n  <mat-divider fxFlexFill></mat-divider>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Interest Compounding Period:</span>\n    <span\n      fxFlex=\"60%\">{{ recurringDepositAccountData.interestCompoundingPeriodType | find:recurringDepositsAccountProductTemplate.interestCompoundingPeriodTypeOptions:'id':'value' }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Interest Posting Period:</span>\n    <span\n      fxFlex=\"60%\">{{ recurringDepositAccountData.interestPostingPeriodType | find:recurringDepositsAccountProductTemplate.interestPostingPeriodTypeOptions:'id':'value' }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Interest Calculated using:</span>\n    <span\n      fxFlex=\"60%\">{{ recurringDepositAccountData.interestCalculationType | find:recurringDepositsAccountProductTemplate.interestCalculationTypeOptions:'id':'value' }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Days in Year:</span>\n    <span\n      fxFlex=\"60%\">{{ recurringDepositAccountData.interestCalculationDaysInYearType | find:recurringDepositsAccountProductTemplate.interestCalculationDaysInYearTypeOptions:'id':'value' }}</span>\n  </div>\n\n  <h3 class=\"mat-h3\" fxFlexFill>Settings</h3>\n\n  <mat-divider fxFlexFill></mat-divider>\n\n  <div fxFlexFill *ngIf=\"recurringDepositAccountData.lockinPeriodFrequency\">\n    <span fxFlex=\"40%\">Lock-in Period:</span>\n    <span\n      fxFlex=\"60%\">{{ recurringDepositAccountData.lockinPeriodFrequency + ' ' + (recurringDepositAccountData.lockinPeriodFrequencyType | find:recurringDepositsAccountProductTemplate.lockinPeriodFrequencyTypeOptions:'id':'value') }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Recurring Deposit Amount:</span>\n    <span fxFlex=\"60%\">{{ recurringDepositAccountData?.mandatoryRecommendedDepositAmount}}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Deposit Period:</span>\n    <span\n      fxFlex=\"60%\">{{ recurringDepositAccountData.depositPeriod + ' ' + (recurringDepositAccountData.depositPeriodFrequencyId | find:recurringDepositsAccountProductTemplate.periodFrequencyTypeData:'id':'value') }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Deposit Frequency Same as Group/Center meeting:</span>\n    <span fxFlex=\"60%\">{{ recurringDepositsAccountProductTemplate.isCalendarInherited === true ? 'Yes' : 'No'  }}</span>\n  </div>\n\n  <ng-container *ngIf=\"!recurringDepositsAccountProductTemplate.isCalendarInherited\">\n    <div fxFlexFill>\n      <span fxFlex=\"40%\">Deposit Start Date:</span>\n      <span fxFlex=\"60%\">{{ recurringDepositAccountData.expectedFirstDepositOnDate  | dateFormat}}</span>\n    </div>\n\n    <div fxFlexFill>\n      <span fxFlex=\"40%\">Deposit Frequency:</span>\n      <span *ngIf=\"recurringDepositAccountData.recurringFrequency\"\n        fxFlex=\"60%\">{{ recurringDepositAccountData.recurringFrequency + ' ' + (recurringDepositAccountData.recurringFrequencyType | find:recurringDepositsAccountProductTemplate.periodFrequencyTypeData:'id':'value')}}</span>\n    </div>\n  </ng-container>\n\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Minimum Deposit Term:</span>\n    <span\n      fxFlex=\"60%\">{{ (recurringDepositsAccountProductTemplate.minDepositTerm ? recurringDepositsAccountProductTemplate.minDepositTerm: '') + ' ' + (this.recurringDepositsAccountProductTemplate.minDepositTermType ? this.recurringDepositsAccountProductTemplate.minDepositTermType.value: '') }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">In Multiples Of:</span>\n    <span\n      fxFlex=\"60%\">{{ (recurringDepositsAccountProductTemplate.inMultiplesOfDepositTerm ? recurringDepositsAccountProductTemplate.inMultiplesOfDepositTerm: '') + ' ' + (this.recurringDepositsAccountProductTemplate.inMultiplesOfDepositTermType ? this.recurringDepositsAccountProductTemplate.inMultiplesOfDepositTermType.value: '') }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Maximum Deposit Term</span>\n    <span\n      fxFlex=\"60%\">{{ (recurringDepositsAccountProductTemplate.maxDepositTerm ? recurringDepositsAccountProductTemplate.maxDepositTerm: '') + ' ' + (this.recurringDepositsAccountProductTemplate.maxDepositTermType ? this.recurringDepositsAccountProductTemplate.maxDepositTermType.value: '') }}</span>\n  </div>\n\n\n  <h3 class=\"mat-h3\" fxFlexFill>Interest Rate Chart</h3>\n\n  <mat-divider fxFlexFill></mat-divider>\n\n  <div class=\"margin-b\" fxFlexFill fxLayout=\"column\">\n\n    <div fxFlexFill *ngIf=\"recurringDepositsAccountProductTemplate?.accountChart.name\">\n      <span fxFlex=\"40%\">Name:</span>\n      <span fxFlex=\"60%\">{{ recurringDepositsAccountProductTemplate?.accountChart.name }}</span>\n    </div>\n\n    <div fxFlexFill>\n      <span fxFlex=\"40%\">Valid from Date:</span>\n      <span fxFlex=\"60%\">{{ recurringDepositsAccountProductTemplate?.accountChart.fromDate  | dateFormat }}</span>\n    </div>\n\n    <div fxFlexFill *ngIf=\"recurringDepositsAccountProductTemplate?.accountChart.endDate\">\n      <span fxFlex=\"40%\">End Date:</span>\n      <span fxFlex=\"60%\">{{ recurringDepositsAccountProductTemplate?.accountChart.endDate  | dateFormat }}</span>\n    </div>\n\n    <div fxFlexFill *ngIf=\"recurringDepositsAccountProductTemplate?.accountChart.description\">\n      <span fxFlex=\"40%\">Description:</span>\n      <span fxFlex=\"60%\">{{ recurringDepositsAccountProductTemplate?.accountChart.description }}</span>\n    </div>\n\n    <div fxFlexFill>\n      <span fxFlex=\"40%\">Primary Grouping by Amount:</span>\n      <span\n        fxFlex=\"60%\">{{ recurringDepositsAccountProductTemplate?.accountChart.isPrimaryGroupingByAmount ? 'Yes' : 'No' }}</span>\n    </div>\n\n    <table class=\"mat-elevation-z1 irc-table\" mat-table [dataSource]=\"interestRateChartData\" multiTemplateDataRows>\n\n      <ng-container matColumnDef=\"period\">\n        <th mat-header-cell *matHeaderCellDef> Period </th>\n        <td mat-cell *matCellDef=\"let chartSlab\">\n          {{chartSlab.fromPeriod}}-{{chartSlab.toPeriod}}&nbsp;{{chartSlab.periodType.value}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"amountRange\">\n        <th mat-header-cell *matHeaderCellDef> Amount Range </th>\n        <td mat-cell *matCellDef=\"let chartSlab\">{{chartSlab.amountRangeFrom}}-{{chartSlab.amountRangeTo}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"interest\">\n        <th mat-header-cell *matHeaderCellDef> Interest </th>\n        <td mat-cell *matCellDef=\"let chartSlab\"> {{ chartSlab.annualInterestRate }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"description\">\n        <th mat-header-cell *matHeaderCellDef> Description </th>\n        <td mat-cell *matCellDef=\"let chartSlab\"> {{ chartSlab.description }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef> Actions </th>\n        <td mat-cell *matCellDef=\"let chartSlab; let chartSlabIndex = dataIndex\">\n          <button mat-button color=\"primary\"\n            (click)=\"expandChartSlabIndex = expandChartSlabIndex === chartSlabIndex ? null : chartSlabIndex\">\n            <span *ngIf=\"expandChartSlabIndex !== chartSlabIndex\">\n              <fa-icon icon=\"eye\" class=\"m-r-10\"></fa-icon>\n              View Incentives\n            </span>\n            <span *ngIf=\"expandChartSlabIndex === chartSlabIndex\">\n              <fa-icon icon=\"eye-slash\" class=\"m-r-10\"></fa-icon>\n              Hide Incentives\n            </span>\n          </button>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"incentives\">\n        <td mat-cell *matCellDef=\"let chartSlab; let chartSlabIndex = dataIndex\"\n          [attr.colspan]=\"chartSlabsDisplayedColumns.length\">\n\n          <div fxLayout=\"row wrap\" fxFlexFill class=\"incentives\"\n            [@expandChartSlab]=\"chartSlabIndex === expandChartSlabIndex ? 'expanded' : 'collapsed'\">\n\n            <mat-card fxLayout=\"row wrap\" fxFlexFill>\n\n              <h4 class=\"m-b-10\" fxFlex=\"13%\">\n                Incentives\n              </h4>\n\n              <table fxFlexFill class=\"mat-elevation-z1\" mat-table [dataSource]=\"chartSlab.incentives\"\n                *ngIf=\"chartSlab.incentives.length\">\n\n                <ng-container matColumnDef=\"entityType\">\n                  <th mat-header-cell *matHeaderCellDef> Entity Type </th>\n                  <td mat-cell *matCellDef=\"let incentive\">\n                    {{ incentive.entityType.value }}\n                  </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"attributeName\">\n                  <th mat-header-cell *matHeaderCellDef> Attribute Name </th>\n                  <td mat-cell *matCellDef=\"let incentive\">\n                    {{ incentive.attributeName.value }}\n                  </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"conditionType\">\n                  <th mat-header-cell *matHeaderCellDef> Condition Type </th>\n                  <td mat-cell *matCellDef=\"let incentive\">\n                    {{ incentive.conditionType.value | titlecase }}\n                  </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"attributeValue\">\n                  <th mat-header-cell *matHeaderCellDef> Attribute Value </th>\n                  <td mat-cell *matCellDef=\"let incentive\" [ngSwitch]=\"incentive.attributeName\">\n                    {{ incentive.attributeValueDesc }}\n                  </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"incentiveType\">\n                  <th mat-header-cell *matHeaderCellDef> Incentive Type </th>\n                  <td mat-cell *matCellDef=\"let incentive\">\n                    {{ incentive.incentiveType.value }}\n                  </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"amount\">\n                  <th mat-header-cell *matHeaderCellDef> Interest </th>\n                  <td mat-cell *matCellDef=\"let incentive\">\n                    {{ incentive.amount }}\n                  </td>\n                </ng-container>\n\n                <tr mat-header-row *matHeaderRowDef=\"incentivesDisplayedColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: incentivesDisplayedColumns;\"></tr>\n\n              </table>\n\n            </mat-card>\n          </div>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"chartSlabsDisplayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: chartSlabsDisplayedColumns;\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: chartSlabsIncentivesDisplayedColumns;\" class=\"incentives-row\"></tr>\n\n    </table>\n\n  </div>\n\n  <div fxFlexFill *ngIf=\"recurringDepositAccountData.charges.length\" fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\n\n    <h3 class=\"mat-h3\" fxFlexFill>Charges</h3>\n\n    <mat-divider fxFlexFill></mat-divider>\n\n    <table fxFlexFill class=\"mat-elevation-z1\" mat-table [dataSource]=\"recurringDepositAccountData.charges\">\n\n      <ng-container matColumnDef=\"name\">\n        <th mat-header-cell *matHeaderCellDef> Name </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.name + ', ' + charge.currency.displaySymbol }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"chargeCalculationType\">\n        <th mat-header-cell *matHeaderCellDef> Type </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.chargeCalculationType.value }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"amount\">\n        <th mat-header-cell *matHeaderCellDef> Amount </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.amount }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"date\">\n        <th mat-header-cell *matHeaderCellDef> Date </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          <span\n            *ngIf=\"charge.chargeTimeType.value === 'Specified due date' || charge.chargeTimeType.value === 'Weekly Fee'\">\n            {{(charge.dueDate  | dateFormat) || 'Unassigned'}}\n          </span>\n          <span *ngIf=\"charge.chargeTimeType.value === 'Monthly Fee' || charge.chargeTimeType.value === 'Annual Fee'\">\n            {{(charge.feeOnMonthDay  | dateFormat) || 'Unassigned'}}\n          </span>\n          <span\n            *ngIf=\"!(charge.chargeTimeType.value === 'Monthly Fee' || charge.chargeTimeType.value === 'Annual Fee'\n              || charge.chargeTimeType.value === 'Specified due date' || charge.chargeTimeType.value === 'Weekly Fee')\">\n            N/A\n          </span>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"repaymentsEvery\">\n        <th mat-header-cell *matHeaderCellDef> Repayments Every </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.feeInterval || 'Not Provided' }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"chargeTimeType\">\n        <th mat-header-cell *matHeaderCellDef> Collected On </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.chargeTimeType.value }}\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"chargesDisplayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: chargesDisplayedColumns;\"></tr>\n\n    </table>\n\n  </div>\n\n</div>\n\n<div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n  <button mat-raised-button matStepperPrevious>\n    <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n    Previous\n  </button>\n  <button mat-raised-button [routerLink]=\"['../']\">\n    Cancel\n  </button>\n  <button mat-raised-button color=\"primary\" (click)=\"submit.emit()\">\n    Submit\n  </button>\n</div>\n","/** Angular Imports */\nimport { Component, Input, Output, EventEmitter, OnChanges } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n/**\n * Recurring Deposit Preview Step\n */\n@Component({\n  selector: 'mifosx-recurring-deposits-account-preview-step',\n  templateUrl: './recurring-deposits-account-preview-step.component.html',\n  styleUrls: ['./recurring-deposits-account-preview-step.component.scss'],\n  animations: [\n    trigger('expandChartSlab', [\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\n      state('expanded', style({ height: '*' })),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n  ]\n})\nexport class RecurringDepositsAccountPreviewStepComponent implements OnChanges {\n\n  /** Input Data */\n  @Input() recurringDepositsAccountTemplate: any;\n  @Input() recurringDepositsAccountProductTemplate: any;\n  @Input() recurringDepositAccountData: any;\n  /** Output the submit action */\n  @Output() submit = new EventEmitter();\n\n  /** Charges Displayed Columns */\n  chargesDisplayedColumns: string[] = ['name', 'chargeCalculationType', 'amount', 'chargeTimeType', 'date', 'repaymentsEvery'];\n  /** Interest Rate Chart Data */\n  interestRateChartData: any = [];\n  /** Columns to be displayed in interest rate chart table. */\n  chartSlabsDisplayedColumns: any[] = ['period', 'amountRange', 'interest', 'description', 'actions'];\n  /** Columns to be displayed in incentives sub-table. */\n  incentivesDisplayedColumns: string[] = ['entityType', 'attributeName', 'conditionType', 'attributeValue', 'incentiveType', 'amount'];\n  /** Additional Column to disblac incentives table  */\n  chartSlabsIncentivesDisplayedColumns: string[] = ['incentives'];\n  /** Expand Chart Slab Index used in the view */\n  expandChartSlabIndex: number;\n\n  constructor() { }\n\n  ngOnChanges() {\n    if (this.recurringDepositsAccountProductTemplate) {\n      this.interestRateChartData = this.recurringDepositsAccountProductTemplate.accountChart.chartSlabs;\n    }\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-horizontal-stepper class=\"mat-elevation-z8\" labelPosition=\"bottom\" #recurringDepositAccountStepper>\n    <ng-template matStepperIcon=\"number\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"edit\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"done\">\n      <fa-icon icon=\"check\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"error\">\n      <fa-icon icon=\"exclamation-triangle\" size=\"lg\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"preview\">\n      <fa-icon icon=\"eye\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <mat-step [stepControl]=\"recurringDepositAccountDetailsForm\">\n\n      <ng-template matStepLabel>DETAILS</ng-template>\n\n      <mifosx-recurring-deposits-account-details-step\n        [recurringDepositsAccountTemplate]=\"recurringDepositsAccountTemplate\"\n        (recurringDepositsAccountProductTemplate)=\"setTemplate($event)\">\n      </mifosx-recurring-deposits-account-details-step>\n\n    </mat-step>\n\n    <mat-step [stepControl]=\"recurringDepositAccountCurrencyForm\">\n\n      <ng-template matStepLabel>CURRENCY</ng-template>\n\n      <mifosx-recurring-deposits-account-currency-step\n        [recurringDepositsAccountTemplate]=\"recurringDepositsAccountTemplate\"\n        [recurringDepositsAccountProductTemplate]=\"recurringDepositsAccountProductTemplate\">\n      </mifosx-recurring-deposits-account-currency-step>\n\n    </mat-step>\n\n    <mat-step [stepControl]=\"recurringDepositAccountTermsForm\">\n\n      <ng-template matStepLabel>TERMS</ng-template>\n\n      <mifosx-recurring-deposits-account-terms-step\n        [recurringDepositsAccountTemplate]=\"recurringDepositsAccountTemplate\"\n        [recurringDepositsAccountProductTemplate]=\"recurringDepositsAccountProductTemplate\">\n      </mifosx-recurring-deposits-account-terms-step>\n\n    </mat-step>\n\n    <mat-step [stepControl]=\"recurringDepositAccountSettingsForm\">\n\n      <ng-template matStepLabel>SETTINGS</ng-template>\n\n      <mifosx-recurring-deposits-account-settings-step\n        [recurringDepositsAccountTemplate]=\"recurringDepositsAccountTemplate\"\n        [recurringDepositsAccountProductTemplate]=\"recurringDepositsAccountProductTemplate\">\n      </mifosx-recurring-deposits-account-settings-step>\n\n    </mat-step>\n\n    <mat-step>\n\n      <ng-template matStepLabel>INTEREST RATE CHART</ng-template>\n\n      <mifosx-recurring-deposits-account-interest-rate-chart-step\n        [recurringDepositsAccountTemplate]=\"recurringDepositsAccountTemplate\"\n        [recurringDepositsAccountProductTemplate]=\"recurringDepositsAccountProductTemplate\">\n      </mifosx-recurring-deposits-account-interest-rate-chart-step>\n\n    </mat-step>\n\n    <mat-step>\n\n      <ng-template matStepLabel>CHARGES</ng-template>\n\n      <mifosx-recurring-deposits-account-charges-step\n        [recurringDepositsAccountTemplate]=\"recurringDepositsAccountTemplate\"\n        [recurringDepositsAccountProductTemplate]=\"recurringDepositsAccountProductTemplate\"\n        [recurringDepositAccountFormValid]=\"recurringDepositAccountFormValid\"\n        [currencyCode]=\"recurringDepositAccountCurrencyForm.get('currencyCode')\">\n      </mifosx-recurring-deposits-account-charges-step>\n\n    </mat-step>\n\n    <mat-step state=\"preview\" *ngIf=\"recurringDepositAccountFormValid\" completed>\n\n      <ng-template matStepLabel>PREVIEW</ng-template>\n\n      <mifosx-recurring-deposits-account-preview-step\n        [recurringDepositsAccountTemplate]=\"recurringDepositsAccountTemplate\"\n        [recurringDepositsAccountProductTemplate]=\"recurringDepositsAccountProductTemplate\"\n        [recurringDepositAccountData]=\"recurringDepositAccountData\" (submit)=\"submit()\">\n      </mifosx-recurring-deposits-account-preview-step>\n\n    </mat-step>\n\n  </mat-horizontal-stepper>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { RecurringDepositsService } from '../recurring-deposits.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Step Components */\nimport { RecurringDepositsAccountDetailsStepComponent } from '../recurring-deposits-account-stepper/recurring-deposits-account-details-step/recurring-deposits-account-details-step.component';\nimport { RecurringDepositsAccountTermsStepComponent } from '../recurring-deposits-account-stepper/recurring-deposits-account-terms-step/recurring-deposits-account-terms-step.component';\nimport { RecurringDepositsAccountCurrencyStepComponent } from '../recurring-deposits-account-stepper/recurring-deposits-account-currency-step/recurring-deposits-account-currency-step.component';\nimport { RecurringDepositsAccountSettingsStepComponent } from '../recurring-deposits-account-stepper/recurring-deposits-account-settings-step/recurring-deposits-account-settings-step.component';\nimport { RecurringDepositsAccountChargesStepComponent } from '../recurring-deposits-account-stepper/recurring-deposits-account-charges-step/recurring-deposits-account-charges-step.component';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Create new recurring deposit account\n */\n@Component({\n  selector: 'mifosx-create-recurring-deposits-account',\n  templateUrl: './create-recurring-deposits-account.component.html',\n  styleUrls: ['./create-recurring-deposits-account.component.scss']\n})\nexport class CreateRecurringDepositsAccountComponent implements OnInit {\n\n  /** Imports all the step component */\n  @ViewChild(RecurringDepositsAccountDetailsStepComponent, { static: true }) recurringDepositsAccountDetailsStep: RecurringDepositsAccountDetailsStepComponent;\n  @ViewChild(RecurringDepositsAccountCurrencyStepComponent, { static: true }) recurringDepositAccountCurrencyStep: RecurringDepositsAccountCurrencyStepComponent;\n  @ViewChild(RecurringDepositsAccountTermsStepComponent, { static: true }) recurringDepositAccountTermsStep: RecurringDepositsAccountTermsStepComponent;\n  @ViewChild(RecurringDepositsAccountSettingsStepComponent, { static: true }) recurringDepositAccountSettingsStep: RecurringDepositsAccountSettingsStepComponent;\n  @ViewChild(RecurringDepositsAccountChargesStepComponent, { static: true }) recurringDepositAccountChargesStep: RecurringDepositsAccountChargesStepComponent;\n\n  /** Recurring Deposits Account Template */\n  recurringDepositsAccountTemplate: any;\n  /** Recurring Deposit Account Product Template */\n  recurringDepositsAccountProductTemplate: any;\n\n  constructor(private route: ActivatedRoute,\n    private router: Router,\n    private dateUtils: Dates,\n    private recurringDepositsService: RecurringDepositsService,\n    private settingsService: SettingsService,\n  ) {\n    this.route.data.subscribe((data: { recurringDepositsAccountTemplate: any }) => {\n      this.recurringDepositsAccountTemplate = data.recurringDepositsAccountTemplate;\n    });\n  }\n\n  /**\n   * Sets recurring deposits account product template.\n   * @param {any} $event API response\n   */\n  setTemplate($event: any) {\n    this.recurringDepositsAccountProductTemplate = $event;\n  }\n\n  ngOnInit() {\n  }\n\n  /** Get Recurring Deposit Account Details Form Data */\n  get recurringDepositAccountDetailsForm() {\n    return this.recurringDepositsAccountDetailsStep.recurringDepositAccountDetailsForm;\n  }\n\n  /** Get Recurring Deposit Account Currency Form Data */\n  get recurringDepositAccountCurrencyForm() {\n    return this.recurringDepositAccountCurrencyStep.recurringDepositAccountCurrencyForm;\n  }\n\n  /** Get Recurring Deposit Account Terms Form Data */\n  get recurringDepositAccountTermsForm() {\n    return this.recurringDepositAccountTermsStep.recurringDepositAccountTermsForm;\n  }\n\n  /** Get Recurring Deposit Account Settings Form Data */\n  get recurringDepositAccountSettingsForm() {\n    return this.recurringDepositAccountSettingsStep.recurringDepositAccountSettingsForm;\n  }\n\n  /** Checks wheter all the forms in different steps are valid or not */\n  get recurringDepositAccountFormValid() {\n    return (\n      this.recurringDepositAccountDetailsForm.valid &&\n      this.recurringDepositAccountTermsForm.valid &&\n      this.recurringDepositAccountSettingsForm.valid\n    );\n  }\n\n  /** Retrieves Data of all the forms */\n  get recurringDepositAccountData() {\n    return {\n      ...this.recurringDepositsAccountDetailsStep.recurringDepositAccountDetails,\n      ...this.recurringDepositAccountCurrencyStep.recurringDepositAccountCurrency,\n      ...this.recurringDepositAccountTermsStep.recurringDepositAccountTerms,\n      ...this.recurringDepositAccountSettingsStep.recurringDepositAccountSettings,\n      ...this.recurringDepositAccountChargesStep.recurringDepositAccountCharges,\n    };\n  }\n\n\n  /** Retrieves Data of all forms except Currency to submit the data */\n  get recurringDepositAccount() {\n    return {\n      ...this.recurringDepositsAccountDetailsStep.recurringDepositAccountDetails,\n      ...this.recurringDepositAccountTermsStep.recurringDepositAccountTerms,\n      ...this.recurringDepositAccountSettingsStep.recurringDepositAccountSettings,\n      ...this.recurringDepositAccountChargesStep.recurringDepositAccountCharges,\n    };\n  }\n\n  /**\n   * Submits the recurring deposit form to create a new recurring deposit account\n   */\n  submit() {\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const monthDayFormat = 'dd MMMM';\n    const recurringDepositAccount = {\n      ...this.recurringDepositAccount,\n      clientId: this.recurringDepositsAccountTemplate.clientId,\n      charges: this.recurringDepositAccount.charges.map((charge: any) => ({\n        chargeId: charge.id,\n        amount: charge.amount,\n        dueDate: charge.dueDate && this.dateUtils.formatDate(charge.dueDate, dateFormat),\n        feeOnMonthDay: charge.feeOnMonthDay,\n        feeInterval: charge.feeInterval\n      })),\n      isCalendarInherited: this.recurringDepositAccount.recurringDepositAccount ? this.recurringDepositAccount.recurringDepositAccount : false,\n      submittedOnDate: this.dateUtils.formatDate(this.recurringDepositAccount.submittedOnDate, dateFormat),\n      expectedFirstDepositOnDate: this.dateUtils.formatDate(this.recurringDepositAccount.expectedFirstDepositOnDate, dateFormat),\n      dateFormat,\n      monthDayFormat,\n      locale\n    };\n\n    this.recurringDepositsService.createRecurringDepositAccount(recurringDepositAccount).subscribe((response: any) => {\n      this.router.navigate(['../', response.resourceId], { relativeTo: this.route });\n    });\n  }\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"activateRecurringDepositsAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <mat-form-field fxFlex (click)=\"activatedOnDatePicker.open()\">\n          <mat-label>Activated On Date</mat-label>\n          <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"activatedOnDatePicker\" required\n            formControlName=\"activatedOnDate\">\n          <mat-datepicker-toggle matSuffix [for]=\"activatedOnDatePicker\"></mat-datepicker-toggle>\n          <mat-datepicker #activatedOnDatePicker></mat-datepicker>\n          <mat-error *ngIf=\"activateRecurringDepositsAccountForm.controls.activatedOnDate.hasError('required')\">\n            Activated On Date is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" [disabled]=\"!activateRecurringDepositsAccountForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { RecurringDepositsService } from '../../recurring-deposits.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Activate Recurring Deposits Account Component\n */\n@Component({\n  selector: 'mifosx-activate-recurring-deposits-account',\n  templateUrl: './activate-recurring-deposits-account.component.html',\n  styleUrls: ['./activate-recurring-deposits-account.component.scss']\n})\nexport class ActivateRecurringDepositsAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Activate Recurring Deposits Account form. */\n  activateRecurringDepositsAccountForm: FormGroup;\n  /** Recurring Deposits Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {recurringDepositsService} recurringDepositsService Recurring Deposits Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SavingsService} savingsService Savings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private recurringDepositsService: RecurringDepositsService,\n    private dateUtils: Dates,\n    private route: ActivatedRoute,\n    private router: Router,\n    private settingsService: SettingsService) {\n    this.accountId = this.route.parent.snapshot.params['recurringDepositAccountId'];\n  }\n\n  /**\n   * Creates the activate recurring deposits form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createActivateRecurringDepositsAccountForm();\n  }\n\n  /**\n   * Creates the activate recurring deposits account form.\n   */\n  createActivateRecurringDepositsAccountForm() {\n    this.activateRecurringDepositsAccountForm = this.formBuilder.group({\n      'activatedOnDate': ['', Validators.required]\n    });\n  }\n\n  /**\n   * Submits the form and activates the recurring deposit account,\n   * if successful redirects to the recurring deposit account.\n   */\n  submit() {\n    const activateRecurringDepositsAccountFormData = this.activateRecurringDepositsAccountForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevActivatedOnDate: Date = this.activateRecurringDepositsAccountForm.value.activatedOnDate;\n    if (activateRecurringDepositsAccountFormData.activatedOnDate instanceof Date) {\n      activateRecurringDepositsAccountFormData.activatedOnDate = this.dateUtils.formatDate(prevActivatedOnDate, dateFormat);\n    }\n    const data = {\n      ...activateRecurringDepositsAccountFormData,\n      dateFormat,\n      locale\n    };\n    this.recurringDepositsService.executeRecurringDepositsAccountCommand(this.accountId, 'activate', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n}\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { RecurringDepositsService } from '../../recurring-deposits.service';\n\n/**\n * Undo Approval Recurring Deposits Account Component\n */\n@Component({\n  selector: 'mifosx-undo-approval-recurring-deposits-account',\n  templateUrl: './undo-approval-recurring-deposits-account.component.html',\n  styleUrls: ['./undo-approval-recurring-deposits-account.component.scss']\n})\nexport class UndoApprovalRecurringDepositsAccountComponent implements OnInit {\n\n  /** Undo Approval Recurring Deposits Account form. */\n  undoApprovalRecurringDepositsAccountForm: FormGroup;\n  /** Recurring Deposits Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SavingsService} recurringDepositsService Recurring Deposits Service\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   */\n  constructor(private formBuilder: FormBuilder,\n    private recurringDepositsService: RecurringDepositsService,\n    private route: ActivatedRoute,\n    private router: Router) {\n    this.accountId = this.route.parent.snapshot.params['recurringDepositAccountId'];\n  }\n\n  /**\n   * Creates the undo-approval recurring deposits form.\n   */\n  ngOnInit() {\n    this.createUndoApprovalRecurringDepositsAccountForm();\n  }\n\n  /**\n   * Creates the undo-approval recurring deposits account form.\n   */\n  createUndoApprovalRecurringDepositsAccountForm() {\n    this.undoApprovalRecurringDepositsAccountForm = this.formBuilder.group({\n      'note': ['']\n    });\n  }\n\n  /**\n   * Submits the form and undo the approval of recurring deposits account,\n   * if successful redirects to the recurring deposits account.\n   */\n  submit() {\n    const data = {\n      ...this.undoApprovalRecurringDepositsAccountForm.value,\n    };\n    this.recurringDepositsService.executeRecurringDepositsAccountCommand(this.accountId, 'undoapproval', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"undoApprovalRecurringDepositsAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <mat-form-field fxFlex>\n          <mat-label>Note</mat-label>\n          <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n        </mat-form-field>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"warn\" [disabled]=\"!undoApprovalRecurringDepositsAccountForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"approveRecurringDepositsAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"approvedOnDatePicker.open()\">\n            <mat-label>Approved On Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"approvedOnDatePicker\" required\n              formControlName=\"approvedOnDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"approvedOnDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #approvedOnDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"approveRecurringDepositsAccountForm.controls.approvedOnDate.hasError('required')\">\n              Approved On Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" [disabled]=\"!approveRecurringDepositsAccountForm\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { RecurringDepositsService } from '../../recurring-deposits.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Approve Recurring Deposits Account Component\n */\n@Component({\n  selector: 'mifosx-approve-recurring-deposits-account',\n  templateUrl: './approve-recurring-deposits-account.component.html',\n  styleUrls: ['./approve-recurring-deposits-account.component.scss']\n})\nexport class ApproveRecurringDepositsAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Approve Recurring Deposits Account form. */\n  approveRecurringDepositsAccountForm: FormGroup;\n  /** Recurring Deposits Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {RecurringDepositsService} recurringDepositsService Recurring Deposits Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private recurringDepositsService: RecurringDepositsService,\n    private dateUtils: Dates,\n    private route: ActivatedRoute,\n    private router: Router,\n    private settingsService: SettingsService) {\n    this.accountId = this.route.parent.snapshot.params['recurringDepositAccountId'];\n  }\n\n  /**\n   * Creates the approve recurring deposits form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createApproveRecurringDepositsAccountForm();\n  }\n\n  /**\n   * Creates the approve recurring deposits account form.\n   */\n  createApproveRecurringDepositsAccountForm() {\n    this.approveRecurringDepositsAccountForm = this.formBuilder.group({\n      'approvedOnDate': ['', Validators.required],\n      'note': ['']\n    });\n  }\n\n  /**\n   * Submits the form and approves the recurring deposit account,\n   * if successful redirects to the recurring deposit account.\n   */\n  submit() {\n    const approveRecurringDepositsAccountFormData = this.approveRecurringDepositsAccountForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevApprovedOnDate: Date = this.approveRecurringDepositsAccountForm.value.approvedOnDate;\n    if (approveRecurringDepositsAccountFormData.approvedOnDate instanceof Date) {\n      approveRecurringDepositsAccountFormData.approvedOnDate = this.dateUtils.formatDate(prevApprovedOnDate, dateFormat);\n    }\n    const data = {\n      ...approveRecurringDepositsAccountFormData,\n      dateFormat,\n      locale\n    };\n    this.recurringDepositsService.executeRecurringDepositsAccountCommand(this.accountId, 'approve', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"rejectRecurringDepositsAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"rejectedOnDatePicker.open()\">\n            <mat-label>Rejected On Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"rejectedOnDatePicker\" required\n              formControlName=\"rejectedOnDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"rejectedOnDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #rejectedOnDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"rejectRecurringDepositsAccountForm.controls.rejectedOnDate.hasError('required')\">\n              Rejected On Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" [disabled]=\"!rejectRecurringDepositsAccountForm\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { RecurringDepositsService } from '../../recurring-deposits.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n\n/**\n * Reject Recurring Deposits Account Component\n */\n@Component({\n  selector: 'mifosx-reject-recurring-deposits-account',\n  templateUrl: './reject-recurring-deposits-account.component.html',\n  styleUrls: ['./reject-recurring-deposits-account.component.scss']\n})\nexport class RejectRecurringDepositsAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Reject Recurring Deposits Account form. */\n  rejectRecurringDepositsAccountForm: FormGroup;\n  /** Recurring Deposits Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {RecurringDepositsService} recurringDepositsService Recurring Deposits Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private recurringDepositsService: RecurringDepositsService,\n    private dateUtils: Dates,\n    private route: ActivatedRoute,\n    private router: Router,\n    private settingsService: SettingsService) {\n    this.accountId = this.route.parent.snapshot.params['recurringDepositAccountId'];\n  }\n\n  /**\n   * Creates the reject recurring deposits form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createRejectRecurringDepositsAccountForm();\n  }\n\n  /**\n   * Creates the reject recurring deposits account form.\n   */\n  createRejectRecurringDepositsAccountForm() {\n    this.rejectRecurringDepositsAccountForm = this.formBuilder.group({\n      'rejectedOnDate': ['', Validators.required],\n      'note': ['']\n    });\n  }\n\n  /**\n   * Submits the form and rejects the recurring deposit account,\n   * if successful redirects to the recurring deposit account.\n   */\n  submit() {\n    const rejectRecurringDepositsAccountFormData = this.rejectRecurringDepositsAccountForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevRejectedOnDate: Date = this.rejectRecurringDepositsAccountForm.value.rejectedOnDate;\n    if (rejectRecurringDepositsAccountFormData.rejectedOnDate instanceof Date) {\n      rejectRecurringDepositsAccountFormData.rejectedOnDate = this.dateUtils.formatDate(prevRejectedOnDate, dateFormat);\n    }\n    const data = {\n      ...rejectRecurringDepositsAccountFormData,\n      dateFormat,\n      locale\n    };\n    this.recurringDepositsService.executeRecurringDepositsAccountCommand(this.accountId, 'reject', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"withdrawRecurringDepositsAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"withdrawnOnDatePicker.open()\">\n            <mat-label>Withdrawn On Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"withdrawnOnDatePicker\" required\n              formControlName=\"withdrawnOnDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"withdrawnOnDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #withdrawnOnDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"withdrawRecurringDepositsAccountForm.controls.withdrawnOnDate.hasError('required')\">\n              Withdrawn On Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" [disabled]=\"!withdrawRecurringDepositsAccountForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\n\n/** Custom Services */\nimport { RecurringDepositsService } from 'app/deposits/recurring-deposits/recurring-deposits.service';\nimport { SettingsService } from 'app/settings/settings.service';\n/**\n * Withdraw By Client Recurring Deposits Account Component\n */\n@Component({\n  selector: 'mifosx-withdraw-by-client-recurring-deposits-account',\n  templateUrl: './withdraw-by-client-recurring-deposits-account.component.html',\n  styleUrls: ['./withdraw-by-client-recurring-deposits-account.component.scss']\n})\nexport class WithdrawByClientRecurringDepositsAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Withdraw Recurring Deposits Account form. */\n  withdrawRecurringDepositsAccountForm: FormGroup;\n  /** Recurring Deposits Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {RecurringDepositsService} recurringDepositsService Recurring Deposits Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private recurringDepositsService: RecurringDepositsService,\n    private dateUtils: Dates,\n    private route: ActivatedRoute,\n    private router: Router,\n    private settingsService: SettingsService) {\n    this.accountId = this.route.parent.snapshot.params['recurringDepositAccountId'];\n  }\n\n  /**\n   * Creates the withdraw recurring deposits form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createWithdrawRecurringDepositsAccountForm();\n  }\n\n  /**\n   * Creates the withdraw recurring deposits account form.\n   */\n  createWithdrawRecurringDepositsAccountForm() {\n    this.withdrawRecurringDepositsAccountForm = this.formBuilder.group({\n      'withdrawnOnDate': ['', Validators.required],\n      'note': ['']\n    });\n  }\n\n  /**\n   * Submits the form and withdraws the recurring deposit account by client,\n   * if successful redirects to the recurring deposit account.\n   */\n  submit() {\n    const withdrawRecurringDepositsAccountFormData = this.withdrawRecurringDepositsAccountForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevWithdrawnOnDate: Date = this.withdrawRecurringDepositsAccountForm.value.withdrawnOnDate;\n    if (withdrawRecurringDepositsAccountFormData.withdrawnOnDate instanceof Date) {\n      withdrawRecurringDepositsAccountFormData.withdrawnOnDate = this.dateUtils.formatDate(prevWithdrawnOnDate, dateFormat);\n    }\n    const data = {\n      ...withdrawRecurringDepositsAccountFormData,\n      dateFormat,\n      locale\n    };\n    this.recurringDepositsService.executeRecurringDepositsAccountCommand(this.accountId, 'withdrawnByApplicant', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"recurringDepositsChargeForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n          <mat-form-field>\n            <mat-label>Charge</mat-label>\n            <mat-select required formControlName=\"chargeId\">\n              <mat-option *ngFor=\"let savingsCharge of savingsChargeOptions\" [value]=\"savingsCharge.id\">\n                {{ savingsCharge.name + ' (' + savingsCharge.currency.name + ')' }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"recurringDepositsChargeForm.controls.chargeId.hasError('required')\">\n              Charge is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <div *ngIf=\"chargeDetails\" fxLayout=\"column\">\n\n            <mat-form-field>\n              <mat-label>Amount</mat-label>\n              <input type=\"number\" required matInput formControlName=\"amount\" />\n              <mat-error *ngIf=\"recurringDepositsChargeForm.controls.amount.hasError('required')\">\n                Amount is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Charge Calculation</mat-label>\n              <mat-select formControlName=\"chargeCalculationType\">\n                <mat-option *ngFor=\"let chargeCalculation of chargeDetails.chargeCalculationTypeOptions\"\n                  [value]=\"chargeCalculation.id\">\n                  {{ chargeCalculation.value }}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Charge time type</mat-label>\n              <mat-select formControlName=\"chargeTimeType\">\n                <mat-option *ngFor=\"let chargeTime of chargeDetails.chargeTimeTypeOptions\" [value]=\"chargeTime.id\">\n                  {{ chargeTime.value }}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n\n            <mat-form-field *ngIf=\"recurringDepositsChargeForm.contains('dueDate')\" (click)=\"dueDatePicker.open()\">\n              <mat-label>Due for collection on</mat-label>\n              <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"dueDatePicker\" required\n                formControlName=\"dueDate\">\n              <mat-datepicker-toggle matSuffix [for]=\"dueDatePicker\"></mat-datepicker-toggle>\n              <mat-datepicker #dueDatePicker></mat-datepicker>\n              <mat-error *ngIf=\"recurringDepositsChargeForm.controls.dueDate.hasError('required')\">\n                Due for collection on is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n\n            <mat-form-field *ngIf=\"recurringDepositsChargeForm.contains('feeOnMonthDay')\" (click)=\"feeOnMonthDayPicker.open()\">\n              <mat-label>Due On</mat-label>\n              <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"feeOnMonthDayPicker\" required\n                formControlName=\"feeOnMonthDay\">\n              <mat-datepicker-toggle matSuffix [for]=\"feeOnMonthDayPicker\"></mat-datepicker-toggle>\n              <mat-datepicker #feeOnMonthDayPicker></mat-datepicker>\n              <mat-error *ngIf=\"recurringDepositsChargeForm.controls.feeOnMonthDay.hasError('required')\">\n                Due Date is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n\n            <mat-form-field *ngIf=\"recurringDepositsChargeForm.contains('feeInterval')\">\n              <mat-label>Repeats Every</mat-label>\n              <input matInput formControlName=\"feeInterval\" />\n            </mat-form-field>\n\n          </div>\n\n        </div>\n\n        <mat-card-actions fxLayoutGap=\"5px\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!recurringDepositsChargeForm.valid\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Add Recurring Deposits Charge component.\n * Recurring deposits endpoint is not supported so using Savings endpoint.\n */\n@Component({\n  selector: 'mifosx-add-charge-recurring-deposits-account',\n  templateUrl: './add-charge-recurring-deposits-account.component.html',\n  styleUrls: ['./add-charge-recurring-deposits-account.component.scss']\n})\nexport class AddChargeRecurringDepositsAccountComponent implements OnInit {\n\n  /** Minimum Due Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Due Date allowed. */\n  maxDate = new Date();\n  /** Add Recurring Deposits Charge form. */\n  recurringDepositsChargeForm: FormGroup;\n  /** savings charge options. */\n  savingsChargeOptions: any;\n  /** savings Id of the savings account. */\n  recurringDepositAccountId: string;\n  /** charge details */\n  chargeDetails: any;\n\n  /**\n   * Retrieves charge template data from `resolve`\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {Dates} dateUtils Date Utils\n   * @param {SavingsService} savingsService Savings Service\n   */\n  constructor(\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private dateUtils: Dates,\n    private savingsService: SavingsService,\n    private settingsService: SettingsService\n  ) {\n    this.route.data.subscribe((data: { recurringDepositsAccountActionData: any }) => {\n      this.savingsChargeOptions = data.recurringDepositsAccountActionData.chargeOptions;\n    });\n    this.recurringDepositAccountId = this.route.parent.snapshot.params['recurringDepositAccountId'];\n  }\n\n  /**\n   * Creates the Recurring Deposits Charge form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createRecurringDepositsChargeForm();\n    this.buildDependencies();\n  }\n\n  buildDependencies() {\n    this.recurringDepositsChargeForm.controls.chargeId.valueChanges.subscribe(chargeId => {\n      this.savingsService.getChargeTemplate(chargeId).subscribe((data: any) => {\n        this.chargeDetails = data;\n        const chargeTimeType = data.chargeTimeType.id;\n        if (data.chargeTimeType.value === 'Withdrawal Fee' || data.chargeTimeType.value === 'Saving No Activity Fee') {\n          this.chargeDetails.dueDateNotRequired = true;\n        }\n        if (data.chargeTimeType.value === 'Annual Fee' || data.chargeTimeType.value === 'Monthly Fee') {\n          this.chargeDetails.chargeTimeTypeAnnualOrMonth = true;\n        }\n        if (!this.chargeDetails.dueDateNotRequired && !this.chargeDetails.chargeTimeTypeAnnualOrMonth) {\n          this.recurringDepositsChargeForm.addControl('dueDate', new FormControl('', Validators.required));\n        } else {\n          this.recurringDepositsChargeForm.removeControl('dueDate');\n        }\n        if (!this.chargeDetails.dueDateNotRequired && this.chargeDetails.chargeTimeTypeAnnualOrMonth) {\n          this.recurringDepositsChargeForm.addControl('feeOnMonthDay', new FormControl('', Validators.required));\n        } else {\n          this.recurringDepositsChargeForm.removeControl('feeOnMonthDay');\n        }\n        if (chargeTimeType.value === 'Monthly Fee') {\n          this.recurringDepositsChargeForm.addControl('feeInterval', new FormControl(data.feeInterval, Validators.required));\n        } else {\n          this.recurringDepositsChargeForm.removeControl('feeInterval');\n        }\n        this.recurringDepositsChargeForm.patchValue({\n          'amount': data.amount,\n          'chargeCalculationType': data.chargeCalculationType.id,\n          'chargeTimeType': data.chargeTimeType.id\n        });\n      });\n    });\n  }\n\n  /**\n   * Creates the Recurring Deposits Charge form.\n   */\n  createRecurringDepositsChargeForm() {\n    this.recurringDepositsChargeForm = this.formBuilder.group({\n      'chargeId': ['', Validators.required],\n      'amount': ['', Validators.required],\n      'chargeCalculationType': [{ value: '', disabled: true }],\n      'chargeTimeType': [{ value: '', disabled: true }]\n    });\n  }\n\n  /**\n   * Submits savings charge.\n   */\n  submit() {\n    const savingsCharge = this.recurringDepositsChargeForm.value;\n    savingsCharge.locale = this.settingsService.language.code;\n    if (!savingsCharge.feeInterval) {\n      savingsCharge.feeInterval = this.chargeDetails.feeInterval;\n    }\n    if (this.chargeDetails.dueDateNotRequired !== true) {\n      if (this.chargeDetails.chargeTimeTypeAnnualOrMonth === true) {\n        const monthDayFormat = 'MMMM-dd'; // TODO: Update once language and date settings are setup\n        savingsCharge.monthDayFormat = monthDayFormat;\n        if (savingsCharge.feeOnMonthDay) {\n          const prevDate = this.recurringDepositsChargeForm.value.feeOnMonthDay;\n          savingsCharge.feeOnMonthDay = this.dateUtils.formatDate(prevDate, monthDayFormat);\n        }\n      } else {\n        const dateFormat = this.settingsService.dateFormat;\n        savingsCharge.dateFormat = dateFormat;\n        if (savingsCharge.dueDate) {\n          const prevDate = this.recurringDepositsChargeForm.value.dueDate;\n          savingsCharge.dueDate = this.dateUtils.formatDate(prevDate, dateFormat);\n        }\n      }\n    }\n    this.savingsService.createSavingsCharge(this.recurringDepositAccountId, 'charges', savingsCharge).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"prematureCloseRecurringDepositsAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"closedOnDatePicker.open()\">\n            <mat-label>Closed On</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"closedOnDatePicker\" required\n              formControlName=\"closedOnDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"closedOnDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #closedOnDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"prematureCloseRecurringDepositsAccountForm.controls.closedOnDate.hasError('required')\">\n              Closed On Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" [disabled]=\"!prematureCloseRecurringDepositsAccountForm\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { RecurringDepositsService } from '../../recurring-deposits.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Premature Close Recurring Deposits Account Component\n */\n\n@Component({\n  selector: 'mifosx-premature-close-recurring-deposit-account',\n  templateUrl: './premature-close-recurring-deposit-account.component.html',\n  styleUrls: ['./premature-close-recurring-deposit-account.component.scss']\n})\nexport class PrematureCloseRecurringDepositAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** premature close Recurring Deposits Account form. */\n  prematureCloseRecurringDepositsAccountForm: FormGroup;\n  /** Recurring Deposits Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {RecurringDepositsService} recurringDepositsService Recurring Deposits Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private recurringDepositsService: RecurringDepositsService,\n    private dateUtils: Dates,\n    private route: ActivatedRoute,\n    private router: Router,\n    private settingsService: SettingsService, ) {\n    this.accountId = this.route.parent.snapshot.params['recurringDepositAccountId'];\n  }\n\n  /**\n   * Creates the premature close recurring deposits form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createprematureCloseRecurringDepositsAccountForm();\n  }\n\n  /**\n   * Creates the premature close recurring deposits account form.\n   */\n  createprematureCloseRecurringDepositsAccountForm() {\n    this.prematureCloseRecurringDepositsAccountForm = this.formBuilder.group({\n      'closedOnDate': ['', Validators.required]\n    });\n  }\n\n  /**\n   * Submits the form and premature closes the recurring deposit account,\n   * if successful redirects to the recurring deposit account.\n   */\n  submit() {\n    const prematureCloseRecurringDepositsAccountFormData = this.prematureCloseRecurringDepositsAccountForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevClosedOnDate: Date = this.prematureCloseRecurringDepositsAccountForm.value.closedOnDate;\n    if (prematureCloseRecurringDepositsAccountFormData.closedOnDate instanceof Date) {\n      prematureCloseRecurringDepositsAccountFormData.closedOnDate = this.dateUtils.formatDate(prevClosedOnDate, dateFormat);\n    }\n    const data = {\n      ...prematureCloseRecurringDepositsAccountFormData,\n      dateFormat,\n      locale\n    };\n    this.recurringDepositsService.executeRecurringDepositsAccountCommand(this.accountId, 'prematureClose', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"closeRecurringDepositForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <h3 class=\"mat-h3\" fxFlexFill>{{title}}</h3>\n\n          <mat-form-field (click)=\"closedOnDatePicker.open()\">\n            <mat-label>Closed On</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"closedOnDatePicker\" required\n              formControlName=\"closedOnDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"closedOnDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #closedOnDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"closeRecurringDepositForm.controls.closedOnDate.hasError('required')\">\n              Closed On <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Maturity Amount</mat-label>\n            <input matInput required formControlName=\"maturityAmount\">\n            <mat-error *ngIf=\"closeRecurringDepositForm.controls.maturityAmount.hasError('required')\">\n              Maturity Amount <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Action</mat-label>\n            <mat-select formControlName=\"onAccountClosureId\" required>\n              <mat-option *ngFor=\"let onAccountClosureOption of onAccountClosureOptions\"\n                [value]=\"onAccountClosureOption.id\">\n                {{ onAccountClosureOption.value }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"closeRecurringDepositForm.controls.onAccountClosureId.hasError('required')\">\n              Action <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Payment Type Id</mat-label>\n            <mat-select formControlName=\"paymentTypeId\" required>\n              <mat-option *ngFor=\"let paymentType of paymentTypes\" [value]=\"paymentType.id\">\n                {{ paymentType.name }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"closeRecurringDepositForm.controls.paymentTypeId.hasError('required')\">\n              Payment Type <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <div fxFlexFill>\n            <span fxFlex=\"25%\">Show Payment Details</span>\n            <span fxFlex=\"75%\" class=\"expandcollapsebutton\" (click)=\"toggleDisplay()\">\n              <button mat-raised-button color=\"primary\" *ngIf=\"showPaymentDetails\">\n                <i class=\"fa fa-minus\"></i>\n              </button>\n              <button mat-raised-button color=\"primary\" *ngIf=\"!showPaymentDetails\">\n                <i class=\"fa fa-plus\"></i>\n              </button>\n            </span>\n          </div>\n\n          <ng-container *ngIf=\"showPaymentDetails\">\n            <mat-form-field>\n              <mat-label> Account #</mat-label>\n              <input matInput formControlName=\"accountNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Cheque #</mat-label>\n              <input matInput formControlName=\"chequeNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Routing Code</mat-label>\n              <input matInput formControlName=\"routingCode\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Reciept #</mat-label>\n              <input matInput formControlName=\"receiptNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Bank #</mat-label>\n              <input matInput formControlName=\"bankNumber\">\n            </mat-form-field>\n          </ng-container>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../general']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" [disabled]=\"!closeRecurringDepositForm.valid\">Submit</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { RecurringDepositsService } from '../../recurring-deposits.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Close Recurring Deposits Account Component\n */\n@Component({\n  selector: 'mifosx-close-recurring-deposits-account',\n  templateUrl: './close-recurring-deposits-account.component.html',\n  styleUrls: ['./close-recurring-deposits-account.component.scss']\n})\nexport class CloseRecurringDepositsAccountComponent implements OnInit {\n\n  /** Maturity Amount */\n  maturityAmount: any;\n  /** On Account Closure Options */\n  onAccountClosureOptions: any;\n  /** Payment Types */\n  paymentTypes: any;\n  /** Title */\n  title: string;\n  /** Account Id */\n  accountId: string;\n  /** Show payment details */\n  showPaymentDetails = false;\n  /** Minimum Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Date allowed. */\n  maxDate = new Date();\n  /** Close Recurring Deposit Account form. */\n  closeRecurringDepositForm: FormGroup;\n\n  /**\n   * Retrieves action details template data from `resolve`\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {Dates} dateUtils Date Utils\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private dateUtils: Dates,\n    private recurringDepositsService: RecurringDepositsService,\n    private settingsService: SettingsService\n  ) {\n    this.route.data.subscribe((data: { recurringDepositsAccountActionData: any }) => {\n      this.maturityAmount = data.recurringDepositsAccountActionData.maturityAmount;\n      this.onAccountClosureOptions = data.recurringDepositsAccountActionData.onAccountClosureOptions;\n      this.paymentTypes = data.recurringDepositsAccountActionData.paymentTypeOptions;\n      if (data.recurringDepositsAccountActionData.maturityAmount) {\n        this.title = 'Recurring Deposit Closure on Maturity';\n      } else {\n        this.title = 'Recurring Deposit Closure';\n      }\n    });\n    this.accountId = this.route.parent.snapshot.params['recurringDepositAccountId'];\n  }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createcloseRecurringDepositForm();\n  }\n\n  /**\n   * Creates the close form.\n   */\n  createcloseRecurringDepositForm() {\n    this.closeRecurringDepositForm = this.formBuilder.group({\n      'closedOnDate': [new Date(), Validators.required],\n      'maturityAmount': [{ value: this.maturityAmount, disabled: true}],\n      'onAccountClosureId': ['', Validators.required],\n      'paymentTypeId': ['', Validators.required],\n      'accountNumber': '',\n      'chequeNumber': '',\n      'routingCode': '',\n      'receiptNumber': '',\n      'bankNumber': '',\n      'note': ''\n    });\n  }\n\n  /**\n   * Toggles the display of payment details\n   */\n  toggleDisplay() {\n    this.showPaymentDetails = !(this.showPaymentDetails);\n  }\n\n  /**\n   * Submits the close recurring deposit form\n   */\n  submit() {\n    const closeRecurringDepositFormData = this.closeRecurringDepositForm.value;\n    const closedOnDate = this.closeRecurringDepositForm.value.closedOnDate;\n    const dateFormat = this.settingsService.dateFormat;\n    const locale = this.settingsService.language.code;\n    if (closeRecurringDepositFormData.closedOnDate instanceof Date) {\n      closeRecurringDepositFormData.closedOnDate = this.dateUtils.formatDate(closedOnDate, dateFormat);\n    }\n    const data = {\n      ...closeRecurringDepositFormData,\n      dateFormat,\n      locale\n    };\n    this.recurringDepositsService.executeRecurringDepositsAccountCommand(this.accountId, 'close', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"depositRecurringDepositForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"transactionDatePicker.open()\">\n            <mat-label>Transaction Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"transactionDatePicker\" required\n              formControlName=\"transactionDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"transactionDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #transactionDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"depositRecurringDepositForm.controls.transactionDate.hasError('required')\">\n              Transaction Date <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Transaction Amount</mat-label>\n            <input matInput required formControlName=\"transactionAmount\">\n            <mat-error *ngIf=\"depositRecurringDepositForm.controls.transactionAmount.hasError('required')\">\n              Transaction Amount <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Payment Type Id</mat-label>\n            <mat-select formControlName=\"paymentTypeId\" required>\n              <mat-option *ngFor=\"let paymentType of paymentTypes\" [value]=\"paymentType.id\">\n                {{ paymentType.name }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"depositRecurringDepositForm.controls.paymentTypeId.hasError('required')\">\n              Payment Type <strong>is required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <div fxFlexFill>\n            <span fxFlex=\"25%\">Show Payment Details</span>\n            <span fxFlex=\"75%\" class=\"expandcollapsebutton\" (click)=\"toggleDisplay()\">\n              <button mat-raised-button color=\"primary\" *ngIf=\"showPaymentDetails\">\n                <i class=\"fa fa-minus\"></i>\n              </button>\n              <button mat-raised-button color=\"primary\" *ngIf=\"!showPaymentDetails\">\n                <i class=\"fa fa-plus\"></i>\n              </button>\n            </span>\n          </div>\n\n          <ng-container *ngIf=\"showPaymentDetails\">\n            <mat-form-field>\n              <mat-label> Account #</mat-label>\n              <input matInput formControlName=\"accountNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Cheque #</mat-label>\n              <input matInput formControlName=\"chequeNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Routing Code</mat-label>\n              <input matInput formControlName=\"routingCode\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Reciept #</mat-label>\n              <input matInput formControlName=\"receiptNumber\">\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Bank #</mat-label>\n              <input matInput formControlName=\"bankNumber\">\n            </mat-form-field>\n          </ng-container>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../general']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" [disabled]=\"!depositRecurringDepositForm.valid\">Submit</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { RecurringDepositsService } from '../../recurring-deposits.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Deposits Recurring Deposits Account Component\n */\n@Component({\n  selector: 'mifosx-deposit-recurring-deposits-account',\n  templateUrl: './deposit-recurring-deposits-account.component.html',\n  styleUrls: ['./deposit-recurring-deposits-account.component.scss']\n})\nexport class DepositRecurringDepositsAccountComponent implements OnInit {\n\n  /** Transactions Amount */\n  transactionAmount: any;\n  /** Outstanding Charge Amount */\n  outstandingChargeAmount: any;\n  /** Payment Types */\n  paymentTypes: any;\n  /** Account Id */\n  accountId: string;\n  /** Show payment details */\n  showPaymentDetails = false;\n  /** Minimum Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Date allowed. */\n  maxDate = new Date();\n  /** Deposits Recurring Deposit Account form. */\n  depositRecurringDepositForm: FormGroup;\n\n  /**\n   * Retrieves action details transactions template data from `resolve`\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {Dates} dateUtils Date Utils\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private dateUtils: Dates,\n    private recurringDepositsService: RecurringDepositsService,\n    private settingsService: SettingsService\n  ) {\n    this.route.data.subscribe((data: { recurringDepositsAccountActionData: any }) => {\n      this.transactionAmount = data.recurringDepositsAccountActionData.amount;\n      this.paymentTypes = data.recurringDepositsAccountActionData.paymentTypeOptions;\n      if (data.recurringDepositsAccountActionData.outstandingChargeAmount && data.recurringDepositsAccountActionData.outstandingChargeAmount > 0) {\n        this.outstandingChargeAmount = data.recurringDepositsAccountActionData.outstandingChargeAmount;\n        this.transactionAmount = this.transactionAmount + this.outstandingChargeAmount;\n      }\n    });\n    this.accountId = this.route.parent.snapshot.params['recurringDepositAccountId'];\n  }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createdepositRecurringDepositForm();\n  }\n\n  /**\n   * Creates the deposits form.\n   */\n  createdepositRecurringDepositForm() {\n    this.depositRecurringDepositForm = this.formBuilder.group({\n      'transactionDate': [new Date(), Validators.required],\n      'transactionAmount': [this.transactionAmount, Validators.required],\n      'paymentTypeId': ['', Validators.required],\n      'accountNumber': '',\n      'chequeNumber': '',\n      'routingCode': '',\n      'receiptNumber': '',\n      'bankNumber': '',\n      'note': ''\n    });\n  }\n\n  /**\n   * Toggles the display of payment details\n   */\n  toggleDisplay() {\n    this.showPaymentDetails = !(this.showPaymentDetails);\n  }\n\n  /**\n   * Submits the deposits recurring deposit form\n   */\n  submit() {\n    const depositRecurringDepositFormData = this.depositRecurringDepositForm.value;\n    const dateFormat = this.settingsService.dateFormat;\n    const locale = this.settingsService.language.code;\n    const prevTransactionDate = this.depositRecurringDepositForm.value.transactionDate;\n    if (depositRecurringDepositFormData.transactionDate instanceof Date) {\n      depositRecurringDepositFormData.transactionDate = this.dateUtils.formatDate(prevTransactionDate, dateFormat);\n    }\n    const data = {\n      ...depositRecurringDepositFormData,\n      dateFormat,\n      locale\n    };\n    this.recurringDepositsService.executeRecurringDepositsAccountCommand(this.accountId, 'deposit', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<mifosx-activate-recurring-deposits-account *ngIf=\"actions['Activate']\"></mifosx-activate-recurring-deposits-account>\n<mifosx-undo-approval-recurring-deposits-account *ngIf=\"actions['Undo Approval']\"></mifosx-undo-approval-recurring-deposits-account>\n<mifosx-approve-recurring-deposits-account *ngIf=\"actions['Approve']\"></mifosx-approve-recurring-deposits-account>\n<mifosx-reject-recurring-deposits-account *ngIf=\"actions['Reject']\"></mifosx-reject-recurring-deposits-account>\n<mifosx-withdraw-by-client-recurring-deposits-account *ngIf=\"actions['Withdraw By Client']\"></mifosx-withdraw-by-client-recurring-deposits-account>\n<mifosx-add-charge-recurring-deposits-account *ngIf=\"actions['Add Charge']\"></mifosx-add-charge-recurring-deposits-account>\n<mifosx-premature-close-recurring-deposit-account *ngIf=\"actions['Premature Close']\"></mifosx-premature-close-recurring-deposit-account>\n<mifosx-close-recurring-deposits-account *ngIf=\"actions['Close']\"></mifosx-close-recurring-deposits-account>\n<mifosx-deposit-recurring-deposits-account *ngIf=\"actions['Deposit']\"></mifosx-deposit-recurring-deposits-account>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'mifosx-recurring-deposits-account-actions',\n  templateUrl: './recurring-deposits-account-actions.component.html',\n  styleUrls: ['./recurring-deposits-account-actions.component.scss']\n})\nexport class RecurringDepositsAccountActionsComponent {\n\n  /** Flag object to store possible actions and render appropriate UI to the user */\n  actions: {\n    'Activate': boolean\n    'Undo Approval': boolean\n    'Approve': boolean\n    'Reject': boolean\n    'Withdraw By Client': boolean\n    'Add Charge': boolean\n    'Premature Close': boolean\n    'Close': boolean\n    'Deposit': boolean\n  } = {\n      'Activate': false,\n      'Undo Approval': false,\n      'Approve': false,\n      'Reject': false,\n      'Withdraw By Client': false,\n      'Add Charge': false,\n      'Premature Close': false,\n      'Close': false,\n      'Deposit': false\n    };\n\n  /**\n   * @param {ActivatedRoute} route Activated Route\n   */\n  constructor(private route: ActivatedRoute) {\n    const name = this.route.snapshot.params['name'];\n    this.actions[name] = true;\n  }\n\n}\n","<div fxLayoutAlign=\"end\" class=\"container m-b-20\" fxLayoutGap=\"2%\"\n  *ngIf=\"!(transactionData.reversed)\">\n  <span *mifosxHasPermission=\"'ADJUSTTRANSACTION_SAVINGSACCOUNT'\">\n    <button mat-raised-button color=\"primary\"\n      *ngIf=\"!(transactionData.transactionType.value == 'Transfer' || transactionData.reversed == 'true')\"\n      [routerLink]=\"'edit'\">\n      <fa-icon icon=\"edit\" class=\"m-r-10\"></fa-icon>Edit\n    </button>\n  </span>\n  <button mat-raised-button color=\"warn\"\n    *mifosxHasPermission=\"'UNDOTRANSACTION_SAVINGSACCOUNT'\"\n    (click)=\"undoTransaction()\">\n    <fa-icon icon=\"undo\" class=\"m-r-10\"></fa-icon>Undo\n  </button>\n</div>\n\n<div class=\"container\">\n\n  <mat-card>\n\n    <mat-card-content>\n\n      <div fxLayout=\"row wrap\" class=\"content\">\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Transaction Id\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ transactionData.id }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Type\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ transactionData.transactionType.value }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Transaction Date\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ transactionData.date  | dateFormat }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Currency\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ transactionData.currency.displayLabel }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Amount\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ transactionData.amount }}\n        </div>\n\n        <div fxFlex=\"50%\" *ngIf=\"transactionData.note\" class=\"mat-body-strong\">\n          Note\n        </div>\n\n        <div fxFlex=\"50%\" *ngIf=\"transactionData.note\">\n          {{ transactionData.note }}\n        </div>\n\n        <ng-container *ngIf=\"transactionData.paymentDetailData\">\n\n          <div *ngIf=\"transactionData.paymentDetailData.paymentType\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            Payment Type\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.paymentType\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.paymentType.name }}\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.accountNumber\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            Account No.\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.accountNumber\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.accountNumber }}\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.checkNumber\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            Cheque Number\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.checkNumber\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.checkNumber }}\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.routingCode\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            Routing Code\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.routingCode\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.routingCode }}\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.receiptNumber\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            Receipt No.\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.receiptNumber\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.receiptNumber }}\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.bankNumber\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            Bank No.\n          </div>\n\n          <div *ngIf=\"transactionData.paymentDetailData.bankNumber\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.bankNumber }}\n          </div>\n\n        </ng-container>\n\n      </div>\n\n    </mat-card-content>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\n\n/** Custom Services */\nimport { RecurringDepositsService } from 'app/deposits/recurring-deposits/recurring-deposits.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Custom Dialogs */\nimport { RecurringDepositConfirmationDialogComponent } from '../../custom-dialogs/recurring-deposit-confirmation-dialog/recurring-deposit-confirmation-dialog.component';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * View Transaction Component.\n * TODO: Add support for account transfers.\n */\n@Component({\n  selector: 'mifosx-view-transaction',\n  templateUrl: './view-transaction.component.html',\n  styleUrls: ['./view-transaction.component.scss']\n})\nexport class ViewTransactionComponent {\n\n  /** Transaction data. */\n  transactionData: any;\n\n  /**\n   * Retrieves the Transaction data from `resolve`.\n   * @param {RecurringDepositsService} recurringDepositsService Savings Service\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   * @param {MatDialog} dialog Dialog reference.\n   * @param {Dates} dateUtils Date Utils.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private recurringDepositsService: RecurringDepositsService,\n    private route: ActivatedRoute,\n    private dateUtils: Dates,\n    private router: Router,\n    public dialog: MatDialog,\n    private settingsService: SettingsService, ) {\n    this.route.data.subscribe((data: { recurringDepositsAccountTransaction: any }) => {\n      this.transactionData = data.recurringDepositsAccountTransaction;\n    });\n  }\n\n  /**\n   * Undo the recurring deposits transaction\n   */\n  undoTransaction() {\n    const accountId = this.route.parent.snapshot.params['recurringDepositAccountId'];\n    const undoTransactionAccountDialogRef = this.dialog.open(RecurringDepositConfirmationDialogComponent, { data: { heading: 'Undo Transaction', dialogContext: 'Are you sure you want to undo this transaction ?' } });\n    undoTransactionAccountDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        const locale = this.settingsService.language.code;\n        const dateFormat = this.settingsService.dateFormat;\n        const data = {\n          transactionDate: this.dateUtils.formatDate(this.transactionData.date && new Date(this.transactionData.date), dateFormat),\n          transactionAmount: 0,\n          dateFormat,\n          locale\n        };\n        this.recurringDepositsService.executeRecurringDepositsAccountTransactionsCommand(accountId, 'undo', data, this.transactionData.id).subscribe(() => {\n          this.router.navigate(['../'], { relativeTo: this.route });\n        });\n      }\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"editTransactionForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content fxLayout=\"column\">\n\n        <mat-form-field (click)=\"dueDatePicker.open()\">\n          <mat-label>Transaction Date</mat-label>\n          <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"dueDatePicker\"\n            formControlName=\"transactionDate\" required>\n          <mat-datepicker-toggle matSuffix [for]=\"dueDatePicker\"></mat-datepicker-toggle>\n          <mat-datepicker #dueDatePicker></mat-datepicker>\n          <mat-error *ngIf=\"editTransactionForm.controls.transactionDate.hasError('required')\">\n            Transaction Date is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n          <mat-label>Transaction Amount</mat-label>\n          <input type=\"number\" formControlName=\"transactionAmount\" required matInput />\n          <mat-error *ngIf=\"editTransactionForm.controls.transactionAmount.hasError('required')\">\n            Transaction Amount is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n          <mat-label>Payment Type</mat-label>\n          <mat-select formControlName=\"paymentTypeId\">\n            <mat-option *ngFor=\"let paymentType of paymentTypeOptions\" [value]=\"paymentType.id\">\n              {{ paymentType.name }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <div fxLayoutGap=\"5px\" fxLayout=\"row\" fxLayout.xs=\"column\">\n          <mat-label fxFlexAlign=\"center\">Show Payment Details</mat-label>\n          <button type=\"button\" mat-mini-fab color=\"primary\" (click)=\"addPaymentDetails()\">\n            <fa-icon [icon]=\"!addPaymentDetailsFlag ? 'plus-circle' : 'minus-circle'\" size=\"lg\"></fa-icon>\n          </button>\n        </div>\n\n        <mat-form-field *ngIf=\"editTransactionForm.controls['accountNumber']\">\n          <mat-label>Account Number</mat-label>\n          <input type=\"number\" formControlName=\"accountNumber\" matInput />\n        </mat-form-field>\n\n        <mat-form-field *ngIf=\"editTransactionForm.controls['checkNumber']\">\n          <mat-label>Cheque</mat-label>\n          <input type=\"number\" formControlName=\"checkNumber\" matInput />\n        </mat-form-field>\n\n        <mat-form-field *ngIf=\"editTransactionForm.controls['routingCode']\">\n          <mat-label>Routing Code</mat-label>\n          <input formControlName=\"routingCode\" matInput />\n        </mat-form-field>\n\n        <mat-form-field *ngIf=\"editTransactionForm.controls['receiptNumber']\">\n          <mat-label>Receipt Number</mat-label>\n          <input formControlName=\"receiptNumber\" matInput />\n        </mat-form-field>\n\n        <mat-form-field *ngIf=\"editTransactionForm.controls['bankNumber']\">\n          <mat-label>Bank</mat-label>\n          <input formControlName=\"bankNumber\" matInput />\n        </mat-form-field>\n\n        <mat-card-actions fxLayoutGap=\"5px\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!editTransactionForm.valid\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\n\n/** Custom Services */\nimport { RecurringDepositsService } from 'app/deposits/recurring-deposits/recurring-deposits.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Edit Transaction component.\n */\n@Component({\n  selector: 'mifosx-edit-transaction',\n  templateUrl: './edit-transaction.component.html',\n  styleUrls: ['./edit-transaction.component.scss']\n})\nexport class EditTransactionComponent implements OnInit {\n\n  /** Minimum Due Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Due Date allowed. */\n  maxDate = new Date();\n  /** Recurring Deposits transaction form. */\n  editTransactionForm: FormGroup;\n  /** Recurring Deposits transaction payment options. */\n  paymentTypeOptions: {\n    id: number,\n    name: string,\n    description: string,\n    isCashPayment: boolean,\n    position: number\n  }[];\n  /** Flag to enable payment details fields. */\n  addPaymentDetailsFlag: Boolean = false;\n  /** Recurring deposit account's Id */\n  recurringDepositAccountId: string;\n  /** Transaction Template */\n  transactionTemplateData: any;\n\n  /**\n   * Retrieves the Recurring Deposit Account transaction template data from `resolve`.\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {RecurringDepositsService} recurringDepositsService Recurring Deposits Service.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Dates} dateUtils Date Utils.\n   * @param {Router} router Router for navigation.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private dateUtils: Dates,\n    private recurringDepositsService: RecurringDepositsService,\n    private settingsService: SettingsService, ) {\n    this.route.data.subscribe((data: { recurringDepositsAccountTransactionTemplate: any }) => {\n      this.transactionTemplateData = data.recurringDepositsAccountTransactionTemplate;\n      this.paymentTypeOptions = this.transactionTemplateData.paymentTypeOptions;\n    });\n    this.recurringDepositAccountId = this.route.parent.parent.snapshot.params['recurringDepositAccountId'];\n  }\n\n  /**\n   * Creates the Recurring Deposits account transaction form when component loads.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createEditTransactionForm();\n    this.editTransactionForm.patchValue({\n      'transactionDate': this.transactionTemplateData.date && new Date(this.transactionTemplateData.date),\n      'transactionAmount': this.transactionTemplateData.amount,\n      'paymentTypeId': this.transactionTemplateData.paymentTypeId\n    });\n  }\n\n  /**\n   * Create Edit Recurring Deposit Account Transaction Form.\n   */\n  createEditTransactionForm() {\n    this.editTransactionForm = this.formBuilder.group({\n      'transactionDate': ['', Validators.required],\n      'transactionAmount': ['', Validators.required],\n      'paymentTypeId': [''],\n    });\n  }\n\n  /**\n   * Add payment detail fields to the UI.\n   */\n  addPaymentDetails() {\n    this.addPaymentDetailsFlag = !this.addPaymentDetailsFlag;\n    if (this.addPaymentDetailsFlag) {\n      this.editTransactionForm.addControl('accountNumber', new FormControl(''));\n      this.editTransactionForm.addControl('checkNumber', new FormControl(''));\n      this.editTransactionForm.addControl('routingCode', new FormControl(''));\n      this.editTransactionForm.addControl('receiptNumber', new FormControl(''));\n      this.editTransactionForm.addControl('bankNumber', new FormControl(''));\n    } else {\n      this.editTransactionForm.removeControl('accountNumber');\n      this.editTransactionForm.removeControl('checkNumber');\n      this.editTransactionForm.removeControl('routingCode');\n      this.editTransactionForm.removeControl('receiptNumber');\n      this.editTransactionForm.removeControl('bankNumber');\n    }\n  }\n\n  /**\n   * Submit the transaction details.\n   */\n  submit() {\n    const editTransactionFormData = this.editTransactionForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevTransactionDate: Date = this.editTransactionForm.value.transactionDate;\n    if (editTransactionFormData.transactionDate instanceof Date) {\n      editTransactionFormData.transactionDate = this.dateUtils.formatDate(prevTransactionDate, dateFormat);\n    }\n    const data = {\n      ...editTransactionFormData,\n      dateFormat,\n      locale\n    };\n    this.recurringDepositsService.executeRecurringDepositsAccountTransactionsCommand(this.recurringDepositAccountId, 'modify', data, this.transactionTemplateData.id)\n      .subscribe(res => {\n        this.router.navigate(['../'], { relativeTo: this.route });\n      });\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { RecurringDepositsService } from '../recurring-deposits.service';\n\n/**\n * RecurringDeposits Account data resolver.\n */\n@Injectable()\nexport class RecurringDepositsAccountViewResolver implements Resolve<Object> {\n\n  /**\n   * @param {RecurringDepositsService} RecurringDepositsService RecurringDeposits service.\n   */\n  constructor(private recurringDepositsService: RecurringDepositsService) { }\n\n  /**\n   * Returns the RecurringDeposits Account data.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const recurringDepositAccountId = route.paramMap.get('recurringDepositAccountId');\n    return this.recurringDepositsService.getRecurringDepositsAccountData(recurringDepositAccountId);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { RecurringDepositsService } from '../recurring-deposits.service';\n\n/**\n * RecurringDeposits Account data resolver.\n */\n@Injectable()\nexport class RecurringDepositsAccountDataResolver implements Resolve<Object> {\n\n  /**\n   * @param {RecurringDepositsService} RecurringDepositsService RecurringDeposits service.\n   */\n  constructor(private recurringDepositsService: RecurringDepositsService) { }\n\n  /**\n   * Returns the RecurringDeposits Account data.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const recurringDepositAccountId = route.parent.paramMap.get('recurringDepositAccountId');\n    return this.recurringDepositsService.getRecurringDepositsAccountData(recurringDepositAccountId);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { RecurringDepositsService } from '../recurring-deposits.service';\n\n/**\n * Savings Account Template resolver.\n */\n@Injectable()\nexport class RecurringDepositsAccountTemplateResolver implements Resolve<Object> {\n\n  /**\n   * @param {recurringDepositsService} RecurringDepositsService Savings service.\n   */\n  constructor(private recurringDepositsService: RecurringDepositsService) { }\n\n  /**\n   * Returns the Shares Account Template.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const clientId = route.parent.parent.paramMap.get('clientId');\n    return this.recurringDepositsService.getRecurringDepositsAccountTemplate(clientId);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { RecurringDepositsService } from '../recurring-deposits.service';\n\n/**\n * Recurring Deposits Account Actions data resolver.\n */\n@Injectable()\nexport class RecurringDepositsAccountActionsResolver implements Resolve<Object> {\n\n  /**\n   * @param {SavingsService} SavingsService Savings service.\n   * @param {RecurringDepositsService} recurringDepositsService Recurring Deposits Service.\n   */\n  constructor(private savingsService: SavingsService,\n    private recurringDepositsService: RecurringDepositsService) { }\n\n  /**\n   * Returns the Recurring deposits account actions data.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const actionName = route.paramMap.get('name');\n    const recurringDepositAccountId = route.paramMap.get('recurringDepositAccountId') || route.parent.parent.paramMap.get('recurringDepositAccountId');\n    switch (actionName) {\n      case 'Add Charge':\n        return this.savingsService.getSavingsChargeTemplateResource(recurringDepositAccountId);\n      case 'Close':\n        return this.recurringDepositsService.getRecurringDepositAccountActionResource(recurringDepositAccountId, 'close');\n      case 'Deposit':\n        return this.recurringDepositsService.getRecurringDepositAccountTransactionTemplateResource(recurringDepositAccountId, 'deposit');\n      default:\n        return undefined;\n    }\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-horizontal-stepper class=\"mat-elevation-z8\" labelPosition=\"bottom\" #recurringDepositAccountStepper>\n    <ng-template matStepperIcon=\"number\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"edit\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"done\">\n      <fa-icon icon=\"check\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"error\">\n      <fa-icon icon=\"exclamation-triangle\" size=\"lg\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"preview\">\n      <fa-icon icon=\"eye\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <mat-step [stepControl]=\"recurringDepositAccountDetailsForm\">\n\n      <ng-template matStepLabel>DETAILS</ng-template>\n\n      <mifosx-recurring-deposits-account-details-step\n        [recurringDepositsAccountTemplate]=\"recurringDepositsAccountAndTemplate\"\n        (recurringDepositsAccountProductTemplate)=\"setTemplate($event)\">\n      </mifosx-recurring-deposits-account-details-step>\n\n    </mat-step>\n\n    <mat-step [stepControl]=\"recurringDepositAccountCurrencyForm\">\n\n      <ng-template matStepLabel>CURRENCY</ng-template>\n\n      <mifosx-recurring-deposits-account-currency-step\n        [recurringDepositsAccountTemplate]=\"recurringDepositsAccountAndTemplate\"\n        [recurringDepositsAccountProductTemplate]=\"recurringDepositsAccountProductTemplate\">\n      </mifosx-recurring-deposits-account-currency-step>\n\n    </mat-step>\n\n    <mat-step [stepControl]=\"recurringDepositAccountTermsForm\">\n\n      <ng-template matStepLabel>TERMS</ng-template>\n\n      <mifosx-recurring-deposits-account-terms-step\n        [recurringDepositsAccountTemplate]=\"recurringDepositsAccountAndTemplate\"\n        [recurringDepositsAccountProductTemplate]=\"recurringDepositsAccountProductTemplate\">\n      </mifosx-recurring-deposits-account-terms-step>\n\n    </mat-step>\n\n    <mat-step [stepControl]=\"recurringDepositAccountSettingsForm\">\n\n      <ng-template matStepLabel>SETTINGS</ng-template>\n\n      <mifosx-recurring-deposits-account-settings-step\n        [recurringDepositsAccountTemplate]=\"recurringDepositsAccountAndTemplate\"\n        [recurringDepositsAccountProductTemplate]=\"recurringDepositsAccountProductTemplate\">\n      </mifosx-recurring-deposits-account-settings-step>\n\n    </mat-step>\n\n    <mat-step>\n\n      <ng-template matStepLabel>INTEREST RATE CHART</ng-template>\n\n      <mifosx-recurring-deposits-account-interest-rate-chart-step\n        [recurringDepositsAccountTemplate]=\"recurringDepositsAccountAndTemplate\"\n        [recurringDepositsAccountProductTemplate]=\"recurringDepositsAccountProductTemplate\">\n      </mifosx-recurring-deposits-account-interest-rate-chart-step>\n\n    </mat-step>\n\n    <mat-step>\n\n      <ng-template matStepLabel>CHARGES</ng-template>\n\n      <mifosx-recurring-deposits-account-charges-step\n        [recurringDepositsAccountTemplate]=\"recurringDepositsAccountAndTemplate\"\n        [recurringDepositsAccountProductTemplate]=\"recurringDepositsAccountProductTemplate\"\n        [recurringDepositAccountFormValid]=\"recurringDepositAccountFormValidAndNotPristine\"\n        [currencyCode]=\"recurringDepositAccountCurrencyForm.get('currencyCode')\">\n      </mifosx-recurring-deposits-account-charges-step>\n\n    </mat-step>\n\n    <mat-step state=\"preview\" *ngIf=\"recurringDepositAccountFormValidAndNotPristine\" completed>\n\n      <ng-template matStepLabel>PREVIEW</ng-template>\n\n      <mifosx-recurring-deposits-account-preview-step\n        [recurringDepositsAccountTemplate]=\"recurringDepositsAccountAndTemplate\"\n        [recurringDepositsAccountProductTemplate]=\"recurringDepositsAccountProductTemplate\"\n        [recurringDepositAccountData]=\"recurringDepositAccountData\" (submit)=\"submit()\">\n      </mifosx-recurring-deposits-account-preview-step>\n\n    </mat-step>\n\n  </mat-horizontal-stepper>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { RecurringDepositsService } from '../recurring-deposits.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Step Components */\nimport { RecurringDepositsAccountDetailsStepComponent } from '../recurring-deposits-account-stepper/recurring-deposits-account-details-step/recurring-deposits-account-details-step.component';\nimport { RecurringDepositsAccountTermsStepComponent } from '../recurring-deposits-account-stepper/recurring-deposits-account-terms-step/recurring-deposits-account-terms-step.component';\nimport { RecurringDepositsAccountCurrencyStepComponent } from '../recurring-deposits-account-stepper/recurring-deposits-account-currency-step/recurring-deposits-account-currency-step.component';\nimport { RecurringDepositsAccountSettingsStepComponent } from '../recurring-deposits-account-stepper/recurring-deposits-account-settings-step/recurring-deposits-account-settings-step.component';\nimport { RecurringDepositsAccountChargesStepComponent } from '../recurring-deposits-account-stepper/recurring-deposits-account-charges-step/recurring-deposits-account-charges-step.component';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Edit new recurring deposit account\n */\n@Component({\n  selector: 'mifosx-edit-recurring-deposit-account',\n  templateUrl: './edit-recurring-deposit-account.component.html',\n  styleUrls: ['./edit-recurring-deposit-account.component.scss']\n})\nexport class EditRecurringDepositAccountComponent implements OnInit {\n\n  /** Imports all the step component */\n  @ViewChild(RecurringDepositsAccountDetailsStepComponent, { static: true }) recurringDepositsAccountDetailsStep: RecurringDepositsAccountDetailsStepComponent;\n  @ViewChild(RecurringDepositsAccountCurrencyStepComponent, { static: true }) recurringDepositAccountCurrencyStep: RecurringDepositsAccountCurrencyStepComponent;\n  @ViewChild(RecurringDepositsAccountTermsStepComponent, { static: true }) recurringDepositAccountTermsStep: RecurringDepositsAccountTermsStepComponent;\n  @ViewChild(RecurringDepositsAccountSettingsStepComponent, { static: true }) recurringDepositAccountSettingsStep: RecurringDepositsAccountSettingsStepComponent;\n  @ViewChild(RecurringDepositsAccountChargesStepComponent, { static: true }) recurringDepositAccountChargesStep: RecurringDepositsAccountChargesStepComponent;\n\n  /** Recurring Deposits Account And Template */\n  recurringDepositsAccountAndTemplate: any;\n  /** Recurring Deposit Account Product Template */\n  recurringDepositsAccountProductTemplate: any;\n\n  constructor(private route: ActivatedRoute,\n    private router: Router,\n    private dateUtils: Dates,\n    private recurringDepositsService: RecurringDepositsService,\n    private settingsService: SettingsService,\n  ) {\n    this.route.data.subscribe((data: { recurringDepositsAccountAndTemplate: any }) => {\n      this.recurringDepositsAccountAndTemplate = data.recurringDepositsAccountAndTemplate;\n    });\n  }\n\n  /**\n   * Sets recurring deposits account product template.\n   * @param {any} $event API response\n   */\n  setTemplate($event: any) {\n    this.recurringDepositsAccountProductTemplate = $event;\n  }\n\n  ngOnInit() {\n  }\n\n  /** Get Recurring Deposit Account Details Form Data */\n  get recurringDepositAccountDetailsForm() {\n    return this.recurringDepositsAccountDetailsStep.recurringDepositAccountDetailsForm;\n  }\n\n  /** Get Recurring Deposit Account Currency Form Data */\n  get recurringDepositAccountCurrencyForm() {\n    return this.recurringDepositAccountCurrencyStep.recurringDepositAccountCurrencyForm;\n  }\n\n  /** Get Recurring Deposit Account Terms Form Data */\n  get recurringDepositAccountTermsForm() {\n    return this.recurringDepositAccountTermsStep.recurringDepositAccountTermsForm;\n  }\n\n  /** Get Recurring Deposit Account Settings Form Data */\n  get recurringDepositAccountSettingsForm() {\n    return this.recurringDepositAccountSettingsStep.recurringDepositAccountSettingsForm;\n  }\n\n  // Checks if stepper is valid and not pristine.\n  get recurringDepositAccountFormValidAndNotPristine() {\n    return (\n      this.recurringDepositAccountDetailsForm.valid &&\n      this.recurringDepositAccountTermsForm.valid &&\n      this.recurringDepositAccountSettingsForm.valid &&\n      (\n        !this.recurringDepositAccountDetailsForm.pristine ||\n        !this.recurringDepositAccountTermsForm.pristine ||\n        !this.recurringDepositAccountSettingsForm.pristine ||\n        !this.recurringDepositAccountChargesStep.pristine\n      )\n    );\n  }\n\n  /** Retrieves Data of all the forms */\n  get recurringDepositAccountData() {\n    return {\n      ...this.recurringDepositsAccountDetailsStep.recurringDepositAccountDetails,\n      ...this.recurringDepositAccountCurrencyStep.recurringDepositAccountCurrency,\n      ...this.recurringDepositAccountTermsStep.recurringDepositAccountTerms,\n      ...this.recurringDepositAccountSettingsStep.recurringDepositAccountSettings,\n      ...this.recurringDepositAccountChargesStep.recurringDepositAccountCharges,\n    };\n  }\n\n\n  /** Retrieves Data of all forms except Currency to submit the data */\n  get recurringDepositAccount() {\n    return {\n      ...this.recurringDepositsAccountDetailsStep.recurringDepositAccountDetails,\n      ...this.recurringDepositAccountTermsStep.recurringDepositAccountTerms,\n      ...this.recurringDepositAccountSettingsStep.recurringDepositAccountSettings,\n      ...this.recurringDepositAccountChargesStep.recurringDepositAccountCharges,\n    };\n  }\n\n  /**\n   * Submits the recurring deposit form to create a new recurring deposit account\n   */\n  submit() {\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const monthDayFormat = 'dd MMMM';\n    const recurringDepositAccount = {\n      ...this.recurringDepositAccount,\n      clientId: this.recurringDepositsAccountAndTemplate.clientId,\n      charges: this.recurringDepositAccount.charges.map((charge: any) => ({\n        chargeId: charge.id,\n        amount: charge.amount,\n        dueDate: charge.dueDate && this.dateUtils.formatDate(charge.dueDate, dateFormat),\n        feeOnMonthDay: charge.feeOnMonthDay,\n        feeInterval: charge.feeInterval\n      })),\n      isCalendarInherited: this.recurringDepositAccount.recurringDepositAccount ? this.recurringDepositAccount.recurringDepositAccount : false,\n      submittedOnDate: this.dateUtils.formatDate(this.recurringDepositAccount.submittedOnDate, dateFormat),\n      expectedFirstDepositOnDate: this.dateUtils.formatDate(this.recurringDepositAccount.expectedFirstDepositOnDate, dateFormat),\n      dateFormat,\n      monthDayFormat,\n      locale\n    };\n\n    this.recurringDepositsService.updateRecurringDepositAccount(this.recurringDepositsAccountAndTemplate.id, recurringDepositAccount).subscribe((response: any) => {\n      this.router.navigate(['../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { RecurringDepositsService } from '../recurring-deposits.service';\n\n/**\n * Recurring Deposits Account Template resolver.\n */\n@Injectable()\nexport class RecurringDepositsAccountAndTemplateResolver implements Resolve<Object> {\n\n    /**\n     * @param {RecurringDepositsService} recurringDepositsService Recurring Deposits service.\n     */\n    constructor(private recurringDepositsService: RecurringDepositsService) { }\n\n    /**\n     * Returns the Recurring Deposits Account Template.\n     * @param {ActivatedRouteSnapshot} route Route Snapshot\n     * @returns {Observable<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\n        const recurringDepositAccountId = route.paramMap.get('recurringDepositAccountId');\n        return this.recurringDepositsService.getRecurringDepositsAccountAndTemplate(recurringDepositAccountId);\n    }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { RecurringDepositsService } from '../recurring-deposits.service';\n\n/**\n * Recurring Deposits Account Transaction data resolver.\n */\n@Injectable()\nexport class RecurringDepositsAccountTransactionResolver implements Resolve<Object> {\n\n    /**\n     * @param {RecurringDepositsService} recurringDepositsService Recurring Deposits service.\n     */\n    constructor(private recurringDepositsService: RecurringDepositsService) { }\n\n    /**\n     * Returns the Recurring Deposits Account Transaction data.\n     * @param {ActivatedRouteSnapshot} route Route Snapshot\n     * @returns {Observable<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\n        const recurringDepositAccountId = route.parent.paramMap.get('recurringDepositAccountId');\n        const transactionId = route.paramMap.get('id');\n        return this.recurringDepositsService.getRecurringDepositsAccountTransaction(recurringDepositAccountId, transactionId);\n    }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { RecurringDepositsService } from '../recurring-deposits.service';\n\n/**\n * Recurring Deposits Account Transaction Template data resolver.\n */\n@Injectable()\nexport class RecurringDepositsAccountTransactionTemplateResolver implements Resolve<Object> {\n\n    /**\n     * @param {RecurringDepositsService} recurringDepositsService Recurring Deposits service.\n     */\n    constructor(private recurringDepositsService: RecurringDepositsService) { }\n\n    /**\n     * Returns the Recurring Deposits Account Transaction data.\n     * @param {ActivatedRouteSnapshot} route Route Snapshot\n     * @returns {Observable<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\n        const recurringDepositAccountId = route.parent.paramMap.get('recurringDepositAccountId');\n        const transactionId = route.paramMap.get('id');\n        return this.recurringDepositsService.getRecurringDepositsAccountTransactionTemplate(recurringDepositAccountId, transactionId);\n    }\n\n}\n","/** Angular Imports */\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n/** Translation Imports */\nimport { extract } from '../../core/i18n/i18n.service';\n\n/** Custom Components */\nimport { RecurringDepositsAccountViewComponent } from './recurring-deposits-account-view/recurring-deposits-account-view.component';\nimport { InterestRateChartTabComponent } from './recurring-deposits-account-view/interest-rate-chart-tab/interest-rate-chart-tab.component';\nimport { TransactionsTabComponent } from './recurring-deposits-account-view/transactions-tab/transactions-tab.component';\nimport { StandingInstructionsTabComponent } from './recurring-deposits-account-view/standing-instructions-tab/standing-instructions-tab.component';\nimport { ChargesTabComponent } from './recurring-deposits-account-view/charges-tab/charges-tab.component';\nimport { DatatableTabsComponent } from './recurring-deposits-account-view/datatable-tabs/datatable-tabs.component';\nimport { CreateRecurringDepositsAccountComponent } from './create-recurring-deposits-account/create-recurring-deposits-account.component';\nimport { RecurringDepositsAccountActionsComponent } from './recurring-deposits-account-actions/recurring-deposits-account-actions.component';\nimport { ViewTransactionComponent } from './recurring-deposits-account-view/transactions-tab/view-transaction/view-transaction.component';\nimport { EditTransactionComponent } from './recurring-deposits-account-view/transactions-tab/edit-transaction/edit-transaction.component';\n\n/** Custom Resolvers */\nimport { RecurringDepositsAccountViewResolver } from './common-resolvers/recurring-deposits-account-view.resolver';\nimport { RecurringDepositsAccountDataResolver } from './common-resolvers/recurring-deposits-account-data.resolver';\nimport { SavingsDatatableResolver } from 'app/savings/common-resolvers/savings-datatable.resolver';\nimport { SavingsDatatablesResolver } from 'app/savings/common-resolvers/savings-datatables.resolver';\nimport { RecurringDepositsAccountTemplateResolver } from './common-resolvers/recurring-deposits-account-template.resolver';\nimport { RecurringDepositsAccountActionsResolver } from './common-resolvers/recurring-deposit-account-actions.resolver';\nimport { EditRecurringDepositAccountComponent } from './edit-recurring-deposit-account/edit-recurring-deposit-account.component';\nimport { RecurringDepositsAccountAndTemplateResolver } from './common-resolvers/recurring-deposit-account-and-template.resolver';\nimport { RecurringDepositsAccountTransactionResolver } from './common-resolvers/recurring-deposit-account-transaction.resolver';\nimport { RecurringDepositsAccountTransactionTemplateResolver } from './common-resolvers/recurring-deposit-account-transaction-template.resolver';\n\nconst routes: Routes = [\n  {\n    path: '',\n    data: { title: extract('Recurring Deposits'), breadcrumb: 'Recurring Deposits', routeParamBreadcrumb: false },\n    children: [\n      {\n        path: 'create-recurring-deposits-account',\n        data: { title: extract('Create Recurring Deposits Account'), breadcrumb: 'Create Recurring Deposits Account' },\n        component: CreateRecurringDepositsAccountComponent,\n        resolve: {\n          recurringDepositsAccountTemplate: RecurringDepositsAccountTemplateResolver\n        }\n      },\n      {\n        path: ':recurringDepositAccountId',\n        data: { title: extract('RecurringDeposit Account View'), routeParamBreadcrumb: 'recurringDepositAccountId' },\n        children: [\n          {\n            path: '',\n            component: RecurringDepositsAccountViewComponent,\n            resolve: {\n              recurringDepositsAccountData: RecurringDepositsAccountViewResolver,\n              savingsDatatables: SavingsDatatablesResolver\n            },\n            children: [\n              {\n                path: 'interest-rate-chart',\n                component: InterestRateChartTabComponent,\n                data: { title: extract('Recurring Deposit Account Interest Rate Chart'), breadcrumb: 'Interest Rate Chart', routeParamBreadcrumb: false },\n                resolve: {\n                  recurringDepositsAccountData: RecurringDepositsAccountDataResolver\n                }\n              },\n              {\n                path: 'transactions',\n                component: TransactionsTabComponent,\n                data: { title: extract('Recurring Deposit Account Transactions'), breadcrumb: 'Transactions', routeParamBreadcrumb: false },\n                resolve: {\n                  recurringDepositsAccountData: RecurringDepositsAccountDataResolver\n                }\n              },\n              {\n                path: 'charges',\n                component: ChargesTabComponent,\n                data: { title: extract('Recurring Deposit Account Charges'), breadcrumb: 'Charges', routeParamBreadcrumb: false }\n              },\n              {\n                path: 'standing-instructions-tab',\n                component: StandingInstructionsTabComponent,\n                data: { title: extract('Recurring Deposit Account Standing Instructions'), breadcrumb: 'Standing Instructions', routeParamBreadcrumb: false },\n                resolve: {\n                  recurringDepositsAccountData: RecurringDepositsAccountDataResolver\n                }\n              },\n              {\n                path: 'datatables',\n                children: [\n                  {\n                    path: ':datatableName',\n                    component: DatatableTabsComponent,\n                    data: { title: extract('View Data Table'), routeParamBreadcrumb: 'datatableName' },\n                    resolve: {\n                      savingsDatatable: SavingsDatatableResolver\n                    }\n                  }\n                ]\n              },\n            ]\n          },\n          {\n            path: 'edit-recurring-deposit-account',\n            data: { title: extract('Edit Recurring Deposit Account'), breadcrumb: 'Edit', routeParamBreadcrumb: false },\n            component: EditRecurringDepositAccountComponent,\n            resolve: {\n              recurringDepositsAccountAndTemplate: RecurringDepositsAccountAndTemplateResolver\n            }\n          },\n          {\n            path: 'transactions',\n            data: { title: extract('Recurring Deposits Account Transactions'), breadcrumb: 'Transactions', routeParamBreadcrumb: false },\n            children: [\n              {\n                path: '',\n                redirectTo: '../transactions', pathMatch: 'prefix'\n              },\n              {\n                path: ':id',\n                data: { routeParamBreadcrumb: 'id' },\n                children: [\n                  {\n                    path: '',\n                    component: ViewTransactionComponent,\n                    resolve: {\n                      recurringDepositsAccountTransaction: RecurringDepositsAccountTransactionResolver\n                    }\n                  },\n                  {\n                    path: 'edit',\n                    component: EditTransactionComponent,\n                    resolve: {\n                      recurringDepositsAccountTransactionTemplate: RecurringDepositsAccountTransactionTemplateResolver\n                    }\n                  },\n                  {\n                    path: 'account-transfers',\n                    loadChildren: () => import('../../account-transfers/account-transfers.module').then(m => m.AccountTransfersModule)\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            path: 'actions/:name',\n            data: { title: extract('Recurring Deposits Account Actions'), routeParamBreadcrumb: 'name' },\n            component: RecurringDepositsAccountActionsComponent,\n            resolve: {\n              recurringDepositsAccountActionData: RecurringDepositsAccountActionsResolver\n            }\n          }\n        ]\n      }\n    ]\n  },\n  {\n    path: '',\n    data: { title: extract('All Recurring Deposits'), breadcrumb: 'Recurring Deposits', routeParamBreadcrumb: false },\n    children: [\n      {\n        path: ':recurringDepositAccountId',\n        data: { title: extract('RecurringDeposit Account View'), routeParamBreadcrumb: 'recurringDepositAccountId' },\n        children: [\n          {\n            path: 'standing-instructions',\n            loadChildren: () => import('../../account-transfers/account-transfers.module').then(m => m.AccountTransfersModule)\n          },\n        ]\n      }\n    ]\n  }\n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  declarations: [],\n  providers: [\n    RecurringDepositsAccountViewResolver,\n    RecurringDepositsAccountDataResolver,\n    SavingsDatatableResolver,\n    SavingsDatatablesResolver,\n    RecurringDepositsAccountTemplateResolver,\n    RecurringDepositsAccountActionsResolver,\n    RecurringDepositsAccountAndTemplateResolver,\n    RecurringDepositsAccountTransactionResolver,\n    RecurringDepositsAccountTransactionTemplateResolver\n  ]\n})\nexport class RecurringDepositsRoutingModule {}\n","/** Angular Imports */\nimport { NgModule } from '@angular/core';\n\n/** Custom Modules */\nimport { RecurringDepositsRoutingModule } from './recurring-deposits-routing.module';\nimport { SharedModule } from 'app/shared/shared.module';\nimport { PipesModule } from '../../pipes/pipes.module';\nimport { DirectivesModule } from '../../directives/directives.module';\n\n/** Custom Components */\nimport { RecurringDepositsAccountViewComponent } from './recurring-deposits-account-view/recurring-deposits-account-view.component';\nimport { InterestRateChartTabComponent } from './recurring-deposits-account-view/interest-rate-chart-tab/interest-rate-chart-tab.component';\nimport { TransactionsTabComponent } from './recurring-deposits-account-view/transactions-tab/transactions-tab.component';\nimport { StandingInstructionsTabComponent } from './recurring-deposits-account-view/standing-instructions-tab/standing-instructions-tab.component';\nimport { ChargesTabComponent } from './recurring-deposits-account-view/charges-tab/charges-tab.component';\nimport { DatatableTabsComponent } from './recurring-deposits-account-view/datatable-tabs/datatable-tabs.component';\nimport { CreateRecurringDepositsAccountComponent } from './create-recurring-deposits-account/create-recurring-deposits-account.component';\nimport { RecurringDepositsAccountDetailsStepComponent } from './recurring-deposits-account-stepper/recurring-deposits-account-details-step/recurring-deposits-account-details-step.component';\nimport { RecurringDepositsAccountTermsStepComponent } from './recurring-deposits-account-stepper/recurring-deposits-account-terms-step/recurring-deposits-account-terms-step.component';\nimport { RecurringDepositsAccountCurrencyStepComponent } from './recurring-deposits-account-stepper/recurring-deposits-account-currency-step/recurring-deposits-account-currency-step.component';\nimport { RecurringDepositsAccountSettingsStepComponent } from './recurring-deposits-account-stepper/recurring-deposits-account-settings-step/recurring-deposits-account-settings-step.component';\nimport { RecurringDepositsAccountInterestRateChartStepComponent } from './recurring-deposits-account-stepper/recurring-deposits-account-interest-rate-chart-step/recurring-deposits-account-interest-rate-chart-step.component';\nimport { RecurringDepositsAccountChargesStepComponent } from './recurring-deposits-account-stepper/recurring-deposits-account-charges-step/recurring-deposits-account-charges-step.component';\nimport { RecurringDepositsAccountPreviewStepComponent } from './recurring-deposits-account-stepper/recurring-deposits-account-preview-step/recurring-deposits-account-preview-step.component';\nimport { RecurringDepositsAccountActionsComponent } from './recurring-deposits-account-actions/recurring-deposits-account-actions.component';\nimport { ActivateRecurringDepositsAccountComponent } from './recurring-deposits-account-actions/activate-recurring-deposits-account/activate-recurring-deposits-account.component';\nimport { UndoApprovalRecurringDepositsAccountComponent } from './recurring-deposits-account-actions/undo-approval-recurring-deposits-account/undo-approval-recurring-deposits-account.component';\nimport { ApproveRecurringDepositsAccountComponent } from './recurring-deposits-account-actions/approve-recurring-deposits-account/approve-recurring-deposits-account.component';\nimport { RejectRecurringDepositsAccountComponent } from './recurring-deposits-account-actions/reject-recurring-deposits-account/reject-recurring-deposits-account.component';\nimport { WithdrawByClientRecurringDepositsAccountComponent } from './recurring-deposits-account-actions/withdraw-by-client-recurring-deposits-account/withdraw-by-client-recurring-deposits-account.component';\nimport { AddChargeRecurringDepositsAccountComponent } from './recurring-deposits-account-actions/add-charge-recurring-deposits-account/add-charge-recurring-deposits-account.component';\nimport { EditRecurringDepositAccountComponent } from './edit-recurring-deposit-account/edit-recurring-deposit-account.component';\nimport { PrematureCloseRecurringDepositAccountComponent } from './recurring-deposits-account-actions/premature-close-recurring-deposit-account/premature-close-recurring-deposit-account.component';\nimport { CloseRecurringDepositsAccountComponent } from './recurring-deposits-account-actions/close-recurring-deposits-account/close-recurring-deposits-account.component';\nimport { DepositRecurringDepositsAccountComponent } from './recurring-deposits-account-actions/deposit-recurring-deposits-account/deposit-recurring-deposits-account.component';\nimport { ViewTransactionComponent } from './recurring-deposits-account-view/transactions-tab/view-transaction/view-transaction.component';\nimport { EditTransactionComponent } from './recurring-deposits-account-view/transactions-tab/edit-transaction/edit-transaction.component';\n\n/* Dialog Components */\nimport { RecurringDepositConfirmationDialogComponent } from './recurring-deposits-account-view/custom-dialogs/recurring-deposit-confirmation-dialog/recurring-deposit-confirmation-dialog.component';\n\n/**\n * RecurringDeposits Module\n *\n * All components related to RecurringDeposits functions should be declared here.\n */\n@NgModule({\n  imports: [\n    SharedModule,\n    PipesModule,\n    DirectivesModule,\n    RecurringDepositsRoutingModule\n  ],\n  declarations: [\n    RecurringDepositsAccountViewComponent,\n    InterestRateChartTabComponent,\n    TransactionsTabComponent,\n    StandingInstructionsTabComponent,\n    ChargesTabComponent,\n    DatatableTabsComponent,\n    CreateRecurringDepositsAccountComponent,\n    RecurringDepositsAccountDetailsStepComponent,\n    RecurringDepositsAccountTermsStepComponent,\n    RecurringDepositsAccountCurrencyStepComponent,\n    RecurringDepositsAccountSettingsStepComponent,\n    RecurringDepositsAccountInterestRateChartStepComponent,\n    RecurringDepositsAccountChargesStepComponent,\n    RecurringDepositsAccountPreviewStepComponent,\n    RecurringDepositsAccountActionsComponent,\n    ActivateRecurringDepositsAccountComponent,\n    UndoApprovalRecurringDepositsAccountComponent,\n    ApproveRecurringDepositsAccountComponent,\n    RejectRecurringDepositsAccountComponent,\n    WithdrawByClientRecurringDepositsAccountComponent,\n    AddChargeRecurringDepositsAccountComponent,\n    RecurringDepositConfirmationDialogComponent,\n    EditRecurringDepositAccountComponent,\n    PrematureCloseRecurringDepositAccountComponent,\n    CloseRecurringDepositsAccountComponent,\n    DepositRecurringDepositsAccountComponent,\n    ViewTransactionComponent,\n    EditTransactionComponent\n  ],\n  providers: [ ]\n})\nexport class RecurringDepositsModule {}\n"]}