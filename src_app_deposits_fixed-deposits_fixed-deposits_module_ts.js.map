{"version":3,"file":"src_app_deposits_fixed-deposits_fixed-deposits_module_ts.js","mappings":"wYAYaA,GAAb,eAAaA,KAAbC,KAKE,WAAmBC,IAAyD,eAAzDC,gEALRH,GAAgCI,sCAAhCJ,EAAgCK,wRCZ7CD,gBAAqBA,8BAAkBA,QACvCA,+BACEA,6BAAGA,yDAA6CA,QAClDA,sBACAA,8CACEA,sCAA2CA,mBAAMA,QACjDA,sCAAiFA,oBAAOA,QAC1FA,uBACAA,sBAF4CA,sGDM/BJ,EAAb,qCEAaM,GAAb,eAAaA,KAAbL,KAKE,WAAmBC,IAAoD,eAApDC,gEALRG,GAA2BF,sCAA3BE,EAA2BD,mRCZxCD,gBAAqBA,yBAAaA,QAClCA,+BACEA,6BAAGA,oDAAwCA,QAC7CA,sBACAA,8CACEA,sCAA2CA,mBAAMA,QACjDA,sCAAiFA,oBAAOA,QAC1FA,uBACAA,sBAF4CA,sGDM/BE,EAAb,qCEAaC,GAAb,eAAaA,KAAbN,KAME,WAAmBC,EACeM,IAAS,eADxBL,iBACeA,2DAPvBI,GAAgCH,kBAOjCK,gCAPCF,EAAgCF,+QCZ7CD,gBAAqBA,SAAuDA,QAC5EA,+BACEA,6BAAGA,SAAmGA,QACxGA,sBACAA,8CACEA,sCAA2CA,mBAAMA,QACjDA,sCAAiHA,oBAAOA,QAC1HA,uBACAA,sBARqBA,sEAEhBA,kHAIuBA,wDAAgDA,4FDM/DG,EAAb,GEXaG,GAAb,WAWE,WAAYC,IAAc,eACxBR,KAAKS,WAAWD,GAChBR,KAAKU,WAAWF,GAbpB,0CAgBE,WACE,OAAOR,KAAKW,eAjBhB,mBAoBE,WACE,OAAOX,KAAKY,cArBhB,wBAwBE,SAAWJ,GACT,OAAQA,OACD,SACHR,KAAKW,aAAe,CAClB,CACEE,KAAM,kBACNC,KAAM,oBAER,CACED,KAAM,qBACNC,KAAM,gBAGV,UACG,UACHd,KAAKW,aAAe,CAClB,CACEE,KAAM,QACNC,KAAM,qBAER,CACED,KAAM,qBACNC,KAAM,gBAGZ,UACK,iCACHd,KAAKW,aAAe,CAClB,CACEE,KAAM,qBACNC,KAAM,iBAER,CACED,KAAM,UACNC,KAAM,gBAGV,UACG,WACHd,KAAKW,aAAe,CAClB,CACEE,KAAM,gBACNC,KAAM,cAER,CACED,KAAM,WACNC,KAAM,gBAGZ,cAEEd,KAAKW,aAAe,MA3E5B,wBA+EE,SAAWH,GACT,OAAQA,OACD,aACA,UACHR,KAAKY,YAAc,CACjB,CACEC,KAAM,iBAER,CACEA,KAAM,eAGV,UACG,iCACHb,KAAKY,YAAc,CACjB,CACEC,KAAM,UAER,CACEA,KAAM,sBAER,CACEA,KAAM,cAER,CACEA,KAAM,WAGV,MACG,QAEHb,KAAKY,YAAc,MA9G3B,uBAkHE,SAAUG,GACRf,KAAKY,YAAYI,KAAKD,OAnH1BE,gBCYaC,EAAb,eAAaA,EAAb,WAKE,WAAoBC,IAAgB,eAAhBnB,YALtB,0DAWE,SAA4BoB,GAC1B,IAAMC,GAAa,IAAIC,MAAaC,IAAI,eAAgB,OACxD,OAAOvB,KAAKmB,KAAKK,IAAV,gCAAuCJ,GAAa,CAAEK,OAAQJ,MAbzE,wCAoBE,SAA2BD,GACzB,OAAOpB,KAAKmB,KAAKO,OAAV,gCAA0CN,MArBrD,gDA8BE,SAAmCA,EAAmBO,EAAiBtB,GACrE,IAAMgB,GAAa,IAAIC,MAAaC,IAAI,UAAWI,GACnD,OAAO3B,KAAKmB,KAAKS,KAAV,gCAAwCR,GAAaf,EAAM,CAAEoB,OAAQJ,MAhChF,gDAwCE,SAAmCD,EAAmBS,GACpD,OAAO7B,KAAKmB,KAAKK,IAAV,gCAAuCJ,EAAvC,yBAAiES,MAzC5E,4DAmDE,SAA+CT,EAAmBO,EAAiBtB,EAAWwB,GAC5F,IAAMR,GAAa,IAAIC,MAAaC,IAAI,UAAWI,GACnD,OAAO3B,KAAKmB,KAAKS,KAAV,gCAAwCR,EAAxC,yBAAkES,GAAiBxB,EAAM,CAAEoB,OAAQJ,MArD9G,oDA4DE,SAAuCD,GACrC,IAAMC,GAAa,IAAIC,MAAaC,IAAI,UAAW,SACnD,OAAOvB,KAAKmB,KAAKK,IAAV,gCAAuCJ,EAAvC,aAA6D,CAAEK,OAAQJ,MA9DlF,6CAqEE,SAAgCS,EAAkBC,GAChD,IAAIV,GAAa,IAAIC,MAAaC,IAAI,WAAYO,GAClDT,SAAaU,EAAYV,EAAWE,IAAI,YAAaQ,GAAaV,EAC3DrB,KAAKmB,KAAKK,IAAI,iCAAkC,CAAEC,OAAQJ,MAxErE,gDA+EE,SAAmCD,GACjC,IAAMC,GAAa,IAAIC,MAAaC,IAAI,eAAgB,0BACrDA,IAAI,WAAY,QACnB,OAAOvB,KAAKmB,KAAKK,IAAV,gCAAuCJ,GAAa,CAAEK,OAAQJ,MAlFzE,uCAyFE,SAA0BW,GACxB,OAAOhC,KAAKmB,KAAKS,KAAV,wBAAwCI,KA1FnD,uCAkGE,SAA0BZ,EAAgBY,GACxC,OAAOhC,KAAKmB,KAAKc,IAAV,gCAAuCb,GAAaY,KAnG/D,qCA8GE,SACEF,EAAkBI,EAAoBC,EACtCC,EAAgBC,GAChB,IAAMhB,GAAa,IAAIC,MACpBC,IAAI,WAAYO,GAChBP,IAAI,aAAcW,GAClBX,IAAI,gBAAiBY,GACrBZ,IAAI,kBAAmB,KACvBA,IAAI,SAAUa,GACdb,IAAI,aAAcc,GACrB,OAAOrC,KAAKmB,KAAKK,IAAV,wBAAuC,CAAEC,OAAQJ,QAxH5DiB,kDAAapB,GAAoBjB,wCAApBiB,EAAoBqB,QAApBrB,EAAoB,qBAFnB,SAEDA,EAAb,yJCWYjB,gBACEA,SAA6HA,cAC7HA,SAAmHA,cACrHA,sDAFEA,kKACAA,gMAURA,SACEA,2CAA0BA,iEAASuC,mBACjCvC,qCAAgCA,SAAeA,QACnDA,sDADOA,uBAA6BA,sEAMlCA,gBACEA,6CAAsBA,kEAASwC,mBAAuBxC,SAAeA,QACvEA,wDADwDA,kDAJ1DA,SACEA,2CAAqDA,gBAAIA,QACzDA,kDACAA,+CAGAA,8BACFA,4DAN4BA,sCAEDA,4EAwBnBA,cACEA,4CAAIA,qBAASA,QACbA,4CAAIA,+BAAgEA,QACtEA,wDADMA,uGAcNA,cACEA,4CAAIA,qBAASA,QACbA,4CAAIA,SAA0CA,QAChDA,wDADMA,oFA8BNA,cACEA,4CAAIA,4BAAgBA,QACpBA,4CAAIA,SAA0HA,QAChIA,wDADMA,4KAqBNA,cACEA,4CAAIA,0BAAcA,QAClBA,4CAAIA,SAA2GA,QACjHA,yDADMA,2JAENA,cACEA,4CAAIA,6BAAiBA,QACrBA,4CAAIA,SAA8GA,QACpHA,yDADMA,8JAENA,cACEA,4CAAIA,iCAAqBA,QACzBA,4CAAIA,SAAiHA,QACvHA,yDADMA,iKAtBZA,eACEA,yCAA0BA,+BAAmBA,QAC7CA,yCACEA,2CACEA,0CACEA,8CAAIA,6BAAgBA,QACpBA,8CAAIA,UAAmGA,QACzGA,qCACAA,4CACEA,8CAAIA,4BAAeA,QACnBA,8CAAIA,UAAoGA,QAC1GA,qCACAA,qDAIAA,qDAIAA,qDAIJA,yBArBEA,UAsBJA,mDAnBYA,yHAIAA,yHAEDA,wEAIAA,2EAIAA,4GAQTA,uCACEA,2CAA0BA,yBAAaA,QACvCA,2CACEA,6CACEA,6CACEA,gDAAIA,6BAAgBA,QACpBA,gDAAIA,UAAmGA,QACzGA,uCACAA,8CACEA,gDAAIA,4BAAeA,QACnBA,gDAAIA,UAAoGA,QAC1GA,uCACFA,qCACFA,mCACFA,iCACFA,2CATcA,yHAIAA,yMAwBhBA,mBAEEA,mDACFA,6BAHgBA,gCAA0C,6FAKxDA,mBAGEA,SACFA,iDAHEA,sDAAoE,qBAEpEA,6FAJJA,SACEA,6CAKFA,oDALmBA,mMCxKZyC,GAAb,eAAaA,EAAb,WAiBE,WAAoBC,EACAC,EACAC,EACAC,EACDC,GAAiB,2BAJhB/C,aACAA,cACAA,4BACAA,sBACDA,cACjBA,KAAK2C,MAAMtC,KAAK2C,UAAU,SAAC3C,GACzB4C,EAAKC,yBAA2B7C,EAAK6C,yBACrCD,EAAKE,kBAAoB9C,EAAK8C,oBAxBpC,uCA4BE,WACEnD,KAAKoD,0BA7BT,mCAmCE,WACE,IAAM5C,EAASR,KAAKkD,yBAAyB1C,OAAO6C,MACpDrD,KAAKsD,aAAe,IAAI/C,GAAkCC,GACtDR,KAAKkD,yBAAyBK,UAAuB,WAAX/C,GAE1CR,KAAKsD,aAAaE,UADhBxD,KAAKkD,yBAAyBO,YACJ,CAC1B5C,KAAM,wBAGoB,CAC1BA,KAAM,0BA7ChB,oBAuDE,WAAM,WAEE6C,EAAc1D,KAAK4C,OAAOc,IAChC1D,KAAK4C,OAAOe,cAAZ,mBAFiB3D,KAAKkD,yBAAyBpB,SAE/C,4BAA0E,CAAC8B,oBAAoB,IAC5FC,KAAK,kBAAMC,EAAKlB,OAAOmB,SAAS,CAACL,QA3DxC,sBAkEE,SAAS7C,GACP,OAAQA,OACD,cACA,aACA,eACA,YACA,oBACA,iBACA,yBACA,kBACHb,KAAK4C,OAAOmB,SAAS,mBAAYlD,IAAS,CAAEmD,WAAYhE,KAAK2C,QAC7D,UACG,qBACH3C,KAAK4C,OAAOmB,SAAS,CAAC,QAAS,CAAEC,WAAYhE,KAAK2C,QAClD,UACG,SACH3C,KAAKiE,6BACL,UACG,qBACHjE,KAAKkE,oBACL,UACG,gBACHlE,KAAKmE,eACL,UACG,sBACHnE,KAAKoE,oBACL,UACG,uBACHpE,KAAKqE,qBACL,GA/FR,wCAsGU,WAA0B,WACYrE,KAAK+C,OAAOuB,KAAKC,IAAuB,CAClFlE,KAAM,CAAEmE,cAAa,yCAAoCxE,KAAKkD,yBAAyBuB,OAErDC,cAAc1B,UAAU,SAAC2B,GACvDA,EAASjD,QACXoC,EAAKjB,qBAAqBoB,2BAA2BH,EAAKZ,yBAAyBuB,IAAIzB,UAAU,WAC/Fc,EAAKlB,OAAOmB,SAAS,CAAC,UAAW,CAAEC,WAAYF,EAAKnB,cA7G9D,+BAsHU,WAAiB,WACmB3C,KAAK+C,OAAOuB,KAAKzE,IACzB6E,cAAc1B,UAAU,SAAC2B,GACrDA,EAASC,SACXd,EAAKjB,qBAAqBgC,mCAAmCf,EAAKZ,yBAAyBuB,GAAI,oBAAqB,IAAIzB,UAAU,WAChIc,EAAKgB,eA3Hf,0BAoIU,WAAY,WACmB9E,KAAK+C,OAAOuB,KAAKnE,IACzBuE,cAAc1B,UAAU,SAAC2B,GAChDA,EAASC,SACXd,EAAKjB,qBAAqBgC,mCAAmCf,EAAKZ,yBAAyBuB,GAAI,eAAgB,IAAIzB,UAAU,WAC3Hc,EAAKgB,eAzIf,+BAoJU,WAAiB,WACe9E,KAAK+C,OAAOuB,KAAKlE,GAAkC,CACvFC,KAAM,CAAE0E,UAAU,KAEUL,cAAc1B,UAAU,SAAC2B,GACjDA,EAASC,SACXd,EAAKhB,eAAekC,mCAAmClB,EAAKZ,yBAAyBuB,GAAI,oBAAqB,CAAEhB,aAAa,IAC1HT,UAAU,WACTc,EAAKgB,eA5JjB,gCAsKU,WAAkB,WACY9E,KAAK+C,OAAOuB,KAAKlE,GAAkC,CACrFC,KAAM,CAAE0E,UAAU,KAEQL,cAAc1B,UAAU,SAAC2B,GAC/CA,EAASC,SACXd,EAAKhB,eAAekC,mCAAmClB,EAAKZ,yBAAyBuB,GAAI,oBAAqB,CAAEhB,aAAa,IAC1HT,UAAU,WACTc,EAAKgB,iBA9KjBxC,kDAAaI,GAAgCzC,kFAAhCyC,EAAgCxC,2uCD1B7CD,sBAEEA,+CAEEA,sDAEEA,uCACEA,qCACEA,0CAGFA,+BACFA,6BAEAA,yCACEA,kDACEA,wCACEA,oEACEA,UACJA,QACFA,+BACAA,qDACEA,uCACEA,UAAwGA,eACxGA,qDAIFA,iCACFA,+BACFA,6BAEFA,6BAEAA,oDAEEA,yDAKAA,4DASFA,+BAEFA,2BAEAA,mDAEEA,wCAEEA,0CAEEA,yCACEA,2CAA0BA,kCAAqBA,QAC/CA,2CACEA,6CACEA,4CACEA,8CAAIA,yBAAYA,QAChBA,8CAAIA,iCAA2IA,QACjJA,qCACAA,qDAIAA,4CACEA,8CAAIA,0BAAaA,QACjBA,8CAAIA,UAAwGA,QAC9GA,qCACAA,4CACEA,8CAAIA,0BAAaA,QACjBA,8CAAIA,iCAAyGA,QAC/GA,qCACAA,4CACEA,8CAAIA,2BAAcA,QAClBA,8CAAIA,UAAyGA,QAC/GA,qCACAA,sDAIFA,oCACFA,kCACFA,gCAEAA,2CACEA,6CAA0BA,8BAAgBA,QAC1CA,6CACEA,+CACEA,8CACEA,gDAAIA,2BAAaA,QACjBA,gDAAIA,WAAuDA,QAC7DA,sCACAA,8CACEA,gDAAIA,yCAA2BA,QAC/BA,gDAAIA,WAAgEA,QACtEA,sCACAA,8CACEA,gDAAIA,qCAAuBA,QAC3BA,gDAAIA,WAA4DA,QAClEA,sCACAA,8CACEA,gDAAIA,uCAAyBA,QAC7BA,gDAAIA,WAA0DA,QAChEA,sCACAA,8CACEA,gDAAIA,iCAAmBA,QACvBA,gDAAIA,WAAoEA,QAC1EA,sCACAA,uDAIJA,0BAzBEA,UA0BJA,gCAEFA,gCAEAA,4CAEEA,sDA2BAA,yEAkBFA,gCAEFA,8BAEAA,0CACEA,2CAEEA,mDACFA,QACAA,2CAEEA,4CACFA,QACAA,2CAEEA,uCACFA,QACAA,+CAIAA,yDAOFA,4BAEAA,iDAEFA,4BAEFA,0BACAA,8EArMYA,wEAOsBA,+EAA+D,sDACnFA,+GAKFA,6IACOA,mIAYoBA,uDAKlBA,qDAyBDA,sJAEDA,wEAMCA,qHAIAA,mHAIAA,+HAEDA,8DAcCA,6EAIAA,+EAIAA,2EAIAA,yEAIAA,mFAEDA,4EAWLA,mIAAiH,cAkDzGA,0CAAwC,qBAIxCA,0CAAiC,qBAIjCA,0CAA4B,qBAKAA,2DAGDA,ssECvKpCyC,EAAb,2DCbQzC,iBAAuCA,oBAAOA,mCAC9CA,iBACEA,SAAmFA,gCAAnFA,gHAIFA,iBAAuCA,0BAAaA,mCACpDA,iBAAyCA,SAAyDA,gCAAzDA,oFAIzCA,iBAAuCA,sBAASA,mCAChDA,iBAA0CA,SAAmCA,gCAAnCA,qEAI1CA,iBAAuCA,yBAAYA,mCACnDA,iBAA0CA,SAA4BA,gCAA5BA,8DAI1CA,iBAAuCA,qBAAQA,gCAG3CA,gBACEA,kDACAA,yDACFA,gCACAA,gBACEA,kDACAA,yDACFA,gDATJA,iBACEA,6CAAmCA,qHAA0E,KAAIgF,IAC/GhF,oDAIAA,oDAIFA,gCACFA,kEATWA,kDAIAA,0EAsBDA,iBAAuCA,yBAAYA,mCACnDA,iBACEA,SACFA,gCADEA,2GAKFA,iBAAuCA,4BAAeA,mCACtDA,iBACEA,SACFA,gCADEA,8GAKFA,iBAAuCA,4BAAeA,mCACtDA,iBACEA,8BACFA,gCADEA,yHAKFA,iBAAuCA,6BAAgBA,mCACvDA,iBACEA,SACFA,gCAFyCA,kCACvCA,6GAKFA,iBAAuCA,4BAAeA,mCACtDA,iBACEA,SACFA,gCADEA,8GAKFA,iBAAuCA,sBAASA,mCAChDA,iBACEA,SACFA,gCADEA,gGAIJA,uCACAA,2CA7CFA,oBAEEA,4CACEA,uDACAA,uDAGFA,sCAEAA,4CACEA,yDACAA,yDAGFA,uCAEAA,8CACEA,yDACAA,yDAGFA,uCAEAA,8CACEA,yDACAA,0DAGFA,uCAEAA,8CACEA,yDACAA,yDAGFA,uCAEAA,8CACEA,yDACAA,yDAGFA,uCAEAA,0DACAA,wDAEFA,+EA/CqDA,iCA4C/BA,gEACaA,2FAvDzCA,iBAEEA,4CAEEA,mDAEEA,+CACEA,wDACFA,QAEAA,0DAiDFA,qCACFA,iCACFA,+EA7DyEA,qDAEhBA,qFAQuCA,0FAsDlGA,uCACAA,uCACAA,iBChGC,IAAMiF,GAAb,eAAaA,KAAbpF,KAmBE,WAAoB6C,GAAqB,2BAArB3C,aAdpBA,2BAA6B,GAE7BA,gCAAoC,CAAC,SAAU,cAAe,WAAY,cAAe,WAEzFA,gCAAuC,CAAC,aAAc,gBAAiB,gBAAiB,iBAAkB,gBAAiB,UAE3HA,0CAAiD,CAAC,cAShDA,KAAK2C,MAAMwC,OAAO9E,KAAK2C,UAAU,SAAC3C,GAChCyD,EAAKsB,sBAAwB/E,EAAK6C,yBAAyBmC,aAAaC,4DArBjEJ,GAA6BjF,sCAA7BiF,EAA6BhF,q7CDpB1CD,iBAEEA,mCACEA,mCACEA,kCAAIA,8BAAkBA,QACxBA,0BACFA,wBAEAA,qCAEEA,2CAEEA,mCACEA,+CACAA,+CAEFA,6BAEAA,mCACEA,+CACAA,+CACFA,6BAEAA,oCACEA,+CACAA,+CACFA,6BAEAA,oCACEA,+CACAA,+CACFA,6BAEAA,oCACEA,+CACAA,+CAYFA,6BAEAA,oCACEA,gDA8DFA,6BAEAA,gDACAA,8CACAA,8CAEFA,6BAEFA,2BAEFA,yBACAA,sBAjHqBA,sDAwGKA,gEACaA,gEACAA,o8BCxGzB,EACVsF,QAAQ,kBAAmB,EACzBC,QAAM,aAAaC,QAAM,CAAEC,OAAQ,MAAOC,UAAW,QACrDH,QAAM,YAAYC,QAAM,CAAEC,OAAQ,QAClCE,QAAW,0BAA0BC,QAAQ,+CAItCX,EAAb,0BCPQjF,iBAAuCA,gBAAGA,mCAC1CA,iBAA4CA,SAAqBA,gCAArBA,qDAI5CA,iBAAuCA,8BAAiBA,mCACxDA,iBAA4CA,+BAAqCA,gCAArCA,kEAI5CA,iBAAuCA,8BAAiBA,mCACxDA,iBAA4CA,SAAyCA,gCAAzCA,wEAI5CA,iBAAuCA,mBAAMA,mCAC7CA,iBAA4CA,SAAuEA,0CAAvEA,4FAI5CA,iBAAuCA,oBAAOA,mCAC9CA,iBAA4CA,SAAyEA,0CAAzEA,4FAI5CA,iBAAuCA,qBAAQA,mCAC/CA,iBAA4CA,SAAiCA,gCAAjCA,gEAG9CA,wDACAA,iBAAgFA,iEAAS6F,sBAAuB7F,SC9B/G,IAAM8F,GAAb,eAAaA,EAAb,WAgBE,WAAoBpD,EACAC,GAAc,2BADd5C,aACAA,cAVpBA,sBAA6B,CAAC,KAAM,kBAAmB,kBAAmB,QAAS,SAAU,WAW3FA,KAAK2C,MAAMwC,OAAO9E,KAAK2C,UAAU,SAAC3C,GAChC2F,EAAKC,iBAAmB5F,EAAK6C,yBAAyBgD,aACtDF,EAAKxF,OAASH,EAAK6C,yBAAyB1C,OAAO6C,QApBzD,uCAwBE,WACErD,KAAKmG,WAAa,IAAIC,KAAmBpG,KAAKiG,oBAzBlD,qBAgCE,SAAQI,GACN,OAAsC,IAA/BA,EAAgBC,aAAwD,IAAjCD,EAAgBE,eACb,IAAtCF,EAAgBG,oBAA8D,IAAhCH,EAAgBI,WAAgB,GAlC7F,8BAyCE,SAAiBR,GAEbjG,KAAK4C,OAAOmB,SADVkC,EAAiBS,SACE,+CAAwCT,EAAiBS,SAASjC,KAElE,CAACwB,EAAiBxB,IAFuD,CAAET,WAAYhE,KAAK2C,OAElDA,KA7CrEL,kDAAayD,GAAwB9F,kDAAxB8F,EAAwB7F,6rBDbrCD,iBAEEA,mCACEA,mCACEA,kCAAIA,4BAAgBA,QACtBA,0BACFA,wBAEAA,qCAEEA,yCAEEA,mCACEA,+CACAA,+CACFA,6BAEAA,mCACEA,+CACAA,+CACFA,6BAEAA,mCACEA,+CACAA,+CACFA,6BAEAA,oCACEA,+CACAA,+CACFA,6BAEAA,oCACEA,+CACAA,+CACFA,6BAEAA,oCACEA,+CACAA,+CACFA,6BAEAA,gDACAA,8CAEFA,6BAEFA,2BAEFA,yBACAA,sBAxCqBA,2CAgCKA,sDACaA,idC9B1B8F,EAAb,2DCDaY,GAAb,eAAaA,KAAb7G,KAME,WAAmBC,EACeM,IAAS,eADxBL,iBACeA,2DAPvB2G,GAA0B1G,kBAO3BK,gCAPCqG,EAA0BzG,kRCZvCD,gBAAqBA,wBAAYA,QACjCA,+BACEA,6BAAGA,SAA8DA,QACnEA,sBACAA,8CACEA,sCAA2CA,mBAAMA,QACjDA,sCAAiFA,oBAAOA,QAC1FA,uBACAA,sBANKA,iFAIuCA,qGDM/B0G,EAAb,qCEAaC,GAAb,eAAaA,KAAb9G,KAKE,WAAmBC,EACeM,IAAS,eADxBL,iBACeA,2DANvB4G,GAA+B3G,kBAMhCK,gCANCsG,EAA+B1G,uRCZ5CD,gBAAqBA,6BAAiBA,QACtCA,+BACEA,6BAAGA,SAAmEA,QACxEA,sBACAA,8CACEA,sCAA2CA,mBAAMA,QACjDA,sCAAiFA,oBAAOA,QAC1FA,uBACAA,sBANKA,sFAIuCA,qGDM/B2G,EAAb,gGENI3G,kBACEA,yCAA0CA,iDAAS4G,kBACjD5G,SAAqEA,QACzEA,gDADIA,4HASAA,iBAAuCA,kBAAKA,mCAC5CA,iBAAuCA,SAAkBA,gCAAlBA,uDAIvCA,iBAAuCA,yBAAYA,mCACnDA,iBAAuCA,SAAkDA,gCAAlDA,+EAIvCA,iBAAuCA,4BAAeA,mCACtDA,iBAAuCA,SAAkCA,gCAAlCA,uEAIvCA,iBAAuCA,uBAAUA,mCACjDA,iBAAuCA,+BAAmCA,gCAAnCA,qEAIvCA,iBAAuCA,wBAAWA,kEAClDA,iBAAuCA,+BAAyGA,gCAAzGA,sIAIvCA,iBAAuCA,8BAAiBA,mCACxDA,iBAAuCA,SAAuCA,gCAAvCA,8EAIvCA,iBAAuCA,iBAAIA,mCAC3CA,iBAAuCA,SAAyDA,gCAAzDA,yFAIvCA,iBAAuCA,kBAAKA,mCAC5CA,iBAAuCA,SAA6DA,gCAA7DA,6FAIvCA,iBAAuCA,oBAAOA,mCAC9CA,iBAAuCA,SAA+DA,gCAA/DA,+FAIvCA,iBAAuCA,yBAAYA,mCACnDA,iBAAuCA,SAAoEA,gCAApEA,oGAIvCA,iBAAuCA,qBAAQA,gDAG3CA,qBACuDA,sEAAS6G,sBAAmBA,kBACjF7G,4CACFA,0EACAA,qBACuDA,sEAAS8G,sBAAmBA,uBACjF9G,4CACFA,0DARFA,gBACEA,sDAIAA,sDAIFA,uCAPKA,oEAIAA,4GAKHA,qBACoDA,sEAAS+G,sBAAmBA,oBAC9E/G,4CACFA,0EACAA,qBACsDA,sEAASgH,sBAAmBA,sBAChFhH,4CACFA,0EAEEA,qBAC2DA,sEAASiH,sBAAmBA,2BACrFjH,8CACFA,4DAJFA,SACEA,wDAIFA,yCAHKA,mGAXPA,gBACEA,sDAIAA,sDAIAA,4DAMFA,wEAbKA,iEAIAA,mEAGYA,yEApBnBA,iBACEA,kDAUAA,kDAgBFA,gEA1BSA,kGAUAA,0HAmBXA,uCACAA,iBCpEC,IAAMkH,GAAb,eAAaA,EAAb,WAqCE,WAAoBrE,EACAH,EACAyE,EACAxE,EACDG,EACCsE,GAAgC,2BALhCrH,sBACAA,aACAA,iBACAA,cACDA,cACCA,uBAjCpBA,0BAAsB,EAEtBA,sBAA6B,CAC3B,OACA,eACA,eACA,UACA,YACA,kBACA,MACA,OACA,SACA,cACA,WAqBAA,KAAK2C,MAAMwC,OAAO9E,KAAK2C,UAAU,SAAC3C,GAChCiH,EAAKpE,yBAA2B7C,EAAK6C,yBACrCoE,EAAKC,YAAcD,EAAKpE,yBAAyBsE,UA7CvD,uCAiDE,WACE,IAAMC,EAAgBzH,KAAKuH,YAAcvH,KAAKuH,YAAYG,OAAO,YAAM,OAAIC,EAAOC,WAAY,GAC9F5H,KAAKmG,WAAa,IAAIC,KAAmBqB,KAnD7C,2BAyDE,WAEE,GADAzH,KAAK6H,qBAAuB7H,KAAK6H,oBAC5B7H,KAAK6H,oBAGH,CACL,IAAMC,EAAkB9H,KAAKuH,YAAYG,OAAO,YAAM,OAAKC,EAAOC,WAClE5H,KAAKmG,WAAW9F,KAAOyH,MALM,CAC7B,IAAML,EAAgBzH,KAAKuH,YAAYG,OAAO,YAAM,OAAIC,EAAOC,WAC/D5H,KAAKmG,WAAW9F,KAAOoH,EAKzBzH,KAAK+H,gBAAgBC,eAlEzB,uBAyEE,SAAUC,GAAa,WACfC,EAA8B,CAClC,IAAIC,IAAU,CACZC,YAAa,SACbC,MAAO,SACPhF,MAAO,GACPiF,KAAM,SACNC,UAAU,IAEZ,IAAIC,KAAe,CACjBJ,YAAa,UACbC,MAAO,eACPhF,MAAO,GACPiF,KAAM,OACNC,UAAU,KAGRlI,EAAO,CACXoI,MAAK,qBAAgBR,GACrBS,OAAQ,CAAEC,cAAe,WACzBT,WAAYA,GAEalI,KAAK+C,OAAOuB,KAAKsE,IAAqB,CAAEvI,SAChDqE,cAAc1B,UAAU,SAAC2B,GAC1C,GAAIA,EAAStE,KAAM,CACjB,IAAM+B,EAAS4D,EAAKqB,gBAAgBwB,SAASC,KACvCzG,EAAa2D,EAAKqB,gBAAgBhF,WAClC0G,EAAUC,+BACXrE,EAAStE,KAAKgD,OAAK,CACtB4F,QAASjD,EAAKoB,UAAU8B,WAAWvE,EAAStE,KAAKgD,MAAM4F,QAAS5G,GAChEA,aACAD,WAEF4D,EAAKlD,eAAeqG,oCAAoCnD,EAAK9C,yBAAyBuB,GAAI,YAAasE,EAAYd,GAChHjF,UAAU,WACTgD,EAAKlB,gBA5GjB,yBAsHE,SAAYmD,GAAa,WACMjI,KAAK+C,OAAOuB,KAAKqC,GAA4B,CAAEtG,KAAM,CAAEoE,GAAIwD,KACnEvD,cAAc1B,UAAU,SAAC2B,GACxCA,EAASC,SACXoB,EAAKlD,eAAeqG,oCAAoCnD,EAAK9C,yBAAyBuB,GAAI,QAAS,GAAIwD,GACpGjF,UAAU,WACTgD,EAAKlB,eA5HjB,8BAsIE,SAAiBmD,GAAa,WACMjI,KAAK+C,OAAOuB,KAAKsC,GAAiC,CAAEvG,KAAM,CAAEoE,GAAIwD,KACxEvD,cAAc1B,UAAU,SAAC2B,GAC7CA,EAASC,SACXoB,EAAKlD,eAAeqG,oCAAoCnD,EAAK9C,yBAAyBuB,GAAI,aAAc,GAAIwD,GACzGjF,UAAU,WACTgD,EAAKlB,eA5IjB,wBAsJE,SAAW6C,GAAW,WACdO,EAA8B,CAClC,IAAIC,IAAU,CACZC,YAAa,SACbC,MAAO,SACPhF,MAAOsE,EAAOyB,QAAUzB,EAAO0B,mBAC/Bf,KAAM,SACNC,UAAU,KAGRlI,EAAO,CACXoI,MAAK,sBAAiBd,EAAOlD,IAC7BiE,OAAQ,CAAEC,cAAe,WACzBT,WAAYA,GAEclI,KAAK+C,OAAOuB,KAAKsE,IAAqB,CAAEvI,SAChDqE,cAAc1B,UAAU,SAAC2B,GAC3C,GAAIA,EAAStE,KAAM,CACjB,IAAM+B,EAAS4D,EAAKqB,gBAAgBwB,SAASC,KACvCzG,EAAa2D,EAAKqB,gBAAgBhF,WAClC0G,EAAUC,+BACXrE,EAAStE,KAAKgD,OAAK,CACtBhB,aACAD,WAEF4D,EAAKlD,eAAewG,yBAAyBtD,EAAK9C,yBAAyBuB,GAAIsE,EAAYpB,EAAOlD,IAC/FzB,UAAU,WACTgD,EAAKlB,gBAjLjB,0BA2LE,SAAamD,GAAa,WACMjI,KAAK+C,OAAOuB,KAAKC,IAAuB,CACpElE,KAAM,CAAEmE,cAAa,oBAAeyD,MAEhBvD,cAAc1B,UAAU,SAAC2B,GACzCA,EAASjD,QACXsE,EAAKlD,eAAeyG,2BAA2BvD,EAAK9C,yBAAyBuB,GAAIwD,GAC9EjF,UAAU,WACTgD,EAAKlB,eAnMjB,+BA6ME,SAAkB6C,GAChB,MAAuC,gBAAhCA,EAAO6B,eAAenG,OAA2D,eAAhCsE,EAAO6B,eAAenG,OAA0D,eAAhCsE,EAAO6B,eAAenG,KAAU,GA9M5I,uBAqNE,SAAUoG,GACRA,EAAOC,oBAtNX,oBA6NU,WAAM,WAENhG,EAAc1D,KAAK4C,OAAOc,IAChC1D,KAAK4C,OAAOe,cAAZ,mBAFiB3D,KAAKkD,yBAAyBpB,SAE/C,4BAA0E,CAAC8B,oBAAoB,IAC5FC,KAAK,kBAAMC,EAAKlB,OAAOmB,SAAS,CAACL,UAjOxCpB,kDAAa6E,GAAmBlH,+FAAnBkH,EAAmBjH,k0ED/BhCD,iBAEEA,mCACEA,mCACEA,kCAAIA,uBAAWA,QACjBA,0BACAA,2CAIFA,yBAEAA,qCAEEA,2CAEEA,mCACEA,+CACAA,+CACFA,6BAEAA,oCACEA,+CACAA,+CACFA,6BAEAA,oCACEA,+CACAA,+CACFA,6BAEAA,oCACEA,+CACAA,+CACFA,6BAEAA,oCACEA,+CACAA,+CACFA,6BAEAA,oCACEA,+CACAA,+CACFA,6BAEAA,oCACEA,+CACAA,+CACFA,6BAEAA,oCACEA,+CACAA,+CACFA,6BAEAA,oCACEA,+CACAA,+CACFA,6BAEAA,oCACEA,+CACAA,+CACFA,6BAEAA,oCACEA,+CACAA,+CA4BFA,6BAEAA,gDACAA,8CAEFA,6BAEFA,2BAEFA,0BACAA,uBApGuCA,sCAQJA,0CAoFTA,sDACaA,+mBCpE1BkH,EAAb,+DCpBQlH,iBAAuCA,oBAAOA,mCAC9CA,iBAA2CA,SAAoEA,gCAApEA,2FAI3CA,iBAAuCA,0BAAaA,mCACpDA,iBAA2CA,SAA6EA,gCAA7EA,oGAI3CA,iBAAuCA,yBAAYA,mCACnDA,iBAA2CA,SAAoCA,gCAApCA,+DAI3CA,iBAAuCA,wBAAWA,mCAClDA,iBAA2CA,SAAyEA,gCAAzEA,gGAI3CA,iBAAuCA,oBAAOA,mCAC9CA,iBAA2CA,SAA4DA,gCAA5DA,mFAI3CA,iBAAuCA,sBAASA,mCAChDA,iBAA2CA,qDAAkFA,gCAAlFA,mGAI3CA,iBAAuCA,qBAAQA,gCAG3CA,qBAEEA,4CACFA,0DAJFA,gBACEA,sDAIFA,uCAHKA,2GAKHA,qBACsDA,0EAAS0J,kCAC7D1J,4CACFA,0DAJFA,gBACEA,sDAIFA,uCAHKA,2FAILA,qBAEEA,0CACFA,2DAhBFA,iBACEA,kDAMAA,kDAMAA,oDAIFA,sDAhBSA,kDAMAA,kDAOJA,wFAMPA,uCACAA,iBCzCC,IAAM2J,GAAb,eAAaA,EAAb,WA8BE,WAAoBjH,EACAE,EACAE,EACA8G,EACAxC,GAAgC,2BAJhCrH,aACAA,4BACAA,cACAA,+BACAA,uBA3BpBA,gBAAa,IAAIoG,KAEjBpG,sBAA6B,CAC3B,SACA,cACA,cACA,YACA,SACA,WACA,WAmBAA,KAAK2C,MAAMwC,OAAO9E,KAAK2C,UAAU,SAAC3C,GAChC4C,EAAK6G,kBAAoBzJ,EAAK6C,2BApCpC,uCAwCE,WACElD,KAAK+J,4BAzCT,qCA+CE,WAAuB,WAMrB/J,KAAK6C,qBAAqBkH,wBALT/J,KAAK8J,kBAAkBhI,SACrB9B,KAAK8J,kBAAkB5H,WACxBlC,KAAK8J,kBAAkBrF,GAC1BzE,KAAKqH,gBAAgBwB,SAASC,KAC1B9I,KAAKqH,gBAAgBhF,YAC+DW,UAAU,SAAC2B,GAChHb,EAAKkG,iBAAmBrF,EAASsF,UACjCnG,EAAKqC,WAAW9F,KAAOyD,EAAKkG,iBAC5BlG,EAAKoG,oBAAoBlC,iBAxD/B,uCAgEE,SAA0BmC,GAAkB,WACCnK,KAAK+C,OAAOuB,KAAKC,IAAuB,CACjFlE,KAAM,CAAEmE,cAAa,mCAA8B2F,MAElBzF,cAAc1B,UAAU,SAAC2B,GACtDA,EAASjD,QACXsE,EAAK6D,wBAAwBO,0BAA0BD,GACpDnH,UAAU,WAAK,SAvE1BV,kDAAasH,GAAgC3J,kFAAhC2J,EAAgC1J,mlDDtB7CD,iBAEEA,mCACEA,gCAAIA,qCAAyBA,QAC/BA,wBAEAA,mCAEEA,0CAEEA,mCACEA,+CACAA,+CACFA,6BAEAA,mCACEA,+CACAA,+CACFA,6BAEAA,mCACEA,+CACAA,+CACFA,6BAEAA,oCACEA,+CACAA,+CACFA,6BAEAA,oCACEA,+CACAA,+CACFA,6BAEAA,oCACEA,+CACAA,+CACFA,6BAEAA,oCACEA,+CACAA,+CAkBFA,6BAEAA,gDACAA,8CAEFA,6BAEFA,2BAEFA,yBACAA,sBA9DwCA,2CAsDdA,sDACaA,qmBCzC1B2J,EAAb,eCVaS,GAAb,eAAaA,KAAbvK,KAWE,WAAoB6C,GAAqB,2BAArB3C,aAClBA,KAAKsK,SAAWtK,KAAK2C,MAAMwC,OAAOA,OAAOoF,SAASC,SAAShJ,IAAI,yBAE/DxB,KAAK2C,MAAMtC,KAAK2C,UAAU,SAAC3C,GACzByD,EAAK2G,gBAAkBpK,EAAKqK,iBAC5B5G,EAAK6G,sBAA6E,OAArD7G,EAAK2G,gBAAgBG,cAAc,GAAGC,UAAe,kDAhB3ER,GAAsBpK,sCAAtBoK,EAAsBnK,sNCZnCD,iBACEA,yDAMAA,wBACFA,sBACAA,qBANIA,sCAAqB,gDAArBA,CAAqB,uEDSZoK,EAAb,gFEGYpK,qBACEA,gDAAoBA,kBAAQA,oBAAQA,QACtCA,uECCC6K,GAAb,eAAaA,EAAb,WAmBE,WAAoBC,EACAlI,EACAuE,EACAzE,EACAC,EACAyE,IAAgC,eALhCrH,mBACAA,4BACAA,iBACAA,aACAA,cACAA,uBArBpBA,aAAU,IAAIgL,KAAK,IAAM,EAAG,GAE5BhL,aAAU,IAAIgL,KAoBZhL,KAAKoB,UAAYpB,KAAK2C,MAAMwC,OAAOoF,SAAS9I,OAAOwJ,sBAzBvD,uCA+BE,WACEjL,KAAKkL,QAAUlL,KAAKqH,gBAAgB8D,aACpCnL,KAAKoL,0CAjCT,mDAuCE,WACEpL,KAAKqL,gCAAkCrL,KAAK+K,YAAYO,MAAM,CAC5DC,eAAkB,CAAC,GAAIC,eACvBC,KAAQ,CAAC,QA1Cf,oBAkDE,WAAM,WACEC,EAAsC1L,KAAKqL,gCAAgChI,MAC3EjB,EAASpC,KAAKqH,gBAAgBwB,SAASC,KACvCzG,EAAarC,KAAKqH,gBAAgBhF,WAEpCqJ,EAAoCH,0BAA0BP,OAChEU,EAAoCH,eAAiBvL,KAAKoH,UAAU8B,WAFrClJ,KAAKqL,gCAAgChI,MAAMkI,eAEyBlJ,IAErG,IAAMhC,EAAI2I,+BACL0C,GAAmC,CACtCrJ,aACAD,WAEFpC,KAAK6C,qBAAqBgC,mCAAmC7E,KAAKoB,UAAW,UAAWf,GAAM2C,UAAU,WACtGc,EAAKlB,OAAOmB,SAAS,CAAC,UAAW,CAAEC,WAAYF,EAAKnB,cAhE1DL,kDAAawI,GAAoC7K,6FAApC6K,EAAoC5K,0oBDlBjDD,iBAEEA,sCAEEA,sCAAoDA,mCAAY0L,aAE9D1L,kDAEEA,yCAEEA,uDAAgBA,mDAAS2L,SACvB3L,iDAAWA,6BAAgBA,QAC3BA,+CACAA,+DACAA,6DACAA,0DAGFA,iCAEAA,sDACEA,iDAAWA,iBAAIA,QACfA,kDACFA,iCAEFA,iCAEFA,+BAEAA,sDACEA,6CAAkEA,mBAAMA,QACxEA,6CAAwFA,oBAAOA,QACjGA,6BAEFA,6BAEFA,2BAEFA,yBACAA,uCAnCUA,8DAQkBA,iCAAe,gBAAfA,CAAe,mBACEA,wBAErBA,sGAewBA,0CACEA,qQCbrC6K,EAAb,0BCHY7K,qBACEA,gDAAoBA,kBAAQA,oBAAQA,QACtCA,uECCC4L,GAAb,eAAaA,EAAb,WAmBE,WAAoBd,EACAlI,EACAuE,EACAzE,EACAC,EACAyE,IAAgC,eALhCrH,mBACAA,4BACAA,iBACAA,aACAA,cACAA,uBArBpBA,aAAU,IAAIgL,KAAK,IAAM,EAAG,GAE5BhL,aAAU,IAAIgL,KAoBZhL,KAAKoB,UAAYpB,KAAK2C,MAAMwC,OAAOoF,SAAS9I,OAAOwJ,sBAzBvD,uCA+BE,WACEjL,KAAKkL,QAAUlL,KAAKqH,gBAAgB8D,aACpCnL,KAAK8L,yCAjCT,kDAuCE,WACE9L,KAAK+L,+BAAiC/L,KAAK+K,YAAYO,MAAM,CAC3DU,eAAkB,CAAC,GAAIR,eACvBC,KAAQ,CAAC,QA1Cf,oBAkDE,WAAM,WACEQ,EAAqCjM,KAAK+L,+BAA+B1I,MACzEjB,EAASpC,KAAKqH,gBAAgBwB,SAASC,KACvCzG,EAAarC,KAAKqH,gBAAgBhF,WAEpC4J,EAAmCD,0BAA0BhB,OAC/DiB,EAAmCD,eAAiBhM,KAAKoH,UAAU8B,WAFpClJ,KAAK+L,+BAA+B1I,MAAM2I,eAEyB3J,IAEpG,IAAMhC,EAAI2I,+BACLiD,GAAkC,CACrC5J,aACAD,WAEFpC,KAAK6C,qBAAqBgC,mCAAmC7E,KAAKoB,UAAW,SAAUf,GAAM2C,UAAU,WACrGc,EAAKlB,OAAOmB,SAAS,CAAC,UAAW,CAAEC,WAAYF,EAAKnB,cAhE1DL,kDAAauJ,GAAmC5L,6FAAnC4L,EAAmC3L,soBDlBhDD,iBAEEA,sCAEEA,sCAAmDA,mCAAY0L,aAE7D1L,kDAEEA,yCAEEA,uDAAgBA,mDAAS2L,SACvB3L,iDAAWA,6BAAgBA,QAC3BA,+CACAA,+DACAA,6DACAA,0DAGFA,iCAEAA,sDACEA,iDAAWA,iBAAIA,QACfA,kDACFA,iCAEFA,iCAEFA,+BAEAA,sDACEA,6CAAkEA,mBAAMA,QACxEA,6CAA0FA,oBAAOA,QACnGA,6BAEFA,6BAEFA,2BAEFA,yBACAA,uCAnCUA,6DAQkBA,iCAAe,gBAAfA,CAAe,mBACEA,wBAErBA,qGAewBA,0CACDA,0QCblC4L,EAAb,0BCLU5L,qBACEA,+CAAqBA,kBAAQA,oBAAQA,QACvCA,qECGGiM,GAAb,eAAaA,EAAb,WAoBE,WAAoBnB,EACAjI,EACAsE,EACAzE,EACAC,EACAyE,IAAgC,eALhCrH,mBACAA,sBACAA,iBACAA,aACAA,cACAA,uBAtBpBA,aAAU,IAAIgL,KAAK,IAAM,EAAG,GAE5BhL,aAAU,IAAIgL,KAqBZhL,KAAKoB,UAAYpB,KAAK2C,MAAMwC,OAAOoF,SAAS9I,OAAOwJ,sBA1BvD,uCAgCE,WACEjL,KAAKkL,QAAUlL,KAAKqH,gBAAgB8D,aACpCnL,KAAKmM,2CAlCT,oDAwCE,WACEnM,KAAKoM,iCAAmCpM,KAAK+K,YAAYO,MAAM,CAC7De,gBAAmB,CAAC,GAAIb,mBA1C9B,oBAkDE,WAAM,WACEc,EAAuCtM,KAAKoM,iCAAiC/I,MAC7EjB,EAASpC,KAAKqH,gBAAgBwB,SAASC,KACvCzG,EAAarC,KAAKqH,gBAAgBhF,WAEpCiK,EAAqCD,2BAA2BrB,OAClEsB,EAAqCD,gBAAkBrM,KAAKoH,UAAU8B,WAFtClJ,KAAKoM,iCAAiC/I,MAAMgJ,gBAE0BhK,IAExG,IAAMhC,EAAI2I,+BACLsD,GAAoC,CACvCjK,aACAD,WAEFpC,KAAK8C,eAAeyJ,6BAA6BvM,KAAKoB,UAAW,WAAYf,GAAM2C,UAAU,WAC3Fc,EAAKlB,OAAOmB,SAAS,CAAC,UAAW,CAAEC,WAAYF,EAAKnB,cAhE1DL,kDAAa4J,GAAqCjM,+FAArCiM,EAAqChM,wiBDlBlDD,iBAEEA,sCAEEA,sCAAqDA,mCAAY0L,aAE/D1L,kDAEEA,oDAAuBA,mDAAS2L,SAC9B3L,8CAAWA,8BAAiBA,QAC5BA,6CACAA,6DACAA,2DACAA,wDAGFA,+BAEFA,+BAEAA,sDACEA,4CAAkEA,mBAAMA,QACxEA,4CAA+FA,oBAAOA,QACxGA,6BAEFA,6BAEFA,2BAEFA,yBACAA,uCA1BUA,+DAMgBA,gCAAe,gBAAfA,CAAe,mBACEA,wBAErBA,wGAQ0BA,yCACEA,4QCJrCiM,EAAb,mCCFaM,GAAb,eAAaA,EAAb,WAcE,WAAoBzB,EACAjI,EACAH,EACAC,IAAc,eAHd5C,mBACAA,sBACAA,aACAA,cAClBA,KAAKoB,UAAYpB,KAAK2C,MAAMwC,OAAOoF,SAAS9I,OAAOwJ,sBAlBvD,uCAwBE,WACEjL,KAAKyM,+CAzBT,wDA+BE,WACEzM,KAAK0M,qCAAuC1M,KAAK+K,YAAYO,MAAM,CACjEG,KAAQ,CAAC,QAjCf,oBAyCE,WAAM,WACEpL,EAAI2I,iBACLhJ,KAAK0M,qCAAqCrJ,OAE/CrD,KAAK8C,eAAeyJ,6BAA6BvM,KAAKoB,UAAW,eAAgBf,GAAM2C,UAAU,WAC/Fc,EAAKlB,OAAOmB,SAAS,CAAC,UAAW,CAAEC,WAAYF,EAAKnB,cA9C1DL,kDAAakK,GAAyCvM,yEAAzCuM,EAAyCtM,0cChBtDD,iBAEEA,sCAEEA,sCAAyDA,mCAAY0L,aAEnE1L,kDAEEA,oDACEA,8CAAWA,iBAAIA,QACfA,gDACFA,+BAEFA,+BAEAA,sDACEA,4CAAkEA,mBAAMA,QACxEA,4CAAgGA,oBAAOA,QACzGA,6BAEFA,6BAEFA,2BAEFA,yBACAA,sBArBUA,mEAYsCA,0CACDA,kPDDlCuM,EAAb,0BEDYvM,qBACEA,iDAAqBA,kBAAQA,oBAAQA,QACvCA,uECCC0M,GAAb,eAAaA,EAAb,WAmBE,WAAoB5B,EACAlI,EACAuE,EACAzE,EACAC,EACAyE,IAAgC,eALhCrH,mBACAA,4BACAA,iBACAA,aACAA,cACAA,uBArBpBA,aAAU,IAAIgL,KAAK,IAAM,EAAG,GAE5BhL,aAAU,IAAIgL,KAoBZhL,KAAKoB,UAAYpB,KAAK2C,MAAMwC,OAAOoF,SAAS9I,OAAOwJ,sBAzBvD,uCA+BE,WACEjL,KAAKkL,QAAUlL,KAAKqH,gBAAgB8D,aACpCnL,KAAK4M,2CAjCT,oDAuCE,WACE5M,KAAK6M,iCAAmC7M,KAAK+K,YAAYO,MAAM,CAC7DwB,gBAAmB,CAAC,GAAItB,eACxBC,KAAQ,CAAC,QA1Cf,oBAkDE,WAAM,WACEsB,EAAuC/M,KAAK6M,iCAAiCxJ,MAC7EjB,EAASpC,KAAKqH,gBAAgBwB,SAASC,KACvCzG,EAAarC,KAAKqH,gBAAgBhF,WAEpC0K,EAAqCD,2BAA2B9B,OAClE+B,EAAqCD,gBAAkB9M,KAAKoH,UAAU8B,WAFtClJ,KAAK6M,iCAAiCxJ,MAAMyJ,gBAE0BzK,IAExG,IAAMhC,EAAI2I,+BACL+D,GAAoC,CACvC1K,aACAD,WAEFpC,KAAK6C,qBAAqBgC,mCAAmC7E,KAAKoB,UAAW,uBAAwBf,GAAM2C,UAAU,WACnHc,EAAKlB,OAAOmB,SAAS,CAAC,UAAW,CAAEC,WAAYF,EAAKnB,cAhE1DL,kDAAaqK,GAA6C1M,6FAA7C0M,EAA6CzM,upBDlB1DD,iBAEEA,sCAEEA,sCAAqDA,mCAAY0L,aAE/D1L,kDAEEA,yCAEEA,uDAAgBA,mDAAS2L,SACvB3L,iDAAWA,8BAAiBA,QAC5BA,+CACAA,+DACAA,6DACAA,0DAGFA,iCAEAA,sDACEA,iDAAWA,iBAAIA,QACfA,kDACFA,iCAEFA,iCAEFA,+BAEAA,sDACEA,6CAAkEA,mBAAMA,QACxEA,6CAA+FA,oBAAOA,QACxGA,6BAEFA,6BAEFA,2BAEFA,yBACAA,uCAnCUA,+DAQkBA,iCAAe,gBAAfA,CAAe,mBACEA,wBAErBA,wGAewBA,0CACEA,4QCbrC0M,EAAb,kDCNc1M,yBACEA,SACFA,gCAF+DA,oBAC7DA,gHAGJA,qBACEA,sCAAUA,kBAAQA,oBAAQA,QAC5BA,0DAQEA,qBACEA,wCAAUA,kBAAQA,oBAAQA,QAC5BA,+DAMEA,yBAEEA,SACFA,gCAFEA,oBACAA,+FAQFA,yBACEA,SACFA,gCAF2EA,oBACzEA,4FAWJA,qBACEA,uDAAyBA,kBAAQA,oBAAQA,QAC3CA,4EARFA,6BAAoEA,mDAAS+M,SAC3E/M,iDAAWA,iCAAqBA,QAChCA,gDAEAA,gEACAA,8DACAA,4DAGFA,sEAPkBA,gCAAe,gBAAfA,CAAe,mBAEEA,wBAErBA,+GAWZA,qBACEA,0CAAYA,kBAAQA,oBAAQA,QAC9BA,4EARFA,6BAA0EA,mDAASgN,SACjFhN,iDAAWA,kBAAMA,QACjBA,gDAEAA,gEACAA,8DACAA,4DAGFA,sEAPkBA,gCAAe,gBAAfA,CAAe,mBAEEA,wBAErBA,qHAKdA,0BACEA,iDAAWA,yBAAaA,QACxBA,gDACFA,6DAtDFA,iBAEEA,sDACEA,iDAAWA,kBAAMA,QACjBA,gDACAA,0DAGFA,mCAEAA,wDACEA,mDAAWA,+BAAkBA,QAC7BA,uDACEA,+DAIFA,qCACFA,mCAEAA,wDACEA,mDAAWA,6BAAgBA,QAC3BA,uDACEA,+DAGFA,qCACFA,mCAEAA,mEAWAA,mEAWAA,iEAKFA,uDAnDgBA,sFAQgCA,wEAUPA,iEAMtBA,qEAWAA,2EAWAA,8GCrDhBiN,GAAb,eAAaA,EAAb,WAwBE,WACUnC,EACApI,EACAC,EACAwE,EACAtE,EACAuE,GAAgC,2BALhCrH,mBACAA,aACAA,cACAA,iBACAA,sBACAA,uBA3BVA,aAAU,IAAIgL,KAAK,IAAM,EAAG,GAE5BhL,aAAU,IAAIgL,KA2BZhL,KAAK2C,MAAMtC,KAAK2C,UAAU,SAAC3C,GACzBiH,EAAK6F,qBAAuB9M,EAAK+M,+BAA+BC,gBAElErN,KAAKiL,sBAAwBjL,KAAK2C,MAAMwC,OAAOoF,SAAS9I,OAAOwJ,sBAnCnE,uCAyCE,WACEjL,KAAKkL,QAAUlL,KAAKqH,gBAAgB8D,aACpCnL,KAAKsN,gCACLtN,KAAKuN,sBA5CT,+BA+CE,WAAiB,WACfvN,KAAKwN,wBAAwBC,SAASxF,SAASyF,aAAa1K,UAAU,YACpEc,EAAKhB,eAAe6K,kBAAkB1F,GAAUjF,UAAU,SAAC3C,GACzDyD,EAAK8J,cAAgBvN,EACrB,IAAMmJ,EAAiBnJ,EAAKmJ,eAAe/E,IACT,mBAA9BpE,EAAKmJ,eAAenG,OAA4D,2BAA9BhD,EAAKmJ,eAAenG,SACxES,EAAK8J,cAAcC,oBAAqB,IAER,eAA9BxN,EAAKmJ,eAAenG,OAAwD,gBAA9BhD,EAAKmJ,eAAenG,SACpES,EAAK8J,cAAcE,6BAA8B,GAE9ChK,EAAK8J,cAAcC,oBAAuB/J,EAAK8J,cAAcE,4BAGhEhK,EAAK0J,wBAAwBO,cAAc,WAF3CjK,EAAK0J,wBAAwBQ,WAAW,UAAW,IAAIC,KAAY,GAAIzC,iBAIpE1H,EAAK8J,cAAcC,oBAAsB/J,EAAK8J,cAAcE,4BAC/DhK,EAAK0J,wBAAwBQ,WAAW,gBAAiB,IAAIC,KAAY,GAAIzC,gBAE7E1H,EAAK0J,wBAAwBO,cAAc,iBAEhB,gBAA7BG,EAAmB7K,MACjBS,EAAK0J,wBAAwBQ,WAAW,cAAe,IAAIC,KAAY5N,EAAK8N,YAAa3C,gBAEzF1H,EAAK0J,wBAAwBO,cAAc,eAE7CjK,EAAK0J,wBAAwBY,WAAW,CACtChF,OAAU/I,EAAK+I,OACfiF,sBAAyBhO,EAAKgO,sBAAsB5J,GACpD+E,eAAkBnJ,EAAKmJ,eAAe/E,WA5EhD,2CAqFE,WACEzE,KAAKwN,wBAA0BxN,KAAK+K,YAAYO,MAAM,CACpDrD,SAAY,CAAC,GAAIuD,eACjBpC,OAAU,CAAC,GAAIoC,eACf6C,sBAAyB,CAAC,CAAEhL,MAAO,GAAIiL,UAAU,IACjD9E,eAAkB,CAAC,CAAEnG,MAAO,GAAIiL,UAAU,QA1FhD,oBAiGE,WAAM,WACEC,EAAgBvO,KAAKwN,wBAAwBnK,MAKnD,GAJAkL,EAAcnM,OAASpC,KAAKqH,gBAAgBwB,SAASC,KAChDyF,EAAcJ,cACjBI,EAAcJ,YAAcnO,KAAK4N,cAAcO,cAEH,IAA1CnO,KAAK4N,cAAcC,mBACrB,IAAuD,IAAnD7N,KAAK4N,cAAcE,4BAAsC,CAC3D,IAAMU,EAAiB,UACvBD,EAAcC,eAAiBA,EAC3BD,EAAcE,gBAEhBF,EAAcE,cAAgBzO,KAAKoH,UAAU8B,WAD5BlJ,KAAKwN,wBAAwBnK,MAAMoL,cACcD,QAE/D,CACL,IAAMnM,EAAarC,KAAKqH,gBAAgBhF,WACxCkM,EAAclM,WAAaA,EACvBkM,EAActF,UAEhBsF,EAActF,QAAUjJ,KAAKoH,UAAU8B,WADtBlJ,KAAKwN,wBAAwBnK,MAAM4F,QACQ5G,IAIlErC,KAAK8C,eAAe4L,oBAAoB1O,KAAKiL,sBAAuB,UAAWsD,GAAevL,UAAW,WACvGc,EAAKlB,OAAOmB,SAAS,CAAC,UAAW,CAAEC,WAAYF,EAAKnB,cAzH1DL,kDAAa4K,GAAsCjN,+FAAtCiN,EAAsChN,o+BDnBnDD,iBAEEA,sCAEEA,sCAA4CA,mCAAY0L,aAEtD1L,kDAEEA,yCACEA,mDACEA,iDAAWA,mBAAMA,QACjBA,oDACEA,6DAGFA,mCACAA,0DAGFA,iCAEAA,qDA0DFA,iCAEAA,wDACEA,8CAAkEA,mBAAMA,QACxEA,8CAAsFA,mBAAMA,QAC9FA,+BAEFA,+BAEFA,6BAEFA,2BAEFA,yBACAA,sBAzFUA,sDAQ0CA,kDAI5BA,wFAKRA,uCA6DkCA,yCACEA,8QChEvCiN,EAAb,0BCJYjN,qBACEA,oDAAwBA,kBAAQA,oBAAQA,QAC1CA,0DAGFA,0BACEA,+CAAWA,2BAAeA,QAC1BA,8CACFA,2DAKIA,yBACEA,SACFA,gCAFkEA,oBAChEA,wFAGJA,qBACEA,8CAAkBA,kBAAQA,oBAAQA,QACpCA,6DATFA,0BACEA,+CAAWA,kBAAMA,QACjBA,mDACEA,4DAGFA,kCACAA,yDAGFA,qDAP0CA,oDAI5BA,+HAQVA,yBACEA,SACFA,gCAFwDA,oBACtDA,4FAGJA,qBACEA,2DAA+BA,kBAAQA,oBAAQA,QACjDA,6DATFA,0BACEA,+CAAWA,+BAAmBA,QAC9BA,mDACEA,4DAGFA,kCACAA,yDAGFA,qDAPoCA,gDAItBA,4HAKdA,0BACEA,+CAAWA,gCAAoBA,QAC/BA,8CACFA,wDAEAA,0BACEA,+CAAWA,gBAAIA,QACfA,iDACFA,qECvCG0O,GAAb,eAAaA,EAAb,WA0BE,WAAoB5D,EACVlI,EACAuE,EACAzE,EACAC,EACAyE,IAAgC,eALtBrH,mBACVA,4BACAA,iBACAA,aACAA,cACAA,uBA5BVA,aAAU,IAAIgL,KAAK,IAAM,EAAG,GAE5BhL,aAAU,IAAIgL,KAUdhL,kBAAc,EAiBZA,KAAKoB,UAAYpB,KAAK2C,MAAMwC,OAAOoF,SAAS9I,OAAOwJ,sBAhCvD,uCAsCE,WACEjL,KAAKkL,QAAUlL,KAAKqH,gBAAgB8D,aACpCnL,KAAK4O,kCACL5O,KAAKuN,sBAzCT,6CA+CE,WACEvN,KAAK6O,0BAA4B7O,KAAK+K,YAAYO,MAAM,CACtDwD,aAAgB,CAAC,GAAItD,mBAjD3B,+BAwDE,WAAiB,WACfxL,KAAK6O,0BAA0BrN,IAAI,gBAAgBkM,aAAa1K,UAAU,SAACK,GACpES,EAAKiL,aACRjL,EAAKkL,yBAAyB3L,OA3DtC,sCAoEE,SAAyB4L,GAAU,WAC3B7M,EAASpC,KAAKqH,gBAAgBwB,SAASC,KACvCzG,EAAarC,KAAKqH,gBAAgBhF,WAClChC,EAAO,CACXyO,aAAc9O,KAAKoH,UAAU8B,WAAW+F,EAAM5M,GAC9CA,aACAD,UAEFpC,KAAK6C,qBAAqBgC,mCAAmC7E,KAAKoB,UAAW,2BAA4Bf,GACtG2C,UAAU,SAAC2B,GACVqB,EAAKkJ,oBAAsBvK,EAASwK,gBACpCnJ,EAAKoJ,wBAA0BzK,EAASyK,wBACxCpJ,EAAK6I,0BAA0Bb,WAAW,iBAAkB,IAAIC,KAAY,CAAE5K,MAAO,GAAIiL,UAAU,KACnGtI,EAAK6I,0BAA0Bb,WAAW,qBAAsB,IAAIC,KAAY,GAAIzC,gBACpFxF,EAAK6I,0BAA0Bb,WAAW,OAAQ,IAAIC,KAAY,KAClEjI,EAAK6I,0BAA0BrN,IAAI,kBAAkB4M,WAAWzJ,EAAS0K,gBACzErJ,EAAKsJ,yBApFb,gCA4FE,WAAkB,WAChBtP,KAAK6O,0BAA0BrN,IAAI,sBAAsBkM,aAAa1K,UAAU,SAACyB,GACpE,MAAPA,GACFX,EAAK+K,0BAA0Bb,WAAW,qBAAsB,IAAIC,KAAY,GAAIzC,gBACpF1H,EAAK+K,0BAA0Bb,WAAW,sBAAuB,IAAIC,KAAY,OAEjFnK,EAAK+K,0BAA0Bd,cAAc,sBAC7CjK,EAAK+K,0BAA0Bd,cAAc,4BAnGrD,oBA4GE,WAAM,WACEwB,EAAgCvP,KAAK6O,0BAA0BxL,MACrErD,KAAK+O,aAAc,EACnB,IAAM3M,EAASpC,KAAKqH,gBAAgBwB,SAASC,KACvCzG,EAAarC,KAAKqH,gBAAgBhF,WAEpCkN,EAA8BT,wBAAwB9D,OACxDuE,EAA8BT,aAAe9O,KAAKoH,UAAU8B,WAFjClJ,KAAK6O,0BAA0BxL,MAAMyL,aAEuBzM,IAEzF,IAAMhC,EAAI2I,+BACLuG,GAA6B,CAChClN,aACAD,WAEFpC,KAAK6C,qBAAqBgC,mCAAmC7E,KAAKoB,UAAW,iBAAkBf,GAAM2C,UAAU,WAC7Gc,EAAKlB,OAAOmB,SAAS,CAAC,UAAW,CAAEC,WAAYF,EAAKnB,cA3H1DL,kDAAaqM,GAA2C1O,6FAA3C0O,EAA2CzO,i6BDlBxDD,iBAEEA,sCAEEA,sCAA8CA,mCAAY0L,aAExD1L,kDAEEA,yCAEEA,uDAAgBA,mDAAS2L,SACvB3L,iDAAWA,iCAAoBA,QAC/BA,+CACAA,+DACAA,6DACAA,0DAGFA,iCAEAA,+DAKAA,gEAYAA,gEAYAA,+DAKAA,+DAKFA,iCAEFA,+BAEAA,sDACEA,4CAAkEA,mBAAMA,QACxEA,6CAAqFA,oBAAOA,QAC9FA,6BAEFA,6BAEFA,2BAEFA,yBACAA,uCArEUA,wDAQkBA,iCAAe,gBAAfA,CAAe,mBACEA,wBAErBA,8FAKGA,2EAKAA,kFAYAA,kFAYAA,mFAKAA,oEAUqBA,0CACDA,yRC/ClC0O,EAAb,0BCHY1O,qBACEA,8CAAkBA,kBAAQA,oBAAQA,QACpCA,6DAWEA,yBACEA,SACFA,gCAFkEA,oBAChEA,wFAGJA,qBACEA,8CAAkBA,kBAAQA,oBAAQA,QACpCA,6DAMEA,yBACEA,SACFA,gCAFwDA,oBACtDA,4FAGJA,qBACEA,2DAA+BA,kBAAQA,oBAAQA,QACjDA,6DATFA,0BACEA,+CAAWA,+BAAmBA,QAC9BA,mDACEA,4DAGFA,kCACAA,yDAGFA,qDAPoCA,gDAItBA,6HAKdA,0BACEA,+CAAWA,gCAAoBA,QAC/BA,8CACFA,qEClCGuP,GAAb,eAAaA,EAAb,WA0BE,WAAoBzE,EACAlI,EACAuE,EACAzE,EACAC,EACAyE,GAAgC,2BALhCrH,mBACAA,4BACAA,iBACAA,aACAA,cACAA,uBA5BpBA,aAAU,IAAIgL,KAAK,IAAM,EAAG,GAE5BhL,aAAU,IAAIgL,KA2BZhL,KAAK2C,MAAMtC,KAAK2C,UAAU,SAAC3C,GACzBiH,EAAK4H,oBAAsB7O,EAAK+M,+BAA+B+B,gBAC/D7H,EAAK8H,wBAA0B/O,EAAK+M,+BAA+BgC,wBACnE9H,EAAK+H,eAAiBhP,EAAK+M,+BAA+BiC,iBAE5DrP,KAAKoB,UAAYpB,KAAK2C,MAAMwC,OAAOoF,SAAS9I,OAAOwJ,sBArCvD,uCA2CE,WACEjL,KAAKkL,QAAUlL,KAAKqH,gBAAgB8D,aACpCnL,KAAKyP,mCACLzP,KAAKsP,uBA9CT,8CAoDE,WACEtP,KAAK0P,2BAA6B1P,KAAK+K,YAAYO,MAAM,CACvDwD,aAAgB,CAAC,GAAItD,eACrB6D,eAAkB,CAAC,CAAChM,MAAOrD,KAAKqP,eAAgBf,UAAU,IAC1DqB,mBAAsB,CAAC,GAAInE,eAC3BC,KAAQ,CAAC,QAzDf,gCAgEE,WAAkB,WAChBzL,KAAK0P,2BAA2BlO,IAAI,sBAAsBkM,aAAa1K,UAAU,SAACyB,GACrE,MAAPA,GACFX,EAAK4L,2BAA2B1B,WAAW,qBAAsB,IAAIC,KAAY,GAAIzC,gBACrF1H,EAAK4L,2BAA2B1B,WAAW,sBAAuB,IAAIC,KAAY,OAElFnK,EAAK4L,2BAA2B3B,cAAc,sBAC9CjK,EAAK4L,2BAA2B3B,cAAc,4BAvEtD,oBAgFE,WAAM,WACE6B,EAAiC5P,KAAK0P,2BAA2BrM,MACjEjB,EAASpC,KAAKqH,gBAAgBwB,SAASC,KACvCzG,EAAarC,KAAKqH,gBAAgBhF,WAEpCuN,EAA+Bd,wBAAwB9D,OACzD4E,EAA+Bd,aAAe9O,KAAKoH,UAAU8B,WAFlClJ,KAAK0P,2BAA2BrM,MAAMyL,aAEuBzM,IAE1F,IAAMhC,EAAI2I,+BACL4G,GAA8B,CACjCvN,aACAD,WAEFpC,KAAK6C,qBAAqBgC,mCAAmC7E,KAAKoB,UAAW,QAASf,GAAM2C,UAAU,WACpGc,EAAKlB,OAAOmB,SAAS,CAAC,UAAW,CAAEC,WAAYF,EAAKnB,cA9F1DL,kDAAakN,GAAkCvP,6FAAlCuP,EAAkCtP,u5BDlB/CD,iBAEEA,sCAEEA,sCAA+CA,mCAAY0L,aAEzD1L,kDAEEA,yCAEEA,uDAAgBA,mDAAS2L,SACvB3L,iDAAWA,2BAAcA,QACzBA,+CACAA,+DACAA,6DACAA,0DAGFA,iCAEAA,sDACEA,iDAAWA,4BAAeA,QAC1BA,+CACFA,iCAEAA,sDACEA,iDAAWA,mBAAMA,QACjBA,oDACEA,8DAGFA,mCACAA,0DAGFA,iCAEAA,gEAYAA,+DAKAA,sDACEA,iDAAWA,iBAAIA,QACfA,mDACFA,iCAEFA,iCAEFA,+BAEAA,uDACEA,6CAAkEA,mBAAMA,QACxEA,6CAAsFA,oBAAOA,QAC/FA,6BAEFA,6BAEFA,2BAEFA,yBACAA,uCArEUA,yDAQkBA,iCAAe,gBAAfA,CAAe,mBACEA,wBAErBA,+FAa4BA,qDAI5BA,qGAKGA,mFAYAA,oFAeqBA,2CACDA,0RC/ClCuP,EAAb,yBClBAvP,uEACAA,sEACAA,wEACAA,6EACAA,kFACAA,0EACAA,+EACAA,+CCKO,IAAM4P,GAAb,eAAaA,KAAb/P,KA0BE,WAAoB6C,IAAqB,eAArB3C,aAvBpBA,aASI,CACF8P,SAAW,EACXC,QAAU,EACVC,UAAY,EACZC,OAAS,EACT,iBAAiB,EACjB,cAAc,EACd,mBAAmB,EACnB,sBAAsB,GAQtBjQ,KAAKkQ,QADQlQ,KAAK2C,MAAM4H,SAAS9I,OAAOZ,OACnB,iDA5BZgP,GAAoC5P,sCAApC4P,EAAoC3P,uHDZjDD,0DACAA,uEACAA,yEACAA,8EACAA,mFACAA,4EACAA,kFACAA,wEACAA,sBARwCA,gCACDA,wCACEA,0CACKA,kDACKA,uDACRA,+CACKA,oDACVA,iGCKzB4P,EAAb,0BCoCQ5P,iBACEA,sCACFA,mCAEAA,iBACEA,SACFA,4BADEA,2FAKAA,iBACEA,kDACFA,mCAEAA,iBACEA,SACFA,6BADEA,6HAGFA,iBACEA,iDACFA,mCAEAA,iBACEA,SACFA,6BADEA,0HAGFA,iBACEA,mDACFA,mCAEAA,iBACEA,SACFA,6BADEA,wHAGFA,iBACEA,kDACFA,mCAEAA,iBACEA,SACFA,6BADEA,wHAGFA,iBACEA,iDACFA,mCAEAA,iBACEA,SACFA,6BADEA,0HAGFA,iBACEA,8CACFA,mCAEAA,iBACEA,SACFA,6BADEA,0HA/CJA,SAEEA,kDAIAA,oDAIAA,4DAIAA,oDAIAA,qDAIAA,sDAIAA,sDAIAA,sDAIAA,sDAIAA,sDAIAA,sDAIAA,sDAIFA,qDAhDQA,uEAIAA,uEAIAA,yEAIAA,yEAIAA,uEAIAA,uEAIAA,uEAIAA,uEAIAA,yEAIAA,yEAIAA,sEAIAA,uECzFT,IAAMkQ,GAAb,eAAaA,KAAbrQ,KAUE,WAAoB6C,EACDI,GAAiB,2BADhB/C,aACDA,cACjBA,KAAK2C,MAAMtC,KAAK2C,UAAU,SAAC3C,GACzB2F,EAAKoK,gBAAkB/P,EAAKgQ,iFAbrBF,GAAwBlQ,kDAAxBkQ,EAAwBjQ,kSDbrCD,iBAEEA,sCAEEA,gDAEEA,uCAEEA,yCACEA,gDACFA,QAEAA,2CACEA,UACFA,QAEAA,mDACEA,uCACFA,QAEAA,2CACEA,UACFA,QAEAA,2CACEA,mDACFA,QAEAA,2CACEA,iCACFA,QAEAA,2CACEA,2CACFA,QAEAA,2CACEA,UACFA,QAEAA,2CACEA,yCACFA,QAEAA,2CACEA,UACFA,QAEAA,kDAIAA,kDAIAA,6DAoDFA,+BAEFA,6BAEFA,2BAEFA,yBACAA,sBAtGUA,kEAQAA,oFAQAA,+EAQAA,oFAQAA,qEAGiBA,8CAIAA,8CAIJA,mSC3CVkQ,EAAb,uCCNQlQ,yBACEA,SACFA,gCAFgDA,oBAC9CA,8EAsBFA,yBACEA,SACFA,gCAFqDA,oBACnDA,2DCfH,IAAMqQ,EAAb,eAAaA,EAAb,WA2BE,WAAoBvF,EACAlI,EACAwE,IAAgC,eAFhCrH,mBACAA,4BACAA,uBAvBpBA,aAAU,IAAIgL,KAAK,IAAM,EAAG,GAE5BhL,aAAU,IAAIgL,KAMdhL,4BAAwB,EAKdA,yCAAsC,IAAIuQ,MAWlDvQ,KAAKwQ,wCA9BT,uCAiCE,WACExQ,KAAKkL,QAAUlL,KAAKqH,gBAAgB8D,aACpCnL,KAAKuN,oBACDvN,KAAKyQ,+BACPzQ,KAAK0Q,YAAc1Q,KAAKyQ,6BAA6BE,eACjD3Q,KAAKyQ,6BAA6BG,kBACpC5Q,KAAK6Q,+BAA+BzC,WAAW,CAC7CrM,UAAa/B,KAAKyQ,6BAA6BG,iBAC/CE,gBAAmB9Q,KAAKyQ,6BAA6BM,SAASD,iBAAmB,IAAI9F,KAAKhL,KAAKyQ,6BAA6BM,SAASD,sBAzC/I,mDAkDE,WACE9Q,KAAK6Q,+BAAiC7Q,KAAK+K,YAAYO,MAAM,CAC3DvJ,UAAa,CAAC,GAAIyJ,eAClBsF,gBAAmB,CAAC,GAAItF,eACxBwF,eAAkB,CAAC,QAtDzB,+BA6DE,WAAiB,WACTlP,EAAW9B,KAAKyQ,6BAA6B3O,SACnD9B,KAAK6Q,+BAA+BrP,IAAI,aAAakM,aAAa1K,UAAU,SAACjB,GAC3E+B,EAAKjB,qBAAqBoO,gCAAgCnP,EAAUC,GAAWiB,UAAU,SAAC2B,GACxFb,EAAKoN,oCAAoCC,KAAKxM,GAC9Cb,EAAKsN,iBAAmBzM,EAAS0M,qBAC5BvN,EAAKwN,uBAAyBxN,EAAK2M,6BAA6BO,gBACnElN,EAAK+M,+BAA+BrP,IAAI,kBAAkB4M,WAAWtK,EAAK2M,6BAA6BO,gBACvGlN,EAAKwN,uBAAwB,GAE7BxN,EAAK+M,+BAA+BrP,IAAI,kBAAkB4M,WAAW,UAvE/E,sCAgFE,WACE,IAAMmD,EAA6BvR,KAAK6Q,+BAA+BxN,MACvE,QAAWmO,KAAOD,EACwB,KAApCA,EAA2BC,WACtBD,EAA2BC,GAGtC,OAAOD,MAvFXjP,kDAAagO,GAAuCrQ,0DAAvCqQ,EAAuCpQ,s7BDhBpDD,kBAEEA,mCAEEA,gDACEA,yCAAWA,wBAAYA,QACvBA,4CACEA,uDAGFA,6BACAA,2CACEA,uCAAgBA,mBAAQA,qBAAQA,QAClCA,6BACFA,2BAEAA,kDAA6BA,mDAASwR,SACpCxR,2CAAWA,yBAAYA,QACvBA,yCAEAA,yDACAA,uDACAA,2CACEA,0CAAmBA,mBAAQA,qBAAQA,QACrCA,6BACFA,2BAEAA,kDACEA,2CAAWA,0BAAaA,QACxBA,8CACEA,uDAGFA,6BACFA,2BAEFA,2BAEAA,sCACEA,yCACEA,4CACAA,mCACFA,QACAA,yCACEA,yCACAA,uBACFA,2BACFA,yBAEFA,yBACAA,uCAlDMA,oDAOkCA,yCAWlBA,iCAAe,gBAAfA,CAAe,mBAEEA,wBAUCA,wPCd3BqQ,EAAb,GCJaoB,EAAb,eAAaA,EAAb,WAeE,WAAoB3G,IAAwB,eAAxB/K,mBAClBA,KAAK2R,wCAhBT,0CAmBE,WACM3R,KAAKkR,qCACPlR,KAAK4R,gCAAgCxD,WAAW,CAC9CyD,aAAgB7R,KAAKkR,oCAAoCY,SAAShJ,KAClEiJ,cAAiB/R,KAAKkR,oCAAoCY,SAASC,cACnEC,iBAAoBhS,KAAKkR,oCAAoCY,SAASG,kBAxB9E,mDAgCE,WACEjS,KAAK4R,gCAAkC5R,KAAK+K,YAAYO,MAAM,CAC5DuG,aAAgB,CAAC,CAAExO,MAAO,GAAIiL,UAAU,IACxCyD,cAAiB,CAAC,CAAE1O,MAAO,GAAIiL,UAAU,IACzC0D,iBAAoB,CAAC,CAAE3O,MAAO,GAAIiL,UAAU,UApClDhM,kDAAaoP,GAAwCzR,sCAAxCyR,EAAwCxR,szBCZrDD,kBAEEA,mCAEEA,gDACEA,yCAAWA,oBAAQA,QACnBA,uCACFA,2BAEAA,kDACEA,2CAAWA,2BAAcA,QACzBA,yCACFA,2BAEAA,kDACEA,2CAAWA,8BAAiBA,QAC5BA,yCACFA,2BAEFA,2BAEAA,qCACEA,wCACEA,2CACAA,mCACFA,QACAA,wCACEA,yCACAA,uBACFA,2BACFA,yBAEFA,yBACAA,qBAjCMA,0KDYOyR,EAAb,wCEaQzR,yBACEA,SACFA,gCAFwEA,oBACtEA,+EAaFA,yBAEEA,SACFA,gCAFEA,oBACAA,+EAWFA,yBAEEA,SACFA,gCAFEA,oBACAA,+EAWFA,yBAEEA,SACFA,gCAFEA,oBACAA,+EAWFA,yBAEEA,SACFA,gCAFEA,oBACAA,qDCnEH,IAAMiS,EAAb,eAAaA,EAAb,WA4BE,WAAoBnH,EACV1D,IAAgC,eADtBrH,mBACVA,uBArBVA,aAAU,IAAIgL,KAAK,IAAM,EAAG,GAE5BhL,aAAU,IAAIgL,KAoBZhL,KAAKmS,sCA9BT,0CAiCE,WACMnS,KAAKkR,qCACPlR,KAAKS,eAnCX,sBAuCE,WACET,KAAKkL,QAAUlL,KAAKqH,gBAAgB8D,aAChCnL,KAAKyQ,6BAA6B2B,+BACpCpS,KAAKqS,6BAA6BjE,WAAW,CAC3CgE,8BAAiCpS,KAAKyQ,6BAA6B2B,8BAA8B3N,GACjG6N,0BAA6BtS,KAAKyQ,6BAA6B6B,0BAA0B7N,GACzF8N,wBAA2BvS,KAAKyQ,6BAA6B8B,wBAAwB9N,GACrF+N,kCAAqCxS,KAAKyQ,6BAA6B+B,kCAAkC/N,GACzGgO,cAAiBzS,KAAKyQ,6BAA6BgC,cACnDC,cAAiB1S,KAAKyQ,6BAA6BiC,cACnDC,yBAA4B3S,KAAKyQ,6BAA6BmC,uBAAuBnO,OAjD7F,iDAyDE,WACEzE,KAAKqS,6BAA+BrS,KAAK+K,YAAYO,MAAM,CACzD8G,8BAAiC,CAAC,GAAI5G,eACtC8G,0BAA6B,CAAC,GAAI9G,eAClC+G,wBAA2B,CAAC,GAAI/G,eAChCgH,kCAAqC,CAAC,GAAIhH,eAC1CiH,cAAiB,CAAC,GAAIjH,eACtBkH,cAAiB,CAAC,GAAIlH,eACtBmH,yBAA4B,CAAC,GAAInH,mBAjEvC,wBAwEE,WACExL,KAAK6S,kCAAoC7S,KAAKkR,oCAAoC4B,qCAClF9S,KAAK+S,8BAAgC/S,KAAKkR,oCAAoC8B,iCAC9EhT,KAAKiT,4BAA8BjT,KAAKkR,oCAAoCgC,+BAC5ElT,KAAKmT,sCAAwCnT,KAAKkR,oCAAoCkC,yCACtFpT,KAAKqT,wBAA0BrT,KAAKkR,oCAAoCoC,6BA7E5E,oCAmFE,WACE,IAAMC,EAA2BvT,KAAKqS,6BAA6BhP,MACnE,QAAWmO,KAAO+B,EACsB,KAAlCA,EAAyB/B,WACpB+B,EAAyB/B,GAGpC,OAAO+B,MA1FXjR,kDAAa4P,GAAqCjS,iDAArCiS,EAAqChS,6qCDblDD,kBAEEA,mCAEEA,gDACEA,yCAAWA,0BAAcA,QACzBA,uCACAA,2CACEA,+CAAwBA,mBAAQA,qBAAQA,QAC1CA,6BACFA,2BAEAA,wCAEAA,kDACEA,2CAAWA,qCAAwBA,QACnCA,yCACAA,2CACEA,mDAA4BA,mBAAQA,qBAAQA,QAC9CA,6BACFA,2BAEAA,kDACEA,2CAAWA,gCAAmBA,QAC9BA,8CACEA,uDAGFA,6BACAA,2CACEA,8CAAuBA,mBAAQA,qBAAQA,QACzCA,6BACFA,2BAEAA,+CAEAA,kDACEA,2CAAWA,wCAA2BA,QACtCA,8CACEA,uDAIFA,6BACAA,2CACEA,sDAA+BA,mBAAQA,qBAAQA,QACjDA,6BACFA,2BAEAA,kDACEA,2CAAWA,oCAAuBA,QAClCA,+CACEA,uDAIFA,6BACAA,2CACEA,kDAA2BA,mBAAQA,qBAAQA,QAC7CA,6BACFA,2BAEAA,kDACEA,2CAAWA,sCAAyBA,QACpCA,+CACEA,uDAIFA,6BACAA,2CACEA,oDAA6BA,mBAAQA,sBAAQA,QAC/CA,8BACFA,4BAEAA,oDACEA,6CAAWA,0BAAYA,QACvBA,iDACEA,yDAIFA,8BACAA,6CACEA,wCAAgBA,oBAAQA,sBAAQA,QAClCA,8BACFA,4BAEFA,4BAEAA,wCACEA,2CACEA,8CACAA,oCACFA,QACAA,2CACEA,0CACAA,wBACFA,4BACFA,0BAEFA,0BACAA,uBAtGMA,kDAyB8CA,qDAcUA,+DAaJA,2DAaFA,yDAaUA,ueCjErDiS,EAAb,yCCCQjS,yBAEEA,SACFA,gCAFEA,oBACAA,+EAkBFA,yBACEA,SACFA,gCAFwEA,oBACtEA,+EAkBFA,yBACEA,SACFA,gCAFwEA,oBACtEA,+EAeFA,yBACEA,SACFA,gCAFwEA,oBACtEA,+EAgBFA,yBACEA,SACFA,gCAFwDA,oBACtDA,mFAJNA,6BACEA,yCAAWA,gCAAoBA,QAC/BA,6CACEA,qDAGFA,4BACAA,0CACEA,iDAA0BA,mBAAQA,qBAAQA,QAC5CA,6BACFA,+CAPoCA,2EAyBhCA,yBAEEA,SACFA,gCAFEA,oBACAA,4EAaJA,6BACEA,2CAAWA,qBAASA,QACpBA,0CACFA,uDAXFA,SAEEA,gDAEAA,iDACEA,yDACFA,QAEAA,0DAKFA,gDALgCA,8ECjH7B,IAAMuT,EAAb,eAAaA,EAAb,WA0BE,WAAoBzI,EACV1D,IAAgC,eADtBrH,mBACVA,uBAnBVA,aAAU,IAAIgL,KAAK,IAAM,EAAG,GAE5BhL,aAAU,IAAIgL,KAkBZhL,KAAKyT,wCACLzT,KAAKuN,oBA7BT,0CAgCE,WAAW,WACLvN,KAAKkR,sCACPlR,KAAK0T,gCAAgCtF,WAAW,CAC9CuF,eAAkB3T,KAAKkR,oCAAoCyC,eAC3DC,qBAAwB5T,KAAKkR,oCAAoC2C,mBAAqB7T,KAAKkR,oCAAoC2C,mBAAmBpP,GAAK,GACvJqP,yBAA4B9T,KAAKkR,oCAAoC4C,yBACrEC,+BAAkC/T,KAAKkR,oCAAoC8C,6BAA+BhU,KAAKkR,oCAAoC8C,6BAA6BvP,GAAK,GACrLwP,eAAkBjU,KAAKkR,oCAAoC+C,eAC3DC,qBAAwBlU,KAAKkR,oCAAoCiD,mBAAqBnU,KAAKkR,oCAAoCiD,mBAAmB1P,GAAK,GACvJ2P,0BAA6BpU,KAAKkR,oCAAoCkD,0BACtEC,wBAA2BrU,KAAKkR,oCAAoCmD,wBACpEC,gCAAmCtU,KAAKkR,oCAAoCqD,8BAAgCvU,KAAKkR,oCAAoCqD,8BAA8B9P,GAAK,KAE1LzE,KAASkR,oCAAoCzN,aAC3CzD,KAAK0T,gCAAgC1F,WAAW,cAAe,IAAIC,MAAY,IAC/EjO,KAAK0T,gCAAgClS,IAAI,eAAekM,aAAa1K,UAAU,SAACK,GAC1EA,GACFS,EAAK4P,gCAAgC1F,WAAW,aAAc,IAAIC,KAAY,CAAE5K,MAAO,GAAIiL,UAAU,KACrGxK,EAAK4P,gCAAgClS,IAAI,cAAc4M,WAAWtK,EAAKoN,oCAAoC3N,UAAYO,EAAKoN,oCAAoC3N,SAAS1C,OAEzKiD,EAAK4P,gCAAgC3F,cAAc,gBAGvD/N,KAAK0T,gCAAgClS,IAAI,eAAe4M,WAAWpO,KAAKyQ,6BAA6BhN,cAErGzD,KAAK0T,gCAAgC3F,cAAc,eAErD/N,KAAKS,gBA3DX,sBA+DE,WACET,KAAKkL,QAAUlL,KAAKqH,gBAAgB8D,aAChCnL,KAAKyQ,8BACPzQ,KAAK0T,gCAAgCtF,WAAW,CAC9CoG,sBAAyBxU,KAAKyQ,6BAA6B+D,sBAC3DC,0BAA6BzU,KAAKyQ,6BAA6BgE,2BAA6BzU,KAAKyQ,6BAA6BgE,0BAA0BhQ,GACxJiQ,0BAA6B1U,KAAKyQ,6BAA6BiE,8BArEvE,mDA6EE,WACE1U,KAAK0T,gCAAkC1T,KAAK+K,YAAYO,MAAM,CAC5DkJ,sBAAyB,CAAC,IAC1BC,0BAA6B,CAAC,IAC9Bd,eAAkB,CAAC,CAACtQ,MAAO,GAAIiL,UAAU,IACzCsF,qBAAwB,CAAC,CAAEvQ,MAAO,GAAIiL,UAAU,IAChDwF,yBAA4B,CAAC,CAAEzQ,MAAO,GAAIiL,UAAU,IACpDyF,+BAAkC,CAAC,CAAE1Q,MAAO,GAAIiL,UAAU,IAC1D2F,eAAkB,CAAC,CAAE5Q,MAAO,GAAIiL,UAAU,IAC1C4F,qBAAwB,CAAC,CAAE7Q,MAAO,GAAIiL,UAAU,IAChDoG,0BAA6B,EAAC,GAC9BN,0BAA6B,CAAC,CAAE/Q,MAAO,GAAIiL,UAAU,IACrD+F,wBAA2B,CAAC,CAAEhR,MAAO,GAAIiL,UAAU,IACnDgG,gCAAmC,CAAC,CAAEjR,MAAO,GAAIiL,UAAU,QA1FjE,+BAiGE,WAAiB,WACftO,KAAK0T,gCAAgClS,IAAI,6BAA6BkM,aAAa1K,UAAU,SAACK,GACxFA,GACFS,EAAK4P,gCAAgC1F,WAAW,gBAAiB,IAAIC,KAAY,GAAIzC,gBACrF1H,EAAK4P,gCAAgClS,IAAI,iBAAiB4M,WAAWtK,EAAK2M,6BAA6BkE,eAAiB7Q,EAAK2M,6BAA6BkE,cAAclQ,KAExKX,EAAK4P,gCAAgC3F,cAAc,qBAvG3D,wBA+GE,WACE/N,KAAK4U,8BAAgC5U,KAAKkR,oCAAoC2D,iCAC9E7U,KAAKqT,wBAA0BrT,KAAKkR,oCAAoCoC,2BACxEtT,KAAKkP,oBAAsBlP,KAAKkR,oCAAoC/B,gBACpEnP,KAAK8U,kCAAoC9U,KAAKkR,oCAAoC6D,uCAnHtF,uCAyHE,WACE,IAAMC,EAA8BhV,KAAK0T,gCAAgCuB,cACzE,QAAWzD,KAAOwD,GACyB,KAArCA,EAA4BxD,IAAuB,eAARA,WACtCwD,EAA4BxD,GAGvC,OAAOwD,MAhIX1S,kDAAakR,GAAwCvT,iDAAxCuT,EAAwCtT,u5DDbrDD,kBAEEA,mCAEEA,oCAAgCA,0BAAcA,QAE9CA,gDACEA,yCAAWA,sBAASA,QACpBA,yCACFA,2BAEAA,kDACEA,2CAAWA,iBAAIA,QACfA,8CACEA,uDAIFA,6BACFA,2BAEAA,sCAAgCA,iCAAoBA,QAEpDA,kDACEA,2CAAWA,sBAASA,QACpBA,yCACAA,2CACEA,yDAAkCA,mBAAQA,qBAAQA,QACpDA,6BACFA,2BAEAA,kDACEA,2CAAWA,2BAAcA,QACzBA,8CACEA,uDAGFA,6BACAA,2CACEA,8DAAuCA,mBAAQA,qBAAQA,QACzDA,6BACFA,2BAEAA,sCAAgCA,4CAA+BA,QAE/DA,kDACEA,2CAAWA,sBAASA,QACpBA,yCACFA,2BAEAA,kDACEA,2CAAWA,iBAAIA,QACfA,+CACEA,uDAGFA,6BACFA,2BAEAA,sCAAgCA,iCAAoBA,QAEpDA,kDACEA,2CAAWA,sBAASA,QACpBA,0CACFA,2BAEAA,kDACEA,2CAAWA,iBAAIA,QACfA,+CACEA,wDAGFA,8BACFA,4BAEAA,kDAEAA,yCAAgCA,+BAAiBA,QAEjDA,mDACEA,wEACFA,QAEAA,6DAYAA,kDAEAA,yCAAgCA,oCAAsBA,QAEtDA,mDACEA,uDACFA,QAEAA,oDACEA,6CAAWA,gCAAkBA,QAC7BA,4CACFA,4BAEAA,oDACEA,6CAAWA,oBAAMA,QACjBA,iDACEA,yDAIFA,8BACFA,4BAEAA,0DAeFA,4BAEAA,wCACEA,2CACEA,8CACAA,oCACFA,QACAA,2CACEA,0CACAA,wBACFA,4BACFA,0BAEFA,0BACAA,uBAnJMA,qDAcoDA,2DAoBNA,qDAmBAA,qDAgBAA,qDAclBA,oFA4B4BA,+DAO3CA,qiBCzGNuT,EAAb,yCCRMvT,yBAEEA,SACFA,gCAFEA,iBACAA,uEAeFA,iBAAuCA,kBAAKA,mCAC5CA,iBACEA,SACFA,gCADEA,qGAKFA,iBAAuCA,kBAAKA,mCAC5CA,iBACEA,SACFA,gCADEA,8FAKFA,iBAAuCA,oBAAOA,gDAC9CA,iBACEA,SACAA,qBAAwCA,iEAASiV,sBAC/CjV,8CACFA,8BACFA,sDAJEA,2EAQFA,iBAAuCA,0BAAaA,mCACpDA,iBACEA,SACFA,gCADEA,uFAKFA,iBAAuCA,kBAAKA,mCAE1CA,gBACEA,+BACFA,sCADEA,0IAEFA,gBACEA,+BACFA,sCADEA,0JAEFA,gBAEEA,qCACFA,gDACAA,qBACuEA,yEAASkV,oBAC9ElV,8CACFA,yDAdFA,iBACEA,gDAGAA,gDAGAA,gDAIAA,kDAIFA,oDAdSA,4GAGAA,qGAGAA,8LAIkCA,2KAQ3CA,iBAAuCA,8BAAiBA,gDAGtDA,qBAEEA,yEAASmV,2BACTnV,8CACFA,yDANFA,iBACEA,SACAA,4BAKFA,oDANEA,wEAEGA,6HAQLA,iBAAuCA,qBAAQA,gDAC/CA,iBACEA,2CAAqCA,iEAASoV,kBAC5CpV,8CACFA,8BACFA,mDAGFA,uCACAA,iBCvEG,IAAMqV,EAAb,eAAaA,EAAb,WA2BE,WAAmBvS,EACCqE,EACAC,IAAgC,eAFjCrH,cACCA,iBACAA,uBAfpBA,uBAA0B,GAE1BA,sBAA6B,CAAC,OAAQ,wBAAyB,SAAU,iBAAkB,OAAQ,kBAAmB,UAEtHA,uBAAmB,EAEnBA,eAAW,EApBb,uCA+BE,WAAQ,WACNA,KAAK6R,aAAanE,aAAa1K,UAAU,YAClCc,EAAKyR,kBAAoBzR,EAAK2M,6BAA6BjJ,SAC9D1D,EAAK0R,kBAAoB1R,EAAK2M,6BAA6BjJ,QAAQiO,IAAI,SAAC9N,GAAD,OAAiBqB,+BAAKrB,GAAM,CAAElD,GAAIkD,EAAOM,cAAe,GAC/HnE,EAAKyR,kBAAmB,GAExBzR,EAAK0R,kBAAoB,OArCjC,yBA0CE,WACMxV,KAAKkR,sCACPlR,KAAK0V,WAAa1V,KAAKkR,oCAAoC7D,iBA5CjE,uBAmDE,SAAU1F,GACR3H,KAAKwV,kBAAoBxV,KAAKwV,kBAAkBG,OAAO,CAAChO,EAAOtE,QAC/DsE,EAAOtE,MAAQ,GACfrD,KAAK4V,UAAW,IAtDpB,8BA6DE,SAAiBjO,GAAW,WACpBO,EAA8B,CAClC,IAAIC,IAAU,CACZC,YAAa,SACbC,MAAO,SACPhF,MAAOsE,EAAOyB,OACdd,KAAM,SACNC,UAAU,KAQoBvI,KAAK+C,OAAOuB,KAAKsE,IAAqB,CAAEvI,KAL7D,CACXoI,MAAO,qBACPC,OAAQ,CAAEC,cAAe,WACzBT,WAAYA,KAGYxD,cAAc1B,UAAU,SAAC2B,GACjD,GAAIA,EAAStE,KAAM,CACjB,IAAMwV,EAAS7M,+BAAQrB,GAAM,CAAEyB,OAAQzE,EAAStE,KAAKgD,MAAM+F,SAC3DpD,EAAKwP,kBAAkBM,OAAO9P,EAAKwP,kBAAkBO,QAAQpO,GAAS,EAAGkO,GACzE7P,EAAKwP,kBAAoBxP,EAAKwP,kBAAkBG,OAAO,OAG3D3V,KAAK4V,UAAW,IApFpB,4BA2FE,SAAejO,GAAW,WAClBO,EAA8B,CAClC,IAAIM,KAAe,CACjBJ,YAAa,OACbC,MAAO,OACPhF,MAAOsE,EAAOsB,SAAWtB,EAAO8G,eAAiB,GACjDnG,KAAM,iBACNC,UAAU,KAQkBvI,KAAK+C,OAAOuB,KAAKsE,IAAqB,CAAEvI,KAL3D,CACXoI,MAAO,mBACPC,OAAQ,CAAEC,cAAe,WACzBT,WAAYA,KAGUxD,cAAc1B,UAAU,SAAC2B,GAC/C,GAAIA,EAAStE,KAAM,CACjB,IAAIwV,EAEE5G,EAAOjJ,EAAKoB,UAAU8B,WAAWvE,EAAStE,KAAKgD,MAAM4L,KADxCjJ,EAAKqB,gBAAgBhF,YAExC,OAAQsF,EAAO6B,eAAenG,WACvB,yBACA,aACHwS,EAAS7M,+BAAQrB,GAAM,CAAEsB,QAASgG,IAClC,UACG,aACH4G,EAAS7M,+BAAQrB,GAAM,CAAE8G,cAAeQ,IAG5CjJ,EAAKwP,kBAAkBM,OAAO9P,EAAKwP,kBAAkBO,QAAQpO,GAAS,EAAGkO,GACzE7P,EAAKwP,kBAAoBxP,EAAKwP,kBAAkBG,OAAO,OAG3D3V,KAAK4V,UAAW,IA7HpB,mCAoIE,SAAsBjO,GAAW,WACzBO,EAA8B,CAClC,IAAIC,IAAU,CACZC,YAAa,cACbC,MAAO,eACPhF,MAAOsE,EAAOwG,YACd7F,KAAM,OACNC,UAAU,KAQyBvI,KAAK+C,OAAOuB,KAAKsE,IAAqB,CAAEvI,KALlE,CACXoI,MAAO,2BACPC,OAAQ,CAAEC,cAAe,WACzBT,WAAYA,KAGiBxD,cAAc1B,UAAU,SAAC2B,GACtD,GAAIA,EAAStE,KAAM,CACjB,IAAMwV,EAAS7M,+BAAQrB,GAAM,CAAEwG,YAAaxJ,EAAStE,KAAKgD,MAAM8K,cAChEnI,EAAKwP,kBAAkBM,OAAO9P,EAAKwP,kBAAkBO,QAAQpO,GAAS,EAAGkO,GACzE7P,EAAKwP,kBAAoBxP,EAAKwP,kBAAkBG,OAAO,OAG3D3V,KAAK4V,UAAW,IA3JpB,0BAkKE,SAAajO,GACX3H,KAAKwV,kBAAkBM,OAAO9V,KAAKwV,kBAAkBO,QAAQpO,GAAS,GACtE3H,KAAKwV,kBAAoBxV,KAAKwV,kBAAkBG,OAAO,IACvD3V,KAAK4V,UAAW,IArKpB,sCA2KE,WACE,MAAO,CAAEpO,QAASxH,KAAKwV,uBA5K3BlT,kDAAagT,GAAuCrV,4DAAvCqV,EAAuCpV,4nDDvBpDD,iBAEEA,8CACEA,uCAAWA,kBAAMA,QACjBA,+CACEA,8EAIFA,2BACFA,yBAEAA,qCACEA,wCAAwDA,wDAAS0L,iBAC/D1L,2CACAA,8BACFA,QACFA,yBAEAA,uCAEEA,iCACEA,6CACAA,8CAGFA,2BAEAA,kCACEA,6CACAA,8CAGFA,2BAEAA,kCACEA,6CACAA,8CAMFA,2BAEAA,kCACEA,6CACAA,8CAGFA,2BAEAA,kCACEA,6CACAA,+CAgBFA,2BAEAA,kCACEA,6CACAA,8CAQFA,2BAEAA,kCACEA,6CACAA,8CAKFA,2BAEAA,8CACAA,4CAEFA,2BAEFA,yBAEAA,oCACEA,uCACEA,0CACAA,+BACFA,QACAA,uCACEA,qCACAA,uBACFA,yBACFA,uBACAA,sCAzGqCA,6FAQmDA,oCAM/BA,iDAAgC,yCA0EjEA,sDACaA,sDAWMA,+WClF9BqV,EAAb,gDCrBErV,iBACEA,oCAAmBA,iBAAKA,QACxBA,oCAAmBA,SAA2DA,QAChFA,4CADqBA,mGAQrBA,iBACEA,oCAAmBA,qBAASA,QAC5BA,oCAAmBA,+BAA6EA,QAClGA,4CADqBA,kKAGrBA,iBACEA,oCAAmBA,wBAAYA,QAC/BA,oCAAmBA,SAAmEA,QACxFA,4CADqBA,wJAWjBA,iBAAuCA,oBAAOA,mCAC9CA,iBACEA,SAAmFA,gCAAnFA,8GAIFA,iBAAuCA,0BAAaA,mCACpDA,iBAAyCA,SAAyDA,gCAAzDA,oFAIzCA,iBAAuCA,sBAASA,mCAChDA,iBAA0CA,SAAmCA,gCAAnCA,qEAI1CA,iBAAuCA,yBAAYA,mCACnDA,iBAA0CA,SAA4BA,gCAA5BA,8DAI1CA,iBAAuCA,qBAAQA,gCAG3CA,gBACEA,gDACAA,qDACFA,gCACAA,gBACEA,gDACAA,qDACFA,gDATJA,iBACEA,2CAAmCA,qHAA0E,KAAI+V,IAC/G/V,kDAIAA,kDAIFA,8BACFA,gEATWA,kDAIAA,0EAsBDA,iBAAuCA,yBAAYA,mCACnDA,iBACEA,SACFA,gCADEA,uGAKFA,iBAAuCA,4BAAeA,mCACtDA,iBACEA,SACFA,gCADEA,0GAKFA,iBAAuCA,4BAAeA,mCACtDA,iBACEA,8BACFA,gCADEA,qHAKFA,iBAAuCA,6BAAgBA,mCACvDA,iBACEA,SACFA,gCAFyCA,kCACvCA,yGAKFA,iBAAuCA,4BAAeA,mCACtDA,iBACEA,SACFA,gCADEA,0GAKFA,iBAAuCA,sBAASA,mCAChDA,iBACEA,SACFA,gCADEA,4FAIJA,uCACAA,2CA7CFA,oBAEEA,0CACEA,qDACAA,qDAGFA,oCAEAA,0CACEA,uDACAA,uDAGFA,qCAEAA,4CACEA,uDACAA,uDAGFA,qCAEAA,4CACEA,uDACAA,wDAGFA,qCAEAA,4CACEA,uDACAA,uDAGFA,qCAEAA,4CACEA,uDACAA,uDAGFA,qCAEAA,wDACAA,sDAEFA,6EA/CqDA,iCA4C/BA,gEACaA,2FAvDzCA,iBAEEA,0CAEEA,iDAEEA,6CACEA,oDACFA,QAEAA,wDAiDFA,mCACFA,+BACFA,6EA7DyEA,qDAEhBA,qFAQuCA,kEAsDlGA,uCACAA,uCACAA,iBCjHG,IAAMgW,GAAb,eAAaA,EAAb,WAqBE,6BAbAjW,2BAA6B,GAE7BA,gCAAoC,CAAC,SAAU,cAAe,WAAY,cAAe,WAEzFA,gCAAuC,CAAC,aAAc,gBAAiB,gBAAiB,iBAAkB,gBAAiB,UAE3HA,0CAAiD,CAAC,cAdpD,0CAuBE,WACMA,KAAKkR,sCACPlR,KAAKoF,sBAAwBpF,KAAKkR,oCAAoC7L,aAAaC,WACnFtF,KAAKkW,eAAelO,kBA1B1B1F,kDAAa2T,8BAAiD/V,w+DDpB9DD,iBAEEA,0CAKAA,mCACEA,oCAAmBA,4BAAgBA,QACnCA,oCAAmBA,iCAA8EA,QACnGA,yBAEAA,4CAKAA,4CAKAA,qCACEA,sCAAmBA,wCAA2BA,QAC9CA,sCAAmBA,UAAgGA,QACrHA,yBAEAA,yCAEEA,iCACEA,6CACAA,6CAEFA,2BAEAA,kCACEA,6CACAA,6CACFA,2BAEAA,kCACEA,6CACAA,6CACFA,2BAEAA,kCACEA,6CACAA,6CACFA,2BAEAA,kCACEA,6CACAA,6CAYFA,2BAEAA,kCACEA,8CA8DFA,2BAEAA,8CACAA,4CACAA,4CAEFA,2BAEFA,yBAEAA,oCACEA,uCACEA,0CACAA,+BACFA,QACAA,uCACEA,qCACAA,uBACFA,yBACFA,uBACAA,sBAnJmBA,gIAOIA,yIAGJA,mIAKAA,uIAOIA,qJAGqBA,qDAwGpBA,gEACaA,gEACAA,+sBCzHvB,EACVsF,QAAQ,kBAAmB,EACzBC,QAAM,aAAaC,QAAM,CAAEC,OAAQ,MAAOC,UAAW,QACrDH,QAAM,YAAYC,QAAM,CAAEC,OAAQ,QAClCE,QAAW,0BAA0BC,QAAQ,+CAItCoQ,EAAb,yCC0DEhW,iBACEA,oCAAmBA,2BAAeA,QAClCA,oCAAmBA,yBAAwMA,QAC7NA,4CADqBA,kPAGrBA,iBACEA,oCAAmBA,iCAAqBA,QACxCA,oCAAmBA,SAAsIA,QAC3JA,4CADqBA,+OAGrBA,iBACEA,oCAAmBA,4BAAgBA,QACnCA,oCAAmBA,SAA0JA,QAC/KA,4CADqBA,6QAGrBA,iBACEA,oCAAmBA,gCAAoBA,QACvCA,oCAAmBA,SAAsIA,QAC3JA,4CADqBA,+OAQrBA,iBACEA,oCAAmBA,kCAAsBA,QACzCA,oCAAmBA,yBAAuHA,QAC5IA,4CADqBA,qKAQrBA,iBACEA,oCAAmBA,+BAAmBA,QACtCA,oCAAmBA,SAAyJA,QAC9KA,4CADqBA,2QAGrBA,iBACEA,oCAAmBA,uCAA2BA,QAC9CA,oCAAmBA,SAAwDA,QAC7EA,4CADqBA,4FASnBA,iBACEA,sCAAmBA,iBAAKA,QACxBA,sCAAmBA,SAA4DA,QACjFA,8CADqBA,oJAQrBA,iBACEA,sCAAmBA,qBAASA,QAC5BA,sCAAmBA,+BAA6EA,QAClGA,8CADqBA,kKAGrBA,iBACEA,sCAAmBA,wBAAYA,QAC/BA,sCAAmBA,SAAmEA,QACxFA,8CADqBA,wJAWjBA,iBAAuCA,oBAAOA,mCAC9CA,iBACEA,SAAmFA,gCAAnFA,gHAIFA,iBAAuCA,0BAAaA,mCACpDA,iBAAyCA,SAAyDA,gCAAzDA,oFAIzCA,iBAAuCA,sBAASA,mCAChDA,iBAA0CA,SAAmCA,gCAAnCA,qEAI1CA,iBAAuCA,yBAAYA,mCACnDA,iBAA0CA,SAA4BA,gCAA5BA,8DAI1CA,iBAAuCA,qBAAQA,gCAG3CA,gBACEA,kDACAA,yDACFA,gCACAA,gBACEA,kDACAA,yDACFA,gDATJA,iBACEA,6CAAmCA,qHAA0E,KAAIkW,IAC/GlW,oDAIAA,oDAIFA,gCACFA,kEATWA,kDAIAA,0EAsBDA,iBAAuCA,yBAAYA,mCACnDA,iBACEA,SACFA,gCADEA,2GAKFA,iBAAuCA,4BAAeA,mCACtDA,iBACEA,SACFA,gCADEA,8GAKFA,iBAAuCA,4BAAeA,mCACtDA,iBACEA,8BACFA,gCADEA,yHAKFA,iBAAuCA,6BAAgBA,mCACvDA,iBACEA,SACFA,gCAFyCA,kCACvCA,6GAKFA,iBAAuCA,4BAAeA,mCACtDA,iBACEA,SACFA,gCADEA,8GAKFA,iBAAuCA,sBAASA,mCAChDA,iBACEA,SACFA,gCADEA,gGAIJA,uCACAA,2CA7CFA,oBAEEA,4CACEA,uDACAA,wDAGFA,sCAEAA,4CACEA,yDACAA,0DAGFA,uCAEAA,8CACEA,yDACAA,0DAGFA,uCAEAA,8CACEA,yDACAA,0DAGFA,uCAEAA,8CACEA,yDACAA,0DAGFA,uCAEAA,8CACEA,yDACAA,0DAGFA,uCAEAA,0DACAA,wDAEFA,+EA/CqDA,iCA4C/BA,gEACaA,2FAvDzCA,iBAEEA,4CAEEA,mDAEEA,+CACEA,wDACFA,QAEAA,0DAiDFA,qCACFA,iCACFA,+EA7DyEA,qDAEhBA,qFAQuCA,kEAsDlGA,uCACAA,uCACAA,wCAeEA,iBAAuCA,kBAAKA,mCAC5CA,iBACEA,SACFA,gCADEA,yGAKFA,iBAAuCA,kBAAKA,mCAC5CA,iBACEA,SACFA,gCADEA,kGAKFA,iBAAuCA,oBAAOA,mCAC9CA,iBACEA,SACFA,gCADEA,6EAKFA,iBAAuCA,kBAAKA,mCAE1CA,gBAEEA,+BACFA,sCADEA,6IAEFA,gBACEA,+BACFA,sCADEA,8JAEFA,gBAGEA,yCACFA,mCAZFA,iBACEA,kDAIAA,kDAGAA,kDAKFA,sDAXKA,4GAGIA,qGAIJA,sNAQLA,iBAAuCA,8BAAiBA,mCACxDA,iBACEA,SACFA,gCADEA,kGAKFA,iBAAuCA,0BAAaA,mCACpDA,iBACEA,SACFA,gCADEA,0FAIJA,uCACAA,2CA9DJA,kBAEEA,oCAA8BA,mBAAOA,QAErCA,6CAEAA,wCAEEA,kCACEA,+CACAA,gDAGFA,6BAEAA,oCACEA,+CACAA,gDAGFA,6BAEAA,oCACEA,+CACAA,gDAGFA,6BAEAA,oCACEA,+CACAA,gDAcFA,6BAEAA,oCACEA,+CACAA,gDAGFA,6BAEAA,oCACEA,+CACAA,gDAGFA,6BAEAA,gDACAA,8CAEFA,6BAEFA,+CA5DuDA,+DAuD/BA,6DACaA,+FCrT1BmW,GAAb,eAAaA,EAAb,WAyBE,6BAfApW,6BAAoC,CAAC,OAAQ,wBAAyB,SAAU,iBAAkB,OAAQ,mBAE1GA,2BAA6B,GAE7BA,gCAAoC,CAAC,SAAU,cAAe,WAAY,cAAe,WAEzFA,gCAAuC,CAAC,aAAc,gBAAiB,gBAAiB,iBAAkB,gBAAiB,UAE3HA,0CAAiD,CAAC,cAKxCA,YAAS,IAAIuQ,MAvBzB,0CA2BE,WACMvQ,KAAKkR,sCACPlR,KAAKoF,sBAAwBpF,KAAKkR,oCAAoC7L,aAAaC,gBA7BzFhD,kDAAa8T,8BAAuClW,81EDnBpDD,iBAEEA,kCAA8BA,mBAAOA,QAErCA,2CAEAA,mCACEA,oCAAmBA,oBAAOA,QAC1BA,sCAAmBA,2BAAsGA,QAC3HA,yBAEAA,qCACEA,sCAAmBA,yBAAYA,QAC/BA,sCAAmBA,iCAA2DA,QAChFA,yBAEAA,qCACEA,sCAAmBA,0BAAaA,QAChCA,sCAAmBA,2BAAgJA,QACrKA,yBAEAA,oCAA8BA,qBAAQA,QAEtCA,6CAEAA,qCACEA,sCAAmBA,qBAAQA,QAC3BA,sCAAmBA,UAAuDA,QAC5EA,yBAEAA,qCACEA,sCAAmBA,8BAAiBA,QACpCA,sCAAmBA,UAAgEA,QACrFA,yBAEAA,qCACEA,sCAAmBA,2BAAcA,QACjCA,sCAAmBA,UAAgEA,QACrFA,yBAEAA,oCAA8BA,kBAAKA,QAEnCA,6CAEAA,qCACEA,sCAAmBA,kCAAqBA,QACxCA,sCAAmBA,UAA2CA,QAChEA,yBAEAA,qCACEA,sCAAmBA,4BAAeA,QAClCA,sCAAmBA,2BAAyLA,QAC9MA,yBAEAA,qCACEA,sCAAmBA,yCAA4BA,QAC/CA,sCAAmBA,4BAAwJA,QAC7KA,0BAEAA,uCACEA,wCAAmBA,sCAAwBA,QAC3CA,wCAAmBA,6BAAgJA,QACrKA,0BAEAA,uCACEA,wCAAmBA,wCAA0BA,QAC7CA,wCAAmBA,6BAA4IA,QACjKA,0BAEAA,uCACEA,wCAAmBA,2BAAaA,QAChCA,wCAAmBA,6BAAgKA,QACrLA,0BAEAA,sCAA8BA,sBAAQA,QAEtCA,+CAEAA,8CAKAA,8CAKAA,8CAKAA,8CAKAA,uCACEA,wCAAmBA,mDAAqCA,QACxDA,wCAAmBA,WAAsEA,QAC3FA,0BAEAA,8CAKAA,uCACEA,wCAAmBA,0CAA4BA,QAC/CA,wCAAmBA,WAAkFA,QACvGA,0BAEAA,8CAKAA,8CAKAA,sCAA8BA,iCAAmBA,QAEjDA,+CAEAA,uCAEEA,gDAKAA,yCACEA,0CAAmBA,8BAAgBA,QACnCA,0CAAmBA,mCAA8EA,QACnGA,4BAEAA,gDAKAA,gDAKAA,yCACEA,0CAAmBA,yCAA2BA,QAC9CA,0CAAmBA,WAAgGA,QACrHA,4BAEAA,2CAEEA,qCACEA,iDACAA,kDAEFA,8BAEAA,sCACEA,iDACAA,kDACFA,8BAEAA,sCACEA,iDACAA,kDACFA,8BAEAA,sCACEA,iDACAA,kDACFA,8BAEAA,sCACEA,iDACAA,kDAYFA,8BAEAA,sCACEA,mDA8DFA,8BAEAA,kDACAA,gDACAA,gDAEFA,8BAEFA,4BAEAA,gDAoEFA,0BAEAA,sCACEA,yCACEA,4CACAA,gCACFA,QACAA,yCACEA,8BACFA,QACAA,yCAA0CA,gCAAS0L,kBACjD1L,8BACFA,QACFA,wBACAA,uBApVuBA,4HAKAA,wEAKAA,kKASAA,qEAKAA,6EAKAA,6EASAA,yDAKAA,0MAKAA,+KAKAA,uKAKAA,mKAKAA,uLAOJA,uEAKAA,4EAKAA,sFAKAA,4EAOIA,+EAGJA,2EAOIA,2FAGJA,uFAKAA,yEAWEA,gIAOIA,2IAGJA,mIAKAA,uIAOIA,qJAG+BA,qDAwG9BA,gEACaA,gEACAA,0EAMpBA,gEA2ESA,ihCC1Ud,EACVsF,QAAQ,kBAAmB,EACzBC,QAAM,aAAaC,QAAM,CAAEC,OAAQ,MAAOC,UAAW,QACrDH,QAAM,YAAYC,QAAM,CAAEC,OAAQ,QAClCE,QAAW,0BAA0BC,QAAQ,+CAItCuQ,EAAb,0BCdMnW,0CACFA,0CAGEA,0CACFA,0CAGEA,0CACFA,0CAGEA,0CACFA,0CAGEA,0CACFA,yCAI4BA,yCAWAA,0CAWAA,uCAWAA,0CAWAA,qDAWAA,yCAaAA,0DAF5BA,uBAEEA,sDAEAA,8EAGkDA,kDAAUoW,WAC5DpW,4BAEFA,kDALIA,8EAA6D,4EAA7DA,CAA6D,kDCzE9D,IAAMqW,GAAb,eAAaA,EAAb,WA0BE,WAAoB3T,EACAC,EACAwE,EACAvE,EACAwE,GAAgC,2BAJhCrH,aACAA,cACAA,iBACAA,4BACAA,uBAClBA,KAAK2C,MAAMtC,KAAK2C,UAAU,SAAC3C,GACzB4C,EAAKwN,6BAA+BpQ,EAAKoQ,+BAhC/C,0CAwCE,SAAYhH,GACVzJ,KAAKkR,oCAAsCzH,IAzC/C,0CA+CE,WACE,OAAOzJ,KAAKuW,gCAAgC1F,iCAhDhD,2CAsDE,WACE,OAAO7Q,KAAKwW,gCAAgC5E,kCAvDhD,wCA6DE,WACE,OAAO5R,KAAKyW,6BAA6BpE,+BA9D7C,2CAoEE,WACE,OAAOrS,KAAK0W,gCAAgChD,kCArEhD,wCA2EE,WACE,OACE1T,KAAK6Q,+BAA+B8F,OACpC3W,KAAKqS,6BAA6BsE,OAClC3W,KAAK0T,gCAAgCiD,QA/E3C,+BAsFE,WACE,kEACK3W,KAAKuW,gCAAgChF,4BACrCvR,KAAKyW,6BAA6BlD,0BAClCvT,KAAK0W,gCAAgC1B,6BACrChV,KAAK4W,+BAA+BC,8BA3F7C,oBAkGE,WAAM,WACEzU,EAASpC,KAAKqH,gBAAgBwB,SAASC,KACvCzG,EAAarC,KAAKqH,gBAAgBhF,WAClCmM,EAAiB,UACjBxM,EAAmBgH,+BACpBhJ,KAAKgC,qBAAmB,CAC3BF,SAAU9B,KAAKyQ,6BAA6B3O,SAC5C0F,QAASxH,KAAKgC,oBAAoBwF,QAAQiO,IAAI,SAAC9N,GAAD,MAAkB,CAC9DM,SAAUN,EAAOlD,GACjB2E,OAAQzB,EAAOyB,OACfH,QAAStB,EAAOsB,SAAWnF,EAAKsD,UAAU8B,WAAWvB,EAAOsB,QAAS5G,GACrEoM,cAAe9G,EAAO8G,eAAiB3K,EAAKsD,UAAU8B,WAAW,CAAC,KAAMyM,OAAOhO,EAAO8G,eAAgBD,GACtGL,YAAaxG,EAAOwG,eAEtB2C,gBAAiB9Q,KAAKoH,UAAU8B,WAAWlJ,KAAKgC,oBAAoB8O,gBAAiBzO,GACrFyU,OAAQ,CAAC,CAACxR,WAAYtF,KAAKkR,oCAAoC7L,aAAaC,aAC5EjD,aACAmM,iBACApM,WAEFpC,KAAK6C,qBAAqBkU,0BAA0B/U,GAAqBgB,UAAU,SAAC2B,GAClFb,EAAKlB,OAAOmB,SAAS,CAAC,MAAOY,EAASqS,YAAa,CAAEhT,WAAYF,EAAKnB,cAvH5EL,kDAAagU,GAAkCrW,iFAAlCqW,EAAkCpW,6FAGlCoQ,EAAuC,QAEvCoB,EAAwC,QAExCQ,EAAqC,QAErCsB,EAAwC,QAExC8B,EAAuC,soCDnCpDrV,iBAEEA,wDAEEA,wDAIAA,oDAIAA,oDAIAA,sDAIAA,sDAIAA,4CAEEA,wDAEAA,gFAEEA,+DAAuC0L,mBACzC1L,6BAEFA,6BAEAA,4CAEEA,wDAEAA,iFAGAA,6BAEFA,6BAEAA,4CAEEA,wDAEAA,8EAGAA,6BAEFA,6BAEAA,4CAEEA,wDAEAA,iFAGAA,6BAEFA,6BAEAA,0CAEEA,wDAEAA,4FAGAA,6BAEFA,6BAEAA,0CAEEA,wDAEAA,gFAKAA,6BAEFA,6BAEAA,oDAYFA,2BAEFA,yBACAA,sBAnFcA,gEAKNA,8EAMMA,gFAKNA,8EAA6D,6EAMvDA,6DAKNA,8EAA6D,6EAMvDA,gEAKNA,8EAA6D,6EAW7DA,8EAA6D,6EAW7DA,8EAA6D,4EAA7DA,CAA6D,8DAA7DA,CAA6D,sEAQtCA,iICpElBqW,EAAb,0BCnBMrW,0CACFA,0CAGEA,0CACFA,0CAGEA,0CACFA,0CAGEA,0CACFA,0CAGEA,0CACFA,yCAI4BA,yCAWAA,0CAWAA,uCAWAA,0CAWAA,qDAWAA,yCAaAA,0DAF5BA,uBAEEA,sDAEAA,8EAGkDA,kDAAUoW,WAC5DpW,4BAEFA,kDALIA,iFAAgE,4EAAhEA,CAAgE,kDCzEjE,IAAMgX,GAAb,eAAaA,EAAb,WA0BE,WAAoBtU,EACAC,EACAwE,EACAvE,EACAwE,GAAgC,2BAJhCrH,aACAA,cACAA,iBACAA,4BACAA,uBAClBA,KAAK2C,MAAMtC,KAAK2C,UAAU,SAAC3C,GACzB4C,EAAKiU,gCAAkC7W,EAAK6W,kCAhClD,0CAwCE,SAAYzN,GACVzJ,KAAKkR,oCAAsCzH,IAzC/C,0CA+CE,WACE,OAAOzJ,KAAKuW,gCAAgC1F,iCAhDhD,2CAsDE,WACE,OAAO7Q,KAAKwW,gCAAgC5E,kCAvDhD,wCA6DE,WACE,OAAO5R,KAAKyW,6BAA6BpE,+BA9D7C,2CAoEE,WACE,OAAOrS,KAAK0W,gCAAgChD,kCArEhD,sDA2EE,WACE,OACE1T,KAAK6Q,+BAA+B8F,OACpC3W,KAAKqS,6BAA6BsE,OAClC3W,KAAK0T,gCAAgCiD,SAElC3W,KAAK6Q,+BAA+B+E,WACpC5V,KAAKqS,6BAA6BuD,WAClC5V,KAAK0T,gCAAgCkC,WACrC5V,KAAK4W,+BAA+BhB,YApF7C,+BA4FE,WACE,kEACK5V,KAAKuW,gCAAgChF,4BACrCvR,KAAKyW,6BAA6BlD,0BAClCvT,KAAK0W,gCAAgC1B,6BACrChV,KAAK4W,+BAA+BC,8BAjG7C,oBAwGE,WAAM,WACEzU,EAASpC,KAAKqH,gBAAgBwB,SAASC,KACvCzG,EAAarC,KAAKqH,gBAAgBhF,WAClCmM,EAAiB,UACjBxM,EAAmBgH,+BACpBhJ,KAAKgC,qBAAmB,CAC3BF,SAAU9B,KAAKkX,gCAAgCpV,SAC/C0F,QAASxH,KAAKgC,oBAAoBwF,QAAQiO,IAAI,SAAC9N,GAAD,MAAkB,CAC9DM,SAAUN,EAAOlD,GACjB2E,OAAQzB,EAAOyB,OACfH,QAAStB,EAAOsB,SAAWnF,EAAKsD,UAAU8B,WAAWvB,EAAOsB,QAAS5G,GACrEoM,cAAe9G,EAAO8G,eAAiB3K,EAAKsD,UAAU8B,WAAW,CAAC,KAAMyM,OAAOhO,EAAO8G,eAAgBD,GACtGL,YAAaxG,EAAOwG,eAEtB2C,gBAAiB9Q,KAAKoH,UAAU8B,WAAWlJ,KAAKgC,oBAAoB8O,gBAAiBzO,GACrFyU,OAAQ,CAAC,CAACxR,WAAYtF,KAAKkR,oCAAoC7L,aAAaC,aAC5EjD,aACAmM,iBACApM,WAEFpC,KAAK6C,qBAAqBsU,0BAA0BnX,KAAKkX,gCAAgCzS,GAAIzC,GAAqBgB,UAAU,SAAC2B,GAC3Hb,EAAKlB,OAAOmB,SAAS,CAAC,OAAQ,CAAEC,WAAYF,EAAKnB,cA7HvDL,kDAAa2U,GAAgChX,iFAAhCgX,EAAgC/W,2FAGhCoQ,EAAuC,QAEvCoB,EAAwC,QAExCQ,EAAqC,QAErCsB,EAAwC,QAExC8B,EAAuC,soCDnCpDrV,iBAEEA,wDAEEA,oDAIAA,oDAIAA,oDAIAA,sDAIAA,sDAIAA,4CAEEA,wDAEAA,gFAEEA,+DAAuC0L,mBACzC1L,6BAEFA,6BAEAA,4CAEEA,wDAEAA,iFAGAA,6BAEFA,6BAEAA,4CAEEA,wDAEAA,8EAGAA,6BAEFA,6BAEAA,4CAEEA,wDAEAA,iFAGAA,6BAEFA,6BAEAA,0CAEEA,wDAEAA,4FAGAA,6BAEFA,6BAEAA,0CAEEA,wDAEAA,gFAKAA,6BAEFA,6BAEAA,oDAYFA,2BAEFA,yBACAA,sBAnFcA,gEAKNA,iFAMMA,gFAKNA,iFAAgE,6EAM1DA,6DAKNA,iFAAgE,6EAM1DA,gEAKNA,iFAAgE,6EAWhEA,iFAAgE,6EAWhEA,iFAAgE,4EAAhEA,CAAgE,4EAAhEA,CAAgE,sEAQzCA,+ICpElBgX,EAAb,GCVaG,EAAb,eAAaA,EAAb,WAKE,WAAoBvU,IAA0C,eAA1C7C,4BALtB,sCAYE,SAAQ2C,GACN,IAAMsI,EAAwBtI,EAAM6H,SAAShJ,IAAI,yBACjD,OAAOxB,KAAK6C,qBAAqBwU,4BAA4BpM,OAdjE3I,kDAAa8U,GAAgCnX,qCAAhCmX,EAAgC7U,QAAhC6U,EAAgC,YAAhCA,EAAb,wBCAaE,GAAb,eAAaA,EAAb,WAKE,WAAoBzU,IAA0C,eAA1C7C,4BALtB,sCAYE,SAAQ2C,GACN,IAAMsI,EAAwBtI,EAAMwC,OAAOqF,SAAShJ,IAAI,yBAClDK,EAAgBc,EAAM6H,SAAShJ,IAAI,MACzC,OAAOxB,KAAK6C,qBAAqB0U,mCAAmCtM,EAAuBpJ,OAf/FS,kDAAagV,GAAuCrX,qCAAvCqX,EAAuC/U,QAAvC+U,EAAuC,YAAvCA,EAAb,GCCaE,GAAb,eAAaA,EAAb,WAME,WAAoB1U,EACAD,IAA0C,eAD1C7C,sBACAA,4BAPtB,sCAcE,SAAQ2C,GACN,IAAM8U,EAAa9U,EAAM6H,SAAShJ,IAAI,QAChCyJ,EAAwBtI,EAAM6H,SAAShJ,IAAI,0BAA4BmB,EAAMwC,OAAOA,OAAOqF,SAAShJ,IAAI,yBAC9G,OAAQiW,OACD,aACH,OAAOzX,KAAK8C,eAAe4U,iCAAiCzM,OACzD,QACH,OAAOjL,KAAK6C,qBAAqB8U,uCAAuC1M,WAExE,YAvBR3I,kDAAakV,GAAmCvX,gDAAnCuX,EAAmCjV,QAAnCiV,EAAmC,YAAnCA,EAAb,GCDaI,GAAb,eAAaA,EAAb,WAKE,WAAoB/U,IAA0C,eAA1C7C,4BALtB,sCAYE,SAAQ2C,GACN,IAAMb,EAAWa,EAAMwC,OAAOA,OAAOqF,SAAShJ,IAAI,YAClD,OAAOxB,KAAK6C,qBAAqBoO,gCAAgCnP,OAdrEQ,kDAAasV,GAAoC3X,qCAApC2X,EAAoCrV,QAApCqV,EAAoC,YAApCA,EAAb,GCAaC,GAAb,eAAaA,EAAb,WAKE,WAAoBhV,IAA0C,eAA1C7C,4BALtB,sCAYE,SAAQ2C,GACN,IAAMsI,EAAwBtI,EAAM6H,SAAShJ,IAAI,yBACjD,OAAOxB,KAAK6C,qBAAqBiV,mCAAmC7M,OAdxE3I,kDAAauV,GAAuC5X,qCAAvC4X,EAAuCtV,QAAvCsV,EAAuC,YAAvCA,EAAb,GCcME,GAAiB,CACrB,CACEC,KAAM,GACN3X,KAAM,CAAEoI,OAAOwP,OAAQ,sBAAuBC,WAAY,iBAAkBC,sBAAsB,GAClGC,SAAU,CACR,CACEJ,KAAM,SACN3X,KAAM,CAAEoI,OAAOwP,OAAQ,gCAAiCC,WAAY,gCACpEG,UAAW/B,GACXgC,QAAS,CACP7H,6BAA8BmH,KAGlC,CACEI,KAAM,yBACN3X,KAAM,CAAEoI,OAAOwP,OAAQ,8BAA+BE,qBAAsB,yBAC5EG,QAAS,CACPpV,yBAA0BkU,GAE5BgB,SAAU,CACR,CACEJ,KAAM,GACNK,UAAW3V,GACX4V,QAAS,CACPpV,yBAA0BkU,EAC1BjU,kBAAmBoV,MAErBH,SAAU,CACR,CACEJ,KAAM,sBACNK,UAAWnT,GACX7E,KAAM,CAAEoI,OAAOwP,OAAQ,6CAA8CC,WAAY,sBAAuBC,sBAAsB,IAEhI,CACEH,KAAM,eACNK,UAAWtS,GACX1F,KAAM,CAAEoI,OAAOwP,OAAQ,sCAAuCC,WAAY,eAAgBC,sBAAsB,IAElH,CACEH,KAAM,UACNK,UAAWlR,GACX9G,KAAM,CAAEoI,OAAOwP,OAAQ,iCAAkCC,WAAY,UAAWC,sBAAsB,IAExG,CACEH,KAAM,wBACNK,UAAWzO,GACXvJ,KAAM,CAAEoI,OAAOwP,OAAQ,+CAAgDC,WAAY,wBAAyBC,sBAAsB,IAEpI,CACEH,KAAM,aACNI,SAAU,CACR,CACEJ,KAAM,iBACNK,UAAWhO,GACXhK,KAAM,CAAEoI,OAAOwP,OAAQ,mBAAoBE,qBAAsB,iBACjEG,QAAS,CACP5N,iBAAkB8N,WAO9B,CACER,KAAM,OACN3X,KAAM,CAAEoI,OAAOwP,OAAQ,8BAA+BC,WAAY,OAAQC,sBAAsB,GAChGE,UAAWpB,GACXqB,QAAS,CACPpB,gCAAiCW,KAGrC,CACEG,KAAM,eACN3X,KAAM,CAAEoI,OAAOwP,OAAQ,uCAAwCC,WAAY,eAAgBC,sBAAsB,GACjHC,SAAU,CACR,CACEJ,KAAM,GACNS,WAAY,kBAAmBC,UAAW,UAE5C,CACEV,KAAM,oBACNW,aAAc,kBAAMC,2FAA2D/U,KAAK,YAAC,OAAIgV,EAAEC,2BAE7F,CACEd,KAAM,MACN3X,KAAM,CAAE8X,qBAAsB,MAC9BC,SAAU,CACR,CACEJ,KAAM,GACNK,UAAWlI,GACXmI,QAAS,CACPjI,gCAAiCiH,SAO7C,CACEU,KAAM,gBACN3X,KAAM,CAAEoI,OAAOwP,OAAQ,kCAAmCE,qBAAsB,QAChFE,UAAWxI,GACXyI,QAAS,CACPlL,+BAAgCoK,UAsBjCuB,GAAb,eAAaA,KAAbjZ,iFAAaiZ,6DAVA,CACT3B,EACAoB,KACAD,KACAjB,GACAE,GACAI,GACAC,IACDmB,SAVQ,CAACC,cAAsBlB,KACtBkB,QAWCF,EAAb,GClEaG,GAAb,eAAaA,KAAbpZ,iFAAaoZ,6DAFA,GAAGF,SANL,CACPG,KACAC,KACAC,KACAN,OAISG,EAAb,EAAaA","names":["CalculateInterestDialogComponent","g","dialogRef","this","i0","selectors","PostInterestDialogComponent","ToggleWithholdTaxDialogComponent","data","MAT_DIALOG_DATA","FixedDepositsButtonsConfiguration","status","setOptions","setButtons","buttonsArray","optionArray","name","icon","option","push","e","FixedDepositsService","http","accountId","httpParams","HttpParams","set","get","params","delete","command","post","transactionId","clientId","productId","fixedDepositAccount","put","clientName","fromAccountId","locale","dateFormat","o","factory","ctx_r15","ctx_r20","FixedDepositAccountViewComponent","route","router","fixedDepositsService","savingsService","dialog","subscribe","r","fixedDepositsAccountData","savingsDatatables","setConditionalButtons","value","buttonConfig","taxGroup","addOption","withHoldTax","url","navigateByUrl","skipLocationChange","then","i","navigate","relativeTo","deleteFixedDepositsAccount","calculateInterest","postInterest","enableWithHoldTax","disableWithHoldTax","open","DeleteDialogComponent","deleteContext","id","afterClosed","response","confirm","executeFixedDepositsAccountCommand","reload","isEnable","executeSavingsAccountUpdateCommand","chartSlabIndex_r20","InterestRateChartTabComponent","parent","interestRateChartData","accountChart","chartSlabs","trigger","state","style","height","minHeight","transition","animate","ctx_r21","TransactionsTabComponent","a","transactionsData","transactions","dataSource","MatTableDataSource","transactionType","withdrawal","feeDeduction","overdraftInterest","withholdTax","transfer","WaiveChargeDialogComponent","InactivateChargeDialogComponent","ctx_r26","ctx_r43","ctx_r46","ctx_r52","ctx_r55","ctx_r59","ChargesTabComponent","dateUtils","settingsService","p","chargesData","charges","activeCharges","filter","charge","isActive","showInactiveCharges","inActiveCharges","chargesTableRef","renderRows","chargeId","formfields","InputBase","controlName","label","type","required","DatepickerBase","title","layout","addButtonText","FormDialogComponent","language","code","dataObject","Object","dueDate","formatDate","executeSavingsAccountChargesCommand","amount","amountOrPercentage","editSavingsAccountCharge","deleteSavingsAccountCharge","chargeTimeType","$event","stopPropagation","ctx_r29","StandingInstructionsTabComponent","accountTransfersService","fixedDepositsData","getStandingInstructions","instructionsData","pageItems","instructionTableRef","instructionId","deleteStandingInstrucions","DatatableTabsComponent","entityId","snapshot","paramMap","entityDatatable","savingsDatatable","multiRowDatatableFlag","columnHeaders","columnName","ApproveFixedDepositsAccountComponent","formBuilder","Date","fixedDepositAccountId","maxDate","businessDate","createApproveFixedDepositsAccountForm","approveFixedDepositsAccountForm","group","approvedOnDate","Validators","note","approveFixedDepositsAccountFormData","ctx","_r0","RejectFixedDepositsAccountComponent","createRejectFixedDepositsAccountForm","rejectFixedDepositsAccountForm","rejectedOnDate","rejectFixedDepositsAccountFormData","ActivateFixedDepositsAccountComponent","createActivateFixedDepositsAccountForm","activateFixedDepositsAccountForm","activatedOnDate","activateFixedDepositsAccountFormData","executeSavingsAccountCommand","UndoApprovalFixedDepositsAccountComponent","createUndoApprovalFixedDepositsAccountForm","undoApprovalFixedDepositsAccountForm","WithdrawByClientFixedDepositsAccountComponent","createWithdrawFixedDepositsAccountForm","withdrawFixedDepositsAccountForm","withdrawnOnDate","withdrawFixedDepositsAccountFormData","_r12","_r16","AddChargeFixedDepositsAccountComponent","savingsChargeOptions","fixedDepositsAccountActionData","chargeOptions","createFixedDepositsChargeForm","buildDependencies","fixedDepositsChargeForm","controls","valueChanges","getChargeTemplate","chargeDetails","dueDateNotRequired","chargeTimeTypeAnnualOrMonth","removeControl","addControl","FormControl","s","feeInterval","patchValue","chargeCalculationType","disabled","savingsCharge","monthDayFormat","feeOnMonthDay","createSavingsCharge","PrematureCloseFixedDepositsAccountComponent","createPrematureCloseAccountForm","prematureCloseAccountForm","closedOnDate","isSubmitted","calculatePrematureAmount","date","savingsAccountsData","savingsAccounts","onAccountClosureOptions","maturityAmount","addTransferDetails","prematureCloseAccountFormData","CloseFixedDepositsAccountComponent","createCloseOnMaturityAccountForm","closeOnMaturityAccountForm","onAccountClosureId","closeOnMaturityAccountFormData","FixedDepositsAccountActionsComponent","Approve","Reject","Activate","Close","actions","ViewTransactionComponent","transactionData","fixedDepositsAccountTransaction","FixedDepositAccountDetailsStepComponent","EventEmitter","createFixedDepositsAccountDetailsForm","fixedDepositsAccountTemplate","productData","productOptions","depositProductId","fixedDepositAccountDetailsForm","submittedOnDate","timeline","fieldOfficerId","getFixedDepositsAccountTemplate","fixedDepositsAccountProductTemplate","emit","fieldOfficerData","fieldOfficerOptions","isFieldOfficerPatched","fixedDepositAccountDetails","key","_r1","FixedDepositAccountCurrencyStepComponent","createFixedDepositAccountCurrencyForm","fixedDepositAccountCurrencyForm","currencyCode","currency","decimalPlaces","currencyMultiple","inMultiplesOf","FixedDepositAccountTermsStepComponent","createFixedDepositsAccountTermsForm","interestCompoundingPeriodType","fixedDepositAccountTermsForm","interestPostingPeriodType","interestCalculationType","interestCalculationDaysInYearType","depositAmount","depositPeriod","depositPeriodFrequencyId","depositPeriodFrequency","interestCompoundingPeriodTypeData","interestCompoundingPeriodTypeOptions","interestPostingPeriodTypeData","interestPostingPeriodTypeOptions","interestCalculationTypeData","interestCalculationTypeOptions","interestCalculationDaysInYearTypeData","interestCalculationDaysInYearTypeOptions","periodFrequencyTypeData","periodFrequencyTypeOptions","fixedDepositAccountTerms","FixedDepositAccountSettingsStepComponent","createFixedDepositAccountSettingsForm","fixedDepositAccountSettingsForm","minDepositTerm","minDepositTermTypeId","minDepositTermType","inMultiplesOfDepositTerm","inMultiplesOfDepositTermTypeId","inMultiplesOfDepositTermType","maxDepositTerm","maxDepositTermTypeId","maxDepositTermType","preClosurePenalApplicable","preClosurePenalInterest","preClosurePenalInterestOnTypeId","preClosurePenalInterestOnType","lockinPeriodFrequency","lockinPeriodFrequencyType","transferInterestToSavings","linkedAccount","lockinPeriodFrequencyTypeData","lockinPeriodFrequencyTypeOptions","preClosurePenalInterestOnTypeData","preClosurePenalInterestOnTypeOptions","fixedDepositAccountSettings","getRawValue","ctx_r22","ctx_r32","ctx_r37","ctx_r41","FixedDepositAccountChargesStepComponent","isChargesPatched","chargesDataSource","map","chargeData","concat","pristine","newCharge","splice","indexOf","chartSlabIndex_r23","FixedDepositAccountInterestRateChartStepComponent","chartsTableRef","chartSlabIndex_r30","FixedDepositAccountPreviewStepComponent","ctx_r14","CreateFixedDepositAccountComponent","fixedDepositsAccountDetailsStep","fixedDepositAccountCurrencyStep","fixedDepositAccountTermsStep","fixedDepositAccountSettingsStep","valid","fixedDepositAccountChargesStep","fixedDepositAccountCharges","charts","createFixedDepositAccount","resourceId","EditFixedDepositAccountComponent","fixedDepositsAccountAndTemplate","updateFixedDepositAccount","FixedDepositsAccountViewResolver","getFixedDepositsAccountData","FixedDepositsAccountTransactionResolver","getFixedDepositsAccountTransaction","FixedDepositsAccountActionsResolver","actionName","getSavingsChargeTemplateResource","getFixedDepositsAccountClosureTemplate","FixedDepositsAccountTemplateResolver","FixedDepositsAccountAndTemplateResolver","getFixedDepositsAccountAndTemplate","routes","path","extract","breadcrumb","routeParamBreadcrumb","children","component","resolve","SavingsDatatablesResolver","SavingsDatatableResolver","redirectTo","pathMatch","loadChildren","l","m","AccountTransfersModule","FixedDepositsRoutingModule","imports","RouterModule","FixedDepositsModule","SharedModule","PipesModule","DirectivesModule"],"sourceRoot":"webpack:///","sources":["./src/app/deposits/fixed-deposits/fixed-deposit-account-view/custom-dialogs/calculate-interest-dialog/calculate-interest-dialog.component.ts","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/custom-dialogs/calculate-interest-dialog/calculate-interest-dialog.component.html","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/custom-dialogs/post-interest-dialog/post-interest-dialog.component.ts","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/custom-dialogs/post-interest-dialog/post-interest-dialog.component.html","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/custom-dialogs/toggle-withhold-tax-dialog/toggle-withhold-tax-dialog.component.ts","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/custom-dialogs/toggle-withhold-tax-dialog/toggle-withhold-tax-dialog.component.html","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/fixed-deposits-buttons.config.ts","./src/app/deposits/fixed-deposits/fixed-deposits.service.ts","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/fixed-deposit-account-view.component.html","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/fixed-deposit-account-view.component.ts","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/interest-rate-chart-tab/interest-rate-chart-tab.component.html","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/interest-rate-chart-tab/interest-rate-chart-tab.component.ts","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/transactions-tab/transactions-tab.component.html","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/transactions-tab/transactions-tab.component.ts","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/custom-dialogs/waive-charge-dialog/waive-charge-dialog.component.ts","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/custom-dialogs/waive-charge-dialog/waive-charge-dialog.component.html","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/custom-dialogs/inactivate-charge-dialog/inactivate-charge-dialog.component.ts","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/custom-dialogs/inactivate-charge-dialog/inactivate-charge-dialog.component.html","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/charges-tab/charges-tab.component.html","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/charges-tab/charges-tab.component.ts","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/standing-instructions-tab/standing-instructions-tab.component.html","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/standing-instructions-tab/standing-instructions-tab.component.ts","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/datatable-tabs/datatable-tabs.component.ts","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/datatable-tabs/datatable-tabs.component.html","./src/app/deposits/fixed-deposits/fixed-deposits-account-actions/approve-fixed-deposits-account/approve-fixed-deposits-account.component.html","./src/app/deposits/fixed-deposits/fixed-deposits-account-actions/approve-fixed-deposits-account/approve-fixed-deposits-account.component.ts","./src/app/deposits/fixed-deposits/fixed-deposits-account-actions/reject-fixed-deposits-account/reject-fixed-deposits-account.component.html","./src/app/deposits/fixed-deposits/fixed-deposits-account-actions/reject-fixed-deposits-account/reject-fixed-deposits-account.component.ts","./src/app/deposits/fixed-deposits/fixed-deposits-account-actions/activate-fixed-deposits-account/activate-fixed-deposits-account.component.html","./src/app/deposits/fixed-deposits/fixed-deposits-account-actions/activate-fixed-deposits-account/activate-fixed-deposits-account.component.ts","./src/app/deposits/fixed-deposits/fixed-deposits-account-actions/undo-approval-fixed-deposits-account/undo-approval-fixed-deposits-account.component.ts","./src/app/deposits/fixed-deposits/fixed-deposits-account-actions/undo-approval-fixed-deposits-account/undo-approval-fixed-deposits-account.component.html","./src/app/deposits/fixed-deposits/fixed-deposits-account-actions/withdraw-by-client-fixed-deposits-account/withdraw-by-client-fixed-deposits-account.component.html","./src/app/deposits/fixed-deposits/fixed-deposits-account-actions/withdraw-by-client-fixed-deposits-account/withdraw-by-client-fixed-deposits-account.component.ts","./src/app/deposits/fixed-deposits/fixed-deposits-account-actions/add-charge-fixed-deposits-account/add-charge-fixed-deposits-account.component.html","./src/app/deposits/fixed-deposits/fixed-deposits-account-actions/add-charge-fixed-deposits-account/add-charge-fixed-deposits-account.component.ts","./src/app/deposits/fixed-deposits/fixed-deposits-account-actions/premature-close-fixed-deposits-account/premature-close-fixed-deposits-account.component.html","./src/app/deposits/fixed-deposits/fixed-deposits-account-actions/premature-close-fixed-deposits-account/premature-close-fixed-deposits-account.component.ts","./src/app/deposits/fixed-deposits/fixed-deposits-account-actions/close-fixed-deposits-account/close-fixed-deposits-account.component.html","./src/app/deposits/fixed-deposits/fixed-deposits-account-actions/close-fixed-deposits-account/close-fixed-deposits-account.component.ts","./src/app/deposits/fixed-deposits/fixed-deposits-account-actions/fixed-deposits-account-actions.component.html","./src/app/deposits/fixed-deposits/fixed-deposits-account-actions/fixed-deposits-account-actions.component.ts","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/view-transaction/view-transaction.component.html","./src/app/deposits/fixed-deposits/fixed-deposit-account-view/view-transaction/view-transaction.component.ts","./src/app/deposits/fixed-deposits/fixed-deposit-account-stepper/fixed-deposit-account-details-step/fixed-deposit-account-details-step.component.html","./src/app/deposits/fixed-deposits/fixed-deposit-account-stepper/fixed-deposit-account-details-step/fixed-deposit-account-details-step.component.ts","./src/app/deposits/fixed-deposits/fixed-deposit-account-stepper/fixed-deposit-account-currency-step/fixed-deposit-account-currency-step.component.ts","./src/app/deposits/fixed-deposits/fixed-deposit-account-stepper/fixed-deposit-account-currency-step/fixed-deposit-account-currency-step.component.html","./src/app/deposits/fixed-deposits/fixed-deposit-account-stepper/fixed-deposit-account-terms-step/fixed-deposit-account-terms-step.component.html","./src/app/deposits/fixed-deposits/fixed-deposit-account-stepper/fixed-deposit-account-terms-step/fixed-deposit-account-terms-step.component.ts","./src/app/deposits/fixed-deposits/fixed-deposit-account-stepper/fixed-deposit-account-settings-step/fixed-deposit-account-settings-step.component.html","./src/app/deposits/fixed-deposits/fixed-deposit-account-stepper/fixed-deposit-account-settings-step/fixed-deposit-account-settings-step.component.ts","./src/app/deposits/fixed-deposits/fixed-deposit-account-stepper/fixed-deposit-account-charges-step/fixed-deposit-account-charges-step.component.html","./src/app/deposits/fixed-deposits/fixed-deposit-account-stepper/fixed-deposit-account-charges-step/fixed-deposit-account-charges-step.component.ts","./src/app/deposits/fixed-deposits/fixed-deposit-account-stepper/fixed-deposit-account-interest-rate-chart-step/fixed-deposit-account-interest-rate-chart-step.component.html","./src/app/deposits/fixed-deposits/fixed-deposit-account-stepper/fixed-deposit-account-interest-rate-chart-step/fixed-deposit-account-interest-rate-chart-step.component.ts","./src/app/deposits/fixed-deposits/fixed-deposit-account-stepper/fixed-deposit-account-preview-step/fixed-deposit-account-preview-step.component.html","./src/app/deposits/fixed-deposits/fixed-deposit-account-stepper/fixed-deposit-account-preview-step/fixed-deposit-account-preview-step.component.ts","./src/app/deposits/fixed-deposits/create-fixed-deposit-account/create-fixed-deposit-account.component.html","./src/app/deposits/fixed-deposits/create-fixed-deposit-account/create-fixed-deposit-account.component.ts","./src/app/deposits/fixed-deposits/edit-fixed-deposit-account/edit-fixed-deposit-account.component.html","./src/app/deposits/fixed-deposits/edit-fixed-deposit-account/edit-fixed-deposit-account.component.ts","./src/app/deposits/fixed-deposits/common-resolvers/fixed-deposit-account-view.resolver.ts","./src/app/deposits/fixed-deposits/common-resolvers/fixed-deposit-account-transaction.resolver.ts","./src/app/deposits/fixed-deposits/common-resolvers/fixed-deposit-account-actions.resolver.ts","./src/app/deposits/fixed-deposits/common-resolvers/fixed-deposit-account-template.resolver.ts","./src/app/deposits/fixed-deposits/common-resolvers/fixed-deposit-account-and-template.resolver.ts","./src/app/deposits/fixed-deposits/fixed-deposits-routing.module.ts","./src/app/deposits/fixed-deposits/fixed-deposits.module.ts"],"sourcesContent":["/** Angular Imports */\nimport { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n/**\n * Calculate interest dialog component.\n */\n@Component({\n  selector: 'mifosx-calculate-interest-dialog',\n  templateUrl: './calculate-interest-dialog.component.html',\n  styleUrls: ['./calculate-interest-dialog.component.scss']\n})\nexport class CalculateInterestDialogComponent {\n\n  /**\n   * @param {MatDialogRef} dialogRef Component reference to dialog.\n   */\n  constructor(public dialogRef: MatDialogRef<CalculateInterestDialogComponent>) { }\n\n}\n","<h1 mat-dialog-title>Calculate Interest</h1>\n<div mat-dialog-content>\n  <p>Are you sure you want to calculate interest ?</p>\n</div>\n<mat-dialog-actions align=\"end\">\n  <button mat-raised-button mat-dialog-close>Cancel</button>\n  <button mat-raised-button color=\"primary\" [mat-dialog-close]=\"{ confirm: true }\">Confirm</button>\n</mat-dialog-actions>\n","/** Angular Imports */\nimport { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n/**\n * Post interest dialog component.\n */\n@Component({\n  selector: 'mifosx-post-interest-dialog',\n  templateUrl: './post-interest-dialog.component.html',\n  styleUrls: ['./post-interest-dialog.component.scss']\n})\nexport class PostInterestDialogComponent {\n\n  /**\n   * @param {MatDialogRef} dialogRef Component reference to dialog.\n   */\n  constructor(public dialogRef: MatDialogRef<PostInterestDialogComponent>) { }\n\n}\n","<h1 mat-dialog-title>Post Interest</h1>\n<div mat-dialog-content>\n  <p>Are you sure you want to post interest ?</p>\n</div>\n<mat-dialog-actions align=\"end\">\n  <button mat-raised-button mat-dialog-close>Cancel</button>\n  <button mat-raised-button color=\"primary\" [mat-dialog-close]=\"{ confirm: true }\">Confirm</button>\n</mat-dialog-actions>\n","/** Angular Imports */\nimport { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n/**\n * Toggle withhold tax dialog dialog component.\n */\n@Component({\n  selector: 'mifosx-toggle-withhold-tax-dialog',\n  templateUrl: './toggle-withhold-tax-dialog.component.html',\n  styleUrls: ['./toggle-withhold-tax-dialog.component.scss']\n})\nexport class ToggleWithholdTaxDialogComponent {\n\n  /**\n   * @param {MatDialogRef} dialogRef Component reference to dialog.\n   * @param {any} data.\n   */\n  constructor(public dialogRef: MatDialogRef<ToggleWithholdTaxDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any) { }\n\n}\n","<h1 mat-dialog-title>{{ data.isEnable ? 'Enable' : 'Disable' }} Withhold Tax</h1>\n<div mat-dialog-content>\n  <p>Are you sure you want to {{ data.isEnable ? 'enable' : 'disable' }} withhold tax for this account ?</p>\n</div>\n<mat-dialog-actions align=\"end\">\n  <button mat-raised-button mat-dialog-close>Cancel</button>\n  <button mat-raised-button color=\"{{ data.isEnable ? 'accent' : 'warn' }}\" [mat-dialog-close]=\"{ confirm: true }\">Confirm</button>\n</mat-dialog-actions>\n","/** Fixed Deposits Account Buttons Configuration */\nexport class FixedDepositsButtonsConfiguration {\n\n  optionArray: {\n    name: string\n  }[];\n\n  buttonsArray: {\n    name: string,\n    icon: string,\n  }[];\n\n  constructor(status: string) {\n    this.setOptions(status);\n    this.setButtons(status);\n  }\n\n  get singleButtons() {\n    return this.buttonsArray;\n  }\n\n  get options() {\n    return this.optionArray;\n  }\n\n  setButtons(status: string) {\n    switch (status) {\n      case 'Active':\n        this.buttonsArray = [\n          {\n            name: 'Premature Close',\n            icon: 'fa fa-arrow-left'\n          },\n          {\n            name: 'Calculate Interest',\n            icon: 'fa fa-table'\n          }\n        ];\n        break;\n      case 'Matured':\n        this.buttonsArray = [\n          {\n            name: 'Close',\n            icon: 'fa fa-arrow-right'\n          },\n          {\n            name: 'Calculate Interest',\n            icon: 'fa fa-table'\n          }\n        ];\n      break;\n      case 'Submitted and pending approval':\n        this.buttonsArray = [\n          {\n            name: 'Modify Application',\n            icon: 'fa fa-pencil '\n          },\n          {\n            name: 'Approve',\n            icon: 'fa fa-check'\n          }\n        ];\n        break;\n      case 'Approved':\n        this.buttonsArray = [\n          {\n            name: 'Undo Approval',\n            icon: 'fa fa-undo'\n          },\n          {\n            name: 'Activate',\n            icon: 'fa fa-check'\n          }\n        ];\n      break;\n      default:\n        this.buttonsArray = [];\n    }\n  }\n\n  setOptions(status: string) {\n    switch (status) {\n      case 'Active':\n      case 'Matured':\n        this.optionArray = [\n          {\n            name: 'Post Interest'\n          },\n          {\n            name: 'Add Charge'\n          }\n        ];\n        break;\n      case 'Submitted and pending approval':\n        this.optionArray = [\n          {\n            name: 'Reject'\n          },\n          {\n            name: 'Withdraw By Client'\n          },\n          {\n            name: 'Add Charge'\n          },\n          {\n            name: 'Delete'\n          }\n        ];\n        break;\n      case 'Approved':\n      default:\n        this.optionArray = [];\n    }\n  }\n\n  addOption(option: {name: string}) {\n    this.optionArray.push(option);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/**\n * Fixed Deposits Service.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FixedDepositsService {\n\n  /**\n   * @param {HttpClient} http HttpClient\n   */\n  constructor(private http: HttpClient) {}\n\n  /**\n   * @param accountId Account Id.\n   * @returns {Observable<any>} Fixed Deposits data.\n   */\n  getFixedDepositsAccountData(accountId: string): Observable<any> {\n    const httpParams = new HttpParams().set('associations', 'all');\n    return this.http.get(`/fixeddepositaccounts/${accountId}`, { params: httpParams });\n  }\n\n  /**\n   * @param {string} accountId fixed deposits account Id\n   * @returns {Observable<any>}\n   */\n  deleteFixedDepositsAccount(accountId: string): Observable<any> {\n    return this.http.delete(`/fixeddepositaccounts/${accountId}`);\n  }\n\n  /**\n   * @param {string} accountId Account Id\n   * @param {string} command Command\n   * @param {any} data Data\n   * @returns {Observable<any>}\n   */\n  executeFixedDepositsAccountCommand(accountId: string, command: string, data: any): Observable<any> {\n    const httpParams = new HttpParams().set('command', command);\n    return this.http.post(`/fixeddepositaccounts/${accountId}`, data, { params: httpParams });\n  }\n\n  /**\n   * @param {string} accountId Fixed Deposits Account Id\n   * @param {string} transactionId Transaction Id\n   * @returns {Observable<any>}\n   */\n  getFixedDepositsAccountTransaction(accountId: string, transactionId: string): Observable<any> {\n    return this.http.get(`/fixeddepositaccounts/${accountId}/transactions/${transactionId}`);\n  }\n\n  /**\n   * @param {string} accountId Fixed Deposits Account Id\n   * @param {string} command Command\n   * @param {any} data Data\n   * @param {string} transactionId Transaction Id\n   * @returns {Observable<any>}\n   */\n  executeFixedDepositsAccountTransactionsCommand(accountId: string, command: string, data: any, transactionId?: any): Observable<any> {\n    const httpParams = new HttpParams().set('command', command);\n    return this.http.post(`/fixeddepositaccounts/${accountId}/transactions/${transactionId}`, data, { params: httpParams });\n  }\n\n  /**\n   * @param {string} accountId Fixed Deposits Account Id\n   * @returns {Observable<any>}\n   */\n  getFixedDepositsAccountClosureTemplate(accountId: string): Observable<any> {\n    const httpParams = new HttpParams().set('command', 'close');\n    return this.http.get(`/fixeddepositaccounts/${accountId}/template`, { params: httpParams });\n  }\n\n  /**\n   * @param clientId Client Id assosciated with fixed deposits account.\n   * @returns {Observable<any>} Fixed Deposits account template.\n   */\n  getFixedDepositsAccountTemplate(clientId: string, productId?: string): Observable<any> {\n    let httpParams = new HttpParams().set('clientId', clientId);\n    httpParams = productId ? httpParams.set('productId', productId) : httpParams;\n    return this.http.get('/fixeddepositaccounts/template', { params: httpParams });\n  }\n\n  /**\n   * @param {string} accountId Fixed Deposits Account Id\n   * @returns {Observable<any>}\n   */\n  getFixedDepositsAccountAndTemplate(accountId: any) {\n    const httpParams = new HttpParams().set('associations', 'charges,+linkedAccount')\n      .set('template', 'true');\n    return this.http.get(`/fixeddepositaccounts/${accountId}`, { params: httpParams });\n  }\n\n  /**\n   * @param fixedDepositAccount Fixed Deposit Account\n   * @returns {Observable<any>}\n   */\n  createFixedDepositAccount(fixedDepositAccount: any): Observable<any> {\n    return this.http.post(`/fixeddepositaccounts`, fixedDepositAccount);\n  }\n\n  /**\n   * @param {any} accountId Account Id\n   * @param {any} fixedDepositAccount Fixed Deposit Account\n   * @returns {Observable<any>}\n   */\n  updateFixedDepositAccount(accountId: any, fixedDepositAccount: any): Observable<any> {\n    return this.http.put(`/fixeddepositaccounts/${accountId}`, fixedDepositAccount);\n  }\n\n  /**\n   * @param clientId Client Id\n   * @param clientName Client Name\n   * @param fromAccountId Account Id\n   * @param locale Locale\n   * @param dateFormat Date Format\n   * @returns {Observable<any>} Standing Instructions\n   */\n  getStandingInstructions(\n    clientId: string, clientName: string, fromAccountId: string,\n    locale: string, dateFormat: string): Observable<any> {\n    const httpParams = new HttpParams()\n      .set('clientId', clientId)\n      .set('clientName', clientName)\n      .set('fromAccountId', fromAccountId)\n      .set('fromAccountType', '2')\n      .set('locale', locale)\n      .set('dateFormat', dateFormat);\n    return this.http.get(`/standinginstructions`, { params: httpParams });\n  }\n\n}\n","<mat-card class=\"fixed-deposits-account-card\">\n\n  <mat-card-header fxLayout=\"column\" class=\"header\">\n\n    <mat-card-title-group class=\"header-title-group\">\n\n      <div class=\"profile-image-container\">\n        <div>\n          <img mat-card-md-image class=\"profile-image\"\n            matTooltip=\"Fixed Deposits Account\"\n            [src]=\"'assets/images/fd_account_placeholder.png'\">\n        </div>\n      </div>\n\n      <div class=\"mat-typography account-card-title\">\n        <mat-card-title>\n          <h3>\n            <i class=\"fa fa-stop\" [ngClass]=\"fixedDepositsAccountData.status.code | statusLookup\" [matTooltip]=\"fixedDepositsAccountData.status.value\"></i>\n              Account Name : {{fixedDepositsAccountData.depositProductName}}\n          </h3>\n        </mat-card-title>\n        <mat-card-subtitle>\n          <p>\n            Account #: {{fixedDepositsAccountData.accountNo}} | Client Name: {{fixedDepositsAccountData.clientName}}<br/>\n            <span *ngIf=\"!fixedDepositsAccountData.status.rejected && !fixedDepositsAccountData.status.submittedAndPendingApproval\">\n              Current Balance: {{fixedDepositsAccountData.currency.displaySymbol}}&nbsp;{{fixedDepositsAccountData.summary.accountBalance}}<br/>\n              Deposit Amount: {{fixedDepositsAccountData.currency.displaySymbol}}&nbsp;{{fixedDepositsAccountData.depositAmount}}<br/>\n            </span>\n          </p>\n        </mat-card-subtitle>\n      </div>\n\n    </mat-card-title-group>\n\n    <mat-card-actions class=\"account-actions\">\n\n      <ng-container *ngFor=\"let button of buttonConfig.singleButtons\">\n        <button mat-raised-button (click)=\"doAction(button.name)\">\n          <i class=\"{{button.icon}}\"></i> {{button.name}}</button>\n      </ng-container>\n  \n      <ng-container *ngIf=\"buttonConfig.options.length\">\n        <button mat-raised-button [matMenuTriggerFor]=\"More\">More</button>\n        <mat-menu #More=\"matMenu\">\n        <span *ngFor=\"let option of buttonConfig.options\">\n          <button mat-menu-item (click)=\"doAction(option.name)\">{{option.name}}</button>\n        </span>\n        </mat-menu>\n      </ng-container>\n  \n    </mat-card-actions>\n\n  </mat-card-header>\n\n  <mat-card-content class=\"content\">\n\n    <div class=\"fixed-deposits-account-tables\" fxLayout=\"row\" fxLayoutGap=\"2%\">\n\n      <div fxFlex=\"49%\" fxLayout=\"column\" fxLayoutGap=\"4%\">\n\n        <div>\n          <h4 class=\"table-headers\">Fixed Deposit Details</h4>\n          <table>\n            <tbody>\n              <tr>\n                <td>Activated On</td>\n                <td>{{fixedDepositsAccountData.timeline.activatedOnDate ? (fixedDepositsAccountData.timeline.activatedOnDate  | dateFormat) : 'Not Activated'}}</td>\n              </tr>\n              <tr *ngIf=\"fixedDepositsAccountData.timeline.closedOnDate\">\n                <td>Closed On</td>\n                <td>{{fixedDepositsAccountData.timeline.closedOnDate  | dateFormat}}</td>\n              </tr>\n              <tr>\n                <td>Field Officer</td>\n                <td>{{fixedDepositsAccountData.fieldOfficerName ? fixedDepositsAccountData.fieldOfficerName : 'Unassigned'}}</td>\n              </tr>\n              <tr>\n                <td>Maturity Date</td>\n                <td>{{fixedDepositsAccountData.maturityDate ? (fixedDepositsAccountData.maturityDate  | dateFormat) : 'N/A'}}</td>\n              </tr>\n              <tr>\n                <td>Deposit Period</td>\n                <td>{{fixedDepositsAccountData.depositPeriod}}&nbsp;{{fixedDepositsAccountData.depositPeriodFrequency.value}}</td>\n              </tr>\n              <tr *ngIf=\"fixedDepositsAccountData.withHoldTax\">\n                <td>Tax Group</td>\n                <td>{{fixedDepositsAccountData.taxGroup.name}}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        <div>\n          <h4 class=\"table-headers\">Interest Details</h4>\n          <table>\n            <tbody>\n              <tr>\n                <td>Interest Rate</td>\n                <td>{{fixedDepositsAccountData.nominalAnnualInterestRate}}%</td>\n              </tr>\n              <tr>\n                <td>Interest Compounding Period</td>\n                <td>{{fixedDepositsAccountData.interestCompoundingPeriodType.value}}</td>\n              </tr>\n              <tr>\n                <td>Interest Posting Period</td>\n                <td>{{fixedDepositsAccountData.interestPostingPeriodType.value}}</td>\n              </tr>\n              <tr>\n                <td>Interest Calculated Using</td>\n                <td>{{fixedDepositsAccountData.interestCalculationType.value}}</td>\n              </tr>\n              <tr>\n                <td>No. of Days in Year</td>\n                <td>{{fixedDepositsAccountData.interestCalculationDaysInYearType.value}}</td>\n              </tr>\n              <tr *ngIf=\"fixedDepositsAccountData.preClosurePenalApplicable\">\n                <td>Pre-cloure Penal</td>\n                <td>{{fixedDepositsAccountData.preClosurePenalInterest}} % on {{fixedDepositsAccountData.preClosurePenalInterestOnType.value}}</td>\n              </tr>\n          </table>\n        </div>\n\n      </div>\n\n      <div fxFlex=\"49%\">\n\n        <div *ngIf=\"!fixedDepositsAccountData.status.rejected && !fixedDepositsAccountData.status.submittedAndPendingApproval; else otherDetails\">\n          <h4 class=\"table-headers\">Performance History</h4>\n          <table>\n            <tbody>\n              <tr>\n                <td>Principal Amount</td>\n                <td>{{fixedDepositsAccountData.currency.displaySymbol}}&nbsp;{{fixedDepositsAccountData.depositAmount}}</td>\n              </tr>\n              <tr>\n                <td>Maturity Amount</td>\n                <td>{{fixedDepositsAccountData.currency.displaySymbol}}&nbsp;{{fixedDepositsAccountData.maturityAmount}}</td>\n              </tr>\n              <tr *ngIf=\"fixedDepositsAccountData.summary.totalDeposits\">\n                <td>Total Deposits</td>\n                <td>{{fixedDepositsAccountData.currency.displaySymbol}}&nbsp;{{fixedDepositsAccountData.summary.totalDeposits}}</td>\n              </tr>\n              <tr *ngIf=\"fixedDepositsAccountData.summary.totalWithdrawals\">\n                <td>Total Withdrawals</td>\n                <td>{{fixedDepositsAccountData.currency.displaySymbol}}&nbsp;{{fixedDepositsAccountData.summary.totalWithdrawals}}</td>\n              </tr>\n              <tr *ngIf=\"fixedDepositsAccountData.summary.totalInterestEarned >= 0\">\n                <td>Total Interest Earned</td>\n                <td>{{fixedDepositsAccountData.currency.displaySymbol}}&nbsp;{{fixedDepositsAccountData.summary.totalInterestEarned}}</td>\n              </tr>\n          </table>\n        </div>\n\n        <ng-template #otherDetails>\n          <div>\n            <h4 class=\"table-headers\">Other Details</h4>\n            <table>\n              <tbody>\n                <tr>\n                  <td>Principal Amount</td>\n                  <td>{{fixedDepositsAccountData.currency.displaySymbol}}&nbsp;{{fixedDepositsAccountData.depositAmount}}</td>\n                </tr>\n                <tr>\n                  <td>Maturity Amount</td>\n                  <td>{{fixedDepositsAccountData.currency.displaySymbol}}&nbsp;{{fixedDepositsAccountData.maturityAmount}}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </ng-template>\n\n      </div>\n\n    </div>\n\n    <nav mat-tab-nav-bar class=\"navigation-tabs\">\n      <a mat-tab-link [routerLink]=\"['./interest-rate-chart']\" routerLinkActive #IRC=\"routerLinkActive\"\n      [active]=\"IRC.isActive\">\n        Interest Rate Chart\n      </a>\n      <a mat-tab-link [routerLink]=\"['./transactions']\" routerLinkActive #transactions=\"routerLinkActive\"\n      [active]=\"transactions.isActive\">\n        Transactions\n      </a>\n      <a mat-tab-link [routerLink]=\"['./charges']\" routerLinkActive #charges=\"routerLinkActive\"\n      [active]=\"charges.isActive\">\n        Charges\n      </a>\n      <a mat-tab-link [routerLink]=\"['./standing-instructions']\" routerLinkActive #standingInstructions=\"routerLinkActive\"\n        [active]=\"standingInstructions.isActive\" *ngIf=\"fixedDepositsAccountData.clientId\">\n        Standing Instructions\n      </a>\n      <ng-container *ngFor=\"let savingsDatatable of savingsDatatables\">\n        <a mat-tab-link *mifosxHasPermission=\"'READ_' + savingsDatatable.registeredTableName\"\n          [routerLink]=\"['./datatables',savingsDatatable.registeredTableName]\"\n          routerLinkActive #datatable=\"routerLinkActive\" [active]=\"datatable.isActive\">\n          {{savingsDatatable.registeredTableName}}\n        </a>\n      </ng-container>\n    </nav>\n\n    <router-outlet></router-outlet>\n\n  </mat-card-content>\n\n</mat-card>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\n\n/** Custom Dialogs */\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\nimport { CalculateInterestDialogComponent } from './custom-dialogs/calculate-interest-dialog/calculate-interest-dialog.component';\nimport { PostInterestDialogComponent } from './custom-dialogs/post-interest-dialog/post-interest-dialog.component';\nimport { ToggleWithholdTaxDialogComponent } from './custom-dialogs/toggle-withhold-tax-dialog/toggle-withhold-tax-dialog.component';\n\n/** Custom Button Config. */\nimport { FixedDepositsButtonsConfiguration } from './fixed-deposits-buttons.config';\n\n/** Custom Services */\nimport { FixedDepositsService } from '../fixed-deposits.service';\nimport { SavingsService } from 'app/savings/savings.service';\n\n/**\n * Fixed Deposits Account View Component\n */\n@Component({\n  selector: 'mifosx-fixed-deposit-account-view',\n  templateUrl: './fixed-deposit-account-view.component.html',\n  styleUrls: ['./fixed-deposit-account-view.component.scss']\n})\nexport class FixedDepositAccountViewComponent implements OnInit {\n\n  /** Fixed Deposits Account Data */\n  fixedDepositsAccountData: any;\n  /** Savings Data Tables */\n  savingsDatatables: any;\n  /** Button Configurations */\n  buttonConfig: FixedDepositsButtonsConfiguration;\n\n  /**\n   * Fetches fixed deposits account data from `resolve`\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {FixedDepositsService} fixedDepositsService Fixed Deposits Service\n   * @param {SavingsService} savingsService Savings Service\n   * @param {MatDialog} dialog Mat Dialog\n   */\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private fixedDepositsService: FixedDepositsService,\n              private savingsService: SavingsService,\n              public dialog: MatDialog) {\n    this.route.data.subscribe((data: { fixedDepositsAccountData: any, savingsDatatables: any  }) => {\n      this.fixedDepositsAccountData = data.fixedDepositsAccountData;\n      this.savingsDatatables = data.savingsDatatables;\n    });\n  }\n\n  ngOnInit() {\n    this.setConditionalButtons();\n  }\n\n  /**\n   * Adds options to button config. conditionaly.\n   */\n  setConditionalButtons() {\n    const status = this.fixedDepositsAccountData.status.value;\n    this.buttonConfig = new FixedDepositsButtonsConfiguration(status);\n    if (this.fixedDepositsAccountData.taxGroup && status === 'Active') {\n      if (this.fixedDepositsAccountData.withHoldTax) {\n        this.buttonConfig.addOption({\n          name: 'Disable Withhold Tax'\n        });\n      } else {\n        this.buttonConfig.addOption({\n          name: 'Enable Withhold Tax'\n        });\n      }\n    }\n  }\n\n  /**\n   * Refetches data fot the component\n   * TODO: Replace by a custom reload component instead of hard-coded back-routing.\n   */\n  reload() {\n    const clientId = this.fixedDepositsAccountData.clientId;\n    const url: string = this.router.url;\n    this.router.navigateByUrl(`/clients/${clientId}/fixed-deposits-accounts`, {skipLocationChange: true})\n      .then(() => this.router.navigate([url]));\n  }\n\n  /**\n   * Performs action button/option action.\n   * @param {string} name action name.\n   */\n  doAction(name: string) {\n    switch (name) {\n      case 'Approve':\n      case 'Reject':\n      case 'Activate':\n      case 'Close':\n      case 'Undo Approval':\n      case 'Add Charge':\n      case 'Withdraw By Client':\n      case 'Premature Close':\n        this.router.navigate([`actions/${name}`], { relativeTo: this.route });\n        break;\n      case 'Modify Application':\n        this.router.navigate(['edit'], { relativeTo: this.route });\n        break;\n      case 'Delete':\n        this.deleteFixedDepositsAccount();\n        break;\n      case 'Calculate Interest':\n        this.calculateInterest();\n        break;\n      case 'Post Interest':\n        this.postInterest();\n        break;\n      case 'Enable Withhold Tax':\n        this.enableWithHoldTax();\n        break;\n      case 'Disable Withhold Tax':\n        this.disableWithHoldTax();\n        break;\n    }\n  }\n\n  /**\n   * Deletes Fixed Deposits Account.\n   */\n  private deleteFixedDepositsAccount() {\n    const deleteFixedDepositsAccountDialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `fixed deposit account with id: ${this.fixedDepositsAccountData.id}` }\n    });\n    deleteFixedDepositsAccountDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        this.fixedDepositsService.deleteFixedDepositsAccount(this.fixedDepositsAccountData.id).subscribe(() => {\n          this.router.navigate(['../../'], { relativeTo: this.route });\n        });\n      }\n    });\n  }\n\n  /**\n   * Calculates fixed deposit account's interest\n   */\n  private calculateInterest() {\n    const calculateInterestAccountDialogRef = this.dialog.open(CalculateInterestDialogComponent);\n    calculateInterestAccountDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.fixedDepositsService.executeFixedDepositsAccountCommand(this.fixedDepositsAccountData.id, 'calculateInterest', {}).subscribe(() => {\n          this.reload();\n        });\n      }\n    });\n  }\n\n  /**\n   * Posts fixed deposit account's interest\n   */\n  private postInterest() {\n    const postInterestAccountDialogRef = this.dialog.open(PostInterestDialogComponent);\n    postInterestAccountDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.fixedDepositsService.executeFixedDepositsAccountCommand(this.fixedDepositsAccountData.id, 'postInterest', {}).subscribe(() => {\n          this.reload();\n        });\n      }\n    });\n  }\n\n\n  /**\n   * Enables withhold tax for fixed deposits account.\n   * Fixed deposits endpoint is not supported so using Savings endpoint.\n   */\n  private enableWithHoldTax() {\n    const deleteSavingsAccountDialogRef = this.dialog.open(ToggleWithholdTaxDialogComponent, {\n      data: { isEnable: true }\n    });\n    deleteSavingsAccountDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.savingsService.executeSavingsAccountUpdateCommand(this.fixedDepositsAccountData.id, 'updateWithHoldTax', { withHoldTax: true})\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Disables withhold tax for fixed deposits account\n   * Fixed deposits endpoint is not supported so using Savings endpoint.\n   */\n  private disableWithHoldTax() {\n    const disableWithHoldTaxDialogRef = this.dialog.open(ToggleWithholdTaxDialogComponent, {\n      data: { isEnable: false }\n    });\n    disableWithHoldTaxDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.savingsService.executeSavingsAccountUpdateCommand(this.fixedDepositsAccountData.id, 'updateWithHoldTax', { withHoldTax: false})\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n}\n","<div class=\"tab-container mat-typography\">\n\n  <div fxLayoutAlign=\"start\">\n    <div class=\"m-b-20\">\n      <h3>All Interest Rates</h3>\n    </div>\n  </div>\n\n  <div class=\"mat-elevation-z1 m-b-25\">\n\n    <table mat-table [dataSource]=\"interestRateChartData\" #chartsTable multiTemplateDataRows>\n\n      <ng-container matColumnDef=\"period\">\n        <th mat-header-cell *matHeaderCellDef> Period </th>\n        <td mat-cell *matCellDef=\"let chartSlab\">\n          {{chartSlab.fromPeriod}}-{{chartSlab.toPeriod}}&nbsp;{{chartSlab.periodType.value}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"amountRange\">\n        <th mat-header-cell *matHeaderCellDef> Amount Range </th>\n        <td mat-cell *matCellDef=\"let chartSlab\">{{chartSlab.amountRangeFrom}}-{{chartSlab.amountRangeTo}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"interest\">\n        <th mat-header-cell *matHeaderCellDef> Interest </th>\n        <td mat-cell *matCellDef=\"let chartSlab\"> {{ chartSlab.annualInterestRate }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"description\">\n        <th mat-header-cell *matHeaderCellDef> Description </th>\n        <td mat-cell *matCellDef=\"let chartSlab\"> {{ chartSlab.description }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef> Actions </th>\n        <td mat-cell *matCellDef=\"let chartSlab; let chartSlabIndex = dataIndex\">\n          <button mat-button color=\"primary\" (click)=\"expandChartSlabIndex = expandChartSlabIndex === chartSlabIndex ? null : chartSlabIndex\">\n            <span *ngIf=\"expandChartSlabIndex !== chartSlabIndex\">\n              <fa-icon icon=\"eye\" class=\"m-r-10\"></fa-icon>\n              View Incentives\n            </span>\n            <span *ngIf=\"expandChartSlabIndex === chartSlabIndex\">\n              <fa-icon icon=\"eye-slash\" class=\"m-r-10\"></fa-icon>\n              Hide Incentives\n            </span>\n          </button>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"incentives\">\n        <td mat-cell *matCellDef=\"let chartSlab; let chartSlabIndex = dataIndex\" [attr.colspan]=\"chartSlabsDisplayedColumns.length\">\n\n          <div fxLayout=\"row wrap\" fxFlexFill class=\"incentives\" [@expandChartSlab]=\"chartSlabIndex === expandChartSlabIndex ? 'expanded' : 'collapsed'\">\n\n            <mat-card fxLayout=\"row wrap\" fxFlexFill>\n\n              <h4 class=\"m-b-10\" fxFlex=\"13%\">\n                Incentives\n              </h4>\n\n              <table fxFlexFill class=\"mat-elevation-z1\" mat-table [dataSource]=\"chartSlab.incentives\" *ngIf=\"chartSlab.incentives?.length\">\n\n                <ng-container matColumnDef=\"entityType\">\n                  <th mat-header-cell *matHeaderCellDef> Entity Type </th>\n                  <td mat-cell *matCellDef=\"let incentive\">\n                    {{ incentive.entityType.value }}\n                  </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"attributeName\">\n                  <th mat-header-cell *matHeaderCellDef> Attribute Name </th>\n                  <td mat-cell *matCellDef=\"let incentive\">\n                    {{ incentive.attributeName.value }}\n                  </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"conditionType\">\n                  <th mat-header-cell *matHeaderCellDef> Condition Type </th>\n                  <td mat-cell *matCellDef=\"let incentive\">\n                    {{ incentive.conditionType.value | titlecase }}\n                  </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"attributeValue\">\n                  <th mat-header-cell *matHeaderCellDef> Attribute Value </th>\n                  <td mat-cell *matCellDef=\"let incentive\" [ngSwitch]=\"incentive.attributeName\">\n                    {{ incentive.attributeValueDesc }}\n                  </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"incentiveType\">\n                  <th mat-header-cell *matHeaderCellDef> Incentive Type </th>\n                  <td mat-cell *matCellDef=\"let incentive\">\n                    {{ incentive.incentiveType.value }}\n                  </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"amount\">\n                  <th mat-header-cell *matHeaderCellDef> Interest </th>\n                  <td mat-cell *matCellDef=\"let incentive\">\n                    {{ incentive.amount }}\n                  </td>\n                </ng-container>\n\n                <tr mat-header-row *matHeaderRowDef=\"incentivesDisplayedColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: incentivesDisplayedColumns;\"></tr>\n\n              </table>\n\n            </mat-card>\n          </div>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"chartSlabsDisplayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: chartSlabsDisplayedColumns;\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: chartSlabsIncentivesDisplayedColumns;\" class=\"incentives-row\"></tr>\n\n    </table>\n\n  </div>\n\n</div>\n","// ** Angular Imports */\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n/**\n * Interest Rate Chart Tab\n */\n@Component({\n  selector: 'mifosx-interest-rate-chart-tab',\n  templateUrl: './interest-rate-chart-tab.component.html',\n  styleUrls: ['./interest-rate-chart-tab.component.scss'],\n  animations: [\n    trigger('expandChartSlab', [\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\n      state('expanded', style({ height: '*' })),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n  ]\n})\nexport class InterestRateChartTabComponent {\n\n  /** Fixed Deposits Account Status */\n  status: any;\n  /** Interest Rate Chart Data */\n  interestRateChartData: any = [];\n  /** Columns to be displayed in interest rate chart table. */\n  chartSlabsDisplayedColumns: any[] = ['period', 'amountRange', 'interest', 'description', 'actions'];\n  /** Columns to be displayed in incentives sub-table. */\n  incentivesDisplayedColumns: string[] = ['entityType', 'attributeName', 'conditionType', 'attributeValue', 'incentiveType', 'amount'];\n  /** Additional Column to display in incentives table  */\n  chartSlabsIncentivesDisplayedColumns: string[] = ['incentives'];\n  /** Expand Chart Slab Index used in the view */\n  expandChartSlabIndex: number;\n\n  /**\n   * Retrieves fixed deposits account data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute) {\n    this.route.parent.data.subscribe((data: { fixedDepositsAccountData: any }) => {\n      this.interestRateChartData = data.fixedDepositsAccountData.accountChart.chartSlabs;\n    });\n  }\n\n}\n","<div class=\"tab-container mat-typography\">\n\n  <div fxLayoutAlign=\"start\">\n    <div class=\"m-b-20\">\n      <h3>All Transactions</h3>\n    </div>\n  </div>\n\n  <div class=\"mat-elevation-z1 m-b-25\">\n\n    <table mat-table [dataSource]=\"dataSource\" >\n\n      <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef> ID </th>\n        <td mat-cell *matCellDef=\"let transaction\"> {{ transaction.id }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"transactionDate\">\n        <th mat-header-cell *matHeaderCellDef> Transaction Date </th>\n        <td mat-cell *matCellDef=\"let transaction\"> {{ transaction.date  | dateFormat }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"transactionType\">\n        <th mat-header-cell *matHeaderCellDef> Transaction Type </th>\n        <td mat-cell *matCellDef=\"let transaction\"> {{ transaction.transactionType.value  }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"debit\">\n        <th mat-header-cell *matHeaderCellDef> Debit </th>\n        <td mat-cell *matCellDef=\"let transaction\"> {{ isDebit(transaction.transactionType) ? transaction.amount : 'N/A'}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"credit\">\n        <th mat-header-cell *matHeaderCellDef> Credit </th>\n        <td mat-cell *matCellDef=\"let transaction\"> {{ !isDebit(transaction.transactionType) ? transaction.amount : 'N/A' }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"balance\">\n        <th mat-header-cell *matHeaderCellDef> Balance </th>\n        <td mat-cell *matCellDef=\"let transaction\"> {{ transaction.runningBalance }} </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" class=\"select-row\" (click)=\"showTransactions(row)\"></tr>\n\n    </table>\n\n  </div>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/**\n * Transactions Tab Component.\n */\n@Component({\n  selector: 'mifosx-transactions-tab',\n  templateUrl: './transactions-tab.component.html',\n  styleUrls: ['./transactions-tab.component.scss']\n})\nexport class TransactionsTabComponent implements OnInit {\n\n  /** Fixed Deposits Account Status */\n  status: any;\n  /** Transactions Data */\n  transactionsData: any;\n  /** Columns to be displayed in transactions table. */\n  displayedColumns: string[] = ['id', 'transactionDate', 'transactionType', 'debit', 'credit', 'balance'];\n  /** Data source for transactions table. */\n  dataSource: MatTableDataSource<any>;\n\n  /**\n   * Retrieves fixed deposits account data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router\n   */\n  constructor(private route: ActivatedRoute,\n              private router: Router) {\n    this.route.parent.data.subscribe((data: { fixedDepositsAccountData: any }) => {\n      this.transactionsData = data.fixedDepositsAccountData.transactions;\n      this.status = data.fixedDepositsAccountData.status.value;\n    });\n  }\n\n  ngOnInit() {\n    this.dataSource = new MatTableDataSource(this.transactionsData);\n  }\n\n  /**\n   * Checks if transaction is debit.\n   * @param {any} transactionType Transaction Type\n   */\n  isDebit(transactionType: any) {\n    return transactionType.withdrawal === true || transactionType.feeDeduction === true\n            || transactionType.overdraftInterest === true || transactionType.withholdTax === true;\n  }\n\n  /**\n   * Show Transactions Details\n   * @param {any} transactionsData Transactions Data\n   */\n  showTransactions(transactionsData: any) {\n    if (transactionsData.transfer) {\n      this.router.navigate([`account-transfers/account-transfers/${transactionsData.transfer.id}`], { relativeTo: this.route });\n    } else {\n      this.router.navigate([transactionsData.id], { relativeTo: this.route });\n    }\n  }\n\n}\n","/** Angular Imports */\nimport { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n/**\n * Waive charge dialog component.\n */\n@Component({\n  selector: 'mifosx-waive-charge-dialog',\n  templateUrl: './waive-charge-dialog.component.html',\n  styleUrls: ['./waive-charge-dialog.component.scss']\n})\nexport class WaiveChargeDialogComponent {\n\n  /**\n   * @param {MatDialogRef} dialogRef Component reference to dialog.\n   * @param {any} data.\n   */\n  constructor(public dialogRef: MatDialogRef<WaiveChargeDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any) { }\n\n}\n","<h1 mat-dialog-title>Waive Charge</h1>\n<div mat-dialog-content>\n  <p>Are you sure you want to waive charge with id: {{ data.id }} ?</p>\n</div>\n<mat-dialog-actions align=\"end\">\n  <button mat-raised-button mat-dialog-close>Cancel</button>\n  <button mat-raised-button color=\"primary\" [mat-dialog-close]=\"{ confirm: true }\">Confirm</button>\n</mat-dialog-actions>\n","/** Angular Imports */\nimport { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n/**\n * Inactivate charge dialog component.\n */\n@Component({\n  selector: 'mifosx-inactivate-charge-dialog',\n  templateUrl: './inactivate-charge-dialog.component.html',\n  styleUrls: ['./inactivate-charge-dialog.component.scss']\n})\nexport class InactivateChargeDialogComponent {\n\n  /**\n   * @param {MatDialogRef} dialogRef Component reference to dialog.\n   */\n  constructor(public dialogRef: MatDialogRef<InactivateChargeDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any) { }\n\n}\n","<h1 mat-dialog-title>Inactivate Charge</h1>\n<div mat-dialog-content>\n  <p>Are you sure you want to inactivate charge with id: {{ data.id }} ?</p>\n</div>\n<mat-dialog-actions align=\"end\">\n  <button mat-raised-button mat-dialog-close>Cancel</button>\n  <button mat-raised-button color=\"primary\" [mat-dialog-close]=\"{ confirm: true }\">Confirm</button>\n</mat-dialog-actions>\n","<div class=\"tab-container mat-typography\">\n\n  <div fxLayout=\"row\" fxLayoutAlign=\"start\">\n    <div class=\"m-b-10\">\n      <h3>All Charges</h3>\n    </div>\n    <div class=\"action-button m-b-20\" *ngIf=\"this.chargesData\">\n      <button mat-raised-button color=\"primary\" (click)=\"toggleCharges()\">\n        {{showInactiveCharges?'View Active Charges':'View Inactive Charges'}}</button>\n    </div>\n  </div>\n\n  <div class=\"mat-elevation-z1 m-b-25\">\n\n    <table mat-table #chargesTable [dataSource]=\"dataSource\" >\n\n      <ng-container matColumnDef=\"name\">\n        <th mat-header-cell *matHeaderCellDef> Name </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{ charge.name }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"feeOrPenalty\">\n        <th mat-header-cell *matHeaderCellDef> Fee/Penalty </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{ charge.penalty === true ? 'Penalty' : 'Fee' }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"paymentDueAt\">\n        <th mat-header-cell *matHeaderCellDef> Payment Due At </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{ charge.chargeTimeType.value }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"dueAsOf\">\n        <th mat-header-cell *matHeaderCellDef> Due As Of </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{ charge.dueDate  | dateFormat }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"repeatsOn\">\n        <th mat-header-cell *matHeaderCellDef> Repeats On </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{charge.feeOnMonthDay ? ([2000].concat(charge.feeOnMonthDay)  | dateFormat: 'dd MMMM') : 'Unassigned'}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"calculationType\">\n        <th mat-header-cell *matHeaderCellDef> Calculation Type </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{charge.chargeCalculationType.value}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"due\">\n        <th mat-header-cell *matHeaderCellDef> Due </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{charge.currency.displaySymbol}}&nbsp;{{charge.amount}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"paid\">\n        <th mat-header-cell *matHeaderCellDef> Paid </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{charge.currency.displaySymbol}}&nbsp;{{charge.amountPaid}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"waived\">\n        <th mat-header-cell *matHeaderCellDef> Waived </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{charge.currency.displaySymbol}}&nbsp;{{charge.amountWaived}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"outstanding\">\n        <th mat-header-cell *matHeaderCellDef> Outstanding </th>\n        <td mat-cell *matCellDef=\"let charge\"> {{charge.currency.displaySymbol}}&nbsp;{{charge.amountOutstanding}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef> Actions </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          <span *ngIf=\"fixedDepositsAccountData.status.value === 'Submitted and pending approval'\">\n            <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"Edit Charge\"\n              *mifosxHasPermission=\"'UPDATE_SAVINGSACCOUNTCHARGE'\" (click)=\"routeEdit($event); editCharge(charge)\">\n              <i class=\"fa fa-pencil\"></i>\n            </button>\n            <button class=\"account-action-button\" mat-raised-button color=\"warn\" matTooltip=\"Delete Charge\"\n              *mifosxHasPermission=\"'DELETE_SAVINGSACCOUNTCHARGE'\" (click)=\"routeEdit($event); deleteCharge(charge.id)\">\n              <i class=\"fa fa-trash\"></i>\n            </button>\n          </span>\n          <span *ngIf=\"fixedDepositsAccountData.status.value === 'Active' && charge.amountOutstanding !== 0\">\n            <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"Pay Charge\"\n              *mifosxHasPermission=\"'PAY_SAVINGSACCOUNTCHARGE'\" (click)=\"routeEdit($event); payCharge(charge.id)\">\n              <i class=\"fa fa-dollar\"></i>\n            </button>\n            <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"Waive Charge\"\n              *mifosxHasPermission=\"'WAIVE_SAVINGSACCOUNTCHARGE'\" (click)=\"routeEdit($event); waiveCharge(charge.id)\">\n              <i class=\"fa fa-flag\"></i>\n            </button>\n            <ng-container *ngIf=\"isRecurringCharge(charge)\">\n              <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"Inactivate Charge\"\n                *mifosxHasPermission=\"'INACTIVATE_SAVINGSACCOUNTCHARGE'\" (click)=\"routeEdit($event); inactivateCharge(charge.id)\">\n                <i class=\"fa fa-ban\"></i>\n              </button>\n            </ng-container>\n          </span>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n    </table>\n\n  </div>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatTableDataSource, MatTable } from '@angular/material/table';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Custom Dialogs */\nimport { FormDialogComponent } from 'app/shared/form-dialog/form-dialog.component';\nimport { WaiveChargeDialogComponent } from '../custom-dialogs/waive-charge-dialog/waive-charge-dialog.component';\nimport { InactivateChargeDialogComponent } from '../custom-dialogs/inactivate-charge-dialog/inactivate-charge-dialog.component';\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\n\n/** Custom Models */\nimport { FormfieldBase } from 'app/shared/form-dialog/formfield/model/formfield-base';\nimport { InputBase } from 'app/shared/form-dialog/formfield/model/input-base';\nimport { DatepickerBase } from 'app/shared/form-dialog/formfield/model/datepicker-base';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Charges Tab Component\n * Note: Fixed deposits endpoints are not supported so using Savings endpoints.\n */\n@Component({\n  selector: 'mifosx-charges-tab',\n  templateUrl: './charges-tab.component.html',\n  styleUrls: ['./charges-tab.component.scss']\n})\nexport class ChargesTabComponent implements OnInit {\n\n  /** Fixed Deposits Account Data */\n  fixedDepositsAccountData: any;\n  /** Charges Data */\n  chargesData: any[];\n  /** Data source for charges table. */\n  dataSource: MatTableDataSource<any>;\n  /** Toggles Charges Table */\n  showInactiveCharges = false;\n  /** Columns to be displayed in charges table. */\n  displayedColumns: string[] = [\n    'name',\n    'feeOrPenalty',\n    'paymentDueAt',\n    'dueAsOf',\n    'repeatsOn',\n    'calculationType',\n    'due',\n    'paid',\n    'waived',\n    'outstanding',\n    'actions'\n  ];\n\n  /** Charges Table Reference */\n  @ViewChild('chargesTable', { static: true }) chargesTableRef: MatTable<Element>;\n\n  /**\n   * Retrieves the Fixed Deposits account data from `resolve`.\n   * @param {SavingsService} savingsService Savings Service\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {Router} router Router for navigation.\n   * @param {MatDialog} dialog Dialog reference.\n   * @param {Dates} dateUtils Date Utils.\n   * @param {SettingsService} settingsService Settings Service.\n   */\n  constructor(private savingsService: SavingsService,\n              private route: ActivatedRoute,\n              private dateUtils: Dates,\n              private router: Router,\n              public dialog: MatDialog,\n              private settingsService: SettingsService) {\n    this.route.parent.data.subscribe((data: { fixedDepositsAccountData: any }) => {\n      this.fixedDepositsAccountData = data.fixedDepositsAccountData;\n      this.chargesData = this.fixedDepositsAccountData.charges;\n    });\n  }\n\n  ngOnInit() {\n    const activeCharges = this.chargesData ? this.chargesData.filter(charge => charge.isActive) : [];\n    this.dataSource = new MatTableDataSource(activeCharges);\n  }\n\n  /**\n   * Toggles datasource for active/inactive charges.\n   */\n  toggleCharges() {\n    this.showInactiveCharges = !this.showInactiveCharges;\n    if (!this.showInactiveCharges) {\n      const activeCharges = this.chargesData.filter(charge => charge.isActive);\n      this.dataSource.data = activeCharges;\n    } else {\n      const inActiveCharges = this.chargesData.filter(charge => !charge.isActive);\n      this.dataSource.data = inActiveCharges;\n    }\n    this.chargesTableRef.renderRows();\n  }\n\n  /**\n   * Pays the charge.\n   * @param {any} chargeId Charge Id\n   */\n  payCharge(chargeId: any) {\n    const formfields: FormfieldBase[] = [\n      new InputBase({\n        controlName: 'amount',\n        label: 'Amount',\n        value: '',\n        type: 'number',\n        required: true\n      }),\n      new DatepickerBase({\n        controlName: 'dueDate',\n        label: 'Payment Date',\n        value: '',\n        type: 'date',\n        required: true\n      })\n    ];\n    const data = {\n      title: `Pay Charge ${chargeId}`,\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const payChargeDialogRef = this.dialog.open(FormDialogComponent, { data });\n    payChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const locale = this.settingsService.language.code;\n        const dateFormat = this.settingsService.dateFormat;\n        const dataObject = {\n          ...response.data.value,\n          dueDate: this.dateUtils.formatDate(response.data.value.dueDate, dateFormat),\n          dateFormat,\n          locale\n        };\n        this.savingsService.executeSavingsAccountChargesCommand(this.fixedDepositsAccountData.id, 'paycharge', dataObject, chargeId)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Waive's the charge\n   * @param {any} chargeId Charge Id\n   */\n  waiveCharge(chargeId: any) {\n    const waiveChargeDialogRef = this.dialog.open(WaiveChargeDialogComponent, { data: { id: chargeId } });\n    waiveChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.savingsService.executeSavingsAccountChargesCommand(this.fixedDepositsAccountData.id, 'waive', {}, chargeId)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Inactivate's the charge\n   * @param {any} chargeId Charge Id\n   */\n  inactivateCharge(chargeId: any) {\n    const inactivateChargeDialogRef = this.dialog.open(InactivateChargeDialogComponent, { data: { id: chargeId } });\n    inactivateChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.confirm) {\n        this.savingsService.executeSavingsAccountChargesCommand(this.fixedDepositsAccountData.id, 'inactivate', {}, chargeId)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Edits the charge\n   * @param {any} charge Charge\n   */\n  editCharge(charge: any) {\n    const formfields: FormfieldBase[] = [\n      new InputBase({\n        controlName: 'amount',\n        label: 'Amount',\n        value: charge.amount || charge.amountOrPercentage,\n        type: 'number',\n        required: true\n      })\n    ];\n    const data = {\n      title: `Edit Charge ${charge.id}`,\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editChargeDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const locale = this.settingsService.language.code;\n        const dateFormat = this.settingsService.dateFormat;\n        const dataObject = {\n          ...response.data.value,\n          dateFormat,\n          locale\n        };\n        this.savingsService.editSavingsAccountCharge(this.fixedDepositsAccountData.id, dataObject, charge.id)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Deletes the charge\n   * @param {any} chargeId Charge Id\n   */\n  deleteCharge(chargeId: any) {\n    const deleteChargeDialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `charge id:${chargeId}` }\n    });\n    deleteChargeDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        this.savingsService.deleteSavingsAccountCharge(this.fixedDepositsAccountData.id, chargeId)\n          .subscribe(() => {\n            this.reload();\n          });\n      }\n    });\n  }\n\n  /**\n   * Checks if charge is recurring.\n   * @param {any} charge Charge\n   */\n  isRecurringCharge(charge: any) {\n    return charge.chargeTimeType.value === 'Monthly Fee' || charge.chargeTimeType.value === 'Annual Fee' || charge.chargeTimeType.value === 'Weekly Fee';\n  }\n\n  /**\n   * Stops the propagation to view charge page.\n   * @param $event Mouse Event\n   */\n  routeEdit($event: MouseEvent) {\n    $event.stopPropagation();\n  }\n\n  /**\n   * Refetches data fot the component\n   * TODO: Replace by a custom reload component instead of hard-coded back-routing.\n   */\n  private reload() {\n    const clientId = this.fixedDepositsAccountData.clientId;\n    const url: string = this.router.url;\n    this.router.navigateByUrl(`/clients/${clientId}/fixed-deposits-accounts`, {skipLocationChange: true})\n      .then(() => this.router.navigate([url]));\n  }\n\n}\n","<div class=\"tab-container mat-typography\">\n\n  <div class=\"m-b-10\">\n    <h3>All Standing Instructions</h3>\n  </div>\n\n  <div class=\"mat-elevation-z1 m-b-25\">\n\n    <table mat-table #instructionsTable [dataSource]=\"dataSource\">\n\n      <ng-container matColumnDef=\"client\">\n        <th mat-header-cell *matHeaderCellDef> Client </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.fromClient.displayName}}-{{instruction.fromClient.id}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"fromAccount\">\n        <th mat-header-cell *matHeaderCellDef> From Account </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.fromAccount.accountNo}} ({{instruction.fromAccountType.value}})</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"beneficiary\">\n        <th mat-header-cell *matHeaderCellDef> Beneficiary </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.toClient.displayName}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"toAccount\">\n        <th mat-header-cell *matHeaderCellDef> To Account </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.toAccount.accountNo}} ({{instruction.toAccountType.value}})</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"amount\">\n        <th mat-header-cell *matHeaderCellDef> Amount </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.instructionType.value}}/{{instruction.amount}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"validity\">\n        <th mat-header-cell *matHeaderCellDef> Validity </th>\n        <td mat-cell *matCellDef=\"let instruction\">{{instruction.validFrom  | dateFormat}} to {{instruction.validTill  | dateFormat}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef> Actions </th>\n        <td mat-cell *matCellDef=\"let instruction\">\n          <span *ngIf=\"instruction.status.value!=='Deleted'\">\n            <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"Edit Standing Instruction\"\n              *mifosxHasPermission=\"'UPDATE_STANDINGINSTRUCTION'\">\n              <i class=\"fa fa-edit\"></i>\n            </button>\n          </span>\n          <span *ngIf=\"instruction.status.value!=='Deleted'\">\n            <button class=\"account-action-button\" mat-raised-button color=\"warn\" matTooltip=\"Delete Standing Instruction\"\n              *mifosxHasPermission=\"'DELETE_STANDINGINSTRUCTION'\" (click)=\"deleteStandingInstruction(instruction.id)\">\n              <i class=\"fa fa-times\"></i>\n            </button>\n          </span>\n          <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"View Standing Instruction\"\n            *mifosxHasPermission=\"'READ_STANDINGINSTRUCTION'\">\n            <i class=\"fa fa-eye\"></i>\n          </button>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n    </table>\n\n  </div>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatTableDataSource, MatTable } from '@angular/material/table';\nimport { ActivatedRoute } from '@angular/router';\n\n/** Custom Services */\nimport { FixedDepositsService } from 'app/deposits/fixed-deposits/fixed-deposits.service';\nimport { AccountTransfersService } from 'app/account-transfers/account-transfers.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Dialog Components */\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\n\n/**\n * Fixed Deposits Standing Instructions Tab\n */\n@Component({\n  selector: 'mifosx-standing-instructions-tab',\n  templateUrl: './standing-instructions-tab.component.html',\n  styleUrls: ['./standing-instructions-tab.component.scss']\n})\nexport class StandingInstructionsTabComponent implements OnInit {\n\n  /** Fixed Deposits Data */\n  fixedDepositsData: any;\n  /** Instructions Data */\n  instructionsData: any[];\n  /** Data source for instructions table. */\n  dataSource = new MatTableDataSource();\n  /** Columns to be displayed in instructions table. */\n  displayedColumns: string[] = [\n    'client',\n    'fromAccount',\n    'beneficiary',\n    'toAccount',\n    'amount',\n    'validity',\n    'actions'\n  ];\n\n  /** Instruction Table Reference */\n  @ViewChild('instructionsTable', { static: true }) instructionTableRef: MatTable<Element>;\n\n  /**\n   * Retrieves Fixed Deposits Account Data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {FixedDepositsService} fixedDepositsService FixedDepositsService\n   * @param {MatDialog} dialog Mat Dialog\n   * @param {AccountTransfersService} accountTransfersService Accounts Transfer Service\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private route: ActivatedRoute,\n              private fixedDepositsService: FixedDepositsService,\n              private dialog: MatDialog,\n              private accountTransfersService: AccountTransfersService,\n              private settingsService: SettingsService) {\n    this.route.parent.data.subscribe((data: { fixedDepositsAccountData: any }) => {\n      this.fixedDepositsData = data.fixedDepositsAccountData;\n    });\n  }\n\n  ngOnInit() {\n    this.getStandingInstructions();\n  }\n\n  /**\n   * Retrieves standing instructions and initializes instructions table.\n   */\n  getStandingInstructions() {\n    const clientId = this.fixedDepositsData.clientId;\n    const clientName = this.fixedDepositsData.clientName;\n    const accountId = this.fixedDepositsData.id;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    this.fixedDepositsService.getStandingInstructions(clientId, clientName, accountId, locale, dateFormat).subscribe((response: any) => {\n      this.instructionsData = response.pageItems;\n      this.dataSource.data = this.instructionsData;\n      this.instructionTableRef.renderRows();\n    });\n  }\n\n  /**\n   * Deletes a standing instruction\n   * @param {any} instructionId Instruction Id\n   */\n  deleteStandingInstruction(instructionId: any) {\n    const deleteStandingInstructionDialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { deleteContext: `standing instruction id: ${instructionId}` }\n    });\n    deleteStandingInstructionDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.delete) {\n        this.accountTransfersService.deleteStandingInstrucions(instructionId)\n          .subscribe(() => { });\n      }\n    });\n  }\n\n}\n","/** Angular Imports */\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n/**\n * Savings Datatable Tabs Component\n */\n@Component({\n  selector: 'mifosx-datatable-tabs',\n  templateUrl: './datatable-tabs.component.html',\n  styleUrls: ['./datatable-tabs.component.scss']\n})\nexport class DatatableTabsComponent {\n  entityId: string;\n  /** Savings Datatable */\n  entityDatatable: any;\n  /** Multi Row Datatable Flag */\n  multiRowDatatableFlag: boolean;\n\n  /**\n   * Fetches Savings and datatables data from `resolve`\n   * @param {ActivatedRoute} route Activated Route.\n   */\n  constructor(private route: ActivatedRoute) {\n    this.entityId = this.route.parent.parent.snapshot.paramMap.get('fixedDepositAccountId');\n\n    this.route.data.subscribe((data: { savingsDatatable: any }) => {\n      this.entityDatatable = data.savingsDatatable;\n      this.multiRowDatatableFlag = this.entityDatatable.columnHeaders[0].columnName === 'id' ? true : false;\n    });\n  }\n\n}\n","<div class=\"tab-container mat-typography\">\n  <mifosx-entity-datatable-tab\n    entityType=\"Fixed Deposit\"\n    [entityId]=\"entityId\"\n    [multiRowDatatableFlag]=\"multiRowDatatableFlag\"\n    [entityDatatable]=\"entityDatatable\"\n  >\n  </mifosx-entity-datatable-tab>\n</div>\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"approveFixedDepositsAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"approvedOnDatePicker.open()\">\n            <mat-label>Approved On Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"approvedOnDatePicker\" required formControlName=\"approvedOnDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"approvedOnDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #approvedOnDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"approveFixedDepositsAccountForm.controls.approvedOnDate.hasError('required')\">\n              Approved On Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" [disabled]=\"!approveFixedDepositsAccountForm\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\n\n/** Custom Services */\nimport { FixedDepositsService } from 'app/deposits/fixed-deposits/fixed-deposits.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Approve Fixed Deposits Account Component\n */\n@Component({\n  selector: 'mifosx-approve-fixed-deposits-account',\n  templateUrl: './approve-fixed-deposits-account.component.html',\n  styleUrls: ['./approve-fixed-deposits-account.component.scss']\n})\nexport class ApproveFixedDepositsAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Approve Fixed Deposits Account form. */\n  approveFixedDepositsAccountForm: FormGroup;\n  /** Fixed Deposits Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {FixedDepositsService} fixedDepositsService Fixed Deposits Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private fixedDepositsService: FixedDepositsService,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private router: Router,\n              private settingsService: SettingsService) {\n    this.accountId = this.route.parent.snapshot.params['fixedDepositAccountId'];\n  }\n\n  /**\n   * Creates the approve fixed deposits form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createApproveFixedDepositsAccountForm();\n  }\n\n  /**\n   * Creates the approve fixed deposits account form.\n   */\n  createApproveFixedDepositsAccountForm() {\n    this.approveFixedDepositsAccountForm = this.formBuilder.group({\n      'approvedOnDate': ['', Validators.required],\n      'note': ['']\n    });\n  }\n\n  /**\n   * Submits the form and approves the fixed deposit account,\n   * if successful redirects to the fixed deposit account.\n   */\n  submit() {\n    const approveFixedDepositsAccountFormData = this.approveFixedDepositsAccountForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevApprovedOnDate: Date = this.approveFixedDepositsAccountForm.value.approvedOnDate;\n    if (approveFixedDepositsAccountFormData.approvedOnDate instanceof Date) {\n      approveFixedDepositsAccountFormData.approvedOnDate = this.dateUtils.formatDate(prevApprovedOnDate, dateFormat);\n    }\n    const data = {\n      ...approveFixedDepositsAccountFormData,\n      dateFormat,\n      locale\n    };\n    this.fixedDepositsService.executeFixedDepositsAccountCommand(this.accountId, 'approve', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"rejectFixedDepositsAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"rejectedOnDatePicker.open()\">\n            <mat-label>Rejected On Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"rejectedOnDatePicker\" required formControlName=\"rejectedOnDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"rejectedOnDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #rejectedOnDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"rejectFixedDepositsAccountForm.controls.rejectedOnDate.hasError('required')\">\n              Rejected On Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"warn\" [disabled]=\"!rejectFixedDepositsAccountForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\n\n/** Custom Services */\nimport { FixedDepositsService } from 'app/deposits/fixed-deposits/fixed-deposits.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Reject Fixed Deposits Account Component\n */\n@Component({\n  selector: 'mifosx-reject-fixed-deposits-account',\n  templateUrl: './reject-fixed-deposits-account.component.html',\n  styleUrls: ['./reject-fixed-deposits-account.component.scss']\n})\nexport class RejectFixedDepositsAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Reject Fixed Deposit Account form. */\n  rejectFixedDepositsAccountForm: FormGroup;\n  /** Fixed Deposits Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {FixedDepositsService} fixedDepositsService Fixed Deposits Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private fixedDepositsService: FixedDepositsService,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private router: Router,\n              private settingsService: SettingsService) {\n    this.accountId = this.route.parent.snapshot.params['fixedDepositAccountId'];\n  }\n\n  /**\n   * Creates the reject fixed deposits form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createRejectFixedDepositsAccountForm();\n  }\n\n  /**\n   * Creates the reject fixed deposits account form.\n   */\n  createRejectFixedDepositsAccountForm() {\n    this.rejectFixedDepositsAccountForm = this.formBuilder.group({\n      'rejectedOnDate': ['', Validators.required],\n      'note': ['']\n    });\n  }\n\n  /**\n   * Submits the form and rejects the fixed deposit account,\n   * if successful redirects to the fixed deposit account.\n   */\n  submit() {\n    const rejectFixedDepositsAccountFormData = this.rejectFixedDepositsAccountForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevRejectedOnDate: Date = this.rejectFixedDepositsAccountForm.value.rejectedOnDate;\n    if (rejectFixedDepositsAccountFormData.rejectedOnDate instanceof Date) {\n      rejectFixedDepositsAccountFormData.rejectedOnDate = this.dateUtils.formatDate(prevRejectedOnDate, dateFormat);\n    }\n    const data = {\n      ...rejectFixedDepositsAccountFormData,\n      dateFormat,\n      locale\n    };\n    this.fixedDepositsService.executeFixedDepositsAccountCommand(this.accountId, 'reject', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"activateFixedDepositsAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <mat-form-field fxFlex (click)=\"activatedOnDatePicker.open()\">\n          <mat-label>Activated On Date</mat-label>\n          <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"activatedOnDatePicker\" required formControlName=\"activatedOnDate\">\n          <mat-datepicker-toggle matSuffix [for]=\"activatedOnDatePicker\"></mat-datepicker-toggle>\n          <mat-datepicker #activatedOnDatePicker></mat-datepicker>\n          <mat-error *ngIf=\"activateFixedDepositsAccountForm.controls.activatedOnDate.hasError('required')\">\n            Activated On Date is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" [disabled]=\"!activateFixedDepositsAccountForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Activate Fixed Deposits Account Component\n */\n@Component({\n  selector: 'mifosx-activate-fixed-deposits-account',\n  templateUrl: './activate-fixed-deposits-account.component.html',\n  styleUrls: ['./activate-fixed-deposits-account.component.scss']\n})\nexport class ActivateFixedDepositsAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Activate Fixed Deposits Account form. */\n  activateFixedDepositsAccountForm: FormGroup;\n  /** Fixed Deposits Account Id */\n  accountId: any;\n\n  /**\n   * Fixed deposits endpoint is not supported so using Savings endpoint.\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SavingsService} savingsService Savings Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private savingsService: SavingsService,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private router: Router,\n              private settingsService: SettingsService) {\n    this.accountId = this.route.parent.snapshot.params['fixedDepositAccountId'];\n  }\n\n  /**\n   * Creates the activate fixed deposits form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createActivateFixedDepositsAccountForm();\n  }\n\n  /**\n   * Creates the activate fixed deposits account form.\n   */\n  createActivateFixedDepositsAccountForm() {\n    this.activateFixedDepositsAccountForm = this.formBuilder.group({\n      'activatedOnDate': ['', Validators.required]\n    });\n  }\n\n  /**\n   * Submits the form and activates the fixed deposit account,\n   * if successful redirects to the fixed deposit account.\n   */\n  submit() {\n    const activateFixedDepositsAccountFormData = this.activateFixedDepositsAccountForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevActivatedOnDate: Date = this.activateFixedDepositsAccountForm.value.activatedOnDate;\n    if (activateFixedDepositsAccountFormData.activatedOnDate instanceof Date) {\n      activateFixedDepositsAccountFormData.activatedOnDate = this.dateUtils.formatDate(prevActivatedOnDate, dateFormat);\n    }\n    const data = {\n      ...activateFixedDepositsAccountFormData,\n      dateFormat,\n      locale\n    };\n    this.savingsService.executeSavingsAccountCommand(this.accountId, 'activate', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\n\n/**\n * Undo Approval Fixed Deposits Account Component\n */\n@Component({\n  selector: 'mifosx-undo-approval-fixed-deposits-account',\n  templateUrl: './undo-approval-fixed-deposits-account.component.html',\n  styleUrls: ['./undo-approval-fixed-deposits-account.component.scss']\n})\nexport class UndoApprovalFixedDepositsAccountComponent implements OnInit {\n\n  /** Undo Approval Fixed Deposits Account form. */\n  undoApprovalFixedDepositsAccountForm: FormGroup;\n  /** Fixed Deposits Account Id */\n  accountId: any;\n\n  /**\n   * Fixed deposits endpoint is not supported so using Savings endpoint.\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SavingsService} savingsService Savings Service\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   */\n  constructor(private formBuilder: FormBuilder,\n              private savingsService: SavingsService,\n              private route: ActivatedRoute,\n              private router: Router) {\n    this.accountId = this.route.parent.snapshot.params['fixedDepositAccountId'];\n  }\n\n  /**\n   * Creates the undo-approval fixed deposits form.\n   */\n  ngOnInit() {\n    this.createUndoApprovalFixedDepositsAccountForm();\n  }\n\n  /**\n   * Creates the undo-approval fixed deposits account form.\n   */\n  createUndoApprovalFixedDepositsAccountForm() {\n    this.undoApprovalFixedDepositsAccountForm = this.formBuilder.group({\n      'note': ['']\n    });\n  }\n\n  /**\n   * Submits the form and undo the approval of fixed deposits account,\n   * if successful redirects to the share account.\n   */\n  submit() {\n    const data = {\n      ...this.undoApprovalFixedDepositsAccountForm.value,\n    };\n    this.savingsService.executeSavingsAccountCommand(this.accountId, 'undoapproval', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"undoApprovalFixedDepositsAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <mat-form-field fxFlex>\n          <mat-label>Note</mat-label>\n          <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n        </mat-form-field>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"warn\" [disabled]=\"!undoApprovalFixedDepositsAccountForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"withdrawFixedDepositsAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"withdrawnOnDatePicker.open()\">\n            <mat-label>Withdrawn On Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"withdrawnOnDatePicker\" required formControlName=\"withdrawnOnDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"withdrawnOnDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #withdrawnOnDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"withdrawFixedDepositsAccountForm.controls.withdrawnOnDate.hasError('required')\">\n              Withdrawn On Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"primary\" [disabled]=\"!withdrawFixedDepositsAccountForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\n\n/** Custom Services */\nimport { FixedDepositsService } from 'app/deposits/fixed-deposits/fixed-deposits.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Withdraw By Client Fixed Deposits Account Component\n */\n@Component({\n  selector: 'mifosx-withdraw-by-client-fixed-deposits-account',\n  templateUrl: './withdraw-by-client-fixed-deposits-account.component.html',\n  styleUrls: ['./withdraw-by-client-fixed-deposits-account.component.scss']\n})\nexport class WithdrawByClientFixedDepositsAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Withdraw Fixed Deposits Account form. */\n  withdrawFixedDepositsAccountForm: FormGroup;\n  /** Fixed Deposits Account Id */\n  accountId: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {FixedDepositsService} fixedDepositsService Fixed Deposits Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private fixedDepositsService: FixedDepositsService,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private router: Router,\n              private settingsService: SettingsService) {\n    this.accountId = this.route.parent.snapshot.params['fixedDepositAccountId'];\n  }\n\n  /**\n   * Creates the withdraw fixed deposits form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createWithdrawFixedDepositsAccountForm();\n  }\n\n  /**\n   * Creates the withdraw fixed deposits account form.\n   */\n  createWithdrawFixedDepositsAccountForm() {\n    this.withdrawFixedDepositsAccountForm = this.formBuilder.group({\n      'withdrawnOnDate': ['', Validators.required],\n      'note': ['']\n    });\n  }\n\n  /**\n   * Submits the form and withdraws the fixed deposit account by client,\n   * if successful redirects to the fixed deposit account.\n   */\n  submit() {\n    const withdrawFixedDepositsAccountFormData = this.withdrawFixedDepositsAccountForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevWithdrawnOnDate: Date = this.withdrawFixedDepositsAccountForm.value.withdrawnOnDate;\n    if (withdrawFixedDepositsAccountFormData.withdrawnOnDate instanceof Date) {\n      withdrawFixedDepositsAccountFormData.withdrawnOnDate = this.dateUtils.formatDate(prevWithdrawnOnDate, dateFormat);\n    }\n    const data = {\n      ...withdrawFixedDepositsAccountFormData,\n      dateFormat,\n      locale\n    };\n    this.fixedDepositsService.executeFixedDepositsAccountCommand(this.accountId, 'withdrawnByApplicant', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"fixedDepositsChargeForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n          <mat-form-field>\n            <mat-label>Charge</mat-label>\n            <mat-select required formControlName=\"chargeId\">\n              <mat-option *ngFor=\"let savingsCharge of savingsChargeOptions\" [value]=\"savingsCharge.id\">\n                {{ savingsCharge.name + ' (' + savingsCharge.currency.name + ')' }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"fixedDepositsChargeForm.controls.chargeId.hasError('required')\">\n              Charge is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <div *ngIf=\"chargeDetails\" fxLayout=\"column\">\n\n            <mat-form-field>\n              <mat-label>Amount</mat-label>\n              <input type=\"number\" required matInput formControlName=\"amount\" />\n              <mat-error *ngIf=\"fixedDepositsChargeForm.controls.amount.hasError('required')\">\n                Amount is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Charge Calculation</mat-label>\n              <mat-select formControlName=\"chargeCalculationType\">\n                <mat-option *ngFor=\"let chargeCalculation of chargeDetails.chargeCalculationTypeOptions\"\n                  [value]=\"chargeCalculation.id\">\n                  {{ chargeCalculation.value }}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n\n            <mat-form-field>\n              <mat-label>Charge time type</mat-label>\n              <mat-select formControlName=\"chargeTimeType\">\n                <mat-option *ngFor=\"let chargeTime of chargeDetails.chargeTimeTypeOptions\" [value]=\"chargeTime.id\">\n                  {{ chargeTime.value }}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n\n            <mat-form-field *ngIf=\"fixedDepositsChargeForm.contains('dueDate')\" (click)=\"dueDatePicker.open()\">\n              <mat-label>Due for collection on</mat-label>\n              <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"dueDatePicker\" required\n                formControlName=\"dueDate\">\n              <mat-datepicker-toggle matSuffix [for]=\"dueDatePicker\"></mat-datepicker-toggle>\n              <mat-datepicker #dueDatePicker></mat-datepicker>\n              <mat-error *ngIf=\"fixedDepositsChargeForm.controls.dueDate.hasError('required')\">\n                Due for collection on is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n\n            <mat-form-field *ngIf=\"fixedDepositsChargeForm.contains('feeOnMonthDay')\" (click)=\"feeOnMonthDayPicker.open()\">\n              <mat-label>Due On</mat-label>\n              <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"feeOnMonthDayPicker\" required\n                formControlName=\"feeOnMonthDay\">\n              <mat-datepicker-toggle matSuffix [for]=\"feeOnMonthDayPicker\"></mat-datepicker-toggle>\n              <mat-datepicker #feeOnMonthDayPicker></mat-datepicker>\n              <mat-error *ngIf=\"fixedDepositsChargeForm.controls.feeOnMonthDay.hasError('required')\">\n                Due Date is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n\n            <mat-form-field *ngIf=\"fixedDepositsChargeForm.contains('feeInterval')\">\n              <mat-label>Repeats Every</mat-label>\n              <input matInput formControlName=\"feeInterval\" />\n            </mat-form-field>\n\n          </div>\n\n        </div>\n\n        <mat-card-actions fxLayoutGap=\"5px\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\">\n          <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n          <button mat-raised-button color=\"primary\" [disabled]=\"!fixedDepositsChargeForm.valid\">Submit</button>\n        </mat-card-actions>\n\n      </mat-card-content>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Dates } from 'app/core/utils/dates';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Add Fixed Deposits Charge component.\n * Fixed deposits endpoint is not supported so using Savings endpoint.\n */\n@Component({\n  selector: 'mifosx-add-charge-fixed-deposits-account',\n  templateUrl: './add-charge-fixed-deposits-account.component.html',\n  styleUrls: ['./add-charge-fixed-deposits-account.component.scss']\n})\nexport class AddChargeFixedDepositsAccountComponent implements OnInit {\n\n  /** Minimum Due Date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum Due Date allowed. */\n  maxDate = new Date();\n  /** Add Fixed Deposits Charge form. */\n  fixedDepositsChargeForm: FormGroup;\n  /** savings charge options. */\n  savingsChargeOptions: any;\n  /** savings Id of the savings account. */\n  fixedDepositAccountId: string;\n  /** charge details */\n  chargeDetails: any;\n\n  /**\n   * Retrieves charge template data from `resolve`\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {Dates} dateUtils Date Utils\n   * @param {SavingsService} savingsService Savings Service\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private dateUtils: Dates,\n    private savingsService: SavingsService,\n    private settingsService: SettingsService\n  ) {\n    this.route.data.subscribe((data: { fixedDepositsAccountActionData: any }) => {\n      this.savingsChargeOptions = data.fixedDepositsAccountActionData.chargeOptions;\n    });\n    this.fixedDepositAccountId = this.route.parent.snapshot.params['fixedDepositAccountId'];\n  }\n\n  /**\n   * Creates the Fixed Deposits Charge form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createFixedDepositsChargeForm();\n    this.buildDependencies();\n  }\n\n  buildDependencies() {\n    this.fixedDepositsChargeForm.controls.chargeId.valueChanges.subscribe(chargeId => {\n      this.savingsService.getChargeTemplate(chargeId).subscribe((data: any) => {\n        this.chargeDetails = data;\n        const chargeTimeType = data.chargeTimeType.id;\n        if (data.chargeTimeType.value === 'Withdrawal Fee' || data.chargeTimeType.value === 'Saving No Activity Fee') {\n          this.chargeDetails.dueDateNotRequired = true;\n        }\n        if (data.chargeTimeType.value === 'Annual Fee' || data.chargeTimeType.value === 'Monthly Fee') {\n          this.chargeDetails.chargeTimeTypeAnnualOrMonth = true;\n        }\n        if (!this.chargeDetails.dueDateNotRequired && !this.chargeDetails.chargeTimeTypeAnnualOrMonth) {\n          this.fixedDepositsChargeForm.addControl('dueDate', new FormControl('', Validators.required));\n        } else {\n          this.fixedDepositsChargeForm.removeControl('dueDate');\n        }\n        if (!this.chargeDetails.dueDateNotRequired && this.chargeDetails.chargeTimeTypeAnnualOrMonth) {\n          this.fixedDepositsChargeForm.addControl('feeOnMonthDay', new FormControl('', Validators.required));\n        } else {\n          this.fixedDepositsChargeForm.removeControl('feeOnMonthDay');\n        }\n        if (chargeTimeType.value === 'Monthly Fee') {\n          this.fixedDepositsChargeForm.addControl('feeInterval', new FormControl(data.feeInterval, Validators.required));\n        } else {\n          this.fixedDepositsChargeForm.removeControl('feeInterval');\n        }\n        this.fixedDepositsChargeForm.patchValue({\n          'amount': data.amount,\n          'chargeCalculationType': data.chargeCalculationType.id,\n          'chargeTimeType': data.chargeTimeType.id\n        });\n      });\n    });\n  }\n\n  /**\n   * Creates the Fixed Deposits Charge form.\n   */\n  createFixedDepositsChargeForm() {\n    this.fixedDepositsChargeForm = this.formBuilder.group({\n      'chargeId': ['', Validators.required],\n      'amount': ['', Validators.required],\n      'chargeCalculationType': [{ value: '', disabled: true }],\n      'chargeTimeType': [{ value: '', disabled: true }]\n    });\n  }\n\n  /**\n   * Submits savings charge.\n   */\n  submit() {\n    const savingsCharge = this.fixedDepositsChargeForm.value;\n    savingsCharge.locale = this.settingsService.language.code;\n    if (!savingsCharge.feeInterval) {\n      savingsCharge.feeInterval = this.chargeDetails.feeInterval;\n    }\n    if (this.chargeDetails.dueDateNotRequired !== true) {\n      if (this.chargeDetails.chargeTimeTypeAnnualOrMonth === true) {\n        const monthDayFormat = 'MMMM-dd'; // TODO: Update once language and date settings are setup\n        savingsCharge.monthDayFormat = monthDayFormat;\n        if (savingsCharge.feeOnMonthDay) {\n          const prevDate = this.fixedDepositsChargeForm.value.feeOnMonthDay;\n          savingsCharge.feeOnMonthDay = this.dateUtils.formatDate(prevDate, monthDayFormat);\n        }\n      } else {\n        const dateFormat = this.settingsService.dateFormat;\n        savingsCharge.dateFormat = dateFormat;\n        if (savingsCharge.dueDate) {\n          const prevDate = this.fixedDepositsChargeForm.value.dueDate;\n          savingsCharge.dueDate = this.dateUtils.formatDate(prevDate, dateFormat);\n        }\n      }\n    }\n    this.savingsService.createSavingsCharge(this.fixedDepositAccountId, 'charges', savingsCharge).subscribe( () => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"prematureCloseAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"closedOnDatePicker.open()\">\n            <mat-label>Premature Close Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"closedOnDatePicker\" required formControlName=\"closedOnDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"closedOnDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #closedOnDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"prematureCloseAccountForm.controls.closedOnDate.hasError('required')\">\n              Premature Close Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field *ngIf=\"prematureCloseAccountForm.controls.maturityAmount\">\n            <mat-label>Maturity Amount</mat-label>\n            <input type=\"number\" matInput formControlName=\"maturityAmount\"/>\n          </mat-form-field>\n\n          <mat-form-field *ngIf=\"prematureCloseAccountForm.contains('onAccountClosureId')\">\n            <mat-label>Action</mat-label>\n            <mat-select required formControlName=\"onAccountClosureId\">\n              <mat-option *ngFor=\"let closureOption of onAccountClosureOptions\" [value]=\"closureOption.id\">\n                {{ closureOption.value }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"prematureCloseAccountForm.controls.onAccountClosureId.hasError('required')\">\n              Account action is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field *ngIf=\"prematureCloseAccountForm.contains('toSavingsAccountId')\">\n            <mat-label>Transfer to Savings</mat-label>\n            <mat-select required formControlName=\"toSavingsAccountId\">\n              <mat-option *ngFor=\"let account of savingsAccountsData\" [value]=\"account.id\">\n                {{ account.accountNo }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"prematureCloseAccountForm.controls.toSavingsAccountId.hasError('required')\">\n              Transfer to savings account is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field *ngIf=\"prematureCloseAccountForm.contains('transferDescription')\">\n            <mat-label>Transfer Description</mat-label>\n            <input matInput formControlName=\"transferDescription\"/>\n          </mat-form-field>\n\n          <mat-form-field *ngIf=\"prematureCloseAccountForm.contains('note')\">\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"warn\" [disabled]=\"!prematureCloseAccountForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { FixedDepositsService } from '../../fixed-deposits.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Premature Close Fixed Deposits Account Component\n */\n@Component({\n  selector: 'mifosx-premature-close-fixed-deposits-account',\n  templateUrl: './premature-close-fixed-deposits-account.component.html',\n  styleUrls: ['./premature-close-fixed-deposits-account.component.scss']\n})\nexport class PrematureCloseFixedDepositsAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Premature Close FD Account form. */\n  prematureCloseAccountForm: FormGroup;\n  /** Savings Account Data */\n  savingsAccountsData: any;\n  /** On account Closure Options */\n  onAccountClosureOptions: any;\n  /** Fixed Deposits Account Id */\n  accountId: any;\n  /** Form submission event */\n  isSubmitted = false;\n\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {FixedDepositsService} fixedDepositsService Fixed Deposits Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private fixedDepositsService: FixedDepositsService,\n    private dateUtils: Dates,\n    private route: ActivatedRoute,\n    private router: Router,\n    private settingsService: SettingsService) {\n    this.accountId = this.route.parent.snapshot.params['fixedDepositAccountId'];\n  }\n\n  /**\n   * Creates the premature close fd account form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createPrematureCloseAccountForm();\n    this.buildDependencies();\n  }\n\n  /**\n   * Creates the premature close fd account form.\n   */\n  createPrematureCloseAccountForm() {\n    this.prematureCloseAccountForm = this.formBuilder.group({\n      'closedOnDate': ['', Validators.required]\n    });\n  }\n\n  /**\n   * Subscribes to value changes of parent control.\n   */\n  buildDependencies() {\n    this.prematureCloseAccountForm.get('closedOnDate').valueChanges.subscribe((value: Date) => {\n      if (!this.isSubmitted) {\n        this.calculatePrematureAmount(value);\n      }\n    });\n  }\n\n  /**\n   * Calculates prematue amount based on closed on date.\n   * @param {Date} date Premature Close Date\n   */\n  calculatePrematureAmount(date: Date) {\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const data = {\n      closedOnDate: this.dateUtils.formatDate(date, dateFormat),\n      dateFormat,\n      locale\n    };\n    this.fixedDepositsService.executeFixedDepositsAccountCommand(this.accountId, 'calculatePrematureAmount', data)\n      .subscribe((response: any) => {\n        this.savingsAccountsData = response.savingsAccounts;\n        this.onAccountClosureOptions = response.onAccountClosureOptions;\n        this.prematureCloseAccountForm.addControl('maturityAmount', new FormControl({ value: '', disabled: true }));\n        this.prematureCloseAccountForm.addControl('onAccountClosureId', new FormControl('', Validators.required));\n        this.prematureCloseAccountForm.addControl('note', new FormControl(''));\n        this.prematureCloseAccountForm.get('maturityAmount').patchValue(response.maturityAmount);\n        this.addTransferDetails();\n      });\n\n  }\n\n  /**\n   * Subscribes to value changes of `onAccountClosureId` adds and removes transfer details accordingly.\n   */\n  addTransferDetails() {\n    this.prematureCloseAccountForm.get('onAccountClosureId').valueChanges.subscribe((id: any) => {\n      if (id === 200) {\n        this.prematureCloseAccountForm.addControl('toSavingsAccountId', new FormControl('', Validators.required));\n        this.prematureCloseAccountForm.addControl('transferDescription', new FormControl(''));\n      } else {\n        this.prematureCloseAccountForm.removeControl('toSavingsAccountId');\n        this.prematureCloseAccountForm.removeControl('transferDescription');\n      }\n    });\n  }\n\n  /**\n   * Submits the form and premature closes the fd account,\n   * if successful redirects to the fd account.\n   */\n  submit() {\n    const prematureCloseAccountFormData = this.prematureCloseAccountForm.value;\n    this.isSubmitted = true;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevClosedDate: Date = this.prematureCloseAccountForm.value.closedOnDate;\n    if (prematureCloseAccountFormData.closedOnDate instanceof Date) {\n      prematureCloseAccountFormData.closedOnDate = this.dateUtils.formatDate(prevClosedDate, dateFormat);\n    }\n    const data = {\n      ...prematureCloseAccountFormData,\n      dateFormat,\n      locale\n    };\n    this.fixedDepositsService.executeFixedDepositsAccountCommand(this.accountId, 'prematureClose', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <form [formGroup]=\"closeOnMaturityAccountForm\" (ngSubmit)=\"submit()\">\n\n      <mat-card-content>\n\n        <div fxLayout=\"column\">\n\n          <mat-form-field (click)=\"closedOnDatePicker.open()\">\n            <mat-label>Closed On Date</mat-label>\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"closedOnDatePicker\" required formControlName=\"closedOnDate\">\n            <mat-datepicker-toggle matSuffix [for]=\"closedOnDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #closedOnDatePicker></mat-datepicker>\n            <mat-error *ngIf=\"closeOnMaturityAccountForm.controls.closedOnDate.hasError('required')\">\n              Closed On Date is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Maturity Amount</mat-label>\n            <input type=\"number\" matInput formControlName=\"maturityAmount\"/>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Action</mat-label>\n            <mat-select required formControlName=\"onAccountClosureId\">\n              <mat-option *ngFor=\"let closureOption of onAccountClosureOptions\" [value]=\"closureOption.id\">\n                {{ closureOption.value }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"closeOnMaturityAccountForm.controls.onAccountClosureId.hasError('required')\">\n              Account action is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field *ngIf=\"closeOnMaturityAccountForm.contains('toSavingsAccountId')\">\n            <mat-label>Transfer to Savings</mat-label>\n            <mat-select required formControlName=\"toSavingsAccountId\">\n              <mat-option *ngFor=\"let account of savingsAccountsData\" [value]=\"account.id\">\n                {{ account.accountNo }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"closeOnMaturityAccountForm.controls.toSavingsAccountId.hasError('required')\">\n              Transfer to savings account is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field *ngIf=\"closeOnMaturityAccountForm.contains('transferDescription')\">\n            <mat-label>Transfer Description</mat-label>\n            <input matInput formControlName=\"transferDescription\"/>\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Note</mat-label>\n            <textarea matInput formControlName=\"note\" cdkTextareaAutosize cdkAutosizeMinRows=\"2\"></textarea>\n          </mat-form-field>\n\n        </div>\n\n      </mat-card-content>\n\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../../']\">Cancel</button>\n        <button mat-raised-button color=\"warn\" [disabled]=\"!closeOnMaturityAccountForm.valid\">Confirm</button>\n      </mat-card-actions>\n\n    </form>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { FixedDepositsService } from '../../fixed-deposits.service';\nimport { SettingsService } from 'app/settings/settings.service';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Close On Maturity Fixed Deposits Account Component\n */\n@Component({\n  selector: 'mifosx-close-fixed-deposits-account',\n  templateUrl: './close-fixed-deposits-account.component.html',\n  styleUrls: ['./close-fixed-deposits-account.component.scss']\n})\nexport class CloseFixedDepositsAccountComponent implements OnInit {\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Close on maturity FD Account form. */\n  closeOnMaturityAccountForm: FormGroup;\n  /** Savings Account Data */\n  savingsAccountsData: any;\n  /** On account Closure Options */\n  onAccountClosureOptions: any;\n  /** Fixed Deposits Account Id */\n  accountId: any;\n  /** Maturity Amount */\n  maturityAmount: any;\n\n  /**\n   * Fetches close action data from `resolve`\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {FixedDepositsService} fixedDepositsService Fixed Deposits Service\n   * @param {Dates} dateUtils Date Utils\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private fixedDepositsService: FixedDepositsService,\n              private dateUtils: Dates,\n              private route: ActivatedRoute,\n              private router: Router,\n              private settingsService: SettingsService) {\n    this.route.data.subscribe((data: { fixedDepositsAccountActionData: any }) => {\n      this.savingsAccountsData = data.fixedDepositsAccountActionData.savingsAccounts;\n      this.onAccountClosureOptions = data.fixedDepositsAccountActionData.onAccountClosureOptions;\n      this.maturityAmount = data.fixedDepositsAccountActionData.maturityAmount;\n    });\n    this.accountId = this.route.parent.snapshot.params['fixedDepositAccountId'];\n  }\n\n  /**\n   * Creates the close on maturity fd account form.\n   */\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.createCloseOnMaturityAccountForm();\n    this.addTransferDetails();\n  }\n\n  /**\n   * Creates the close on maturity fd account form.\n   */\n  createCloseOnMaturityAccountForm() {\n    this.closeOnMaturityAccountForm = this.formBuilder.group({\n      'closedOnDate': ['', Validators.required],\n      'maturityAmount': [{value: this.maturityAmount, disabled: true}],\n      'onAccountClosureId': ['', Validators.required],\n      'note': ['']\n    });\n  }\n\n  /**\n   * Subscribes to value changes of `onAccountClosureId` adds and removes transfer details accordingly.\n   */\n  addTransferDetails() {\n    this.closeOnMaturityAccountForm.get('onAccountClosureId').valueChanges.subscribe((id: any) => {\n      if (id === 200) {\n        this.closeOnMaturityAccountForm.addControl('toSavingsAccountId', new FormControl('', Validators.required));\n        this.closeOnMaturityAccountForm.addControl('transferDescription', new FormControl(''));\n      } else {\n        this.closeOnMaturityAccountForm.removeControl('toSavingsAccountId');\n        this.closeOnMaturityAccountForm.removeControl('transferDescription');\n      }\n    });\n  }\n\n  /**\n   * Submits the form and close the fd account on maturity,\n   * if successful redirects to the fd account.\n   */\n  submit() {\n    const closeOnMaturityAccountFormData = this.closeOnMaturityAccountForm.value;\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const prevClosedDate: Date = this.closeOnMaturityAccountForm.value.closedOnDate;\n    if (closeOnMaturityAccountFormData.closedOnDate instanceof Date) {\n      closeOnMaturityAccountFormData.closedOnDate = this.dateUtils.formatDate(prevClosedDate, dateFormat);\n    }\n    const data = {\n      ...closeOnMaturityAccountFormData,\n      dateFormat,\n      locale\n    };\n    this.fixedDepositsService.executeFixedDepositsAccountCommand(this.accountId, 'close', data).subscribe(() => {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","<mifosx-approve-fixed-deposits-account *ngIf=\"actions['Approve']\"></mifosx-approve-fixed-deposits-account>\n<mifosx-reject-fixed-deposits-account *ngIf=\"actions['Reject']\"></mifosx-reject-fixed-deposits-account>\n<mifosx-activate-fixed-deposits-account *ngIf=\"actions['Activate']\"></mifosx-activate-fixed-deposits-account>\n<mifosx-undo-approval-fixed-deposits-account *ngIf=\"actions['Undo Approval']\"></mifosx-undo-approval-fixed-deposits-account>\n<mifosx-withdraw-by-client-fixed-deposits-account *ngIf=\"actions['Withdraw By Client']\"></mifosx-withdraw-by-client-fixed-deposits-account>\n<mifosx-add-charge-fixed-deposits-account *ngIf=\"actions['Add Charge']\"></mifosx-add-charge-fixed-deposits-account>\n<mifosx-premature-close-fixed-deposits-account *ngIf=\"actions['Premature Close']\"></mifosx-premature-close-fixed-deposits-account>\n<mifosx-close-fixed-deposits-account *ngIf=\"actions['Close']\"></mifosx-close-fixed-deposits-account>\n","/** Angular Imports */\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n/**\n * Fixed deposits account actions component.\n */\n@Component({\n  selector: 'mifosx-fixed-deposits-account-actions',\n  templateUrl: './fixed-deposits-account-actions.component.html',\n  styleUrls: ['./fixed-deposits-account-actions.component.scss']\n})\nexport class FixedDepositsAccountActionsComponent {\n\n  /** Flag object to store possible actions and render appropriate UI to the user */\n  actions: {\n    'Approve': boolean\n    'Reject': boolean\n    'Activate': boolean\n    'Close': boolean\n    'Undo Approval': boolean\n    'Add Charge': boolean\n    'Premature Close': boolean\n    'Withdraw By Client': boolean\n  } = {\n    'Approve': false,\n    'Reject': false,\n    'Activate': false,\n    'Close': false,\n    'Undo Approval': false,\n    'Add Charge': false,\n    'Premature Close': false,\n    'Withdraw By Client': false\n  };\n\n  /**\n   * @param {ActivatedRoute} route Activated Route\n   */\n  constructor(private route: ActivatedRoute) {\n    const name = this.route.snapshot.params['name'];\n    this.actions[name] = true;\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-card>\n\n    <mat-card-content>\n\n      <div fxLayout=\"row wrap\" class=\"content\">\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Transaction Id\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ transactionData.id }}\n        </div>\n        \n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Type\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ transactionData.transactionType.value }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Transaction Date\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ transactionData.date  | dateFormat }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Currency\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ transactionData.currency.displayLabel }}\n        </div>\n\n        <div fxFlex=\"50%\" class=\"mat-body-strong\">\n          Amount\n        </div>\n\n        <div fxFlex=\"50%\">\n          {{ transactionData.amount }}\n        </div>\n\n        <div fxFlex=\"50%\" *ngIf=\"transactionData.note\" class=\"mat-body-strong\">\n          Note\n        </div>\n\n        <div fxFlex=\"50%\" *ngIf=\"transactionData.note\">\n          {{ transactionData.note }}\n        </div>\n\n        <ng-container *ngIf=\"transactionData.paymentDetailData\">\n\n          <div *ngIf=\"transactionData.paymentDetailData.paymentType\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            Payment Type\n          </div>\n  \n          <div *ngIf=\"transactionData.paymentDetailData.paymentType\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.paymentType.name }}\n          </div>\n          \n          <div *ngIf=\"transactionData.paymentDetailData.accountNumber\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            Account No.\n          </div>\n  \n          <div *ngIf=\"transactionData.paymentDetailData.accountNumber\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.accountNumber }}\n          </div>\n  \n          <div *ngIf=\"transactionData.paymentDetailData.checkNumber\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            Cheque Number\n          </div>\n  \n          <div *ngIf=\"transactionData.paymentDetailData.checkNumber\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.checkNumber }}\n          </div>\n  \n          <div *ngIf=\"transactionData.paymentDetailData.routingCode\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            Routing Code\n          </div>\n  \n          <div *ngIf=\"transactionData.paymentDetailData.routingCode\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.routingCode }}\n          </div>\n  \n          <div *ngIf=\"transactionData.paymentDetailData.receiptNumber\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            Receipt No.\n          </div>\n  \n          <div *ngIf=\"transactionData.paymentDetailData.receiptNumber\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.receiptNumber }}\n          </div>\n  \n          <div *ngIf=\"transactionData.paymentDetailData.bankNumber\" fxFlex=\"50%\" class=\"mat-body-strong\">\n            Bank No.\n          </div>\n  \n          <div *ngIf=\"transactionData.paymentDetailData.bankNumber\" fxFlex=\"50%\">\n            {{ transactionData.paymentDetailData.bankNumber }}\n          </div>\n\n        </ng-container>\n\n      </div>\n\n    </mat-card-content>\n\n  </mat-card>\n\n</div>\n","/** Angular Imports */\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\n\n/**\n * View Transaction Component.\n */\n@Component({\n  selector: 'mifosx-view-transaction',\n  templateUrl: './view-transaction.component.html',\n  styleUrls: ['./view-transaction.component.scss']\n})\nexport class ViewTransactionComponent {\n\n  /** Transaction data. */\n  transactionData: any;\n\n  /**\n   * Retrieves the Transaction data from `resolve`.\n   * @param {ActivatedRoute} route Activated Route.\n   * @param {MatDialog} dialog Dialog reference.\n   */\n  constructor(private route: ActivatedRoute,\n              public dialog: MatDialog) {\n    this.route.data.subscribe((data: { fixedDepositsAccountTransaction: any }) => {\n      this.transactionData = data.fixedDepositsAccountTransaction;\n    });\n  }\n\n}\n","<form [formGroup]=\"fixedDepositAccountDetailsForm\">\n\n  <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Product Name</mat-label>\n      <mat-select formControlName=\"productId\" required>\n        <mat-option *ngFor=\"let product of productData\" [value]=\"product.id\">\n          {{ product.name }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Product Name is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\" (click)=\"submittedOnDatePicker.open()\">\n      <mat-label>Submitted On</mat-label>\n      <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"submittedOnDatePicker\"\n        formControlName=\"submittedOnDate\" required>\n      <mat-datepicker-toggle matSuffix [for]=\"submittedOnDatePicker\"></mat-datepicker-toggle>\n      <mat-datepicker #submittedOnDatePicker></mat-datepicker>\n      <mat-error>\n        Submission Date is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Field Officer</mat-label>\n      <mat-select formControlName=\"fieldOfficerId\">\n        <mat-option *ngFor=\"let officer of fieldOfficerData\" [value]=\"officer.id\">\n          {{ officer.displayName }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n  </div>\n\n  <div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n    <button mat-raised-button matStepperPrevious disabled>\n      <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n      Previous\n    </button>\n    <button mat-raised-button matStepperNext>\n      Next&nbsp;&nbsp;\n      <fa-icon icon=\"arrow-right\"></fa-icon>\n    </button>\n  </div>\n\n</form>\n","/** Angular Imports */\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Custom Services */\nimport { FixedDepositsService } from '../../fixed-deposits.service';\n\n/**\n * Fixed Deposits Account Details Step\n */\n@Component({\n  selector: 'mifosx-fixed-deposit-account-details-step',\n  templateUrl: './fixed-deposit-account-details-step.component.html',\n  styleUrls: ['./fixed-deposit-account-details-step.component.scss']\n})\nexport class FixedDepositAccountDetailsStepComponent implements OnInit {\n\n  /** Fixed Deposits Account Template */\n  @Input() fixedDepositsAccountTemplate: any;\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Product Data */\n  productData: any;\n  /** Field Officer Data */\n  fieldOfficerData: any;\n  /** For edit savings form */\n  isFieldOfficerPatched = false;\n  /** Fixed Deposits Account Details Form */\n  fixedDepositAccountDetailsForm: FormGroup;\n\n  /** Fixed Deposits Account Template with product data  */\n  @Output() fixedDepositsAccountProductTemplate = new EventEmitter();\n\n  /**\n   * Sets fixed deposits account details form.\n   * @param {FormBuilder} formBuilder Form Builder.\n   * @param {FixedDepositsService} fixedDepositsService Fixed Deposits Service.\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n              private fixedDepositsService: FixedDepositsService,\n              private settingsService: SettingsService) {\n    this.createFixedDepositsAccountDetailsForm();\n  }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    this.buildDependencies();\n    if (this.fixedDepositsAccountTemplate) {\n      this.productData = this.fixedDepositsAccountTemplate.productOptions;\n      if (this.fixedDepositsAccountTemplate.depositProductId) {\n        this.fixedDepositAccountDetailsForm.patchValue({\n          'productId': this.fixedDepositsAccountTemplate.depositProductId,\n          'submittedOnDate': this.fixedDepositsAccountTemplate.timeline.submittedOnDate && new Date(this.fixedDepositsAccountTemplate.timeline.submittedOnDate)\n        });\n      }\n    }\n  }\n\n  /**\n   * Creates fixed deposits account details form.\n   */\n  createFixedDepositsAccountDetailsForm() {\n    this.fixedDepositAccountDetailsForm = this.formBuilder.group({\n      'productId': ['', Validators.required],\n      'submittedOnDate': ['', Validators.required],\n      'fieldOfficerId': ['']\n    });\n  }\n\n  /**\n   * Fetches fixed deposits account product template on productId value changes\n   */\n  buildDependencies() {\n    const clientId = this.fixedDepositsAccountTemplate.clientId;\n    this.fixedDepositAccountDetailsForm.get('productId').valueChanges.subscribe((productId: string) => {\n      this.fixedDepositsService.getFixedDepositsAccountTemplate(clientId, productId).subscribe((response: any) => {\n        this.fixedDepositsAccountProductTemplate.emit(response);\n        this.fieldOfficerData = response.fieldOfficerOptions;\n        if (!this.isFieldOfficerPatched && this.fixedDepositsAccountTemplate.fieldOfficerId) {\n          this.fixedDepositAccountDetailsForm.get('fieldOfficerId').patchValue(this.fixedDepositsAccountTemplate.fieldOfficerId);\n          this.isFieldOfficerPatched = true;\n        } else {\n          this.fixedDepositAccountDetailsForm.get('fieldOfficerId').patchValue('');\n        }\n      });\n    });\n  }\n\n  /**\n   * Returns fixed deposits account details form value.\n   */\n  get fixedDepositAccountDetails() {\n    const fixedDepositAccountDetails = this.fixedDepositAccountDetailsForm.value;\n    for (const key in fixedDepositAccountDetails) {\n      if (fixedDepositAccountDetails[key] === '') {\n        delete fixedDepositAccountDetails[key];\n      }\n    }\n    return fixedDepositAccountDetails;\n  }\n\n}\n","/** Angular Imports */\nimport { Component, OnChanges, Input } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\n\n/**\n * Fixed Deposit Account Currency Step\n */\n@Component({\n  selector: 'mifosx-fixed-deposit-account-currency-step',\n  templateUrl: './fixed-deposit-account-currency-step.component.html',\n  styleUrls: ['./fixed-deposit-account-currency-step.component.scss']\n})\nexport class FixedDepositAccountCurrencyStepComponent implements OnChanges {\n\n  /** Fixed deposits account template */\n  @Input() fixedDepositsAccountTemplate: any;\n  /** Fixed deposits account and product template */\n  @Input() fixedDepositsAccountProductTemplate: any;\n\n  /** Fixed Deposit Account Currency Form */\n  fixedDepositAccountCurrencyForm: FormGroup;\n  /** Currency Data */\n  currencyData: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   */\n  constructor(private formBuilder: FormBuilder) {\n    this.createFixedDepositAccountCurrencyForm();\n  }\n\n  ngOnChanges() {\n    if (this.fixedDepositsAccountProductTemplate) {\n      this.fixedDepositAccountCurrencyForm.patchValue({\n        'currencyCode': this.fixedDepositsAccountProductTemplate.currency.code,\n        'decimalPlaces': this.fixedDepositsAccountProductTemplate.currency.decimalPlaces,\n        'currencyMultiple': this.fixedDepositsAccountProductTemplate.currency.inMultiplesOf\n      });\n    }\n  }\n\n  /**\n   * Creates fd currency form.\n   */\n  createFixedDepositAccountCurrencyForm() {\n    this.fixedDepositAccountCurrencyForm = this.formBuilder.group({\n      'currencyCode': [{ value: '', disabled: true}],\n      'decimalPlaces': [{ value: '', disabled: true }],\n      'currencyMultiple': [{ value: '', disabled: true }]\n    });\n  }\n\n}\n","<form [formGroup]=\"fixedDepositAccountCurrencyForm\">\n\n  <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Currency</mat-label>\n      <input type=\"text\" matInput formControlName=\"currencyCode\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Decimal Places</mat-label>\n      <input type=\"number\" matInput formControlName=\"decimalPlaces\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Currency Multiple</mat-label>\n      <input type=\"number\" matInput formControlName=\"currencyMultiple\">\n    </mat-form-field>\n\n  </div>\n\n  <div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n    <button mat-raised-button matStepperPrevious>\n      <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n      Previous\n    </button>\n    <button mat-raised-button matStepperNext>\n      Next&nbsp;&nbsp;\n      <fa-icon icon=\"arrow-right\"></fa-icon>\n    </button>\n  </div>\n\n</form>\n","<form [formGroup]=\"fixedDepositAccountTermsForm\">\n\n  <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Deposit Amount</mat-label>\n      <input type=\"number\" matInput formControlName=\"depositAmount\" required>\n      <mat-error>\n        Fixed Deposit Amount is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <span fxFlex=\"48%\" fxHide.lt-md></span>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Deposit Period Frequency</mat-label>\n      <input type=\"number\" matInput formControlName=\"depositPeriod\" required>\n      <mat-error>\n        Deposit Period Frequency is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Deposit Period Type</mat-label>\n      <mat-select formControlName=\"depositPeriodFrequencyId\" required>\n        <mat-option *ngFor=\"let periodFrequencyType of periodFrequencyTypeData\" [value]=\"periodFrequencyType.id\">\n          {{ periodFrequencyType.value }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Deposit Period Type is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-divider fxFlex=\"98%\"></mat-divider>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Interest Compounding Period</mat-label>\n      <mat-select formControlName=\"interestCompoundingPeriodType\" required>\n        <mat-option *ngFor=\"let interestCompoundingPeriodType of interestCompoundingPeriodTypeData\"\n          [value]=\"interestCompoundingPeriodType.id\">\n          {{ interestCompoundingPeriodType.value }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Interest Compounding Period is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Interest Posting Period</mat-label>\n      <mat-select formControlName=\"interestPostingPeriodType\" required>\n        <mat-option *ngFor=\"let interestPostingPeriodType of interestPostingPeriodTypeData\"\n          [value]=\"interestPostingPeriodType.id\">\n          {{ interestPostingPeriodType.value }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Interest Posting Period is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Interest Calculated using</mat-label>\n      <mat-select formControlName=\"interestCalculationType\" required>\n        <mat-option *ngFor=\"let interestCalculationType of interestCalculationTypeData\"\n          [value]=\"interestCalculationType.id\">\n          {{ interestCalculationType.value }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Interest Calculated using is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Days in Year</mat-label>\n      <mat-select formControlName=\"interestCalculationDaysInYearType\" required>\n        <mat-option *ngFor=\"let interestCalculationDaysInYearType of interestCalculationDaysInYearTypeData\"\n          [value]=\"interestCalculationDaysInYearType.id\">\n          {{ interestCalculationDaysInYearType.value }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Days in Year is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n  </div>\n\n  <div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n    <button mat-raised-button matStepperPrevious>\n      <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n      Previous\n    </button>\n    <button mat-raised-button matStepperNext>\n      Next&nbsp;&nbsp;\n      <fa-icon icon=\"arrow-right\"></fa-icon>\n    </button>\n  </div>\n\n</form>\n","/** Angular Imports */\nimport { Component, OnInit, Input, OnChanges } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators} from '@angular/forms';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Fixed Deposits Terms Step\n */\n@Component({\n  selector: 'mifosx-fixed-deposit-account-terms-step',\n  templateUrl: './fixed-deposit-account-terms-step.component.html',\n  styleUrls: ['./fixed-deposit-account-terms-step.component.scss']\n})\nexport class FixedDepositAccountTermsStepComponent implements OnInit, OnChanges {\n\n  /** Fixed deposits account template */\n  @Input() fixedDepositsAccountTemplate: any;\n  /** Fixed deposits account and product template */\n  @Input() fixedDepositsAccountProductTemplate: any;\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Fixed Deposits Account Terms Form */\n  fixedDepositAccountTermsForm: FormGroup;\n  /** Interest Compounding Period Type Data */\n  interestCompoundingPeriodTypeData: any;\n  /** Interest Posting Period Type Data */\n  interestPostingPeriodTypeData: any;\n  /** Interest Calculation Type Data */\n  interestCalculationTypeData: any;\n  /** Interest Calculation Days in Year Data */\n  interestCalculationDaysInYearTypeData: any;\n   /** Period Frequency Type Data */\n  periodFrequencyTypeData: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private settingsService: SettingsService) {\n    this.createFixedDepositsAccountTermsForm();\n  }\n\n  ngOnChanges() {\n    if (this.fixedDepositsAccountProductTemplate) {\n      this.setOptions();\n    }\n  }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    if (this.fixedDepositsAccountTemplate.interestCompoundingPeriodType) {\n      this.fixedDepositAccountTermsForm.patchValue({\n        'interestCompoundingPeriodType': this.fixedDepositsAccountTemplate.interestCompoundingPeriodType.id,\n        'interestPostingPeriodType': this.fixedDepositsAccountTemplate.interestPostingPeriodType.id,\n        'interestCalculationType': this.fixedDepositsAccountTemplate.interestCalculationType.id,\n        'interestCalculationDaysInYearType': this.fixedDepositsAccountTemplate.interestCalculationDaysInYearType.id,\n        'depositAmount': this.fixedDepositsAccountTemplate.depositAmount,\n        'depositPeriod': this.fixedDepositsAccountTemplate.depositPeriod,\n        'depositPeriodFrequencyId': this.fixedDepositsAccountTemplate.depositPeriodFrequency.id,\n      });\n    }\n  }\n\n  /**\n   * Creates fixed deposits account terms form.\n   */\n  createFixedDepositsAccountTermsForm() {\n    this.fixedDepositAccountTermsForm = this.formBuilder.group({\n      'interestCompoundingPeriodType': ['', Validators.required],\n      'interestPostingPeriodType': ['', Validators.required],\n      'interestCalculationType': ['', Validators.required],\n      'interestCalculationDaysInYearType': ['', Validators.required],\n      'depositAmount': ['', Validators.required],\n      'depositPeriod': ['', Validators.required],\n      'depositPeriodFrequencyId': ['', Validators.required]\n    });\n  }\n\n  /**\n   * Sets all select dropdown options.\n   */\n  setOptions() {\n    this.interestCompoundingPeriodTypeData = this.fixedDepositsAccountProductTemplate.interestCompoundingPeriodTypeOptions;\n    this.interestPostingPeriodTypeData = this.fixedDepositsAccountProductTemplate.interestPostingPeriodTypeOptions;\n    this.interestCalculationTypeData = this.fixedDepositsAccountProductTemplate.interestCalculationTypeOptions;\n    this.interestCalculationDaysInYearTypeData = this.fixedDepositsAccountProductTemplate.interestCalculationDaysInYearTypeOptions;\n    this.periodFrequencyTypeData = this.fixedDepositsAccountProductTemplate.periodFrequencyTypeOptions;\n  }\n\n  /**\n   * Returns fixed deposits account terms form value.\n   */\n  get fixedDepositAccountTerms() {\n    const fixedDepositAccountTerms = this.fixedDepositAccountTermsForm.value;\n    for (const key in fixedDepositAccountTerms) {\n      if (fixedDepositAccountTerms[key] === '') {\n        delete fixedDepositAccountTerms[key];\n      }\n    }\n    return fixedDepositAccountTerms;\n  }\n\n}\n","<form [formGroup]=\"fixedDepositAccountSettingsForm\">\n\n  <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n    <h4 fxFlex=\"98%\" class=\"mat-h4\">Lock-in Period</h4>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Frequency</mat-label>\n      <input type=\"number\" matInput formControlName=\"lockinPeriodFrequency\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Type</mat-label>\n      <mat-select formControlName=\"lockinPeriodFrequencyType\">\n        <mat-option *ngFor=\"let lockinPeriodFrequencyType of lockinPeriodFrequencyTypeData\"\n          [value]=\"lockinPeriodFrequencyType.id\">\n          {{ lockinPeriodFrequencyType.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <h4 fxFlex=\"98%\" class=\"mat-h4\">Minimum Deposit Term</h4>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Frequency</mat-label>\n      <input type=\"number\" matInput formControlName=\"minDepositTerm\" required>\n      <mat-error>\n        Minimum Deposit Term Frequency is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Frequency Type</mat-label>\n      <mat-select formControlName=\"minDepositTermTypeId\" required>\n        <mat-option *ngFor=\"let periodFrequencyType of periodFrequencyTypeData\" [value]=\"periodFrequencyType.id\">\n          {{ periodFrequencyType.value }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Minimum Deposit Term Frequency Type is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <h4 fxFlex=\"98%\" class=\"mat-h4\">And thereafter, in Multiples of</h4>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Frequency</mat-label>\n      <input type=\"number\" matInput formControlName=\"inMultiplesOfDepositTerm\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Type</mat-label>\n      <mat-select formControlName=\"inMultiplesOfDepositTermTypeId\">\n        <mat-option *ngFor=\"let periodFrequencyType of periodFrequencyTypeData\" [value]=\"periodFrequencyType.id\">\n          {{ periodFrequencyType.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <h4 fxFlex=\"98%\" class=\"mat-h4\">Maximum Deposit Term</h4>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Frequency</mat-label>\n      <input type=\"number\" matInput formControlName=\"maxDepositTerm\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Type</mat-label>\n      <mat-select formControlName=\"maxDepositTermTypeId\">\n        <mat-option *ngFor=\"let periodFrequencyType of periodFrequencyTypeData\" [value]=\"periodFrequencyType.id\">\n          {{ periodFrequencyType.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-divider fxFlex=\"98%\"></mat-divider>\n\n    <h3 fxFlex=\"23%\" class=\"mat-h3\">Interest Transfer</h3>\n\n    <mat-checkbox fxFlex=\"32%\" labelPosition=\"before\" formControlName=\"transferInterestToSavings\" class=\"margin-b\">\n      Transfer Interest to Linked Savings Account?\n    </mat-checkbox>\n\n    <mat-form-field fxFlex=\"48%\" *ngIf=\"fixedDepositAccountSettingsForm.contains('linkAccountId')\" class=\"margin-b\">\n      <mat-label>Link Savings Account</mat-label>\n      <mat-select formControlName=\"linkAccountId\" required>\n        <mat-option *ngFor=\"let account of savingsAccountsData\" [value]=\"account.id\">\n          {{ account.accountNo }}\n        </mat-option>\n      </mat-select>\n      <mat-error>\n        Linked Savings Account is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <mat-divider fxFlex=\"98%\"></mat-divider>\n\n    <h4 fxFlex=\"23%\" class=\"mat-h4\">For Pre-mature closure</h4>\n\n    <mat-checkbox fxFlex=\"73%\" labelPosition=\"before\" formControlName=\"preClosurePenalApplicable\" class=\"margin-v\">\n      Apply Penal Interest (less)\n    </mat-checkbox>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Penal Interest (%)</mat-label>\n      <input type=\"number\" matInput formControlName=\"preClosurePenalInterest\">\n    </mat-form-field>\n\n    <mat-form-field fxFlex=\"48%\">\n      <mat-label>Period</mat-label>\n      <mat-select formControlName=\"preClosurePenalInterestOnTypeId\">\n        <mat-option *ngFor=\"let preClosurePenalInterestOnType of preClosurePenalInterestOnTypeData\"\n          [value]=\"preClosurePenalInterestOnType.id\">\n          {{ preClosurePenalInterestOnType.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <ng-container *ngIf=\"fixedDepositAccountSettingsForm.controls.withHoldTax\">\n\n      <mat-divider fxFlex=\"98%\"></mat-divider>\n\n      <mat-checkbox fxFlex=\"48%\" labelPosition=\"before\" formControlName=\"withHoldTax\" class=\"margin-p\">\n        Is Withhold Tax Applicable?\n      </mat-checkbox>\n\n      <mat-form-field fxFlex=\"48%\" *ngIf=\"fixedDepositAccountSettingsForm.controls.taxGroupId\" class=\"p-b-25\">\n        <mat-label>Tax Group</mat-label>\n        <input matInput formControlName=\"taxGroupId\">\n      </mat-form-field>\n\n    </ng-container>\n\n  </div>\n\n  <div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n    <button mat-raised-button matStepperPrevious>\n      <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n      Previous\n    </button>\n    <button mat-raised-button matStepperNext>\n      Next&nbsp;&nbsp;\n      <fa-icon icon=\"arrow-right\"></fa-icon>\n    </button>\n  </div>\n\n</form>\n","/** Angular Imports */\nimport { Component, OnInit, Input, OnChanges } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/**\n * Fixed Deposits Account Settings Step\n */\n@Component({\n  selector: 'mifosx-fixed-deposit-account-settings-step',\n  templateUrl: './fixed-deposit-account-settings-step.component.html',\n  styleUrls: ['./fixed-deposit-account-settings-step.component.scss']\n})\nexport class FixedDepositAccountSettingsStepComponent implements OnInit, OnChanges {\n\n  /** Fixed deposits account template */\n  @Input() fixedDepositsAccountTemplate: any;\n  /** Fixed deposits account and product template */\n  @Input() fixedDepositsAccountProductTemplate: any;\n\n  /** Minimum date allowed. */\n  minDate = new Date(2000, 0, 1);\n  /** Maximum date allowed. */\n  maxDate = new Date();\n  /** Fixed Deposits Account Settings Form */\n  fixedDepositAccountSettingsForm: FormGroup;\n  /** Lockin Period Frequency Type Data */\n  lockinPeriodFrequencyTypeData: any;\n  /** Period Frequency Type Data */\n  periodFrequencyTypeData: any;\n  /** Pre Closure Penal Data */\n  preClosurePenalInterestOnTypeData: any;\n  /** Savings Accounts Data */\n  savingsAccountsData: any;\n\n  /**\n   * @param {FormBuilder} formBuilder Form Builder\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private formBuilder: FormBuilder,\n    private settingsService: SettingsService) {\n    this.createFixedDepositAccountSettingsForm();\n    this.buildDependencies();\n  }\n\n  ngOnChanges() {\n    if (this.fixedDepositsAccountProductTemplate) {\n      this.fixedDepositAccountSettingsForm.patchValue({\n        'minDepositTerm': this.fixedDepositsAccountProductTemplate.minDepositTerm,\n        'minDepositTermTypeId': this.fixedDepositsAccountProductTemplate.minDepositTermType ? this.fixedDepositsAccountProductTemplate.minDepositTermType.id : '',\n        'inMultiplesOfDepositTerm': this.fixedDepositsAccountProductTemplate.inMultiplesOfDepositTerm,\n        'inMultiplesOfDepositTermTypeId': this.fixedDepositsAccountProductTemplate.inMultiplesOfDepositTermType ? this.fixedDepositsAccountProductTemplate.inMultiplesOfDepositTermType.id : '',\n        'maxDepositTerm': this.fixedDepositsAccountProductTemplate.maxDepositTerm,\n        'maxDepositTermTypeId': this.fixedDepositsAccountProductTemplate.maxDepositTermType ? this.fixedDepositsAccountProductTemplate.maxDepositTermType.id : '',\n        'preClosurePenalApplicable': this.fixedDepositsAccountProductTemplate.preClosurePenalApplicable,\n        'preClosurePenalInterest': this.fixedDepositsAccountProductTemplate.preClosurePenalInterest,\n        'preClosurePenalInterestOnTypeId': this.fixedDepositsAccountProductTemplate.preClosurePenalInterestOnType ? this.fixedDepositsAccountProductTemplate.preClosurePenalInterestOnType.id : ''\n      });\n      if (this.fixedDepositsAccountProductTemplate.withHoldTax) {\n        this.fixedDepositAccountSettingsForm.addControl('withHoldTax', new FormControl(false));\n        this.fixedDepositAccountSettingsForm.get('withHoldTax').valueChanges.subscribe((value: boolean) => {\n          if (value) {\n            this.fixedDepositAccountSettingsForm.addControl('taxGroupId', new FormControl({ value: '', disabled: true }));\n            this.fixedDepositAccountSettingsForm.get('taxGroupId').patchValue(this.fixedDepositsAccountProductTemplate.taxGroup && this.fixedDepositsAccountProductTemplate.taxGroup.name);\n          } else {\n            this.fixedDepositAccountSettingsForm.removeControl('taxGroupId');\n          }\n        });\n        this.fixedDepositAccountSettingsForm.get('withHoldTax').patchValue(this.fixedDepositsAccountTemplate.withHoldTax);\n      } else {\n        this.fixedDepositAccountSettingsForm.removeControl('withHoldTax');\n      }\n      this.setOptions();\n    }\n  }\n\n  ngOnInit() {\n    this.maxDate = this.settingsService.businessDate;\n    if (this.fixedDepositsAccountTemplate) {\n      this.fixedDepositAccountSettingsForm.patchValue({\n        'lockinPeriodFrequency': this.fixedDepositsAccountTemplate.lockinPeriodFrequency,\n        'lockinPeriodFrequencyType': this.fixedDepositsAccountTemplate.lockinPeriodFrequencyType && this.fixedDepositsAccountTemplate.lockinPeriodFrequencyType.id,\n        'transferInterestToSavings': this.fixedDepositsAccountTemplate.transferInterestToSavings\n      });\n    }\n  }\n\n  /**\n   * Creates fixed deposits account terms form.\n   */\n  createFixedDepositAccountSettingsForm() {\n    this.fixedDepositAccountSettingsForm = this.formBuilder.group({\n      'lockinPeriodFrequency': [''],\n      'lockinPeriodFrequencyType': [''],\n      'minDepositTerm': [{value: '', disabled: true}],\n      'minDepositTermTypeId': [{ value: '', disabled: true }],\n      'inMultiplesOfDepositTerm': [{ value: '', disabled: true }],\n      'inMultiplesOfDepositTermTypeId': [{ value: '', disabled: true }],\n      'maxDepositTerm': [{ value: '', disabled: true }],\n      'maxDepositTermTypeId': [{ value: '', disabled: true }],\n      'transferInterestToSavings': [false],\n      'preClosurePenalApplicable': [{ value: '', disabled: true }],\n      'preClosurePenalInterest': [{ value: '', disabled: true }],\n      'preClosurePenalInterestOnTypeId': [{ value: '', disabled: true }]\n    });\n  }\n\n  /**\n   * Subscribes to value changes and sets new form controls accordingly.\n   */\n  buildDependencies() {\n    this.fixedDepositAccountSettingsForm.get('transferInterestToSavings').valueChanges.subscribe((value: boolean) => {\n      if (value) {\n        this.fixedDepositAccountSettingsForm.addControl('linkAccountId', new FormControl('', Validators.required));\n        this.fixedDepositAccountSettingsForm.get('linkAccountId').patchValue(this.fixedDepositsAccountTemplate.linkedAccount && this.fixedDepositsAccountTemplate.linkedAccount.id);\n      } else {\n        this.fixedDepositAccountSettingsForm.removeControl('linkAccountId');\n      }\n    });\n  }\n\n  /**\n   * Sets all select dropdown options.\n   */\n  setOptions() {\n    this.lockinPeriodFrequencyTypeData = this.fixedDepositsAccountProductTemplate.lockinPeriodFrequencyTypeOptions;\n    this.periodFrequencyTypeData = this.fixedDepositsAccountProductTemplate.periodFrequencyTypeOptions;\n    this.savingsAccountsData = this.fixedDepositsAccountProductTemplate.savingsAccounts;\n    this.preClosurePenalInterestOnTypeData = this.fixedDepositsAccountProductTemplate.preClosurePenalInterestOnTypeOptions;\n  }\n\n  /**\n   * Returns fixed deposits account settings form value.\n   */\n  get fixedDepositAccountSettings() {\n    const fixedDepositAccountSettings = this.fixedDepositAccountSettingsForm.getRawValue();\n    for (const key in fixedDepositAccountSettings) {\n      if (fixedDepositAccountSettings[key] === '' || key === 'taxGroupId') {\n        delete fixedDepositAccountSettings[key];\n      }\n    }\n    return fixedDepositAccountSettings;\n  }\n\n}\n","<div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\n\n  <mat-form-field fxFlex=\"48%\">\n    <mat-label>Charge</mat-label>\n    <mat-select #charge>\n      <mat-option *ngFor=\"let charge of chargeData | chargesFilter:chargesDataSource:currencyCode.value\"\n        [value]=\"charge\">\n        {{ charge.name }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n\n  <div fxFlex=\"48%\" fxFlexAlign=\"center\">\n    <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"addCharge(charge)\" [disabled]=\"!charge.value\">\n      <fa-icon icon=\"plus\" class=\"m-r-10\"></fa-icon>\n      Add\n    </button>\n  </div>\n\n  <table fxFlex=\"98%\" class=\"mat-elevation-z1\" mat-table [dataSource]=\"chargesDataSource\" [hidden]=\"chargesDataSource.length === 0\">\n\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef> Name </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.name + ', ' + charge.currency.displaySymbol }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"chargeCalculationType\">\n      <th mat-header-cell *matHeaderCellDef> Type </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.chargeCalculationType.value }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"amount\">\n      <th mat-header-cell *matHeaderCellDef> Amount </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.amount }}\n        <button mat-icon-button color=\"primary\" (click)=\"editChargeAmount(charge)\">\n          <fa-icon icon=\"pen\"></fa-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"chargeTimeType\">\n      <th mat-header-cell *matHeaderCellDef> Collected On </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.chargeTimeType.value }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"date\">\n      <th mat-header-cell *matHeaderCellDef> Date </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        <span *ngIf=\"charge.chargeTimeType.value === 'Specified due date' || charge.chargeTimeType.value === 'Weekly Fee'\">\n          {{(charge.dueDate  | dateFormat) || 'Unassigned*'}}\n        </span>\n        <span *ngIf=\"charge.chargeTimeType.value === 'Monthly Fee' || charge.chargeTimeType.value === 'Annual Fee'\">\n          {{charge.feeOnMonthDay ? ([2000].concat(charge.feeOnMonthDay)  | dateFormat: 'dd MMMM') : 'Unassigned'}}\n        </span>\n        <span *ngIf=\"!(charge.chargeTimeType.value === 'Monthly Fee' || charge.chargeTimeType.value === 'Annual Fee'\n                || charge.chargeTimeType.value === 'Specified due date' || charge.chargeTimeType.value === 'Weekly Fee')\">\n          N/A\n        </span>\n        <button mat-icon-button color=\"primary\" *ngIf=\"charge.chargeTimeType.value === 'Weekly Fee' || charge.chargeTimeType.value === 'Annual Fee'\n                      || charge.chargeTimeType.value === 'Specified due date'\" (click)=\"editChargeDate(charge)\">\n          <fa-icon icon=\"pen\"></fa-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"repaymentsEvery\">\n      <th mat-header-cell *matHeaderCellDef> Repayments Every </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        {{ charge.feeInterval || 'Not Provided' }}\n        <button mat-icon-button color=\"primary\"\n          *ngIf=\"charge.chargeTimeType.value === 'Weekly Fee' || charge.chargeTimeType.value === 'Monthly Fee'\"\n          (click)=\"editChargeFeeInterval(charge)\">\n          <fa-icon icon=\"pen\"></fa-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"action\">\n      <th mat-header-cell *matHeaderCellDef> Actions </th>\n      <td mat-cell *matCellDef=\"let charge\">\n        <button mat-icon-button color=\"warn\" (click)=\"deleteCharge(charge)\">\n          <fa-icon icon=\"trash\"></fa-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n  </table>\n\n</div>\n\n<div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n  <button mat-raised-button matStepperPrevious>\n    <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n    Previous\n  </button>\n  <button mat-raised-button matStepperNext [disabled]=\"!fixedDepositAccountFormValid\">\n    Next&nbsp;&nbsp;\n    <fa-icon icon=\"arrow-right\"></fa-icon>\n  </button>\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, Input, OnChanges } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\n\n/** Dialog Components */\nimport { FormDialogComponent } from 'app/shared/form-dialog/form-dialog.component';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Custom Services */\nimport { DatepickerBase } from 'app/shared/form-dialog/formfield/model/datepicker-base';\nimport { FormfieldBase } from 'app/shared/form-dialog/formfield/model/formfield-base';\nimport { InputBase } from 'app/shared/form-dialog/formfield/model/input-base';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Fixed Deposit Account Charges Step\n */\n@Component({\n  selector: 'mifosx-fixed-deposit-account-charges-step',\n  templateUrl: './fixed-deposit-account-charges-step.component.html',\n  styleUrls: ['./fixed-deposit-account-charges-step.component.scss']\n})\nexport class FixedDepositAccountChargesStepComponent implements OnInit, OnChanges {\n\n  /** Fixed deposits account template */\n  @Input() fixedDepositsAccountTemplate: any;\n  /** Fixed deposits account and product template */\n  @Input() fixedDepositsAccountProductTemplate: any;\n  /** Validity of fixed depsits account form */\n  @Input() fixedDepositAccountFormValid: boolean;\n  /** Currency Code */\n  @Input() currencyCode: FormControl;\n\n  /** Charges Data */\n  chargeData: any;\n  /** Charges Data Source */\n  chargesDataSource: {}[] = [];\n  /** Charges table columns */\n  displayedColumns: string[] = ['name', 'chargeCalculationType', 'amount', 'chargeTimeType', 'date', 'repaymentsEvery', 'action'];\n  /** For Edit Fixed Deposits Account Form */\n  isChargesPatched = false;\n  /** Component is pristine if there has been no changes by user interaction */\n  pristine = true;\n\n  /**\n   * @param {MatDialog} dialog Mat Dialog\n   * @param {Dates} dateUtils Date Utils\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(public dialog: MatDialog,\n              private dateUtils: Dates,\n              private settingsService: SettingsService) { }\n\n  ngOnInit() {\n    this.currencyCode.valueChanges.subscribe(() => {\n      if (!this.isChargesPatched && this.fixedDepositsAccountTemplate.charges) {\n        this.chargesDataSource = this.fixedDepositsAccountTemplate.charges.map((charge: any) => ({...charge, id: charge.chargeId})) || [];\n        this.isChargesPatched = true;\n      } else {\n        this.chargesDataSource = [];\n      }\n    });\n  }\n\n  ngOnChanges() {\n    if (this.fixedDepositsAccountProductTemplate) {\n      this.chargeData = this.fixedDepositsAccountProductTemplate.chargeOptions;\n    }\n   }\n\n  /**\n   * Add a charge\n   */\n  addCharge(charge: any) {\n    this.chargesDataSource = this.chargesDataSource.concat([charge.value]);\n    charge.value = '';\n    this.pristine = false;\n  }\n\n  /**\n   * Edits the Charge Amount\n   * @param {any} charge Charge\n   */\n  editChargeAmount(charge: any) {\n    const formfields: FormfieldBase[] = [\n      new InputBase({\n        controlName: 'amount',\n        label: 'Amount',\n        value: charge.amount,\n        type: 'number',\n        required: false\n      }),\n    ];\n    const data = {\n      title: 'Edit Charge Amount',\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editChargeAmountDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editChargeAmountDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const newCharge = { ...charge, amount: response.data.value.amount };\n        this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1, newCharge);\n        this.chargesDataSource = this.chargesDataSource.concat([]);\n      }\n    });\n    this.pristine = false;\n  }\n\n  /**\n   * Edits the Charge Date\n   * @param {any} charge Charge\n   */\n  editChargeDate(charge: any) {\n    const formfields: FormfieldBase[] = [\n      new DatepickerBase({\n        controlName: 'date',\n        label: 'Date',\n        value: charge.dueDate || charge.feeOnMonthDay || '',\n        type: 'datetime-local',\n        required: false\n      }),\n    ];\n    const data = {\n      title: 'Edit Charge Date',\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editChargeDateDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editChargeDateDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        let newCharge: any;\n        const dateFormat = this.settingsService.dateFormat;\n        const date = this.dateUtils.formatDate(response.data.value.date, dateFormat);\n        switch (charge.chargeTimeType.value) {\n          case 'Specified due date':\n          case 'Weekly Fee':\n            newCharge = { ...charge, dueDate: date };\n            break;\n          case 'Annual Fee':\n            newCharge = { ...charge, feeOnMonthDay: date };\n            break;\n        }\n        this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1, newCharge);\n        this.chargesDataSource = this.chargesDataSource.concat([]);\n      }\n    });\n    this.pristine = false;\n  }\n\n  /**\n   * Edits the Charge Fee Interval\n   * @param {any} charge Charge\n   */\n  editChargeFeeInterval(charge: any) {\n    const formfields: FormfieldBase[] = [\n      new InputBase({\n        controlName: 'feeInterval',\n        label: 'Fee Interval',\n        value: charge.feeInterval,\n        type: 'text',\n        required: false\n      }),\n    ];\n    const data = {\n      title: 'Edit Charge Fee Interval',\n      layout: { addButtonText: 'Confirm' },\n      formfields: formfields\n    };\n    const editChargeFeeIntervalDialogRef = this.dialog.open(FormDialogComponent, { data });\n    editChargeFeeIntervalDialogRef.afterClosed().subscribe((response: any) => {\n      if (response.data) {\n        const newCharge = { ...charge, feeInterval: response.data.value.feeInterval };\n        this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1, newCharge);\n        this.chargesDataSource = this.chargesDataSource.concat([]);\n      }\n    });\n    this.pristine = false;\n  }\n\n  /**\n   * Delete a particular charge\n   * @param charge Charge\n   */\n  deleteCharge(charge: any) {\n    this.chargesDataSource.splice(this.chargesDataSource.indexOf(charge), 1);\n    this.chargesDataSource = this.chargesDataSource.concat([]);\n    this.pristine = false;\n  }\n\n  /**\n   * Returns Fixed Deposits Account Charges Form\n   */\n  get fixedDepositAccountCharges() {\n    return { charges: this.chargesDataSource };\n  }\n\n}\n","<div fxLayout=\"column\" fxLayoutGap=\"2%\">\n\n  <div fxFlexFill *ngIf=\"fixedDepositsAccountProductTemplate?.accountChart.name\">\n    <span fxFlex=\"40%\">Name:</span>\n    <span fxFlex=\"60%\">{{ fixedDepositsAccountProductTemplate.accountChart.name }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Valid from Date:</span>\n    <span fxFlex=\"60%\">{{ fixedDepositsAccountProductTemplate?.accountChart.fromDate  | dateFormat }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"fixedDepositsAccountProductTemplate?.accountChart.endDate\">\n    <span fxFlex=\"40%\">End Date:</span>\n    <span fxFlex=\"60%\">{{ fixedDepositsAccountProductTemplate?.accountChart.endDate  | dateFormat }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"fixedDepositsAccountProductTemplate?.accountChart.description\">\n    <span fxFlex=\"40%\">Description:</span>\n    <span fxFlex=\"60%\">{{ fixedDepositsAccountProductTemplate?.accountChart.description }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Primary Grouping by Amount:</span>\n    <span fxFlex=\"60%\">{{ fixedDepositsAccountProductTemplate?.accountChart.isPrimaryGroupingByAmount ? 'Yes' : 'No' }}</span>\n  </div>\n\n  <table class=\"mat-elevation-z1\" mat-table [dataSource]=\"interestRateChartData\" #chartsTable multiTemplateDataRows>\n\n    <ng-container matColumnDef=\"period\">\n      <th mat-header-cell *matHeaderCellDef> Period </th>\n      <td mat-cell *matCellDef=\"let chartSlab\">\n        {{chartSlab.fromPeriod}}-{{chartSlab.toPeriod}}&nbsp;{{chartSlab.periodType.value}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"amountRange\">\n      <th mat-header-cell *matHeaderCellDef> Amount Range </th>\n      <td mat-cell *matCellDef=\"let chartSlab\">{{chartSlab.amountRangeFrom}}-{{chartSlab.amountRangeTo}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"interest\">\n      <th mat-header-cell *matHeaderCellDef> Interest </th>\n      <td mat-cell *matCellDef=\"let chartSlab\"> {{ chartSlab.annualInterestRate }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"description\">\n      <th mat-header-cell *matHeaderCellDef> Description </th>\n      <td mat-cell *matCellDef=\"let chartSlab\"> {{ chartSlab.description }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"actions\">\n      <th mat-header-cell *matHeaderCellDef> Actions </th>\n      <td mat-cell *matCellDef=\"let chartSlab; let chartSlabIndex = dataIndex\">\n        <button mat-button color=\"primary\" (click)=\"expandChartSlabIndex = expandChartSlabIndex === chartSlabIndex ? null : chartSlabIndex\">\n          <span *ngIf=\"expandChartSlabIndex !== chartSlabIndex\">\n            <fa-icon icon=\"eye\" class=\"m-r-10\"></fa-icon>\n            View Incentives\n          </span>\n          <span *ngIf=\"expandChartSlabIndex === chartSlabIndex\">\n            <fa-icon icon=\"eye-slash\" class=\"m-r-10\"></fa-icon>\n            Hide Incentives\n          </span>\n        </button>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"incentives\">\n      <td mat-cell *matCellDef=\"let chartSlab; let chartSlabIndex = dataIndex\" [attr.colspan]=\"chartSlabsDisplayedColumns.length\">\n\n        <div fxLayout=\"row wrap\" fxFlexFill class=\"incentives\" [@expandChartSlab]=\"chartSlabIndex === expandChartSlabIndex ? 'expanded' : 'collapsed'\">\n\n          <mat-card fxLayout=\"row wrap\" fxFlexFill>\n\n            <h4 class=\"m-b-10\" fxFlex=\"13%\">\n              Incentives\n            </h4>\n\n            <table fxFlexFill class=\"mat-elevation-z1\" mat-table [dataSource]=\"chartSlab.incentives\" *ngIf=\"chartSlab.incentives.length\">\n\n              <ng-container matColumnDef=\"entityType\">\n                <th mat-header-cell *matHeaderCellDef> Entity Type </th>\n                <td mat-cell *matCellDef=\"let incentive\">\n                  {{ incentive.entityType.value }}\n                </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"attributeName\">\n                <th mat-header-cell *matHeaderCellDef> Attribute Name </th>\n                <td mat-cell *matCellDef=\"let incentive\">\n                  {{ incentive.attributeName.value }}\n                </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"conditionType\">\n                <th mat-header-cell *matHeaderCellDef> Condition Type </th>\n                <td mat-cell *matCellDef=\"let incentive\">\n                  {{ incentive.conditionType.value | titlecase }}\n                </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"attributeValue\">\n                <th mat-header-cell *matHeaderCellDef> Attribute Value </th>\n                <td mat-cell *matCellDef=\"let incentive\" [ngSwitch]=\"incentive.attributeName\">\n                  {{ incentive.attributeValueDesc }}\n                </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"incentiveType\">\n                <th mat-header-cell *matHeaderCellDef> Incentive Type </th>\n                <td mat-cell *matCellDef=\"let incentive\">\n                  {{ incentive.incentiveType.value }}\n                </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"amount\">\n                <th mat-header-cell *matHeaderCellDef> Interest </th>\n                <td mat-cell *matCellDef=\"let incentive\">\n                  {{ incentive.amount }}\n                </td>\n              </ng-container>\n\n              <tr mat-header-row *matHeaderRowDef=\"incentivesDisplayedColumns\"></tr>\n              <tr mat-row *matRowDef=\"let row; columns: incentivesDisplayedColumns;\"></tr>\n\n            </table>\n\n          </mat-card>\n        </div>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"chartSlabsDisplayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: chartSlabsDisplayedColumns;\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: chartSlabsIncentivesDisplayedColumns;\" class=\"incentives-row\"></tr>\n\n  </table>\n\n</div>\n\n<div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n  <button mat-raised-button matStepperPrevious>\n    <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n    Previous\n  </button>\n  <button mat-raised-button matStepperNext>\n    Next&nbsp;&nbsp;\n    <fa-icon icon=\"arrow-right\"></fa-icon>\n  </button>\n</div>\n","/** Angular Imports */\nimport { Component, Input, OnChanges, ViewChild } from '@angular/core';\nimport { MatTableDataSource, MatTable } from '@angular/material/table';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n/**\n * Fixed Deposits Account Interest Rate Chart Step\n */\n@Component({\n  selector: 'mifosx-fixed-deposit-account-interest-rate-chart-step',\n  templateUrl: './fixed-deposit-account-interest-rate-chart-step.component.html',\n  styleUrls: ['./fixed-deposit-account-interest-rate-chart-step.component.scss'],\n  animations: [\n    trigger('expandChartSlab', [\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\n      state('expanded', style({ height: '*' })),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n  ]\n})\nexport class FixedDepositAccountInterestRateChartStepComponent implements OnChanges {\n\n  /** Fixed deposits account template */\n  @Input() fixedDepositsAccountTemplate: any;\n  /** Fixed deposits account and product template */\n  @Input() fixedDepositsAccountProductTemplate: any;\n\n  /** Interest Rate Chart Data */\n  interestRateChartData: any = [];\n  /** Columns to be displayed in interest rate chart table. */\n  chartSlabsDisplayedColumns: any[] = ['period', 'amountRange', 'interest', 'description', 'actions'];\n  /** Columns to be displayed in incentives sub-table. */\n  incentivesDisplayedColumns: string[] = ['entityType', 'attributeName', 'conditionType', 'attributeValue', 'incentiveType', 'amount'];\n  /** Additional Column to disblac incentives table  */\n  chartSlabsIncentivesDisplayedColumns: string[] = ['incentives'];\n  /** Expand Chart Slab Index used in the view */\n  expandChartSlabIndex: number;\n\n  /** Interest Rate charts table reference */\n  @ViewChild('chartsTable', { static: true }) chartsTableRef: MatTable<Element>;\n\n  constructor() { }\n\n  ngOnChanges() {\n    if (this.fixedDepositsAccountProductTemplate) {\n      this.interestRateChartData = this.fixedDepositsAccountProductTemplate.accountChart.chartSlabs;\n      this.chartsTableRef.renderRows();\n    }\n  }\n\n}\n","<div fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\n\n  <h3 class=\"mat-h3\" fxFlexFill>Details</h3>\n\n  <mat-divider fxFlexFill></mat-divider>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Product</span>\n    <span fxFlex=\"60%\">{{ fixedDepositAccountData.productId | find:fixedDepositsAccountTemplate.productOptions:'id':'name' }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Submitted On</span>\n    <span fxFlex=\"60%\">{{ fixedDepositAccountData.submittedOnDate  | dateFormat }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Field Officer</span>\n    <span fxFlex=\"60%\">{{ (fixedDepositAccountData.fieldOfficerId | find:fixedDepositsAccountProductTemplate.fieldOfficerOptions:'id':'displayName') || 'Unassigned' }}</span>\n  </div>\n\n  <h3 class=\"mat-h3\" fxFlexFill>Currency</h3>\n\n  <mat-divider fxFlexFill></mat-divider>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Currency</span>\n    <span fxFlex=\"60%\">{{ fixedDepositsAccountProductTemplate.currency.code }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Currency Multiple</span>\n    <span fxFlex=\"60%\">{{ fixedDepositsAccountProductTemplate.currency.inMultiplesOf }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Decimal Places</span>\n    <span fxFlex=\"60%\">{{ fixedDepositsAccountProductTemplate.currency.decimalPlaces }}</span>\n  </div>\n\n  <h3 class=\"mat-h3\" fxFlexFill>Terms</h3>\n\n  <mat-divider fxFlexFill></mat-divider>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Fixed Deposit Amount:</span>\n    <span fxFlex=\"60%\">{{ fixedDepositAccountData.depositAmount }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Deposit Period:</span>\n    <span fxFlex=\"60%\">{{ fixedDepositAccountData.depositPeriod + ' ' + (fixedDepositAccountData.depositPeriodFrequencyId | find:fixedDepositsAccountProductTemplate.periodFrequencyTypeOptions:'id':'value') }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Interest Compounding Period:</span>\n    <span fxFlex=\"60%\">{{ fixedDepositAccountData.interestCompoundingPeriodType | find:fixedDepositsAccountProductTemplate.interestCompoundingPeriodTypeOptions:'id':'value' }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Interest Posting Period:</span>\n    <span fxFlex=\"60%\">{{ fixedDepositAccountData.interestPostingPeriodType | find:fixedDepositsAccountProductTemplate.interestPostingPeriodTypeOptions:'id':'value' }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Interest Calculated using:</span>\n    <span fxFlex=\"60%\">{{ fixedDepositAccountData.interestCalculationType | find:fixedDepositsAccountProductTemplate.interestCalculationTypeOptions:'id':'value' }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Days in Year:</span>\n    <span fxFlex=\"60%\">{{ fixedDepositAccountData.interestCalculationDaysInYearType | find:fixedDepositsAccountProductTemplate.interestCalculationDaysInYearTypeOptions:'id':'value' }}</span>\n  </div>\n\n  <h3 class=\"mat-h3\" fxFlexFill>Settings</h3>\n\n  <mat-divider fxFlexFill></mat-divider>\n\n  <div fxFlexFill *ngIf=\"fixedDepositAccountData.lockinPeriodFrequency\">\n    <span fxFlex=\"40%\">Lock-in Period:</span>\n    <span fxFlex=\"60%\">{{ fixedDepositAccountData.lockinPeriodFrequency + ' ' + (fixedDepositAccountData.lockinPeriodFrequencyType | find:fixedDepositsAccountProductTemplate.lockinPeriodFrequencyTypeOptions:'id':'value') }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"fixedDepositsAccountProductTemplate.minDepositTerm\">\n    <span fxFlex=\"40%\">Minimum Deposit Term:</span>\n    <span fxFlex=\"60%\">{{ fixedDepositsAccountProductTemplate.minDepositTerm + ' ' + (fixedDepositsAccountProductTemplate.minDepositTermType?.value || '') }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"fixedDepositsAccountProductTemplate.inMultiplesOfDepositTerm\">\n    <span fxFlex=\"40%\">In Multiples Of:</span>\n    <span fxFlex=\"60%\">{{ fixedDepositsAccountProductTemplate.inMultiplesOfDepositTerm + ' ' + (fixedDepositsAccountProductTemplate.inMultiplesOfDepositTermType?.value || '') }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"fixedDepositsAccountProductTemplate.maxDepositTerm\">\n    <span fxFlex=\"40%\">Maximum Deposit Term</span>\n    <span fxFlex=\"60%\">{{ fixedDepositsAccountProductTemplate.maxDepositTerm + ' ' + (fixedDepositsAccountProductTemplate.maxDepositTermType?.value || '') }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Transfer Interest to Savings Account?</span>\n    <span fxFlex=\"60%\">{{ fixedDepositAccountData.transferInterestToSavings ? 'Yes' : 'No' }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"fixedDepositAccountData.transferInterestToSavings\">\n    <span fxFlex=\"40%\">Linked Savings Account</span>\n    <span fxFlex=\"60%\">{{ fixedDepositAccountData.linkAccountId | find:fixedDepositsAccountProductTemplate.savingsAccounts:'id':'accountNo' }}</span>\n  </div>\n\n  <div fxFlexFill>\n    <span fxFlex=\"40%\">Apply Penal Interest (less):</span>\n    <span fxFlex=\"60%\">{{ fixedDepositsAccountProductTemplate.preClosurePenalApplicable ? 'Yes' : 'No' }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"fixedDepositsAccountProductTemplate.preClosurePenalApplicable\">\n    <span fxFlex=\"40%\">Penal Interest (%):</span>\n    <span fxFlex=\"60%\">{{ fixedDepositsAccountProductTemplate.preClosurePenalInterest + '% (' + (fixedDepositsAccountProductTemplate.preClosurePenalInterestOnType?.id) + ')' }}</span>\n  </div>\n\n  <div fxFlexFill *ngIf=\"fixedDepositsAccountProductTemplate.withHoldTax\">\n    <span fxFlex=\"40%\">Withhold Tax is Applicable:</span>\n    <span fxFlex=\"60%\">{{ fixedDepositAccountData.withHoldTax ? 'Yes' : 'No' }}</span>\n  </div>\n\n  <h3 class=\"mat-h3\" fxFlexFill>Interest Rate Chart</h3>\n\n  <mat-divider fxFlexFill></mat-divider>\n\n  <div class=\"margin-b\" fxFlexFill fxLayout=\"column\">\n\n    <div fxFlexFill *ngIf=\"fixedDepositsAccountProductTemplate?.accountChart.name\">\n      <span fxFlex=\"40%\">Name:</span>\n      <span fxFlex=\"60%\">{{ fixedDepositsAccountProductTemplate?.accountChart.name }}</span>\n    </div>\n\n    <div fxFlexFill>\n      <span fxFlex=\"40%\">Valid from Date:</span>\n      <span fxFlex=\"60%\">{{ fixedDepositsAccountProductTemplate?.accountChart.fromDate  | dateFormat }}</span>\n    </div>\n\n    <div fxFlexFill *ngIf=\"fixedDepositsAccountProductTemplate?.accountChart.endDate\">\n      <span fxFlex=\"40%\">End Date:</span>\n      <span fxFlex=\"60%\">{{ fixedDepositsAccountProductTemplate?.accountChart.endDate  | dateFormat }}</span>\n    </div>\n\n    <div fxFlexFill *ngIf=\"fixedDepositsAccountProductTemplate?.accountChart.description\">\n      <span fxFlex=\"40%\">Description:</span>\n      <span fxFlex=\"60%\">{{ fixedDepositsAccountProductTemplate?.accountChart.description }}</span>\n    </div>\n\n    <div fxFlexFill>\n      <span fxFlex=\"40%\">Primary Grouping by Amount:</span>\n      <span fxFlex=\"60%\">{{ fixedDepositsAccountProductTemplate?.accountChart.isPrimaryGroupingByAmount ? 'Yes' : 'No' }}</span>\n    </div>\n\n    <table class=\"mat-elevation-z1 irc-table\" mat-table [dataSource]=\"interestRateChartData\" multiTemplateDataRows>\n\n      <ng-container matColumnDef=\"period\">\n        <th mat-header-cell *matHeaderCellDef> Period </th>\n        <td mat-cell *matCellDef=\"let chartSlab\">\n          {{chartSlab.fromPeriod}}-{{chartSlab.toPeriod}}&nbsp;{{chartSlab.periodType.value}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"amountRange\">\n        <th mat-header-cell *matHeaderCellDef> Amount Range </th>\n        <td mat-cell *matCellDef=\"let chartSlab\">{{chartSlab.amountRangeFrom}}-{{chartSlab.amountRangeTo}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"interest\">\n        <th mat-header-cell *matHeaderCellDef> Interest </th>\n        <td mat-cell *matCellDef=\"let chartSlab\"> {{ chartSlab.annualInterestRate }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"description\">\n        <th mat-header-cell *matHeaderCellDef> Description </th>\n        <td mat-cell *matCellDef=\"let chartSlab\"> {{ chartSlab.description }} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef> Actions </th>\n        <td mat-cell *matCellDef=\"let chartSlab; let chartSlabIndex = dataIndex\">\n          <button mat-button color=\"primary\" (click)=\"expandChartSlabIndex = expandChartSlabIndex === chartSlabIndex ? null : chartSlabIndex\">\n            <span *ngIf=\"expandChartSlabIndex !== chartSlabIndex\">\n              <fa-icon icon=\"eye\" class=\"m-r-10\"></fa-icon>\n              View Incentives\n            </span>\n            <span *ngIf=\"expandChartSlabIndex === chartSlabIndex\">\n              <fa-icon icon=\"eye-slash\" class=\"m-r-10\"></fa-icon>\n              Hide Incentives\n            </span>\n          </button>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"incentives\">\n        <td mat-cell *matCellDef=\"let chartSlab; let chartSlabIndex = dataIndex\" [attr.colspan]=\"chartSlabsDisplayedColumns.length\">\n\n          <div fxLayout=\"row wrap\" fxFlexFill class=\"incentives\" [@expandChartSlab]=\"chartSlabIndex === expandChartSlabIndex ? 'expanded' : 'collapsed'\">\n\n            <mat-card fxLayout=\"row wrap\" fxFlexFill>\n\n              <h4 class=\"m-b-10\" fxFlex=\"13%\">\n                Incentives\n              </h4>\n\n              <table fxFlexFill class=\"mat-elevation-z1\" mat-table [dataSource]=\"chartSlab.incentives\" *ngIf=\"chartSlab.incentives.length\">\n\n                <ng-container matColumnDef=\"entityType\">\n                  <th mat-header-cell *matHeaderCellDef> Entity Type </th>\n                  <td mat-cell *matCellDef=\"let incentive\">\n                    {{ incentive.entityType.value }}\n                  </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"attributeName\">\n                  <th mat-header-cell *matHeaderCellDef> Attribute Name </th>\n                  <td mat-cell *matCellDef=\"let incentive\">\n                    {{ incentive.attributeName.value }}\n                  </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"conditionType\">\n                  <th mat-header-cell *matHeaderCellDef> Condition Type </th>\n                  <td mat-cell *matCellDef=\"let incentive\">\n                    {{ incentive.conditionType.value | titlecase }}\n                  </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"attributeValue\">\n                  <th mat-header-cell *matHeaderCellDef> Attribute Value </th>\n                  <td mat-cell *matCellDef=\"let incentive\" [ngSwitch]=\"incentive.attributeName\">\n                    {{ incentive.attributeValueDesc }}\n                  </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"incentiveType\">\n                  <th mat-header-cell *matHeaderCellDef> Incentive Type </th>\n                  <td mat-cell *matCellDef=\"let incentive\">\n                    {{ incentive.incentiveType.value }}\n                  </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"amount\">\n                  <th mat-header-cell *matHeaderCellDef> Interest </th>\n                  <td mat-cell *matCellDef=\"let incentive\">\n                    {{ incentive.amount }}\n                  </td>\n                </ng-container>\n\n                <tr mat-header-row *matHeaderRowDef=\"incentivesDisplayedColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: incentivesDisplayedColumns;\"></tr>\n\n              </table>\n\n            </mat-card>\n          </div>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"chartSlabsDisplayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: chartSlabsDisplayedColumns;\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: chartSlabsIncentivesDisplayedColumns;\" class=\"incentives-row\"></tr>\n\n    </table>\n\n  </div>\n\n  <div fxFlexFill *ngIf=\"fixedDepositAccountData.charges.length\" fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\n\n    <h3 class=\"mat-h3\" fxFlexFill>Charges</h3>\n\n    <mat-divider fxFlexFill></mat-divider>\n\n    <table fxFlexFill class=\"mat-elevation-z1\" mat-table [dataSource]=\"fixedDepositAccountData.charges\">\n\n      <ng-container matColumnDef=\"name\">\n        <th mat-header-cell *matHeaderCellDef> Name </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.name + ', ' + charge.currency.displaySymbol }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"chargeCalculationType\">\n        <th mat-header-cell *matHeaderCellDef> Type </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.chargeCalculationType.value }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"amount\">\n        <th mat-header-cell *matHeaderCellDef> Amount </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.amount }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"date\">\n        <th mat-header-cell *matHeaderCellDef> Date </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          <span\n            *ngIf=\"charge.chargeTimeType.value === 'Specified due date' || charge.chargeTimeType.value === 'Weekly Fee'\">\n            {{(charge.dueDate  | dateFormat) || 'Unassigned'}}\n          </span>\n          <span *ngIf=\"charge.chargeTimeType.value === 'Monthly Fee' || charge.chargeTimeType.value === 'Annual Fee'\">\n            {{charge.feeOnMonthDay ? ([2000].concat(charge.feeOnMonthDay)  | dateFormat: 'dd MMMM') : 'Unassigned'}}\n          </span>\n          <span\n            *ngIf=\"!(charge.chargeTimeType.value === 'Monthly Fee' || charge.chargeTimeType.value === 'Annual Fee'\n              || charge.chargeTimeType.value === 'Specified due date' || charge.chargeTimeType.value === 'Weekly Fee')\">\n            N/A\n          </span>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"repaymentsEvery\">\n        <th mat-header-cell *matHeaderCellDef> Repayments Every </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.feeInterval || 'Not Provided' }}\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"chargeTimeType\">\n        <th mat-header-cell *matHeaderCellDef> Collected On </th>\n        <td mat-cell *matCellDef=\"let charge\">\n          {{ charge.chargeTimeType.value }}\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"chargesDisplayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: chargesDisplayedColumns;\"></tr>\n\n    </table>\n\n  </div>\n\n</div>\n\n<div fxLayout=\"row\" class=\"margin-t\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"2%\">\n  <button mat-raised-button matStepperPrevious>\n    <fa-icon icon=\"arrow-left\" class=\"m-r-10\"></fa-icon>\n    Previous\n  </button>\n  <button mat-raised-button [routerLink]=\"['../']\">\n    Cancel\n  </button>\n  <button mat-raised-button color=\"primary\" (click)=\"submit.emit()\">\n    Submit\n  </button>\n</div>\n","/** Angular Imports */\nimport { Component, OnInit, Input, Output, EventEmitter, OnChanges } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n/**\n * Fixed Deposit Preview Step\n */\n@Component({\n  selector: 'mifosx-fixed-deposit-account-preview-step',\n  templateUrl: './fixed-deposit-account-preview-step.component.html',\n  styleUrls: ['./fixed-deposit-account-preview-step.component.scss'],\n  animations: [\n    trigger('expandChartSlab', [\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\n      state('expanded', style({ height: '*' })),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n  ]\n})\nexport class FixedDepositAccountPreviewStepComponent implements OnChanges {\n\n  /** Fixed Deposits Account Template */\n  @Input() fixedDepositsAccountTemplate: any;\n  /** Fixed Deposits Account Product Template */\n  @Input() fixedDepositsAccountProductTemplate: any;\n  /** Fixed Deposits Account Data */\n  @Input() fixedDepositAccountData: any;\n\n  /** Charges Displayed Columns */\n  chargesDisplayedColumns: string[] = ['name', 'chargeCalculationType', 'amount', 'chargeTimeType', 'date', 'repaymentsEvery'];\n  /** Interest Rate Chart Data */\n  interestRateChartData: any = [];\n  /** Columns to be displayed in interest rate chart table. */\n  chartSlabsDisplayedColumns: any[] = ['period', 'amountRange', 'interest', 'description', 'actions'];\n  /** Columns to be displayed in incentives sub-table. */\n  incentivesDisplayedColumns: string[] = ['entityType', 'attributeName', 'conditionType', 'attributeValue', 'incentiveType', 'amount'];\n  /** Additional Column to disblac incentives table  */\n  chartSlabsIncentivesDisplayedColumns: string[] = ['incentives'];\n  /** Expand Chart Slab Index used in the view */\n  expandChartSlabIndex: number;\n\n  /** Form submission event */\n  @Output() submit = new EventEmitter();\n\n  constructor() { }\n\n  ngOnChanges() {\n    if (this.fixedDepositsAccountProductTemplate) {\n      this.interestRateChartData = this.fixedDepositsAccountProductTemplate.accountChart.chartSlabs;\n    }\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-horizontal-stepper class=\"mat-elevation-z8\" labelPosition=\"bottom\" #fixedDepositAccountStepper>\n    \n    <ng-template matStepperIcon=\"number\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"edit\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"done\">\n      <fa-icon icon=\"check\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"error\">\n      <fa-icon icon=\"exclamation-triangle\" size=\"lg\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"preview\">\n      <fa-icon icon=\"eye\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <mat-step [stepControl]=\"fixedDepositAccountDetailsForm\">\n\n      <ng-template matStepLabel>DETAILS</ng-template>\n\n      <mifosx-fixed-deposit-account-details-step\n        [fixedDepositsAccountTemplate]=\"fixedDepositsAccountTemplate\"\n        (fixedDepositsAccountProductTemplate)=\"setTemplate($event)\">\n      </mifosx-fixed-deposit-account-details-step>\n\n    </mat-step>\n\n    <mat-step [stepControl]=\"fixedDepositAccountDetailsForm.get('productId')\">\n\n      <ng-template matStepLabel>CURRENCY</ng-template>\n\n      <mifosx-fixed-deposit-account-currency-step\n        [fixedDepositsAccountTemplate]=\"fixedDepositsAccountTemplate\"\n        [fixedDepositsAccountProductTemplate]=\"fixedDepositsAccountProductTemplate\">\n      </mifosx-fixed-deposit-account-currency-step>\n\n    </mat-step>\n\n    <mat-step [stepControl]=\"fixedDepositAccountTermsForm\">\n\n      <ng-template matStepLabel>TERMS</ng-template>\n\n      <mifosx-fixed-deposit-account-terms-step\n        [fixedDepositsAccountTemplate]=\"fixedDepositsAccountTemplate\"\n        [fixedDepositsAccountProductTemplate]=\"fixedDepositsAccountProductTemplate\">\n      </mifosx-fixed-deposit-account-terms-step>\n\n    </mat-step>\n\n    <mat-step [stepControl]=\"fixedDepositAccountSettingsForm\">\n\n      <ng-template matStepLabel>SETTINGS</ng-template>\n\n      <mifosx-fixed-deposit-account-settings-step\n        [fixedDepositsAccountTemplate]=\"fixedDepositsAccountTemplate\"\n        [fixedDepositsAccountProductTemplate]=\"fixedDepositsAccountProductTemplate\">\n      </mifosx-fixed-deposit-account-settings-step>\n\n    </mat-step>\n\n    <mat-step>\n\n      <ng-template matStepLabel>INTEREST RATE CHART</ng-template>\n\n      <mifosx-fixed-deposit-account-interest-rate-chart-step\n        [fixedDepositsAccountTemplate]=\"fixedDepositsAccountTemplate\"\n        [fixedDepositsAccountProductTemplate]=\"fixedDepositsAccountProductTemplate\">\n      </mifosx-fixed-deposit-account-interest-rate-chart-step>\n\n    </mat-step>\n\n    <mat-step>\n\n      <ng-template matStepLabel>CHARGES</ng-template>\n\n      <mifosx-fixed-deposit-account-charges-step\n        [fixedDepositsAccountTemplate]=\"fixedDepositsAccountTemplate\"\n        [fixedDepositsAccountProductTemplate]=\"fixedDepositsAccountProductTemplate\"\n        [fixedDepositAccountFormValid]=\"fixedDepositAccountFormValid\"\n        [currencyCode]=\"fixedDepositAccountCurrencyForm.get('currencyCode')\">\n      </mifosx-fixed-deposit-account-charges-step>\n\n    </mat-step>\n\n    <mat-step state=\"preview\" *ngIf=\"fixedDepositAccountFormValid\" completed>\n\n      <ng-template matStepLabel>PREVIEW</ng-template>\n\n      <mifosx-fixed-deposit-account-preview-step\n        [fixedDepositsAccountTemplate]=\"fixedDepositsAccountTemplate\"\n        [fixedDepositsAccountProductTemplate]=\"fixedDepositsAccountProductTemplate\"\n        [fixedDepositAccountData]=\"fixedDepositAccount\" (submit)=\"submit()\">\n      </mifosx-fixed-deposit-account-preview-step>\n\n    </mat-step>\n\n  </mat-horizontal-stepper>\n\n</div>\n","/** Angular Imports */\nimport { Component, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { FixedDepositsService } from '../fixed-deposits.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Custom Components */\nimport { FixedDepositAccountDetailsStepComponent } from '../fixed-deposit-account-stepper/fixed-deposit-account-details-step/fixed-deposit-account-details-step.component';\nimport { FixedDepositAccountCurrencyStepComponent } from '../fixed-deposit-account-stepper/fixed-deposit-account-currency-step/fixed-deposit-account-currency-step.component';\nimport { FixedDepositAccountTermsStepComponent } from '../fixed-deposit-account-stepper/fixed-deposit-account-terms-step/fixed-deposit-account-terms-step.component';\nimport { FixedDepositAccountSettingsStepComponent } from '../fixed-deposit-account-stepper/fixed-deposit-account-settings-step/fixed-deposit-account-settings-step.component';\nimport { FixedDepositAccountChargesStepComponent } from '../fixed-deposit-account-stepper/fixed-deposit-account-charges-step/fixed-deposit-account-charges-step.component';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Create Fixed Deposit Account Component\n */\n@Component({\n  selector: 'mifosx-create-fixed-deposit-account',\n  templateUrl: './create-fixed-deposit-account.component.html',\n  styleUrls: ['./create-fixed-deposit-account.component.scss']\n})\nexport class CreateFixedDepositAccountComponent {\n\n  /** Fixed Deposits Account Details Step */\n  @ViewChild(FixedDepositAccountDetailsStepComponent, { static: true }) fixedDepositsAccountDetailsStep: FixedDepositAccountDetailsStepComponent;\n  /** Fixed Deposits Account Currency Step */\n  @ViewChild(FixedDepositAccountCurrencyStepComponent, { static: true }) fixedDepositAccountCurrencyStep: FixedDepositAccountCurrencyStepComponent;\n  /** Fixed Deposits Account Terms Step */\n  @ViewChild(FixedDepositAccountTermsStepComponent, { static: true }) fixedDepositAccountTermsStep: FixedDepositAccountTermsStepComponent;\n  /** Fixed Deposits Account Settings Step */\n  @ViewChild(FixedDepositAccountSettingsStepComponent, { static: true }) fixedDepositAccountSettingsStep: FixedDepositAccountSettingsStepComponent;\n  /** Fixed Deposits Account Charges Step */\n  @ViewChild(FixedDepositAccountChargesStepComponent, { static: true }) fixedDepositAccountChargesStep: FixedDepositAccountChargesStepComponent;\n\n  /** Fixed Deposits Account Template */\n  fixedDepositsAccountTemplate: any;\n  /** Fixed Deposit Account Product Template */\n  fixedDepositsAccountProductTemplate: any;\n\n  /**\n   * Fetches FD account template from `resolve`\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {Dates} dateUtils Date Utils\n   * @param {FixedDepositsService} fixedDepositsService Fixed Deposits Service\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private dateUtils: Dates,\n              private fixedDepositsService: FixedDepositsService,\n              private settingsService: SettingsService) {\n    this.route.data.subscribe((data: { fixedDepositsAccountTemplate: any }) => {\n      this.fixedDepositsAccountTemplate = data.fixedDepositsAccountTemplate;\n    });\n  }\n\n  /**\n   * Sets fixed deposits account product template.\n   * @param {any} $event API response\n   */\n  setTemplate($event: any) {\n    this.fixedDepositsAccountProductTemplate = $event;\n  }\n\n  /**\n   * Retrieves Fixed Deposit Account Details Form Data\n   */\n  get fixedDepositAccountDetailsForm() {\n    return this.fixedDepositsAccountDetailsStep.fixedDepositAccountDetailsForm;\n  }\n\n  /**\n   * Retrieves Fixed Deposit Account Currency Form Data\n   */\n  get fixedDepositAccountCurrencyForm() {\n    return this.fixedDepositAccountCurrencyStep.fixedDepositAccountCurrencyForm;\n  }\n\n  /**\n   * Retrieves Fixed Deposit Account Terms Form Data\n   */\n  get fixedDepositAccountTermsForm() {\n    return this.fixedDepositAccountTermsStep.fixedDepositAccountTermsForm;\n  }\n\n  /**\n   * Retrieves Fixed Deposit Account Settings Form Data\n   */\n  get fixedDepositAccountSettingsForm() {\n    return this.fixedDepositAccountSettingsStep.fixedDepositAccountSettingsForm;\n  }\n\n  /**\n   * Checks stepper validity.\n   */\n  get fixedDepositAccountFormValid() {\n    return (\n      this.fixedDepositAccountDetailsForm.valid &&\n      this.fixedDepositAccountTermsForm.valid &&\n      this.fixedDepositAccountSettingsForm.valid\n    );\n  }\n\n  /**\n   * Creates the fixed deposit account object.\n   */\n  get fixedDepositAccount() {\n    return {\n      ...this.fixedDepositsAccountDetailsStep.fixedDepositAccountDetails,\n      ...this.fixedDepositAccountTermsStep.fixedDepositAccountTerms,\n      ...this.fixedDepositAccountSettingsStep.fixedDepositAccountSettings,\n      ...this.fixedDepositAccountChargesStep.fixedDepositAccountCharges,\n    };\n  }\n\n  /**\n   * Submits the fixed deposit form and creates a new fixed deposit account\n   */\n  submit() {\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const monthDayFormat = 'dd MMMM';\n    const fixedDepositAccount = {\n      ...this.fixedDepositAccount,\n      clientId: this.fixedDepositsAccountTemplate.clientId,\n      charges: this.fixedDepositAccount.charges.map((charge: any) => ({\n        chargeId: charge.id,\n        amount: charge.amount,\n        dueDate: charge.dueDate && this.dateUtils.formatDate(charge.dueDate, dateFormat),\n        feeOnMonthDay: charge.feeOnMonthDay && this.dateUtils.formatDate([2000].concat(charge.feeOnMonthDay), monthDayFormat),\n        feeInterval: charge.feeInterval\n      })),\n      submittedOnDate: this.dateUtils.formatDate(this.fixedDepositAccount.submittedOnDate, dateFormat),\n      charts: [{chartSlabs: this.fixedDepositsAccountProductTemplate.accountChart.chartSlabs}],\n      dateFormat,\n      monthDayFormat,\n      locale\n    };\n    this.fixedDepositsService.createFixedDepositAccount(fixedDepositAccount).subscribe((response: any) => {\n      this.router.navigate(['../', response.resourceId], { relativeTo: this.route });\n    });\n  }\n\n}\n","<div class=\"container\">\n\n  <mat-horizontal-stepper class=\"mat-elevation-z8\" labelPosition=\"bottom\" #fixedDepositAccountStepper>\n\n    <ng-template matStepperIcon=\"number\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"edit\">\n      <fa-icon icon=\"pencil-alt\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"done\">\n      <fa-icon icon=\"check\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"error\">\n      <fa-icon icon=\"exclamation-triangle\" size=\"lg\"></fa-icon>\n    </ng-template>\n\n    <ng-template matStepperIcon=\"preview\">\n      <fa-icon icon=\"eye\" size=\"sm\"></fa-icon>\n    </ng-template>\n\n    <mat-step [stepControl]=\"fixedDepositAccountDetailsForm\">\n\n      <ng-template matStepLabel>DETAILS</ng-template>\n\n      <mifosx-fixed-deposit-account-details-step\n        [fixedDepositsAccountTemplate]=\"fixedDepositsAccountAndTemplate\"\n        (fixedDepositsAccountProductTemplate)=\"setTemplate($event)\">\n      </mifosx-fixed-deposit-account-details-step>\n\n    </mat-step>\n\n    <mat-step [stepControl]=\"fixedDepositAccountDetailsForm.get('productId')\">\n\n      <ng-template matStepLabel>CURRENCY</ng-template>\n\n      <mifosx-fixed-deposit-account-currency-step\n        [fixedDepositsAccountTemplate]=\"fixedDepositsAccountAndTemplate\"\n        [fixedDepositsAccountProductTemplate]=\"fixedDepositsAccountProductTemplate\">\n      </mifosx-fixed-deposit-account-currency-step>\n\n    </mat-step>\n\n    <mat-step [stepControl]=\"fixedDepositAccountTermsForm\">\n\n      <ng-template matStepLabel>TERMS</ng-template>\n\n      <mifosx-fixed-deposit-account-terms-step\n        [fixedDepositsAccountTemplate]=\"fixedDepositsAccountAndTemplate\"\n        [fixedDepositsAccountProductTemplate]=\"fixedDepositsAccountProductTemplate\">\n      </mifosx-fixed-deposit-account-terms-step>\n\n    </mat-step>\n\n    <mat-step [stepControl]=\"fixedDepositAccountSettingsForm\">\n\n      <ng-template matStepLabel>SETTINGS</ng-template>\n\n      <mifosx-fixed-deposit-account-settings-step\n        [fixedDepositsAccountTemplate]=\"fixedDepositsAccountAndTemplate\"\n        [fixedDepositsAccountProductTemplate]=\"fixedDepositsAccountProductTemplate\">\n      </mifosx-fixed-deposit-account-settings-step>\n\n    </mat-step>\n\n    <mat-step>\n\n      <ng-template matStepLabel>INTEREST RATE CHART</ng-template>\n\n      <mifosx-fixed-deposit-account-interest-rate-chart-step\n        [fixedDepositsAccountTemplate]=\"fixedDepositsAccountAndTemplate\"\n        [fixedDepositsAccountProductTemplate]=\"fixedDepositsAccountProductTemplate\">\n      </mifosx-fixed-deposit-account-interest-rate-chart-step>\n\n    </mat-step>\n\n    <mat-step>\n\n      <ng-template matStepLabel>CHARGES</ng-template>\n\n      <mifosx-fixed-deposit-account-charges-step\n        [fixedDepositsAccountTemplate]=\"fixedDepositsAccountAndTemplate\"\n        [fixedDepositsAccountProductTemplate]=\"fixedDepositsAccountProductTemplate\"\n        [fixedDepositAccountFormValid]=\"fixedDepositAccountFormValidAndNotPristine\"\n        [currencyCode]=\"fixedDepositAccountCurrencyForm.get('currencyCode')\">\n      </mifosx-fixed-deposit-account-charges-step>\n\n    </mat-step>\n\n    <mat-step state=\"preview\" *ngIf=\"fixedDepositAccountFormValidAndNotPristine\" completed>\n\n      <ng-template matStepLabel>PREVIEW</ng-template>\n\n      <mifosx-fixed-deposit-account-preview-step\n        [fixedDepositsAccountTemplate]=\"fixedDepositsAccountAndTemplate\"\n        [fixedDepositsAccountProductTemplate]=\"fixedDepositsAccountProductTemplate\"\n        [fixedDepositAccountData]=\"fixedDepositAccount\" (submit)=\"submit()\">\n      </mifosx-fixed-deposit-account-preview-step>\n\n    </mat-step>\n\n  </mat-horizontal-stepper>\n\n</div>\n","/** Angular Imports */\nimport { Component, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/** Custom Services */\nimport { FixedDepositsService } from '../fixed-deposits.service';\nimport { SettingsService } from 'app/settings/settings.service';\n\n/** Custom Components */\nimport { FixedDepositAccountDetailsStepComponent } from '../fixed-deposit-account-stepper/fixed-deposit-account-details-step/fixed-deposit-account-details-step.component';\nimport { FixedDepositAccountCurrencyStepComponent } from '../fixed-deposit-account-stepper/fixed-deposit-account-currency-step/fixed-deposit-account-currency-step.component';\nimport { FixedDepositAccountTermsStepComponent } from '../fixed-deposit-account-stepper/fixed-deposit-account-terms-step/fixed-deposit-account-terms-step.component';\nimport { FixedDepositAccountSettingsStepComponent } from '../fixed-deposit-account-stepper/fixed-deposit-account-settings-step/fixed-deposit-account-settings-step.component';\nimport { FixedDepositAccountChargesStepComponent } from '../fixed-deposit-account-stepper/fixed-deposit-account-charges-step/fixed-deposit-account-charges-step.component';\nimport { Dates } from 'app/core/utils/dates';\n\n/**\n * Edit Fixed Deposit Account Component\n */\n@Component({\n  selector: 'mifosx-edit-fixed-deposit-account',\n  templateUrl: './edit-fixed-deposit-account.component.html',\n  styleUrls: ['./edit-fixed-deposit-account.component.scss']\n})\nexport class EditFixedDepositAccountComponent {\n\n  /** Fixed Deposits Account Details Step */\n  @ViewChild(FixedDepositAccountDetailsStepComponent, { static: true }) fixedDepositsAccountDetailsStep: FixedDepositAccountDetailsStepComponent;\n  /** Fixed Deposits Account Currency Step */\n  @ViewChild(FixedDepositAccountCurrencyStepComponent, { static: true }) fixedDepositAccountCurrencyStep: FixedDepositAccountCurrencyStepComponent;\n  /** Fixed Deposits Account Terms Step */\n  @ViewChild(FixedDepositAccountTermsStepComponent, { static: true }) fixedDepositAccountTermsStep: FixedDepositAccountTermsStepComponent;\n  /** Fixed Deposits Account Settings Step */\n  @ViewChild(FixedDepositAccountSettingsStepComponent, { static: true }) fixedDepositAccountSettingsStep: FixedDepositAccountSettingsStepComponent;\n  /** Fixed Deposits Account Charges Step */\n  @ViewChild(FixedDepositAccountChargesStepComponent, { static: true }) fixedDepositAccountChargesStep: FixedDepositAccountChargesStepComponent;\n\n  /** Fixed Deposits Account Template */\n  fixedDepositsAccountAndTemplate: any;\n  /** Fixed Deposit Account Product Template */\n  fixedDepositsAccountProductTemplate: any;\n\n  /**\n   * Fetches FD account template from `resolve`\n   * @param {ActivatedRoute} route Activated Route\n   * @param {Router} router Router\n   * @param {Dates} dateUtils Date Utils\n   * @param {FixedDepositsService} fixedDepositsService Fixed Deposits Service\n   * @param {SettingsService} settingsService Settings Service\n   */\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private dateUtils: Dates,\n              private fixedDepositsService: FixedDepositsService,\n              private settingsService: SettingsService) {\n    this.route.data.subscribe((data: { fixedDepositsAccountAndTemplate: any }) => {\n      this.fixedDepositsAccountAndTemplate = data.fixedDepositsAccountAndTemplate;\n    });\n  }\n\n  /**\n   * Sets fixed deposits account product template.\n   * @param {any} $event API response\n   */\n  setTemplate($event: any) {\n    this.fixedDepositsAccountProductTemplate = $event;\n  }\n\n  /**\n   * Retrieves Fixed Deposit Account Details Form Data\n   */\n  get fixedDepositAccountDetailsForm() {\n    return this.fixedDepositsAccountDetailsStep.fixedDepositAccountDetailsForm;\n  }\n\n  /**\n   * Retrieves Fixed Deposit Account Currency Form Data\n   */\n  get fixedDepositAccountCurrencyForm() {\n    return this.fixedDepositAccountCurrencyStep.fixedDepositAccountCurrencyForm;\n  }\n\n  /**\n   * Retrieves Fixed Deposit Account Terms Form Data\n   */\n  get fixedDepositAccountTermsForm() {\n    return this.fixedDepositAccountTermsStep.fixedDepositAccountTermsForm;\n  }\n\n  /**\n   * Retrieves Fixed Deposit Account Settings Form Data\n   */\n  get fixedDepositAccountSettingsForm() {\n    return this.fixedDepositAccountSettingsStep.fixedDepositAccountSettingsForm;\n  }\n\n  /**\n   * Checks if stepper is valid and not pristine.\n   */\n  get fixedDepositAccountFormValidAndNotPristine() {\n    return (\n      this.fixedDepositAccountDetailsForm.valid &&\n      this.fixedDepositAccountTermsForm.valid &&\n      this.fixedDepositAccountSettingsForm.valid &&\n      (\n        !this.fixedDepositAccountDetailsForm.pristine ||\n        !this.fixedDepositAccountTermsForm.pristine ||\n        !this.fixedDepositAccountSettingsForm.pristine ||\n        !this.fixedDepositAccountChargesStep.pristine\n      )\n    );\n  }\n\n  /**\n   * Creates the fixed deposit account object.\n   */\n  get fixedDepositAccount() {\n    return {\n      ...this.fixedDepositsAccountDetailsStep.fixedDepositAccountDetails,\n      ...this.fixedDepositAccountTermsStep.fixedDepositAccountTerms,\n      ...this.fixedDepositAccountSettingsStep.fixedDepositAccountSettings,\n      ...this.fixedDepositAccountChargesStep.fixedDepositAccountCharges,\n    };\n  }\n\n  /**\n   * Submits the fixed deposit form and creates a new fixed deposit account\n   */\n  submit() {\n    const locale = this.settingsService.language.code;\n    const dateFormat = this.settingsService.dateFormat;\n    const monthDayFormat = 'dd MMMM';\n    const fixedDepositAccount = {\n      ...this.fixedDepositAccount,\n      clientId: this.fixedDepositsAccountAndTemplate.clientId,\n      charges: this.fixedDepositAccount.charges.map((charge: any) => ({\n        chargeId: charge.id,\n        amount: charge.amount,\n        dueDate: charge.dueDate && this.dateUtils.formatDate(charge.dueDate, dateFormat),\n        feeOnMonthDay: charge.feeOnMonthDay && this.dateUtils.formatDate([2000].concat(charge.feeOnMonthDay), monthDayFormat),\n        feeInterval: charge.feeInterval\n      })),\n      submittedOnDate: this.dateUtils.formatDate(this.fixedDepositAccount.submittedOnDate, dateFormat),\n      charts: [{chartSlabs: this.fixedDepositsAccountProductTemplate.accountChart.chartSlabs}],\n      dateFormat,\n      monthDayFormat,\n      locale\n    };\n    this.fixedDepositsService.updateFixedDepositAccount(this.fixedDepositsAccountAndTemplate.id, fixedDepositAccount).subscribe((response: any) => {\n      this.router.navigate(['../'], { relativeTo: this.route });\n    });\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { FixedDepositsService } from 'app/deposits/fixed-deposits/fixed-deposits.service';\n\n/**\n * Fixed Deposits Account data resolver.\n */\n@Injectable()\nexport class FixedDepositsAccountViewResolver implements Resolve<Object> {\n\n  /**\n   * @param {FixedDepositsService} fixedDepositsService Fixed Deposits service.\n   */\n  constructor(private fixedDepositsService: FixedDepositsService) { }\n\n  /**\n   * Returns the Fixed Deposits Account data.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const fixedDepositAccountId = route.paramMap.get('fixedDepositAccountId');\n    return this.fixedDepositsService.getFixedDepositsAccountData(fixedDepositAccountId);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { FixedDepositsService } from '../fixed-deposits.service';\n\n/**\n * Fixed Deposits Account Transaction data resolver.\n */\n@Injectable()\nexport class FixedDepositsAccountTransactionResolver implements Resolve<Object> {\n\n  /**\n   * @param {FixedDepositsService} fixedDepositsService Savings service.\n   */\n  constructor(private fixedDepositsService: FixedDepositsService) { }\n\n  /**\n   * Returns the Fixed Deposits Account Transaction data.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const fixedDepositAccountId = route.parent.paramMap.get('fixedDepositAccountId');\n    const transactionId = route.paramMap.get('id');\n    return this.fixedDepositsService.getFixedDepositsAccountTransaction(fixedDepositAccountId, transactionId);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { SavingsService } from 'app/savings/savings.service';\nimport { FixedDepositsService } from '../fixed-deposits.service';\n\n/**\n * Fixed Deposits Account Actions data resolver.\n */\n@Injectable()\nexport class FixedDepositsAccountActionsResolver implements Resolve<Object> {\n\n  /**\n   * @param {SavingsService} SavingsService Savings service.\n   * @param {FixedDepositsService} fixedDepositsService Fixed Deposits Service.\n   */\n  constructor(private savingsService: SavingsService,\n              private fixedDepositsService: FixedDepositsService) { }\n\n  /**\n   * Returns the Fixed deposits account actions data.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const actionName = route.paramMap.get('name');\n    const fixedDepositAccountId = route.paramMap.get('fixedDepositAccountId') || route.parent.parent.paramMap.get('fixedDepositAccountId');\n    switch (actionName) {\n      case 'Add Charge':\n        return this.savingsService.getSavingsChargeTemplateResource(fixedDepositAccountId);\n      case 'Close':\n        return this.fixedDepositsService.getFixedDepositsAccountClosureTemplate(fixedDepositAccountId);\n      default:\n        return undefined;\n    }\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { FixedDepositsService } from '../fixed-deposits.service';\n\n/**\n * Fixed Deposits Account Template resolver.\n */\n@Injectable()\nexport class FixedDepositsAccountTemplateResolver implements Resolve<Object> {\n\n  /**\n   * @param {FixedDepositsService} fixedDepositsService Fixed Deposits service.\n   */\n  constructor(private fixedDepositsService: FixedDepositsService) { }\n\n  /**\n   * Returns the Fixed Deposits Account Template.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const clientId = route.parent.parent.paramMap.get('clientId');\n    return this.fixedDepositsService.getFixedDepositsAccountTemplate(clientId);\n  }\n\n}\n","/** Angular Imports */\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\n\n/** rxjs Imports */\nimport { Observable } from 'rxjs';\n\n/** Custom Services */\nimport { FixedDepositsService } from '../fixed-deposits.service';\n\n/**\n * Fixed Deposits Account Template resolver.\n */\n@Injectable()\nexport class FixedDepositsAccountAndTemplateResolver implements Resolve<Object> {\n\n  /**\n   * @param {FixedDepositsService} fixedDepositsService Fixed Deposits service.\n   */\n  constructor(private fixedDepositsService: FixedDepositsService) { }\n\n  /**\n   * Returns the Fixed Deposits Account Template.\n   * @param {ActivatedRouteSnapshot} route Route Snapshot\n   * @returns {Observable<any>}\n   */\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    const fixedDepositAccountId = route.paramMap.get('fixedDepositAccountId');\n    return this.fixedDepositsService.getFixedDepositsAccountAndTemplate(fixedDepositAccountId);\n  }\n\n}\n","/** Angular Imports */\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n/** Translation Imports */\nimport { extract } from 'app/core/i18n/i18n.service';\n\n/** Custom Components */\nimport { FixedDepositAccountViewComponent } from './fixed-deposit-account-view/fixed-deposit-account-view.component';\nimport { InterestRateChartTabComponent } from './fixed-deposit-account-view/interest-rate-chart-tab/interest-rate-chart-tab.component';\nimport { TransactionsTabComponent } from './fixed-deposit-account-view/transactions-tab/transactions-tab.component';\nimport { ChargesTabComponent } from './fixed-deposit-account-view/charges-tab/charges-tab.component';\nimport { StandingInstructionsTabComponent } from './fixed-deposit-account-view/standing-instructions-tab/standing-instructions-tab.component';\nimport { DatatableTabsComponent } from './fixed-deposit-account-view/datatable-tabs/datatable-tabs.component';\nimport { FixedDepositsAccountActionsComponent } from './fixed-deposits-account-actions/fixed-deposits-account-actions.component';\nimport { ViewTransactionComponent } from './fixed-deposit-account-view/view-transaction/view-transaction.component';\nimport { CreateFixedDepositAccountComponent } from './create-fixed-deposit-account/create-fixed-deposit-account.component';\nimport { EditFixedDepositAccountComponent } from './edit-fixed-deposit-account/edit-fixed-deposit-account.component';\n\n/** Custom Resolvers */\nimport { FixedDepositsAccountViewResolver } from './common-resolvers/fixed-deposit-account-view.resolver';\nimport { SavingsDatatableResolver } from 'app/savings/common-resolvers/savings-datatable.resolver';\nimport { SavingsDatatablesResolver } from 'app/savings/common-resolvers/savings-datatables.resolver';\nimport { FixedDepositsAccountTransactionResolver } from './common-resolvers/fixed-deposit-account-transaction.resolver';\nimport { FixedDepositsAccountActionsResolver } from './common-resolvers/fixed-deposit-account-actions.resolver';\nimport { FixedDepositsAccountTemplateResolver } from './common-resolvers/fixed-deposit-account-template.resolver';\nimport { FixedDepositsAccountAndTemplateResolver } from './common-resolvers/fixed-deposit-account-and-template.resolver';\n\nconst routes: Routes = [\n  {\n    path: '',\n    data: { title: extract('All Fixed Deposits'), breadcrumb: 'Fixed Deposits', routeParamBreadcrumb: false },\n    children: [\n      {\n        path: 'create',\n        data: { title: extract('Create Fixed Deposit Account'), breadcrumb: 'Create Fixed Deposit Account' },\n        component: CreateFixedDepositAccountComponent,\n        resolve: {\n          fixedDepositsAccountTemplate: FixedDepositsAccountTemplateResolver\n        }\n      },\n      {\n        path: ':fixedDepositAccountId',\n        data: { title: extract('Fixed Deposit Account View'), routeParamBreadcrumb: 'fixedDepositAccountId' },\n        resolve: {\n          fixedDepositsAccountData: FixedDepositsAccountViewResolver,\n        },\n        children: [\n          {\n            path: '',\n            component: FixedDepositAccountViewComponent,\n            resolve: {\n              fixedDepositsAccountData: FixedDepositsAccountViewResolver,\n              savingsDatatables: SavingsDatatablesResolver\n            },\n            children: [\n              {\n                path: 'interest-rate-chart',\n                component: InterestRateChartTabComponent,\n                data: { title: extract('Fixed Deposit Account Interest Rate Chart'), breadcrumb: 'Interest Rate Chart', routeParamBreadcrumb: false },\n              },\n              {\n                path: 'transactions',\n                component: TransactionsTabComponent,\n                data: { title: extract('Fixed Deposit Account Transactions'), breadcrumb: 'Transactions', routeParamBreadcrumb: false },\n              },\n              {\n                path: 'charges',\n                component: ChargesTabComponent,\n                data: { title: extract('Fixed Deposit Account Charges'), breadcrumb: 'Charges', routeParamBreadcrumb: false }\n              },\n              {\n                path: 'standing-instructions',\n                component: StandingInstructionsTabComponent,\n                data: { title: extract('Fixed Deposit Account Standing Instructions'), breadcrumb: 'Standing Instructions', routeParamBreadcrumb: false }\n              },\n              {\n                path: 'datatables',\n                children: [\n                  {\n                    path: ':datatableName',\n                    component: DatatableTabsComponent,\n                    data: { title: extract('View Data Table'), routeParamBreadcrumb: 'datatableName' },\n                    resolve: {\n                      savingsDatatable: SavingsDatatableResolver\n                    }\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            path: 'edit',\n            data: { title: extract('Edit Fixed Deposit Account'), breadcrumb: 'Edit', routeParamBreadcrumb: false },\n            component: EditFixedDepositAccountComponent,\n            resolve: {\n              fixedDepositsAccountAndTemplate: FixedDepositsAccountAndTemplateResolver\n            }\n          },\n          {\n            path: 'transactions',\n            data: { title: extract('Fixed Deposits Account Transactions'), breadcrumb: 'Transactions', routeParamBreadcrumb: false },\n            children: [\n              {\n                path: '',\n                redirectTo: '../transactions', pathMatch: 'prefix'\n              },\n              {\n                path: 'account-transfers',\n                loadChildren: () => import('../../account-transfers/account-transfers.module').then(m => m.AccountTransfersModule)\n              },\n              {\n                path: ':id',\n                data: { routeParamBreadcrumb: 'id' },\n                children: [\n                  {\n                    path: '',\n                    component: ViewTransactionComponent,\n                    resolve: {\n                      fixedDepositsAccountTransaction: FixedDepositsAccountTransactionResolver\n                    }\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            path: 'actions/:name',\n            data: { title: extract('Fixed Deposits Account Actions'), routeParamBreadcrumb: 'name' },\n            component: FixedDepositsAccountActionsComponent,\n            resolve: {\n              fixedDepositsAccountActionData: FixedDepositsAccountActionsResolver\n            }\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  providers: [\n    FixedDepositsAccountViewResolver,\n    SavingsDatatableResolver,\n    SavingsDatatablesResolver,\n    FixedDepositsAccountTransactionResolver,\n    FixedDepositsAccountActionsResolver,\n    FixedDepositsAccountTemplateResolver,\n    FixedDepositsAccountAndTemplateResolver\n  ]\n})\nexport class FixedDepositsRoutingModule { }\n","/** Angular Imports */\nimport { NgModule } from '@angular/core';\n\n/** Custom Modules */\nimport { SharedModule } from 'app/shared/shared.module';\nimport { PipesModule } from 'app/pipes/pipes.module';\nimport { DirectivesModule } from 'app/directives/directives.module';\nimport { FixedDepositsRoutingModule } from './fixed-deposits-routing.module';\n\n/** Custom Components */\nimport { FixedDepositAccountViewComponent } from './fixed-deposit-account-view/fixed-deposit-account-view.component';\nimport { TransactionsTabComponent } from './fixed-deposit-account-view/transactions-tab/transactions-tab.component';\nimport { ChargesTabComponent } from './fixed-deposit-account-view/charges-tab/charges-tab.component';\nimport { StandingInstructionsTabComponent } from './fixed-deposit-account-view/standing-instructions-tab/standing-instructions-tab.component';\nimport { InterestRateChartTabComponent } from './fixed-deposit-account-view/interest-rate-chart-tab/interest-rate-chart-tab.component';\nimport { DatatableTabsComponent } from './fixed-deposit-account-view/datatable-tabs/datatable-tabs.component';\nimport { FixedDepositsAccountActionsComponent } from './fixed-deposits-account-actions/fixed-deposits-account-actions.component';\nimport { ApproveFixedDepositsAccountComponent } from './fixed-deposits-account-actions/approve-fixed-deposits-account/approve-fixed-deposits-account.component';\nimport { RejectFixedDepositsAccountComponent } from './fixed-deposits-account-actions/reject-fixed-deposits-account/reject-fixed-deposits-account.component';\nimport { PostInterestDialogComponent } from './fixed-deposit-account-view/custom-dialogs/post-interest-dialog/post-interest-dialog.component';\nimport { CalculateInterestDialogComponent } from './fixed-deposit-account-view/custom-dialogs/calculate-interest-dialog/calculate-interest-dialog.component';\nimport { ToggleWithholdTaxDialogComponent } from './fixed-deposit-account-view/custom-dialogs/toggle-withhold-tax-dialog/toggle-withhold-tax-dialog.component';\nimport { ActivateFixedDepositsAccountComponent } from './fixed-deposits-account-actions/activate-fixed-deposits-account/activate-fixed-deposits-account.component';\nimport { UndoApprovalFixedDepositsAccountComponent } from './fixed-deposits-account-actions/undo-approval-fixed-deposits-account/undo-approval-fixed-deposits-account.component';\nimport { WithdrawByClientFixedDepositsAccountComponent } from './fixed-deposits-account-actions/withdraw-by-client-fixed-deposits-account/withdraw-by-client-fixed-deposits-account.component';\nimport { ViewTransactionComponent } from './fixed-deposit-account-view/view-transaction/view-transaction.component';\nimport { WaiveChargeDialogComponent } from './fixed-deposit-account-view/custom-dialogs/waive-charge-dialog/waive-charge-dialog.component';\nimport { InactivateChargeDialogComponent } from './fixed-deposit-account-view/custom-dialogs/inactivate-charge-dialog/inactivate-charge-dialog.component';\nimport { AddChargeFixedDepositsAccountComponent } from './fixed-deposits-account-actions/add-charge-fixed-deposits-account/add-charge-fixed-deposits-account.component';\nimport { PrematureCloseFixedDepositsAccountComponent } from './fixed-deposits-account-actions/premature-close-fixed-deposits-account/premature-close-fixed-deposits-account.component';\nimport { CloseFixedDepositsAccountComponent } from './fixed-deposits-account-actions/close-fixed-deposits-account/close-fixed-deposits-account.component';\nimport { CreateFixedDepositAccountComponent } from './create-fixed-deposit-account/create-fixed-deposit-account.component';\nimport { FixedDepositAccountDetailsStepComponent } from './fixed-deposit-account-stepper/fixed-deposit-account-details-step/fixed-deposit-account-details-step.component';\nimport { FixedDepositAccountTermsStepComponent } from './fixed-deposit-account-stepper/fixed-deposit-account-terms-step/fixed-deposit-account-terms-step.component';\nimport { FixedDepositAccountChargesStepComponent } from './fixed-deposit-account-stepper/fixed-deposit-account-charges-step/fixed-deposit-account-charges-step.component';\nimport { FixedDepositAccountSettingsStepComponent } from './fixed-deposit-account-stepper/fixed-deposit-account-settings-step/fixed-deposit-account-settings-step.component';\nimport { FixedDepositAccountInterestRateChartStepComponent } from './fixed-deposit-account-stepper/fixed-deposit-account-interest-rate-chart-step/fixed-deposit-account-interest-rate-chart-step.component';\nimport { FixedDepositAccountPreviewStepComponent } from './fixed-deposit-account-stepper/fixed-deposit-account-preview-step/fixed-deposit-account-preview-step.component';\nimport { FixedDepositAccountCurrencyStepComponent } from './fixed-deposit-account-stepper/fixed-deposit-account-currency-step/fixed-deposit-account-currency-step.component';\nimport { EditFixedDepositAccountComponent } from './edit-fixed-deposit-account/edit-fixed-deposit-account.component';\n\n/**\n * Fixed Deposits Module\n *\n * All components related to fixed deposits functions should be declared here.\n */\n@NgModule({\n  declarations: [\n    FixedDepositAccountViewComponent,\n    TransactionsTabComponent,\n    ChargesTabComponent,\n    StandingInstructionsTabComponent,\n    InterestRateChartTabComponent,\n    DatatableTabsComponent,\n    FixedDepositsAccountActionsComponent,\n    ApproveFixedDepositsAccountComponent,\n    RejectFixedDepositsAccountComponent,\n    PostInterestDialogComponent,\n    CalculateInterestDialogComponent,\n    ToggleWithholdTaxDialogComponent,\n    ActivateFixedDepositsAccountComponent,\n    UndoApprovalFixedDepositsAccountComponent,\n    WithdrawByClientFixedDepositsAccountComponent,\n    ViewTransactionComponent,\n    WaiveChargeDialogComponent,\n    InactivateChargeDialogComponent,\n    AddChargeFixedDepositsAccountComponent,\n    PrematureCloseFixedDepositsAccountComponent,\n    CloseFixedDepositsAccountComponent,\n    CreateFixedDepositAccountComponent,\n    FixedDepositAccountDetailsStepComponent,\n    FixedDepositAccountTermsStepComponent,\n    FixedDepositAccountChargesStepComponent,\n    FixedDepositAccountSettingsStepComponent,\n    FixedDepositAccountInterestRateChartStepComponent,\n    FixedDepositAccountPreviewStepComponent,\n    FixedDepositAccountCurrencyStepComponent,\n    EditFixedDepositAccountComponent\n  ],\n  imports: [\n    SharedModule,\n    PipesModule,\n    DirectivesModule,\n    FixedDepositsRoutingModule\n  ],\n  providers: [ ]\n})\nexport class FixedDepositsModule { }\n"]}